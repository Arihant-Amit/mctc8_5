
TCU_V3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002588  08020010  08020010  00030010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022598  08022598  00040240  2**0
                  CONTENTS
  4 .ARM          00000008  08022598  08022598  00032598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080225a0  080225a0  00040240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080225a0  080225a0  000325a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080225a4  080225a4  000325a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080225a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fe00  20000240  080227e8  00040240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040040  080227e8  00050040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e34d  00000000  00000000  0004026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054cb  00000000  00000000  0006e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  00073a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00075bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f78f  00000000  00000000  00077ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f803  00000000  00000000  000a724f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ac82  00000000  00000000  000d6a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f16d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a238  00000000  00000000  001f1724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000240 	.word	0x20000240
 800021c:	00000000 	.word	0x00000000
 8000220:	0801fff8 	.word	0x0801fff8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000244 	.word	0x20000244
 800023c:	0801fff8 	.word	0x0801fff8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <SLAVE_CS_ENABLE>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

void SLAVE_CS_ENABLE(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port,FLASH_CS_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e6:	4802      	ldr	r0, [pc, #8]	; (80009f0 <SLAVE_CS_ENABLE+0x14>)
 80009e8:	f011 f940 	bl	8011c6c <HAL_GPIO_WritePin>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40020000 	.word	0x40020000

080009f4 <SLAVE_CS_DISABLE>:

void SLAVE_CS_DISABLE(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port,FLASH_CS_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fe:	4802      	ldr	r0, [pc, #8]	; (8000a08 <SLAVE_CS_DISABLE+0x14>)
 8000a00:	f011 f934 	bl	8011c6c <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000

08000a0c <SPI_Byte_Write>:

uint8_t SPI_Byte_Write(uint8_t Data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&hspi1, &Data, &ret, 1, 100);
 8000a16:	f107 020f 	add.w	r2, r7, #15
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <SPI_Byte_Write+0x28>)
 8000a24:	f013 ffef 	bl	8014a06 <HAL_SPI_TransmitReceive>
	return ret;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20001814 	.word	0x20001814

08000a38 <SLAVE_Write_Enable>:

void SLAVE_Write_Enable(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	SLAVE_CS_ENABLE();
 8000a3c:	f7ff ffce 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x06);
 8000a40:	2006      	movs	r0, #6
 8000a42:	f7ff ffe3 	bl	8000a0c <SPI_Byte_Write>
	SLAVE_CS_DISABLE();
 8000a46:	f7ff ffd5 	bl	80009f4 <SLAVE_CS_DISABLE>
	osDelay(10);
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f016 fceb 	bl	8017426 <osDelay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SLAVE_Write_Disable>:

void SLAVE_Write_Disable(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	SLAVE_CS_ENABLE();
 8000a58:	f7ff ffc0 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x04);
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f7ff ffd5 	bl	8000a0c <SPI_Byte_Write>
	SLAVE_CS_DISABLE();
 8000a62:	f7ff ffc7 	bl	80009f4 <SLAVE_CS_DISABLE>
	osDelay(10);
 8000a66:	200a      	movs	r0, #10
 8000a68:	f016 fcdd 	bl	8017426 <osDelay>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SLAVE_Read_ID>:



void SLAVE_Read_ID(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	uint8_t m,t,c;
	SLAVE_CS_ENABLE();
 8000a76:	f7ff ffb1 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x9F);
 8000a7a:	209f      	movs	r0, #159	; 0x9f
 8000a7c:	f7ff ffc6 	bl	8000a0c <SPI_Byte_Write>
	/*for(int i=0;i<80;i++)
	{
		buf[i] = 	SPI_Byte_Write(0x00);
	}*/
	m = SPI_Byte_Write(0x00);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff ffc3 	bl	8000a0c <SPI_Byte_Write>
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	t = SPI_Byte_Write(0x00);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffbe 	bl	8000a0c <SPI_Byte_Write>
 8000a90:	4603      	mov	r3, r0
 8000a92:	71bb      	strb	r3, [r7, #6]
	c = SPI_Byte_Write(0x00);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff ffb9 	bl	8000a0c <SPI_Byte_Write>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	717b      	strb	r3, [r7, #5]

	SLAVE_CS_DISABLE();
 8000a9e:	f7ff ffa9 	bl	80009f4 <SLAVE_CS_DISABLE>
	osDelay(10);
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f016 fcbf 	bl	8017426 <osDelay>
	printf("ID: %d Memory Type : %d Capacity : %d\r\n",m,t,c);
 8000aa8:	79f9      	ldrb	r1, [r7, #7]
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	797b      	ldrb	r3, [r7, #5]
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <SLAVE_Read_ID+0x4c>)
 8000ab0:	f01b fa96 	bl	801bfe0 <iprintf>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08020010 	.word	0x08020010

08000ac0 <SLAVE_Read_StatusReg1>:

uint8_t SLAVE_Read_StatusReg1(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	uint8_t status =0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	SLAVE_CS_ENABLE();
 8000aca:	f7ff ff87 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x05);
 8000ace:	2005      	movs	r0, #5
 8000ad0:	f7ff ff9c 	bl	8000a0c <SPI_Byte_Write>
	status = SPI_Byte_Write(0x00);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff99 	bl	8000a0c <SPI_Byte_Write>
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	SLAVE_CS_DISABLE();
 8000ade:	f7ff ff89 	bl	80009f4 <SLAVE_CS_DISABLE>
	return status;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SLAVE_Read_StatusReg2>:

uint8_t SLAVE_Read_StatusReg2(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	uint8_t status =0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
	SLAVE_CS_ENABLE();
 8000af6:	f7ff ff71 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x07);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f7ff ff86 	bl	8000a0c <SPI_Byte_Write>
	status = SPI_Byte_Write(0x00);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff ff83 	bl	8000a0c <SPI_Byte_Write>
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	SLAVE_CS_DISABLE();
 8000b0a:	f7ff ff73 	bl	80009f4 <SLAVE_CS_DISABLE>
	return status;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SLAVE_Wait>:

void SLAVE_Wait(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	uint8_t status =0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]
	osDelay(10);
 8000b22:	200a      	movs	r0, #10
 8000b24:	f016 fc7f 	bl	8017426 <osDelay>
	SLAVE_CS_ENABLE();
 8000b28:	f7ff ff58 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x05);
 8000b2c:	2005      	movs	r0, #5
 8000b2e:	f7ff ff6d 	bl	8000a0c <SPI_Byte_Write>
	do
	{
		status = SLAVE_Read_StatusReg1();
 8000b32:	f7ff ffc5 	bl	8000ac0 <SLAVE_Read_StatusReg1>
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
		osDelay(10);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f016 fc73 	bl	8017426 <osDelay>
	}while((status & 0x01)==0x01);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f3      	bne.n	8000b32 <SLAVE_Wait+0x1a>
	SLAVE_CS_DISABLE();
 8000b4a:	f7ff ff53 	bl	80009f4 <SLAVE_CS_DISABLE>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SLAVE_Clear_StatusReg>:

void SLAVE_Clear_StatusReg(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
	SLAVE_Write_Enable();
 8000b5a:	f7ff ff6d 	bl	8000a38 <SLAVE_Write_Enable>
	SLAVE_CS_ENABLE();
 8000b5e:	f7ff ff3d 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x30);
 8000b62:	2030      	movs	r0, #48	; 0x30
 8000b64:	f7ff ff52 	bl	8000a0c <SPI_Byte_Write>
	SLAVE_CS_DISABLE();
 8000b68:	f7ff ff44 	bl	80009f4 <SLAVE_CS_DISABLE>
	SLAVE_Write_Disable();
 8000b6c:	f7ff ff72 	bl	8000a54 <SLAVE_Write_Disable>
	SLAVE_Wait();
 8000b70:	f7ff ffd2 	bl	8000b18 <SLAVE_Wait>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SLAVE_Erase_4K>:
	SLAVE_Write_Disable();
	SLAVE_Wait();
}

void SLAVE_Erase_4K(int loc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	 SLAVE_Wait();
 8000b80:	f7ff ffca 	bl	8000b18 <SLAVE_Wait>
	 SLAVE_Write_Enable();
 8000b84:	f7ff ff58 	bl	8000a38 <SLAVE_Write_Enable>
	 SLAVE_CS_ENABLE();
 8000b88:	f7ff ff28 	bl	80009dc <SLAVE_CS_ENABLE>
	 SPI_Byte_Write(0xDC);
 8000b8c:	20dc      	movs	r0, #220	; 0xdc
 8000b8e:	f7ff ff3d 	bl	8000a0c <SPI_Byte_Write>
	 SPI_Byte_Write((loc & ADDR_BMASK3) >> ADDR_BSHIFT3);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	0e1b      	lsrs	r3, r3, #24
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff37 	bl	8000a0c <SPI_Byte_Write>
	 SPI_Byte_Write((loc & ADDR_BMASK2) >> ADDR_BSHIFT2);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	141b      	asrs	r3, r3, #16
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff31 	bl	8000a0c <SPI_Byte_Write>
	 SPI_Byte_Write((loc & ADDR_BMASK1) >> ADDR_BSHIFT1);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	121b      	asrs	r3, r3, #8
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff2b 	bl	8000a0c <SPI_Byte_Write>
	 SPI_Byte_Write((loc & ADDR_BMASK0) >> ADDR_BSHIFT0);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff26 	bl	8000a0c <SPI_Byte_Write>

	 SLAVE_CS_DISABLE();
 8000bc0:	f7ff ff18 	bl	80009f4 <SLAVE_CS_DISABLE>
	 SLAVE_Write_Disable();
 8000bc4:	f7ff ff46 	bl	8000a54 <SLAVE_Write_Disable>
	 SLAVE_Wait();
 8000bc8:	f7ff ffa6 	bl	8000b18 <SLAVE_Wait>

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SLAVE_Write_Data>:

void SLAVE_Write_Data(int loc,char* Data,int count)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	if(count<1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	dd3b      	ble.n	8000c5e <SLAVE_Write_Data+0x8a>
			return;
	SLAVE_Write_Enable();
 8000be6:	f7ff ff27 	bl	8000a38 <SLAVE_Write_Enable>
	osDelay(10);
 8000bea:	200a      	movs	r0, #10
 8000bec:	f016 fc1b 	bl	8017426 <osDelay>
	SLAVE_CS_ENABLE();
 8000bf0:	f7ff fef4 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x12);
 8000bf4:	2012      	movs	r0, #18
 8000bf6:	f7ff ff09 	bl	8000a0c <SPI_Byte_Write>
	 SPI_Byte_Write((loc & ADDR_BMASK3) >> ADDR_BSHIFT3);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	0e1b      	lsrs	r3, r3, #24
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff03 	bl	8000a0c <SPI_Byte_Write>
		 SPI_Byte_Write((loc & ADDR_BMASK2) >> ADDR_BSHIFT2);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	141b      	asrs	r3, r3, #16
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fefd 	bl	8000a0c <SPI_Byte_Write>
		 SPI_Byte_Write((loc & ADDR_BMASK1) >> ADDR_BSHIFT1);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	121b      	asrs	r3, r3, #8
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fef7 	bl	8000a0c <SPI_Byte_Write>
		 SPI_Byte_Write((loc & ADDR_BMASK0) >> ADDR_BSHIFT0);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fef2 	bl	8000a0c <SPI_Byte_Write>
for(int i=0;i<count;i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e009      	b.n	8000c42 <SLAVE_Write_Data+0x6e>
{
       SPI_Byte_Write(Data[i]);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	4413      	add	r3, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fee8 	bl	8000a0c <SPI_Byte_Write>
for(int i=0;i<count;i++)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dbf1      	blt.n	8000c2e <SLAVE_Write_Data+0x5a>
}
       osDelay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f016 fbeb 	bl	8017426 <osDelay>
    SLAVE_CS_DISABLE();
 8000c50:	f7ff fed0 	bl	80009f4 <SLAVE_CS_DISABLE>
    SLAVE_Write_Disable();
 8000c54:	f7ff fefe 	bl	8000a54 <SLAVE_Write_Disable>
    SLAVE_Wait();
 8000c58:	f7ff ff5e 	bl	8000b18 <SLAVE_Wait>
 8000c5c:	e000      	b.n	8000c60 <SLAVE_Write_Data+0x8c>
			return;
 8000c5e:	bf00      	nop
}
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <SLAVE_Read_Data>:


void SLAVE_Read_Data(int loc, char* Buf,int count)
{
 8000c66:	b590      	push	{r4, r7, lr}
 8000c68:	b087      	sub	sp, #28
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
	int i;
	if(count<1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dd35      	ble.n	8000ce4 <SLAVE_Read_Data+0x7e>
		return;
	SLAVE_CS_ENABLE();
 8000c78:	f7ff feb0 	bl	80009dc <SLAVE_CS_ENABLE>
	SPI_Byte_Write(0x13);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f7ff fec5 	bl	8000a0c <SPI_Byte_Write>
	 SPI_Byte_Write((loc & ADDR_BMASK3) >> ADDR_BSHIFT3);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	0e1b      	lsrs	r3, r3, #24
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff febf 	bl	8000a0c <SPI_Byte_Write>
		 SPI_Byte_Write((loc & ADDR_BMASK2) >> ADDR_BSHIFT2);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	141b      	asrs	r3, r3, #16
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff feb9 	bl	8000a0c <SPI_Byte_Write>
		 SPI_Byte_Write((loc & ADDR_BMASK1) >> ADDR_BSHIFT1);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	121b      	asrs	r3, r3, #8
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff feb3 	bl	8000a0c <SPI_Byte_Write>
		 SPI_Byte_Write((loc & ADDR_BMASK0) >> ADDR_BSHIFT0);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff feae 	bl	8000a0c <SPI_Byte_Write>

		 for(i=0;i<count;i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <SLAVE_Read_Data+0x66>
		 {
	Buf[i]=SPI_Byte_Write(0x00);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	18d4      	adds	r4, r2, r3
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fea5 	bl	8000a0c <SPI_Byte_Write>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	7023      	strb	r3, [r4, #0]
		 for(i=0;i<count;i++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <SLAVE_Read_Data+0x50>
		 }
		 Buf[i]='\0';
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	4413      	add	r3, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    SLAVE_CS_DISABLE();
 8000cde:	f7ff fe89 	bl	80009f4 <SLAVE_CS_DISABLE>
 8000ce2:	e000      	b.n	8000ce6 <SLAVE_Read_Data+0x80>
		return;
 8000ce4:	bf00      	nop
    //SLAVE_Wait();


}
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}

08000cec <RADIO_WRITE_REGISTERS>:
uint8_t RADIO_READ_BUFFER =		0x1E;
float    FREQ_STEP                =                0.95367431640625;
uint8_t RADIO_WRITE_BUFFER	=	0x0E;
uint8_t savedModParam2;
void RADIO_WRITE_REGISTERS( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80bb      	strh	r3, [r7, #4]
	  uint8_t addr_l, addr_h;


	  addr_l = address & 0xff;
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	73fb      	strb	r3, [r7, #15]
	  addr_h = address >> 8;
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	73bb      	strb	r3, [r7, #14]
	  RADIO_CHECK_BUSY();
 8000d0c:	f000 f8c6 	bl	8000e9c <RADIO_CHECK_BUSY>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2110      	movs	r1, #16
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <RADIO_WRITE_REGISTERS+0x74>)
 8000d16:	f010 ffa9 	bl	8011c6c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&RADIO_WRITE_REGISTER, 1,100);
 8000d1a:	2364      	movs	r3, #100	; 0x64
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4911      	ldr	r1, [pc, #68]	; (8000d64 <RADIO_WRITE_REGISTERS+0x78>)
 8000d20:	4811      	ldr	r0, [pc, #68]	; (8000d68 <RADIO_WRITE_REGISTERS+0x7c>)
 8000d22:	f013 fbd2 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3,(uint8_t *)& addr_h,1,100);
 8000d26:	f107 010e 	add.w	r1, r7, #14
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <RADIO_WRITE_REGISTERS+0x7c>)
 8000d30:	f013 fbcb 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3,(uint8_t *)& addr_l,1,100);
 8000d34:	f107 010f 	add.w	r1, r7, #15
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <RADIO_WRITE_REGISTERS+0x7c>)
 8000d3e:	f013 fbc4 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, buffer,size,100);
 8000d42:	88ba      	ldrh	r2, [r7, #4]
 8000d44:	2364      	movs	r3, #100	; 0x64
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <RADIO_WRITE_REGISTERS+0x7c>)
 8000d4a:	f013 fbbe 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2110      	movs	r1, #16
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <RADIO_WRITE_REGISTERS+0x74>)
 8000d54:	f010 ff8a 	bl	8011c6c <HAL_GPIO_WritePin>

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40020000 	.word	0x40020000
 8000d64:	20000001 	.word	0x20000001
 8000d68:	20001878 	.word	0x20001878

08000d6c <RADIO_WRITE_REG>:
void RADIO_WRITE_REG( uint16_t address, uint8_t value )
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	80fb      	strh	r3, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	717b      	strb	r3, [r7, #5]
	RADIO_WRITE_REGISTERS(address,&value,1);
 8000d7c:	1d79      	adds	r1, r7, #5
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2201      	movs	r2, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffb2 	bl	8000cec <RADIO_WRITE_REGISTERS>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <RADIO_READ_REGISTERS>:
void RADIO_READ_REGISTERS(uint16_t address, uint8_t *buffer, uint16_t size)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	80bb      	strh	r3, [r7, #4]
	  uint8_t addr_l, addr_h;
	  uint8_t dummy_data = 0xFF;
 8000da0:	23ff      	movs	r3, #255	; 0xff
 8000da2:	737b      	strb	r3, [r7, #13]
	  addr_h = address >> 8;
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	73bb      	strb	r3, [r7, #14]
	  addr_l = address & 0x00FF;
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
	  RADIO_CHECK_BUSY();
 8000db4:	f000 f872 	bl	8000e9c <RADIO_CHECK_BUSY>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2110      	movs	r1, #16
 8000dbc:	4817      	ldr	r0, [pc, #92]	; (8000e1c <RADIO_READ_REGISTERS+0x8c>)
 8000dbe:	f010 ff55 	bl	8011c6c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3,(uint8_t*)& RADIO_READ_REGISTER, 1,100);
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4916      	ldr	r1, [pc, #88]	; (8000e20 <RADIO_READ_REGISTERS+0x90>)
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <RADIO_READ_REGISTERS+0x94>)
 8000dca:	f013 fb7e 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&addr_h,1,100);
 8000dce:	f107 010e 	add.w	r1, r7, #14
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <RADIO_READ_REGISTERS+0x94>)
 8000dd8:	f013 fb77 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3,(uint8_t *) &addr_l,1,100);
 8000ddc:	f107 010f 	add.w	r1, r7, #15
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2201      	movs	r2, #1
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <RADIO_READ_REGISTERS+0x94>)
 8000de6:	f013 fb70 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t*)&dummy_data,1,100);
 8000dea:	f107 010d 	add.w	r1, r7, #13
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	2201      	movs	r2, #1
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <RADIO_READ_REGISTERS+0x94>)
 8000df4:	f013 fb69 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&dummy_data, (uint8_t*)buffer, size, 100);
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	f107 010d 	add.w	r1, r7, #13
 8000dfe:	2264      	movs	r2, #100	; 0x64
 8000e00:	9200      	str	r2, [sp, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <RADIO_READ_REGISTERS+0x94>)
 8000e06:	f013 fdfe 	bl	8014a06 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <RADIO_READ_REGISTERS+0x8c>)
 8000e10:	f010 ff2c 	bl	8011c6c <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20001878 	.word	0x20001878

08000e28 <RADIO_READ_REG>:
uint8_t RADIO_READ_REG(uint16_t address)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	  uint8_t data;
	  RADIO_READ_REGISTERS(address, &data, 1);
 8000e32:	f107 010f 	add.w	r1, r7, #15
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffa8 	bl	8000d90 <RADIO_READ_REGISTERS>
	  return data;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <RADIO_CHECK_DEVICE>:
bool RADIO_CHECK_DEVICE()
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
	  uint8_t Regdata1, Regdata2;
	  Regdata1 = RADIO_READ_REG(0x88e);
 8000e50:	f640 008e 	movw	r0, #2190	; 0x88e
 8000e54:	f7ff ffe8 	bl	8000e28 <RADIO_READ_REG>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
	  RADIO_WRITE_REG(0x88e, (Regdata1 + 1));
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	f640 008e 	movw	r0, #2190	; 0x88e
 8000e68:	f7ff ff80 	bl	8000d6c <RADIO_WRITE_REG>
	  Regdata2 = RADIO_READ_REG(0x88e);
 8000e6c:	f640 008e 	movw	r0, #2190	; 0x88e
 8000e70:	f7ff ffda 	bl	8000e28 <RADIO_READ_REG>
 8000e74:	4603      	mov	r3, r0
 8000e76:	71bb      	strb	r3, [r7, #6]
	  RADIO_WRITE_REG(0x88e, Regdata1);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f640 008e 	movw	r0, #2190	; 0x88e
 8000e80:	f7ff ff74 	bl	8000d6c <RADIO_WRITE_REG>

	  if (Regdata2 == (Regdata1 + 1))
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d101      	bne.n	8000e92 <RADIO_CHECK_DEVICE+0x48>
	  {
	    return true;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <RADIO_CHECK_DEVICE+0x4a>
	  }
	  else
	  {
	    return false;
 8000e92:	2300      	movs	r3, #0
	  }
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <RADIO_CHECK_BUSY>:
void RADIO_CHECK_BUSY(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	  uint8_t busy_timeout_cnt;
	  busy_timeout_cnt = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	  while(HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin))
 8000ea6:	e010      	b.n	8000eca <RADIO_CHECK_BUSY+0x2e>
	  {
		  osDelay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f016 fabc 	bl	8017426 <osDelay>
		  busy_timeout_cnt++;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
		  if(busy_timeout_cnt>10)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b0a      	cmp	r3, #10
 8000eb8:	d907      	bls.n	8000eca <RADIO_CHECK_BUSY+0x2e>
		  {
			  busy_timeout_cnt =0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
			  RADIO_RESET();
 8000ebe:	f000 f813 	bl	8000ee8 <RADIO_RESET>
			  RADIO_SET_MODE(MODE_STDBY_RC);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f828 	bl	8000f18 <RADIO_SET_MODE>

			  break;
 8000ec8:	e007      	b.n	8000eda <RADIO_CHECK_BUSY+0x3e>
	  while(HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin))
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <RADIO_CHECK_BUSY+0x48>)
 8000ece:	f010 feb5 	bl	8011c3c <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e7      	bne.n	8000ea8 <RADIO_CHECK_BUSY+0xc>
		  }
	  }

}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021800 	.word	0x40021800

08000ee8 <RADIO_RESET>:
void RADIO_RESET(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RESET_GPIO_Port,LORA_RESET_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <RADIO_RESET+0x2c>)
 8000ef2:	f010 febb 	bl	8011c6c <HAL_GPIO_WritePin>
	osDelay(2);
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f016 fa95 	bl	8017426 <osDelay>
	HAL_GPIO_WritePin(LORA_RESET_GPIO_Port,LORA_RESET_Pin, SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <RADIO_RESET+0x2c>)
 8000f02:	f010 feb3 	bl	8011c6c <HAL_GPIO_WritePin>
	osDelay(25);
 8000f06:	2019      	movs	r0, #25
 8000f08:	f016 fa8d 	bl	8017426 <osDelay>
	RADIO_CHECK_BUSY();
 8000f0c:	f7ff ffc6 	bl	8000e9c <RADIO_CHECK_BUSY>

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021800 	.word	0x40021800

08000f18 <RADIO_SET_MODE>:
void RADIO_SET_MODE(uint8_t modeconfig)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	RADIO_CHECK_BUSY();
 8000f22:	f7ff ffbb 	bl	8000e9c <RADIO_CHECK_BUSY>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2110      	movs	r1, #16
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <RADIO_SET_MODE+0x44>)
 8000f2c:	f010 fe9e 	bl	8011c6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&RADIO_SET_STANDBY, 1,100);
 8000f30:	2364      	movs	r3, #100	; 0x64
 8000f32:	2201      	movs	r2, #1
 8000f34:	490a      	ldr	r1, [pc, #40]	; (8000f60 <RADIO_SET_MODE+0x48>)
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <RADIO_SET_MODE+0x4c>)
 8000f38:	f013 fac7 	bl	80144ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &modeconfig, 1,100);
 8000f3c:	1df9      	adds	r1, r7, #7
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	2201      	movs	r2, #1
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <RADIO_SET_MODE+0x4c>)
 8000f44:	f013 fac1 	bl	80144ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <RADIO_SET_MODE+0x44>)
 8000f4e:	f010 fe8d 	bl	8011c6c <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	20000002 	.word	0x20000002
 8000f64:	20001878 	.word	0x20001878

08000f68 <RADIO_START>:




bool RADIO_START(uint8_t Device)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	RADIO_RESET();
 8000f72:	f7ff ffb9 	bl	8000ee8 <RADIO_RESET>
	  if (RADIO_CHECK_DEVICE())
 8000f76:	f7ff ff68 	bl	8000e4a <RADIO_CHECK_DEVICE>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <RADIO_START+0x1c>
	  {
	    return true;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <RADIO_START+0x1e>
	  }

	  return false;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <RADIO_SETUP_LORA>:

void RADIO_SETUP_LORA(uint32_t frequency, int32_t offset, uint8_t modParam1, uint8_t modParam2, uint8_t  modParam3, uint8_t modParam4)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af02      	add	r7, sp, #8
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	RADIO_SET_MODE(MODE_STDBY_RC);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff ffb7 	bl	8000f18 <RADIO_SET_MODE>
	RADIO_SET_REGULATOR_MODE(USE_DCDC);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 f838 	bl	8001020 <RADIO_SET_REGULATOR_MODE>
	RADIO_SET_PA_CONFIG(0x04,PAAUTO,LORA_DEVICE);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	21ff      	movs	r1, #255	; 0xff
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f86b 	bl	8001090 <RADIO_SET_PA_CONFIG>
	//RADIO_SET_DIO3_TCX0_CTRL(TCXO_CTRL_3_3V);
	RADIO_CALIBRATE_DEVICE(ALLDevices);
 8000fba:	207f      	movs	r0, #127	; 0x7f
 8000fbc:	f000 f89e 	bl	80010fc <RADIO_CALIBRATE_DEVICE>
	RADIO_CALIBRATE_IMAGE(frequency);
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 f8bd 	bl	8001140 <RADIO_CALIBRATE_IMAGE>
	RADIO_SET_DIO2_RFSWITCH_CTRL();
 8000fc6:	f000 f8ab 	bl	8001120 <RADIO_SET_DIO2_RFSWITCH_CTRL>
	RADIO_SET_PACKET_TYPE(PACKET_TYPE_LORA);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 f8fe 	bl	80011cc <RADIO_SET_PACKET_TYPE>
	RADIO_SET_RF_FREQUENCY(frequency, offset);
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f90a 	bl	80011ec <RADIO_SET_RF_FREQUENCY>
	RADIO_SET_MODULATION_PARAMS(modParam1, modParam2, modParam3, modParam4);
 8000fd8:	7f3b      	ldrb	r3, [r7, #28]
 8000fda:	7e3a      	ldrb	r2, [r7, #24]
 8000fdc:	79b9      	ldrb	r1, [r7, #6]
 8000fde:	79f8      	ldrb	r0, [r7, #7]
 8000fe0:	f000 f93a 	bl	8001258 <RADIO_SET_MODULATION_PARAMS>
	RADIO_SET_BUFFER_BASE_ADDRESS(0,0);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fa12 	bl	8001410 <RADIO_SET_BUFFER_BASE_ADDRESS>
	RADIO_SET_PACKET_PARAMS(8,LORA_PACKET_VARIABLE_LENGTH,255,LORA_CRC_ON,LORA_IQ_NORMAL);
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2008      	movs	r0, #8
 8000ff8:	f000 fa21 	bl	800143e <RADIO_SET_PACKET_PARAMS>
	RADIO_SET_DIOIrq_PARAMS(IRQ_RADIO_TX, (IRQ_TX_DONE + IRQ_RX_TX_TIMEOUT), 0, 0);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	f240 2101 	movw	r1, #513	; 0x201
 8001004:	f240 2001 	movw	r0, #513	; 0x201
 8001008:	f000 fa4c 	bl	80014a4 <RADIO_SET_DIOIrq_PARAMS>
	RADIO_SET_HIGH_SENSITIVITY();
 800100c:	f000 fa84 	bl	8001518 <RADIO_SET_HIGH_SENSITIVITY>
	RADIO_SET_SYNC_WORD(LORA_MAC_PRIVATE_SYNCWORD);
 8001010:	f241 4024 	movw	r0, #5156	; 0x1424
 8001014:	f000 fa89 	bl	800152a <RADIO_SET_SYNC_WORD>

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <RADIO_SET_REGULATOR_MODE>:



void RADIO_SET_REGULATOR_MODE(uint8_t mode)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	RADIO_WRITE_COMMAND(RADIO_SET_REGULATORMODE, &mode, 1);
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	2096      	movs	r0, #150	; 0x96
 8001032:	f000 f805 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <RADIO_WRITE_COMMAND>:

void RADIO_WRITE_COMMAND(uint8_t Opcode,uint8_t *buffer,uint16_t size)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]
	RADIO_CHECK_BUSY();
 8001050:	f7ff ff24 	bl	8000e9c <RADIO_CHECK_BUSY>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2110      	movs	r1, #16
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <RADIO_WRITE_COMMAND+0x48>)
 800105a:	f010 fe07 	bl	8011c6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&Opcode, 1,100);
 800105e:	1df9      	adds	r1, r7, #7
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	2201      	movs	r2, #1
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <RADIO_WRITE_COMMAND+0x4c>)
 8001066:	f013 fa30 	bl	80144ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, buffer,size,100);
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <RADIO_WRITE_COMMAND+0x4c>)
 8001072:	f013 fa2a 	bl	80144ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port,LORA_CS_Pin, SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <RADIO_WRITE_COMMAND+0x48>)
 800107c:	f010 fdf6 	bl	8011c6c <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020000 	.word	0x40020000
 800108c:	20001878 	.word	0x20001878

08001090 <RADIO_SET_PA_CONFIG>:

void RADIO_SET_PA_CONFIG(uint8_t dutycycle, uint8_t hpMax, uint8_t device)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	717b      	strb	r3, [r7, #5]
	  uint8_t buffer[4];

	  if (hpMax == PAAUTO)
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d10e      	bne.n	80010c6 <RADIO_SET_PA_CONFIG+0x36>
	  {
	    if (device == 0x01)
 80010a8:	797b      	ldrb	r3, [r7, #5]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <RADIO_SET_PA_CONFIG+0x22>
	    {
	      hpMax = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71bb      	strb	r3, [r7, #6]
	    }
	    if (device == 0x00)
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <RADIO_SET_PA_CONFIG+0x2c>
	    {
	      hpMax = 0x07;
 80010b8:	2307      	movs	r3, #7
 80010ba:	71bb      	strb	r3, [r7, #6]
	    }
	    if (device == 0x02)
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d101      	bne.n	80010c6 <RADIO_SET_PA_CONFIG+0x36>
	    {
	      hpMax = 0x07;
 80010c2:	2307      	movs	r3, #7
 80010c4:	71bb      	strb	r3, [r7, #6]
	    }
	  }

	  if (device == 0x01)
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <RADIO_SET_PA_CONFIG+0x42>
	  {
	    device = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	717b      	strb	r3, [r7, #5]
 80010d0:	e001      	b.n	80010d6 <RADIO_SET_PA_CONFIG+0x46>
	  }
	  else
	  {
	    device = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	717b      	strb	r3, [r7, #5]
	  }

	  buffer[0] = dutycycle;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	733b      	strb	r3, [r7, #12]
	  buffer[1] = hpMax;
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	737b      	strb	r3, [r7, #13]
	  buffer[2] = device;
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	73bb      	strb	r3, [r7, #14]
	  buffer[3] = 0x01;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]

	  RADIO_WRITE_COMMAND(RADIO_SET_PACONFIG, buffer, 4);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2204      	movs	r2, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	2095      	movs	r0, #149	; 0x95
 80010f0:	f7ff ffa6 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <RADIO_CALIBRATE_DEVICE>:
	  buffer[3] = 0x64;
      RADIO_WRITE_COMMAND(RADIO_SET_TCXOMODE, buffer, 4);
}

void RADIO_CALIBRATE_DEVICE(uint8_t devices)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	RADIO_WRITE_COMMAND(RADIO_CALIBRATE, &devices, 1);
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	2089      	movs	r0, #137	; 0x89
 800110e:	f7ff ff97 	bl	8001040 <RADIO_WRITE_COMMAND>
	osDelay(5);
 8001112:	2005      	movs	r0, #5
 8001114:	f016 f987 	bl	8017426 <osDelay>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <RADIO_SET_DIO2_RFSWITCH_CTRL>:

void RADIO_SET_DIO2_RFSWITCH_CTRL()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	  uint8_t mode = 0x01;
 8001126:	2301      	movs	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
	  RADIO_WRITE_COMMAND(RADIO_SET_RFSWITCHMODE, &mode, 1);
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	209d      	movs	r0, #157	; 0x9d
 8001132:	f7ff ff85 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <RADIO_CALIBRATE_IMAGE>:
void RADIO_CALIBRATE_IMAGE(uint32_t freq)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	  uint8_t calFreq[2];

	  if ( freq > 900000000 )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <RADIO_CALIBRATE_IMAGE+0x78>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d904      	bls.n	800115a <RADIO_CALIBRATE_IMAGE+0x1a>
	  {
	    calFreq[0] = 0xE1;
 8001150:	23e1      	movs	r3, #225	; 0xe1
 8001152:	733b      	strb	r3, [r7, #12]
	    calFreq[1] = 0xE9;
 8001154:	23e9      	movs	r3, #233	; 0xe9
 8001156:	737b      	strb	r3, [r7, #13]
 8001158:	e022      	b.n	80011a0 <RADIO_CALIBRATE_IMAGE+0x60>
	  }
	  else if ( freq > 850000000 )
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <RADIO_CALIBRATE_IMAGE+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d904      	bls.n	800116c <RADIO_CALIBRATE_IMAGE+0x2c>
	  {
	    calFreq[0] = 0xD7;
 8001162:	23d7      	movs	r3, #215	; 0xd7
 8001164:	733b      	strb	r3, [r7, #12]
	    calFreq[1] = 0xD8;
 8001166:	23d8      	movs	r3, #216	; 0xd8
 8001168:	737b      	strb	r3, [r7, #13]
 800116a:	e019      	b.n	80011a0 <RADIO_CALIBRATE_IMAGE+0x60>
	  }
	  else if ( freq > 770000000 )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <RADIO_CALIBRATE_IMAGE+0x80>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d904      	bls.n	800117e <RADIO_CALIBRATE_IMAGE+0x3e>
	  {
	    calFreq[0] = 0xC1;
 8001174:	23c1      	movs	r3, #193	; 0xc1
 8001176:	733b      	strb	r3, [r7, #12]
	    calFreq[1] = 0xC5;
 8001178:	23c5      	movs	r3, #197	; 0xc5
 800117a:	737b      	strb	r3, [r7, #13]
 800117c:	e010      	b.n	80011a0 <RADIO_CALIBRATE_IMAGE+0x60>
	  }
	  else if ( freq > 460000000 )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <RADIO_CALIBRATE_IMAGE+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d904      	bls.n	8001190 <RADIO_CALIBRATE_IMAGE+0x50>
	  {
	    calFreq[0] = 0x75;
 8001186:	2375      	movs	r3, #117	; 0x75
 8001188:	733b      	strb	r3, [r7, #12]
	    calFreq[1] = 0x81;
 800118a:	2381      	movs	r3, #129	; 0x81
 800118c:	737b      	strb	r3, [r7, #13]
 800118e:	e007      	b.n	80011a0 <RADIO_CALIBRATE_IMAGE+0x60>
	  }
	  else if ( freq > 425000000 )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <RADIO_CALIBRATE_IMAGE+0x88>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d903      	bls.n	80011a0 <RADIO_CALIBRATE_IMAGE+0x60>
	  {
	    calFreq[0] = 0x6B;
 8001198:	236b      	movs	r3, #107	; 0x6b
 800119a:	733b      	strb	r3, [r7, #12]
	    calFreq[1] = 0x6F;
 800119c:	236f      	movs	r3, #111	; 0x6f
 800119e:	737b      	strb	r3, [r7, #13]
	  }
	  RADIO_WRITE_COMMAND( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2202      	movs	r2, #2
 80011a6:	4619      	mov	r1, r3
 80011a8:	2098      	movs	r0, #152	; 0x98
 80011aa:	f7ff ff49 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	35a4e900 	.word	0x35a4e900
 80011bc:	32a9f880 	.word	0x32a9f880
 80011c0:	2de54480 	.word	0x2de54480
 80011c4:	1b6b0b00 	.word	0x1b6b0b00
 80011c8:	1954fc40 	.word	0x1954fc40

080011cc <RADIO_SET_PACKET_TYPE>:

void RADIO_SET_PACKET_TYPE(uint8_t packettype)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]

	RADIO_WRITE_COMMAND(RADIO_SET_PACKETTYPE,&packettype,1);
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	208a      	movs	r0, #138	; 0x8a
 80011de:	f7ff ff2f 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <RADIO_SET_RF_FREQUENCY>:

void RADIO_SET_RF_FREQUENCY(uint32_t frequency,int32_t offset)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	  uint8_t buffer[4];
	  uint32_t localfrequencyRegs;
	  localfrequencyRegs = frequency + offset;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
	  localfrequencyRegs = ( uint32_t )( ( double )localfrequencyRegs / ( double )FREQ_STEP );
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <RADIO_SET_RF_FREQUENCY+0x68>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001212:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001216:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	60fb      	str	r3, [r7, #12]
	  buffer[0] = (localfrequencyRegs >> 24) & 0xFF; //MSB
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	0e1b      	lsrs	r3, r3, #24
 8001224:	b2db      	uxtb	r3, r3
 8001226:	723b      	strb	r3, [r7, #8]
	  buffer[1] = (localfrequencyRegs >> 16) & 0xFF;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	b2db      	uxtb	r3, r3
 800122e:	727b      	strb	r3, [r7, #9]
	  buffer[2] = (localfrequencyRegs >> 8) & 0xFF;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	b2db      	uxtb	r3, r3
 8001236:	72bb      	strb	r3, [r7, #10]
	  buffer[3] = localfrequencyRegs & 0xFF;//LSB
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	72fb      	strb	r3, [r7, #11]
	  RADIO_WRITE_COMMAND(RADIO_SET_RFFREQUENCY, buffer, 4);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2204      	movs	r2, #4
 8001244:	4619      	mov	r1, r3
 8001246:	2086      	movs	r0, #134	; 0x86
 8001248:	f7ff fefa 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000004 	.word	0x20000004

08001258 <RADIO_SET_MODULATION_PARAMS>:

void RADIO_SET_MODULATION_PARAMS(uint8_t modParam1, uint8_t modParam2, uint8_t  modParam3, uint8_t  modParam4)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	4603      	mov	r3, r0
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	717b      	strb	r3, [r7, #5]
 8001272:	4613      	mov	r3, r2
 8001274:	713b      	strb	r3, [r7, #4]
	  uint8_t buffer[4];
	  savedModParam2 = modParam2;
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <RADIO_SET_MODULATION_PARAMS+0x60>)
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	7013      	strb	r3, [r2, #0]
	  if(modParam4 ==  LDRO_AUTO)
 800127c:	793b      	ldrb	r3, [r7, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <RADIO_SET_MODULATION_PARAMS+0x3a>
	  {
		  modParam4 = RADIO_RETURN_OPTIMISATION(modParam1, modParam2);
 8001282:	79ba      	ldrb	r2, [r7, #6]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f817 	bl	80012bc <RADIO_RETURN_OPTIMISATION>
 800128e:	4603      	mov	r3, r0
 8001290:	713b      	strb	r3, [r7, #4]
	  }
	  buffer[0] = modParam1;
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	733b      	strb	r3, [r7, #12]
	  buffer[1] = modParam2;
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	737b      	strb	r3, [r7, #13]
	  buffer[2] = modParam3;
 800129a:	797b      	ldrb	r3, [r7, #5]
 800129c:	73bb      	strb	r3, [r7, #14]
	  buffer[3] = modParam4;
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	73fb      	strb	r3, [r7, #15]
	  RADIO_WRITE_COMMAND(RADIO_SET_MODULATIONPARAMS, buffer, 4);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2204      	movs	r2, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	208b      	movs	r0, #139	; 0x8b
 80012ac:	f7ff fec8 	bl	8001040 <RADIO_WRITE_COMMAND>


}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	2000025c 	.word	0x2000025c

080012bc <RADIO_RETURN_OPTIMISATION>:

uint8_t RADIO_RETURN_OPTIMISATION(uint8_t SpreadingFactor,uint8_t Bandwidth)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
	  uint32_t tempBandwidth;
	  float symbolTime;
	  tempBandwidth = RADIO_RETURN_BANDWIDTH(Bandwidth);
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f81e 	bl	8001310 <RADIO_RETURN_BANDWIDTH>
 80012d4:	60f8      	str	r0, [r7, #12]
	  symbolTime = RADIO_CALC_SYMBOL_TIME(tempBandwidth,SpreadingFactor);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	f000 f85e 	bl	80013a8 <RADIO_CALC_SYMBOL_TIME>
 80012ec:	ed87 0a02 	vstr	s0, [r7, #8]
	  if (symbolTime > 16)
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd01      	ble.n	8001306 <RADIO_RETURN_OPTIMISATION+0x4a>
	  {
	    return LDRO_ON;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <RADIO_RETURN_OPTIMISATION+0x4c>
	  }
	  else
	  {
	    return LDRO_OFF;
 8001306:	2300      	movs	r3, #0
	  }
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <RADIO_RETURN_BANDWIDTH>:

uint32_t RADIO_RETURN_BANDWIDTH(uint8_t BWregvalue)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	  switch (BWregvalue)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d834      	bhi.n	800138a <RADIO_RETURN_BANDWIDTH+0x7a>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <RADIO_RETURN_BANDWIDTH+0x18>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	08001355 	.word	0x08001355
 800132c:	08001361 	.word	0x08001361
 8001330:	0800136d 	.word	0x0800136d
 8001334:	08001379 	.word	0x08001379
 8001338:	0800137f 	.word	0x0800137f
 800133c:	08001383 	.word	0x08001383
 8001340:	08001387 	.word	0x08001387
 8001344:	0800138b 	.word	0x0800138b
 8001348:	0800135b 	.word	0x0800135b
 800134c:	08001367 	.word	0x08001367
 8001350:	08001373 	.word	0x08001373
	  {
	    case 0:
	      return 7800;
 8001354:	f641 6378 	movw	r3, #7800	; 0x1e78
 8001358:	e01a      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 8:
	      return 10400;
 800135a:	f642 03a0 	movw	r3, #10400	; 0x28a0
 800135e:	e017      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 1:
	      return 15600;
 8001360:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 8001364:	e014      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 9:
	      return 20800;
 8001366:	f245 1340 	movw	r3, #20800	; 0x5140
 800136a:	e011      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 2:
	      return 31200;
 800136c:	f647 13e0 	movw	r3, #31200	; 0x79e0
 8001370:	e00e      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 10:
	      return 41700;
 8001372:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 8001376:	e00b      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 3:
	      return 62500;
 8001378:	f24f 4324 	movw	r3, #62500	; 0xf424
 800137c:	e008      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 4:
	      return 125000;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <RADIO_RETURN_BANDWIDTH+0x8c>)
 8001380:	e006      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 5:
	      return 250000;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <RADIO_RETURN_BANDWIDTH+0x90>)
 8001384:	e004      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    case 6:
	      return 500000;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <RADIO_RETURN_BANDWIDTH+0x94>)
 8001388:	e002      	b.n	8001390 <RADIO_RETURN_BANDWIDTH+0x80>

	    default:
	      break;
 800138a:	bf00      	nop
	  }
	  return 0xFFFF;
 800138c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	0001e848 	.word	0x0001e848
 80013a0:	0003d090 	.word	0x0003d090
 80013a4:	0007a120 	.word	0x0007a120

080013a8 <RADIO_CALC_SYMBOL_TIME>:

float RADIO_CALC_SYMBOL_TIME(float Bandwidth,uint8_t SpreadingFactor)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	ed2d 8b02 	vpush	{d8}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013b6:	4603      	mov	r3, r0
 80013b8:	70fb      	strb	r3, [r7, #3]
	  float symbolTimemS;
	  symbolTimemS = (Bandwidth / pow(2, SpreadingFactor));
 80013ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80013be:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80013cc:	eeb0 1b47 	vmov.f64	d1, d7
 80013d0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80013d4:	f01e fa44 	bl	801f860 <pow>
 80013d8:	eeb0 6b40 	vmov.f64	d6, d0
 80013dc:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80013e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013e4:	edc7 7a03 	vstr	s15, [r7, #12]
	  symbolTimemS = (1000 / symbolTimemS);
 80013e8:	eddf 6a08 	vldr	s13, [pc, #32]	; 800140c <RADIO_CALC_SYMBOL_TIME+0x64>
 80013ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	edc7 7a03 	vstr	s15, [r7, #12]
	  return symbolTimemS;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	ee07 3a90 	vmov	s15, r3
}
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	ecbd 8b02 	vpop	{d8}
 800140a:	bd80      	pop	{r7, pc}
 800140c:	447a0000 	.word	0x447a0000

08001410 <RADIO_SET_BUFFER_BASE_ADDRESS>:

void RADIO_SET_BUFFER_BASE_ADDRESS(uint8_t txBaseAddress, uint8_t rxBaseAddress)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
	  uint8_t buffer[2];
	  buffer[0] = txBaseAddress;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	733b      	strb	r3, [r7, #12]
	  buffer[1] = rxBaseAddress;
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	737b      	strb	r3, [r7, #13]
	  RADIO_WRITE_COMMAND(RADIO_SET_BUFFERBASEADDRESS, buffer, 2);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2202      	movs	r2, #2
 800142e:	4619      	mov	r1, r3
 8001430:	208f      	movs	r0, #143	; 0x8f
 8001432:	f7ff fe05 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <RADIO_SET_PACKET_PARAMS>:


void RADIO_SET_PACKET_PARAMS(uint16_t packetParam1, uint8_t  packetParam2, uint8_t packetParam3, uint8_t packetParam4, uint8_t packetParam5)
{
 800143e:	b590      	push	{r4, r7, lr}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	4604      	mov	r4, r0
 8001446:	4608      	mov	r0, r1
 8001448:	4611      	mov	r1, r2
 800144a:	461a      	mov	r2, r3
 800144c:	4623      	mov	r3, r4
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4603      	mov	r3, r0
 8001452:	717b      	strb	r3, [r7, #5]
 8001454:	460b      	mov	r3, r1
 8001456:	713b      	strb	r3, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	70fb      	strb	r3, [r7, #3]
	  uint8_t preambleMSB, preambleLSB;
	  preambleMSB = packetParam1 >> 8;
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	75fb      	strb	r3, [r7, #23]
	  preambleLSB = packetParam1 & 0xFF;
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	75bb      	strb	r3, [r7, #22]
	  uint8_t buffer[9];
	  buffer[0] = preambleMSB;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	733b      	strb	r3, [r7, #12]
	  buffer[1] = preambleLSB;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	737b      	strb	r3, [r7, #13]
	  buffer[2] = packetParam2;
 8001470:	797b      	ldrb	r3, [r7, #5]
 8001472:	73bb      	strb	r3, [r7, #14]
	  buffer[3] = packetParam3;
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
	  buffer[4] = packetParam4;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	743b      	strb	r3, [r7, #16]
	  buffer[5] = packetParam5;
 800147c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001480:	747b      	strb	r3, [r7, #17]
	  buffer[6] = 0xFF;
 8001482:	23ff      	movs	r3, #255	; 0xff
 8001484:	74bb      	strb	r3, [r7, #18]
	  buffer[7] = 0xFF;
 8001486:	23ff      	movs	r3, #255	; 0xff
 8001488:	74fb      	strb	r3, [r7, #19]
	  buffer[8] = 0xFF;
 800148a:	23ff      	movs	r3, #255	; 0xff
 800148c:	753b      	strb	r3, [r7, #20]
	  RADIO_WRITE_COMMAND(RADIO_SET_PACKETPARAMS, buffer, 9);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2209      	movs	r2, #9
 8001494:	4619      	mov	r1, r3
 8001496:	208c      	movs	r0, #140	; 0x8c
 8001498:	f7ff fdd2 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <RADIO_SET_DIOIrq_PARAMS>:

void RADIO_SET_DIOIrq_PARAMS(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	803b      	strh	r3, [r7, #0]

	  uint8_t buffer[8];

	  buffer[0] = (uint8_t) (irqMask >> 8);
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	723b      	strb	r3, [r7, #8]
	  buffer[1] = (uint8_t) (irqMask & 0xFF);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	727b      	strb	r3, [r7, #9]
	  buffer[2] = (uint8_t) (dio1Mask >> 8);
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	72bb      	strb	r3, [r7, #10]
	  buffer[3] = (uint8_t) (dio1Mask & 0xFF);
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	72fb      	strb	r3, [r7, #11]
	  buffer[4] = (uint8_t) (dio2Mask >> 8);
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	733b      	strb	r3, [r7, #12]
	  buffer[5] = (uint8_t) (dio2Mask & 0xFF);
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	737b      	strb	r3, [r7, #13]
	  buffer[6] = (uint8_t) (dio3Mask >> 8);
 80014f2:	883b      	ldrh	r3, [r7, #0]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	73bb      	strb	r3, [r7, #14]
	  buffer[7] = (uint8_t) (dio3Mask & 0xFF);
 80014fc:	883b      	ldrh	r3, [r7, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	73fb      	strb	r3, [r7, #15]
	  RADIO_WRITE_COMMAND(RADIO_CFG_DIOIRQ, buffer, 8);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2208      	movs	r2, #8
 8001508:	4619      	mov	r1, r3
 800150a:	2008      	movs	r0, #8
 800150c:	f7ff fd98 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}

08001518 <RADIO_SET_HIGH_SENSITIVITY>:

void RADIO_SET_HIGH_SENSITIVITY()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	RADIO_WRITE_REG(REG_RX_GAIN,BOOSTED_GAIN);
 800151c:	2196      	movs	r1, #150	; 0x96
 800151e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8001522:	f7ff fc23 	bl	8000d6c <RADIO_WRITE_REG>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}

0800152a <RADIO_SET_SYNC_WORD>:
void RADIO_SET_SYNC_WORD(uint16_t syncword)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	80fb      	strh	r3, [r7, #6]
	  RADIO_WRITE_REG( REG_LR_SYNCWORD, ( syncword >> 8 ) & 0xFF );
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8001542:	f7ff fc13 	bl	8000d6c <RADIO_WRITE_REG>
	  RADIO_WRITE_REG( REG_LR_SYNCWORD + 1, syncword & 0xFF );
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	f240 7041 	movw	r0, #1857	; 0x741
 8001550:	f7ff fc0c 	bl	8000d6c <RADIO_WRITE_REG>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <RADIO_RECEIVE>:

uint8_t RADIO_RECEIVE(uint8_t *rxbuffer, uint8_t size, uint32_t rxtimeout, uint8_t wait)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af02      	add	r7, sp, #8
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	461a      	mov	r2, r3
 8001568:	460b      	mov	r3, r1
 800156a:	72fb      	strb	r3, [r7, #11]
 800156c:	4613      	mov	r3, r2
 800156e:	72bb      	strb	r3, [r7, #10]
	  uint8_t RXstart, RXend;
	  uint8_t dummy_dataff = 0xFF;
 8001570:	23ff      	movs	r3, #255	; 0xff
 8001572:	767b      	strb	r3, [r7, #25]
	  uint8_t dummy_data0 = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	763b      	strb	r3, [r7, #24]
	  uint16_t regdata;
	  uint8_t buffer[2];
	  uint8_t _RXPacketL;
	  //RADIO_RESET();
	  RADIO_SET_DIOIrq_PARAMS(IRQ_RADIO_RX, (IRQ_RX_DONE + IRQ_RX_TX_TIMEOUT), 0, 0);
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	f240 2102 	movw	r1, #514	; 0x202
 8001580:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8001584:	f7ff ff8e 	bl	80014a4 <RADIO_SET_DIOIrq_PARAMS>
	  RADIO_SET_RX(rxtimeout);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f867 	bl	800165c <RADIO_SET_RX>
	  if(!wait)
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <RADIO_RECEIVE+0x3c>
	  {
		  return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e055      	b.n	8001644 <RADIO_RECEIVE+0xe8>
	  }
	  while(!HAL_GPIO_ReadPin(DIO1_GPIO_Port,DIO1_Pin));
 8001598:	bf00      	nop
 800159a:	2108      	movs	r1, #8
 800159c:	482b      	ldr	r0, [pc, #172]	; (800164c <RADIO_RECEIVE+0xf0>)
 800159e:	f010 fb4d 	bl	8011c3c <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f8      	beq.n	800159a <RADIO_RECEIVE+0x3e>
	  RADIO_SET_MODE(MODE_STDBY_RC);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fcb5 	bl	8000f18 <RADIO_SET_MODE>
	  regdata = RADIO_READ_IRQ_STATUS();
 80015ae:	f000 f88e 	bl	80016ce <RADIO_READ_IRQ_STATUS>
 80015b2:	4603      	mov	r3, r0
 80015b4:	83bb      	strh	r3, [r7, #28]
	  if ( (regdata & IRQ_HEADER_ERROR) | (regdata & IRQ_CRC_ERROR) | (regdata & IRQ_RX_TX_TIMEOUT ) )
 80015b6:	8bbb      	ldrh	r3, [r7, #28]
 80015b8:	f403 7318 	and.w	r3, r3, #608	; 0x260
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <RADIO_RECEIVE+0x68>
	  {
	    //packet is corrupted somewhere so return 0
	    return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e03f      	b.n	8001644 <RADIO_RECEIVE+0xe8>
	  }
	  RADIO_READ_COMMAND(RADIO_GET_RXBUFFERSTATUS, buffer, 2);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2202      	movs	r2, #2
 80015ca:	4619      	mov	r1, r3
 80015cc:	2013      	movs	r0, #19
 80015ce:	f000 f895 	bl	80016fc <RADIO_READ_COMMAND>
	  _RXPacketL = buffer[0];
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	77fb      	strb	r3, [r7, #31]
	  if(_RXPacketL >size)
 80015d6:	7ffa      	ldrb	r2, [r7, #31]
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d901      	bls.n	80015e2 <RADIO_RECEIVE+0x86>
	  {
		  _RXPacketL = size;
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	77fb      	strb	r3, [r7, #31]
	  }
	  RXstart = buffer[1];
 80015e2:	7d7b      	ldrb	r3, [r7, #21]
 80015e4:	76bb      	strb	r3, [r7, #26]
	  RXend = RXstart + _RXPacketL;
 80015e6:	7eba      	ldrb	r2, [r7, #26]
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	4413      	add	r3, r2
 80015ec:	76fb      	strb	r3, [r7, #27]
	  RADIO_CHECK_BUSY();
 80015ee:	f7ff fc55 	bl	8000e9c <RADIO_CHECK_BUSY>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2110      	movs	r1, #16
 80015f6:	4816      	ldr	r0, [pc, #88]	; (8001650 <RADIO_RECEIVE+0xf4>)
 80015f8:	f010 fb38 	bl	8011c6c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t*)&RADIO_READ_BUFFER, 1, 100);
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	2201      	movs	r2, #1
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <RADIO_RECEIVE+0xf8>)
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <RADIO_RECEIVE+0xfc>)
 8001604:	f012 ff61 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t*)&RXstart, 1, 100);
 8001608:	f107 011a 	add.w	r1, r7, #26
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2201      	movs	r2, #1
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <RADIO_RECEIVE+0xfc>)
 8001612:	f012 ff5a 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t*)&dummy_dataff,1,100);
 8001616:	f107 0119 	add.w	r1, r7, #25
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	2201      	movs	r2, #1
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <RADIO_RECEIVE+0xfc>)
 8001620:	f012 ff53 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&dummy_data0, (uint8_t*)rxbuffer, RXend, 100);
 8001624:	7efb      	ldrb	r3, [r7, #27]
 8001626:	b29b      	uxth	r3, r3
 8001628:	f107 0118 	add.w	r1, r7, #24
 800162c:	2264      	movs	r2, #100	; 0x64
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4809      	ldr	r0, [pc, #36]	; (8001658 <RADIO_RECEIVE+0xfc>)
 8001634:	f013 f9e7 	bl	8014a06 <HAL_SPI_TransmitReceive>
	  //HAL_SPI_Receive(&hspi3, (uint8_t*)rxbuffer,RXend, 100);
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port,LORA_CS_Pin, SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <RADIO_RECEIVE+0xf4>)
 800163e:	f010 fb15 	bl	8011c6c <HAL_GPIO_WritePin>
	  return _RXPacketL;
 8001642:	7ffb      	ldrb	r3, [r7, #31]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021800 	.word	0x40021800
 8001650:	40020000 	.word	0x40020000
 8001654:	20000003 	.word	0x20000003
 8001658:	20001878 	.word	0x20001878

0800165c <RADIO_SET_RX>:

void RADIO_SET_RX(uint32_t timeout)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	  uint8_t buffer[3];
	  RADIO_CLEAR_IRQ_STATUS(IRQ_RADIO_ALL);
 8001664:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001668:	f000 f819 	bl	800169e <RADIO_CLEAR_IRQ_STATUS>
	  timeout = timeout << 6;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	019b      	lsls	r3, r3, #6
 8001670:	607b      	str	r3, [r7, #4]
	  buffer[0] = (timeout >> 16) & 0xFF;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	b2db      	uxtb	r3, r3
 8001678:	733b      	strb	r3, [r7, #12]
	  buffer[1] = (timeout >> 8) & 0xFF;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b2db      	uxtb	r3, r3
 8001680:	737b      	strb	r3, [r7, #13]
	  buffer[2] = timeout & 0xFF;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73bb      	strb	r3, [r7, #14]
	  RADIO_WRITE_COMMAND(RADIO_SETRX, buffer, 3 );
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2203      	movs	r2, #3
 800168e:	4619      	mov	r1, r3
 8001690:	2082      	movs	r0, #130	; 0x82
 8001692:	f7ff fcd5 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <RADIO_CLEAR_IRQ_STATUS>:

void RADIO_CLEAR_IRQ_STATUS(uint16_t irqMask)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	80fb      	strh	r3, [r7, #6]
	  uint8_t buffer[2];
	  buffer[0] = (uint8_t) (irqMask >> 8);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	733b      	strb	r3, [r7, #12]
	  buffer[1] = (uint8_t) (irqMask & 0xFF);
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	737b      	strb	r3, [r7, #13]
	  RADIO_WRITE_COMMAND(RADIO_CLR_IRQSTATUS, buffer, 2);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2202      	movs	r2, #2
 80016be:	4619      	mov	r1, r3
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff fcbd 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <RADIO_READ_IRQ_STATUS>:

uint16_t RADIO_READ_IRQ_STATUS()
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
	  uint16_t temp;
	  uint8_t buffer[2];
	  RADIO_READ_COMMAND(RADIO_GET_IRQSTATUS, buffer, 2);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2202      	movs	r2, #2
 80016d8:	4619      	mov	r1, r3
 80016da:	2012      	movs	r0, #18
 80016dc:	f000 f80e 	bl	80016fc <RADIO_READ_COMMAND>
	  temp = ((buffer[0] << 8) + buffer[1]);
 80016e0:	793b      	ldrb	r3, [r7, #4]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	797b      	ldrb	r3, [r7, #5]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	80fb      	strh	r3, [r7, #6]
	  return temp;
 80016f0:	88fb      	ldrh	r3, [r7, #6]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <RADIO_READ_COMMAND>:
void RADIO_READ_COMMAND(uint8_t Opcode, uint8_t *buffer, uint16_t size)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	80bb      	strh	r3, [r7, #4]
	  uint8_t dummy_data = 0xFF;
 800170c:	23ff      	movs	r3, #255	; 0xff
 800170e:	73fb      	strb	r3, [r7, #15]
	  RADIO_CHECK_BUSY();
 8001710:	f7ff fbc4 	bl	8000e9c <RADIO_CHECK_BUSY>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2110      	movs	r1, #16
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <RADIO_READ_COMMAND+0x60>)
 800171a:	f010 faa7 	bl	8011c6c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&Opcode, 1,100);
 800171e:	1df9      	adds	r1, r7, #7
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	2201      	movs	r2, #1
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <RADIO_READ_COMMAND+0x64>)
 8001726:	f012 fed0 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t*)&dummy_data,1,100);
 800172a:	f107 010f 	add.w	r1, r7, #15
 800172e:	2364      	movs	r3, #100	; 0x64
 8001730:	2201      	movs	r2, #1
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <RADIO_READ_COMMAND+0x64>)
 8001734:	f012 fec9 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&dummy_data, (uint8_t*)buffer, size, 100);
 8001738:	88bb      	ldrh	r3, [r7, #4]
 800173a:	f107 010f 	add.w	r1, r7, #15
 800173e:	2264      	movs	r2, #100	; 0x64
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <RADIO_READ_COMMAND+0x64>)
 8001746:	f013 f95e 	bl	8014a06 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port,LORA_CS_Pin, SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2110      	movs	r1, #16
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <RADIO_READ_COMMAND+0x60>)
 8001750:	f010 fa8c 	bl	8011c6c <HAL_GPIO_WritePin>
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40020000 	.word	0x40020000
 8001760:	20001878 	.word	0x20001878

08001764 <RADIO_TRANSMIT>:

uint8_t RADIO_TRANSMIT(uint8_t *txbuffer, uint8_t size, uint32_t txtimeout, int8_t txpower, uint8_t wait)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	460b      	mov	r3, r1
 8001772:	72fb      	strb	r3, [r7, #11]
 8001774:	4613      	mov	r3, r2
 8001776:	72bb      	strb	r3, [r7, #10]
	  int dummydata =0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	  if (size == 0)
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <RADIO_TRANSMIT+0x22>
	  {
	    return false;
 8001782:	2300      	movs	r3, #0
 8001784:	e054      	b.n	8001830 <RADIO_TRANSMIT+0xcc>
	  }
	  RADIO_SET_MODE(MODE_STDBY_RC);
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fbc6 	bl	8000f18 <RADIO_SET_MODE>
	  RADIO_SET_BUFFER_BASE_ADDRESS(0,0);
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fe3e 	bl	8001410 <RADIO_SET_BUFFER_BASE_ADDRESS>
	  RADIO_CHECK_BUSY();
 8001794:	f7ff fb82 	bl	8000e9c <RADIO_CHECK_BUSY>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2110      	movs	r1, #16
 800179c:	4826      	ldr	r0, [pc, #152]	; (8001838 <RADIO_TRANSMIT+0xd4>)
 800179e:	f010 fa65 	bl	8011c6c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&RADIO_WRITE_BUFFER, 1,100);
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	2201      	movs	r2, #1
 80017a6:	4925      	ldr	r1, [pc, #148]	; (800183c <RADIO_TRANSMIT+0xd8>)
 80017a8:	4825      	ldr	r0, [pc, #148]	; (8001840 <RADIO_TRANSMIT+0xdc>)
 80017aa:	f012 fe8e 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)dummydata,1,100);
 80017ae:	6979      	ldr	r1, [r7, #20]
 80017b0:	2364      	movs	r3, #100	; 0x64
 80017b2:	2201      	movs	r2, #1
 80017b4:	4822      	ldr	r0, [pc, #136]	; (8001840 <RADIO_TRANSMIT+0xdc>)
 80017b6:	f012 fe88 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3,(uint8_t *)txbuffer,size,100);
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	481f      	ldr	r0, [pc, #124]	; (8001840 <RADIO_TRANSMIT+0xdc>)
 80017c4:	f012 fe81 	bl	80144ca <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(LORA_CS_GPIO_Port,LORA_CS_Pin, SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2110      	movs	r1, #16
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <RADIO_TRANSMIT+0xd4>)
 80017ce:	f010 fa4d 	bl	8011c6c <HAL_GPIO_WritePin>
	  RADIO_WRITE_REG(REG_LR_PAYLOADLENGTH, size);
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f240 7002 	movw	r0, #1794	; 0x702
 80017da:	f7ff fac7 	bl	8000d6c <RADIO_WRITE_REG>
	  RADIO_SET_TX_PARAMS(txpower, RADIO_RAMP_200_US);
 80017de:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80017e2:	2104      	movs	r1, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f86f 	bl	80018c8 <RADIO_SET_TX_PARAMS>
	  RADIO_SET_DIOIrq_PARAMS(IRQ_RADIO_TX, (IRQ_TX_DONE + IRQ_RX_TX_TIMEOUT), 0, 0);
 80017ea:	2300      	movs	r3, #0
 80017ec:	2200      	movs	r2, #0
 80017ee:	f240 2101 	movw	r1, #513	; 0x201
 80017f2:	f240 2001 	movw	r0, #513	; 0x201
 80017f6:	f7ff fe55 	bl	80014a4 <RADIO_SET_DIOIrq_PARAMS>
	  RADIO_SET_TX(txtimeout);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f824 	bl	8001848 <RADIO_SET_TX>
	  if(!wait)
 8001800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <RADIO_TRANSMIT+0xa8>
	  {
		  return size;
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	e011      	b.n	8001830 <RADIO_TRANSMIT+0xcc>
	  }
	  while(!HAL_GPIO_ReadPin(DIO1_GPIO_Port,DIO1_Pin));
 800180c:	bf00      	nop
 800180e:	2108      	movs	r1, #8
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <RADIO_TRANSMIT+0xe0>)
 8001812:	f010 fa13 	bl	8011c3c <HAL_GPIO_ReadPin>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f8      	beq.n	800180e <RADIO_TRANSMIT+0xaa>
	  if(RADIO_READ_IRQ_STATUS()& IRQ_RX_TX_TIMEOUT )
 800181c:	f7ff ff57 	bl	80016ce <RADIO_READ_IRQ_STATUS>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <RADIO_TRANSMIT+0xca>
	  {
		  return 0;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <RADIO_TRANSMIT+0xcc>
	  }
	  else
	  {
		  return size;
 800182e:	7afb      	ldrb	r3, [r7, #11]
	  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020000 	.word	0x40020000
 800183c:	20000008 	.word	0x20000008
 8001840:	20001878 	.word	0x20001878
 8001844:	40021800 	.word	0x40021800

08001848 <RADIO_SET_TX>:

void RADIO_SET_TX(uint32_t timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	  uint8_t buffer[3];
	  RADIO_CLEAR_IRQ_STATUS(IRQ_RADIO_ALL);
 8001850:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001854:	f7ff ff23 	bl	800169e <RADIO_CLEAR_IRQ_STATUS>
	  timeout = timeout << 6;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	019b      	lsls	r3, r3, #6
 800185c:	607b      	str	r3, [r7, #4]
	  buffer[0] = (timeout >> 16) & 0xFF;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	b2db      	uxtb	r3, r3
 8001864:	733b      	strb	r3, [r7, #12]
	  buffer[1] = (timeout >> 8) & 0xFF;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b2db      	uxtb	r3, r3
 800186c:	737b      	strb	r3, [r7, #13]
	  buffer[2] = timeout & 0xFF;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73bb      	strb	r3, [r7, #14]
	  uint8_t regvalue = RADIO_READ_REG(REG_TX_MODULATION);
 8001874:	f640 0089 	movw	r0, #2185	; 0x889
 8001878:	f7ff fad6 	bl	8000e28 <RADIO_READ_REG>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
	  if (savedModParam2 == LORA_BW_500)
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <RADIO_SET_TX+0x7c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b06      	cmp	r3, #6
 8001886:	d109      	bne.n	800189c <RADIO_SET_TX+0x54>
	  {
	    RADIO_WRITE_REG(REG_TX_MODULATION, (regvalue & 0xFB));         //if bandwidth is 500k set bit 2 to 0, see datasheet 15.1.1
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	f023 0304 	bic.w	r3, r3, #4
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	f640 0089 	movw	r0, #2185	; 0x889
 8001896:	f7ff fa69 	bl	8000d6c <RADIO_WRITE_REG>
 800189a:	e008      	b.n	80018ae <RADIO_SET_TX+0x66>
	  }
	  else
	  {
		  RADIO_WRITE_REG(REG_TX_MODULATION, (regvalue | 0x04));         //if bandwidth is < 500k set bit 2 to 0 see datasheet 15.1.1
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4619      	mov	r1, r3
 80018a6:	f640 0089 	movw	r0, #2185	; 0x889
 80018aa:	f7ff fa5f 	bl	8000d6c <RADIO_WRITE_REG>
	  }

	  RADIO_WRITE_COMMAND(RADIO_SETTX, buffer, 3 );
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2203      	movs	r2, #3
 80018b4:	4619      	mov	r1, r3
 80018b6:	2083      	movs	r0, #131	; 0x83
 80018b8:	f7ff fbc2 	bl	8001040 <RADIO_WRITE_COMMAND>


}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000025c 	.word	0x2000025c

080018c8 <RADIO_SET_TX_PARAMS>:

void RADIO_SET_TX_PARAMS(int8_t TXpower, uint8_t RampTime)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
	  uint8_t buffer[2];
	  buffer[0] = TXpower;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	733b      	strb	r3, [r7, #12]
	  buffer[1] = (uint8_t)RampTime;
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	737b      	strb	r3, [r7, #13]
	  RADIO_WRITE_COMMAND(RADIO_SET_TXPARAMS, buffer, 2);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2202      	movs	r2, #2
 80018e6:	4619      	mov	r1, r3
 80018e8:	208e      	movs	r0, #142	; 0x8e
 80018ea:	f7ff fba9 	bl	8001040 <RADIO_WRITE_COMMAND>
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <Lcd_init>:


extern I2C_HandleTypeDef hi2c2;

void Lcd_init (void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	Lcd_send_cmd(0x00);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f860 	bl	80019c0 <Lcd_send_cmd>
	osDelay(50);  // wait for >40ms
 8001900:	2032      	movs	r0, #50	; 0x32
 8001902:	f015 fd90 	bl	8017426 <osDelay>
	Lcd_send_cmd (0x30);
 8001906:	2030      	movs	r0, #48	; 0x30
 8001908:	f000 f85a 	bl	80019c0 <Lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 800190c:	2005      	movs	r0, #5
 800190e:	f015 fd8a 	bl	8017426 <osDelay>
	Lcd_send_cmd (0x30);
 8001912:	2030      	movs	r0, #48	; 0x30
 8001914:	f000 f854 	bl	80019c0 <Lcd_send_cmd>
	osDelay(1);  // wait for >100us
 8001918:	2001      	movs	r0, #1
 800191a:	f015 fd84 	bl	8017426 <osDelay>
	Lcd_send_cmd (0x30);
 800191e:	2030      	movs	r0, #48	; 0x30
 8001920:	f000 f84e 	bl	80019c0 <Lcd_send_cmd>
	osDelay(10);
 8001924:	200a      	movs	r0, #10
 8001926:	f015 fd7e 	bl	8017426 <osDelay>
	Lcd_send_cmd (0x20);  // 4bit mode
 800192a:	2020      	movs	r0, #32
 800192c:	f000 f848 	bl	80019c0 <Lcd_send_cmd>
	osDelay(10);
 8001930:	200a      	movs	r0, #10
 8001932:	f015 fd78 	bl	8017426 <osDelay>

  // dislay initialisation
	Lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001936:	2028      	movs	r0, #40	; 0x28
 8001938:	f000 f842 	bl	80019c0 <Lcd_send_cmd>
	//osDelay(1);
	//Lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	//osDelay(1);
	Lcd_send_cmd (0x10);  // clear display
 800193c:	2010      	movs	r0, #16
 800193e:	f000 f83f 	bl	80019c0 <Lcd_send_cmd>
//	osDelay(1);
//	osDelay(1);
	Lcd_send_cmd (0x0F); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001942:	200f      	movs	r0, #15
 8001944:	f000 f83c 	bl	80019c0 <Lcd_send_cmd>
	//osDelay(1);
	Lcd_send_cmd (0x09); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001948:	2009      	movs	r0, #9
 800194a:	f000 f839 	bl	80019c0 <Lcd_send_cmd>
	Lcd_send_cmd(0x02);
 800194e:	2002      	movs	r0, #2
 8001950:	f000 f836 	bl	80019c0 <Lcd_send_cmd>
	Lcd_send_cmd(0x01);
 8001954:	2001      	movs	r0, #1
 8001956:	f000 f833 	bl	80019c0 <Lcd_send_cmd>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <Lcd_send_data>:

/********* LCD SEND DATA **********/

void Lcd_send_data (char data)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af02      	add	r7, sp, #8
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f023 030f 	bic.w	r3, r3, #15
 8001970:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f043 030d 	orr.w	r3, r3, #13
 800197e:	b2db      	uxtb	r3, r3
 8001980:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	f043 0309 	orr.w	r3, r3, #9
 8001988:	b2db      	uxtb	r3, r3
 800198a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	f043 030d 	orr.w	r3, r3, #13
 8001992:	b2db      	uxtb	r3, r3
 8001994:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	f043 0309 	orr.w	r3, r3, #9
 800199c:	b2db      	uxtb	r3, r3
 800199e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a0:	f107 0208 	add.w	r2, r7, #8
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2304      	movs	r3, #4
 80019aa:	214e      	movs	r1, #78	; 0x4e
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <Lcd_send_data+0x5c>)
 80019ae:	f010 fa21 	bl	8011df4 <HAL_I2C_Master_Transmit>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20001790 	.word	0x20001790

080019c0 <Lcd_send_cmd>:

/********* LCD SEND COMMAND **********/
void Lcd_send_cmd (char cmd)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f023 030f 	bic.w	r3, r3, #15
 80019d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	f043 030c 	orr.w	r3, r3, #12
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	f043 030c 	orr.w	r3, r3, #12
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a00:	f107 0208 	add.w	r2, r7, #8
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2304      	movs	r3, #4
 8001a0a:	214e      	movs	r1, #78	; 0x4e
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <Lcd_send_cmd+0x5c>)
 8001a0e:	f010 f9f1 	bl	8011df4 <HAL_I2C_Master_Transmit>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20001790 	.word	0x20001790

08001a20 <Lcd_send_string>:
/********* LCD SEND STRING  **********/

void Lcd_send_string (char *str)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	while (*str) Lcd_send_data (*str++);
 8001a28:	e006      	b.n	8001a38 <Lcd_send_string+0x18>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff94 	bl	8001960 <Lcd_send_data>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f4      	bne.n	8001a2a <Lcd_send_string+0xa>
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <LCD_setCursor_xy>:

/********* LCD SET CURSOR  **********/
void LCD_setCursor_xy (char row, char pos)	/* Send string to LCD with xy position */
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	460a      	mov	r2, r1
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71bb      	strb	r3, [r7, #6]
	if (row == 0 && pos<16)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <LCD_setCursor_xy+0x36>
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d80c      	bhi.n	8001a80 <LCD_setCursor_xy+0x36>
	Lcd_send_cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 8001a66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ffa1 	bl	80019c0 <Lcd_send_cmd>
	else if (row == 1 && pos<16)
	Lcd_send_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
			/* Call LCD string function */
}
 8001a7e:	e011      	b.n	8001aa4 <LCD_setCursor_xy+0x5a>
	else if (row == 1 && pos<16)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10e      	bne.n	8001aa4 <LCD_setCursor_xy+0x5a>
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d80b      	bhi.n	8001aa4 <LCD_setCursor_xy+0x5a>
	Lcd_send_cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 8001a8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff8e 	bl	80019c0 <Lcd_send_cmd>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <LCD_Clear>:

/********* LCD CLEAR  **********/
void LCD_Clear()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	Lcd_send_cmd(0x01);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff ff85 	bl	80019c0 <Lcd_send_cmd>
	osDelay(5);
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f015 fcb5 	bl	8017426 <osDelay>

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <PCA9685_SetBit>:

extern I2C_HandleTypeDef hi2c1;


PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af04      	add	r7, sp, #16
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	460b      	mov	r3, r1
 8001acc:	71bb      	strb	r3, [r7, #6]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001ad2:	797b      	ldrb	r3, [r7, #5]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <PCA9685_SetBit+0x1c>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(&hi2c1, 0x80, Register, 1, &tmp, 1, 10))
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	f107 030f 	add.w	r3, r7, #15
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <PCA9685_SetBit+0xac>)
 8001af4:	f010 fb86 	bl	8012204 <HAL_I2C_Mem_Read>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <PCA9685_SetBit+0x42>
	{
		return PCA9685_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e030      	b.n	8001b64 <PCA9685_SetBit+0xa4>
	}
	tmp &= ~((1<<7)|(1<<Bit));
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	2201      	movs	r2, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	f003 0201 	and.w	r2, r3, #1
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(&hi2c1, 0x80, Register, 1, &tmp, 1, 10))
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	230a      	movs	r3, #10
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	2301      	movs	r3, #1
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	f107 030f 	add.w	r3, r7, #15
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <PCA9685_SetBit+0xac>)
 8001b54:	f010 fa42 	bl	8011fdc <HAL_I2C_Mem_Write>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <PCA9685_SetBit+0xa2>
	{
		return PCA9685_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <PCA9685_SetBit+0xa4>
	}

	return PCA9685_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000173c 	.word	0x2000173c

08001b70 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001b76:	2306      	movs	r3, #6
 8001b78:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, 0x80, &cmd, 1, 10))
 8001b7a:	1dfa      	adds	r2, r7, #7
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <PCA9685_SoftwareReset+0x30>)
 8001b86:	f010 f935 	bl	8011df4 <HAL_I2C_Master_Transmit>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <PCA9685_SoftwareReset+0x24>
	{
		return PCA9685_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <PCA9685_SoftwareReset+0x26>
	}
	return PCA9685_ERROR;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000173c 	.word	0x2000173c

08001ba4 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(0x00, 4, Enable);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff ff83 	bl	8001ac0 <PCA9685_SetBit>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(0x00, 7, Enable);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2107      	movs	r1, #7
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff ff73 	bl	8001ac0 <PCA9685_SetBit>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <PCA9685_AutoIncrement>:
PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(0x00, 5, Enable);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff ff63 	bl	8001ac0 <PCA9685_SetBit>
 8001bfa:	4603      	mov	r3, r0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0000      	movs	r0, r0
	...

08001c08 <PCA9685_SetPwmFrequency>:

PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d902      	bls.n	8001c22 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	72fb      	strb	r3, [r7, #11]
 8001c20:	e031      	b.n	8001c86 <PCA9685_SetPwmFrequency+0x7e>
	}
	else if(Frequency <= 24)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b18      	cmp	r3, #24
 8001c26:	d802      	bhi.n	8001c2e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001c28:	23ff      	movs	r3, #255	; 0xff
 8001c2a:	72fb      	strb	r3, [r7, #11]
 8001c2c:	e02b      	b.n	8001c86 <PCA9685_SetPwmFrequency+0x7e>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c3c:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001cc0 <PCA9685_SetPwmFrequency+0xb8>
 8001c40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c44:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001cc8 <PCA9685_SetPwmFrequency+0xc0>
 8001c48:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c58:	edc7 7a03 	vstr	s15, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c64:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001c68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c70:	f01e f84a 	bl	801fd08 <floor>
 8001c74:	eeb0 7b40 	vmov.f64	d7, d0
 8001c78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c7c:	edc7 7a00 	vstr	s15, [r7]
 8001c80:	783b      	ldrb	r3, [r7, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f7ff ff8c 	bl	8001ba4 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(&hi2c1, 0x80, 0xFE, 1, &Prescale, 1, 10); // Write Prescale value
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	2301      	movs	r3, #1
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	f107 030b 	add.w	r3, r7, #11
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	22fe      	movs	r2, #254	; 0xfe
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <PCA9685_SetPwmFrequency+0xc8>)
 8001ca2:	f010 f99b 	bl	8011fdc <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff ff7c 	bl	8001ba4 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f7ff ff89 	bl	8001bc4 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40b00000 	.word	0x40b00000
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	4177d784 	.word	0x4177d784
 8001cd0:	2000173c 	.word	0x2000173c

08001cd4 <PCA9685_SetPwm>:
PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af04      	add	r7, sp, #16
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	80bb      	strh	r3, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = 0x06 + (4 * Channel);
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3306      	adds	r3, #6
 8001cee:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001cf0:	88bb      	ldrh	r3, [r7, #4]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(&hi2c1, 0x80, RegisterAddress, 1, Message, 4, 10))
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	230a      	movs	r3, #10
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	2304      	movs	r3, #4
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2301      	movs	r3, #1
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <PCA9685_SetPwm+0x6c>)
 8001d28:	f010 f958 	bl	8011fdc <HAL_I2C_Mem_Write>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <PCA9685_SetPwm+0x62>
	{
		return PCA9685_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <PCA9685_SetPwm+0x64>
	}

	return PCA9685_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000173c 	.word	0x2000173c

08001d44 <PCA9685_SetPin>:
PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	80bb      	strh	r3, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5c:	d302      	bcc.n	8001d64 <PCA9685_SetPin+0x20>
 8001d5e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d62:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d025      	beq.n	8001db6 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001d6a:	88bb      	ldrh	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d108      	bne.n	8001d82 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ffab 	bl	8001cd4 <PCA9685_SetPwm>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	e03a      	b.n	8001df8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d108      	bne.n	8001d9e <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff9d 	bl	8001cd4 <PCA9685_SetPwm>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	e02c      	b.n	8001df8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001da4:	330f      	adds	r3, #15
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff91 	bl	8001cd4 <PCA9685_SetPwm>
 8001db2:	4603      	mov	r3, r0
 8001db4:	e020      	b.n	8001df8 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff83 	bl	8001cd4 <PCA9685_SetPwm>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	e012      	b.n	8001df8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff77 	bl	8001cd4 <PCA9685_SetPwm>
 8001de6:	4603      	mov	r3, r0
 8001de8:	e006      	b.n	8001df8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001dea:	88ba      	ldrh	r2, [r7, #4]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff6f 	bl	8001cd4 <PCA9685_SetPwm>
 8001df6:	4603      	mov	r3, r0
    }
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <PCA9685_SetDuty>:
PCA9685_STATUS PCA9685_SetDuty(uint8_t Channel, float value)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	ed87 0a00 	vstr	s0, [r7]
 8001e0c:	71fb      	strb	r3, [r7, #7]
	float Value;
	Value = floor((4095 * value));
 8001e0e:	edd7 7a00 	vldr	s15, [r7]
 8001e12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e54 <PCA9685_SetDuty+0x54>
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e1e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e22:	f01d ff71 	bl	801fd08 <floor>
 8001e26:	eeb0 7b40 	vmov.f64	d7, d0
 8001e2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e2e:	edc7 7a03 	vstr	s15, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	ee17 3a90 	vmov	r3, s15
 8001e3e:	b299      	uxth	r1, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2200      	movs	r2, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff7d 	bl	8001d44 <PCA9685_SetPin>
 8001e4a:	4603      	mov	r3, r0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	457ff000 	.word	0x457ff000

08001e58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <vApplicationGetIdleTaskMemory+0x30>)
 8001e6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000260 	.word	0x20000260
 8001e88:	20000314 	.word	0x20000314

08001e8c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <vApplicationGetTimerTaskMemory+0x30>)
 8001ea2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eaa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20000514 	.word	0x20000514
 8001ebc:	200005c8 	.word	0x200005c8

08001ec0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec4:	f3bf 8f4f 	dsb	sy
}
 8001ec8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eca:	f3bf 8f6f 	isb	sy
}
 8001ece:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <SCB_EnableICache+0x48>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ede:	f3bf 8f6f 	isb	sy
}
 8001ee2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <SCB_EnableICache+0x48>)
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <SCB_EnableICache+0x48>)
 8001eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef0:	f3bf 8f4f 	dsb	sy
}
 8001ef4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef6:	f3bf 8f6f 	isb	sy
}
 8001efa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <SCB_EnableDCache+0x84>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1a:	f3bf 8f4f 	dsb	sy
}
 8001f1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <SCB_EnableDCache+0x84>)
 8001f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0b5b      	lsrs	r3, r3, #13
 8001f2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001f44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f4a:	4911      	ldr	r1, [pc, #68]	; (8001f90 <SCB_EnableDCache+0x84>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ef      	bne.n	8001f3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	60fa      	str	r2, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e5      	bne.n	8001f32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f66:	f3bf 8f4f 	dsb	sy
}
 8001f6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <SCB_EnableDCache+0x84>)
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <SCB_EnableDCache+0x84>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f78:	f3bf 8f4f 	dsb	sy
}
 8001f7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f7e:	f3bf 8f6f 	isb	sy
}
 8001f82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001f9c:	1d39      	adds	r1, r7, #4
 8001f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <__io_putchar+0x20>)
 8001fa6:	f013 fef3 	bl	8015d90 <HAL_UART_Transmit>

  return ch;
 8001faa:	687b      	ldr	r3, [r7, #4]

}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20001b24 	.word	0x20001b24

08001fb8 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8001fc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001fc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001fca:	edc7 1a02 	vstr	s3, [r7, #8]
 8001fce:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001fd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fde:	edd7 6a01 	vldr	s13, [r7, #4]
 8001fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002006:	eeb0 0a67 	vmov.f32	s0, s15
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <IR_TEMPERATURE>:

void IR_TEMPERATURE(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800201a:	463b      	mov	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_4;
 8002026:	2304      	movs	r3, #4
 8002028:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <IR_TEMPERATURE+0x3c>)
 8002038:	f00e fb1a 	bl	8010670 <HAL_ADC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <IR_TEMPERATURE+0x32>
{
  Error_Handler();
 8002042:	f00d f8c7 	bl	800f1d4 <Error_Handler>
}
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200016d0 	.word	0x200016d0

08002054 <AMB_TEMPERATURE>:

void AMB_TEMPERATURE(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_3;
 8002066:	2303      	movs	r3, #3
 8002068:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800206e:	2301      	movs	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002072:	463b      	mov	r3, r7
 8002074:	4619      	mov	r1, r3
 8002076:	4806      	ldr	r0, [pc, #24]	; (8002090 <AMB_TEMPERATURE+0x3c>)
 8002078:	f00e fafa 	bl	8010670 <HAL_ADC_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <AMB_TEMPERATURE+0x32>
{
  Error_Handler();
 8002082:	f00d f8a7 	bl	800f1d4 <Error_Handler>
}
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200016d0 	.word	0x200016d0

08002094 <LHS_TEMPERATURE>:

void LHS_TEMPERATURE(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800209a:	463b      	mov	r3, r7
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_5;
 80020a6:	2305      	movs	r3, #5
 80020a8:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80020ae:	2302      	movs	r3, #2
 80020b0:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020b2:	463b      	mov	r3, r7
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <LHS_TEMPERATURE+0x3c>)
 80020b8:	f00e fada 	bl	8010670 <HAL_ADC_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <LHS_TEMPERATURE+0x32>
{
  Error_Handler();
 80020c2:	f00d f887 	bl	800f1d4 <Error_Handler>
}
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200016d0 	.word	0x200016d0

080020d4 <RHS_TEMPERATURE>:

void RHS_TEMPERATURE(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80020da:	463b      	mov	r3, r7
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_6;
 80020e6:	2306      	movs	r3, #6
 80020e8:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80020ee:	2303      	movs	r3, #3
 80020f0:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020f2:	463b      	mov	r3, r7
 80020f4:	4619      	mov	r1, r3
 80020f6:	4806      	ldr	r0, [pc, #24]	; (8002110 <RHS_TEMPERATURE+0x3c>)
 80020f8:	f00e faba 	bl	8010670 <HAL_ADC_ConfigChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <RHS_TEMPERATURE+0x32>
{
  Error_Handler();
 8002102:	f00d f867 	bl	800f1d4 <Error_Handler>
}
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200016d0 	.word	0x200016d0

08002114 <SEND_ACK>:


void SEND_ACK(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0b4      	sub	sp, #208	; 0xd0
 8002118:	af00      	add	r7, sp, #0
	uint8_t DATA_FOR_RCU[MAX_BUFFER_SIZE];
	uint8_t CRC_VALUE_OF_DATA_FOR_RCU;
	LORA_SEND *lorasendmsg;
	  memset(DATA_FOR_RCU,0xFF,MAX_BUFFER_SIZE);
 800211a:	463b      	mov	r3, r7
 800211c:	22c8      	movs	r2, #200	; 0xc8
 800211e:	21ff      	movs	r1, #255	; 0xff
 8002120:	4618      	mov	r0, r3
 8002122:	f019 f876 	bl	801b212 <memset>
	  DATA_FOR_RCU[0] = LORA_BIT;
 8002126:	2301      	movs	r3, #1
 8002128:	703b      	strb	r3, [r7, #0]
	  DATA_FOR_RCU[1]=MODEM_REPLY_BIT;
 800212a:	2304      	movs	r3, #4
 800212c:	707b      	strb	r3, [r7, #1]
	  DATA_FOR_RCU[2]=MY_TCU_ID;
 800212e:	2304      	movs	r3, #4
 8002130:	70bb      	strb	r3, [r7, #2]
	  DATA_FOR_RCU[3]=ACK_NACK_DATA;
 8002132:	239a      	movs	r3, #154	; 0x9a
 8002134:	70fb      	strb	r3, [r7, #3]
	  DATA_FOR_RCU[4]=ACK;
 8002136:	2361      	movs	r3, #97	; 0x61
 8002138:	713b      	strb	r3, [r7, #4]
	  CRC_VALUE_OF_DATA_FOR_RCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_RCU,(BUFFER_SIZE_ALL-1));
 800213a:	463b      	mov	r3, r7
 800213c:	22c7      	movs	r2, #199	; 0xc7
 800213e:	4619      	mov	r1, r3
 8002140:	4818      	ldr	r0, [pc, #96]	; (80021a4 <SEND_ACK+0x90>)
 8002142:	f00e fe2b 	bl	8010d9c <HAL_CRC_Calculate>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	  DATA_FOR_RCU[BUFFER_SIZE_ALL-1]=CRC_VALUE_OF_DATA_FOR_RCU;
 800214c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002150:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	  lorasendmsg = osPoolAlloc(lorasendpool);
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <SEND_ACK+0x94>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f015 fa8a 	bl	8017672 <osPoolAlloc>
 800215e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	  memcpy(lorasendmsg->LORA_SEND_DATA,DATA_FOR_RCU,200);
 8002162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002166:	4618      	mov	r0, r3
 8002168:	463b      	mov	r3, r7
 800216a:	22c8      	movs	r2, #200	; 0xc8
 800216c:	4619      	mov	r1, r3
 800216e:	f019 f842 	bl	801b1f6 <memcpy>
	  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <SEND_ACK+0x98>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800217a:	2264      	movs	r2, #100	; 0x64
 800217c:	4618      	mov	r0, r3
 800217e:	f015 fb45 	bl	801780c <osMessagePut>
	  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 8002182:	4639      	mov	r1, r7
 8002184:	2364      	movs	r3, #100	; 0x64
 8002186:	22c8      	movs	r2, #200	; 0xc8
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <SEND_ACK+0x9c>)
 800218a:	f013 fe01 	bl	8015d90 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, DATA_FOR_RCU, 50,100);
 800218e:	4639      	mov	r1, r7
 8002190:	2364      	movs	r3, #100	; 0x64
 8002192:	2232      	movs	r2, #50	; 0x32
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <SEND_ACK+0xa0>)
 8002196:	f013 fdfb 	bl	8015d90 <HAL_UART_Transmit>
}
 800219a:	bf00      	nop
 800219c:	37d0      	adds	r7, #208	; 0xd0
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20001718 	.word	0x20001718
 80021a8:	200015c8 	.word	0x200015c8
 80021ac:	20001e1c 	.word	0x20001e1c
 80021b0:	20001bac 	.word	0x20001bac
 80021b4:	2000198c 	.word	0x2000198c

080021b8 <HAL_UART_RxCpltCallback>:
	  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
	  HAL_UART_Transmit(&huart4, DATA_FOR_RCU, 50,100);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	if((huart->Instance == UART5))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a33      	ldr	r2, [pc, #204]	; (8002294 <HAL_UART_RxCpltCallback+0xdc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d112      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_DMA(&huart5, DATA_FROM_MAS_SLAVE, 50);
 80021ca:	2232      	movs	r2, #50	; 0x32
 80021cc:	4932      	ldr	r1, [pc, #200]	; (8002298 <HAL_UART_RxCpltCallback+0xe0>)
 80021ce:	4833      	ldr	r0, [pc, #204]	; (800229c <HAL_UART_RxCpltCallback+0xe4>)
 80021d0:	f013 fe61 	bl	8015e96 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart5_rx,DMA_IT_HT);
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_UART_RxCpltCallback+0xe8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_UART_RxCpltCallback+0xe8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0208 	bic.w	r2, r2, #8
 80021e2:	601a      	str	r2, [r3, #0]
		vTaskNotifyGiveFromISR(SLAVE_REC_MASHandle, pdFALSE);
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_UART_RxCpltCallback+0xec>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f017 fde2 	bl	8019db4 <vTaskNotifyGiveFromISR>
	}
	if((huart->Instance == UART4))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <HAL_UART_RxCpltCallback+0xf0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d112      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x68>
	{
		HAL_UART_Receive_DMA(&huart4, DATA_FROM_WIFI, 50);
 80021fa:	2232      	movs	r2, #50	; 0x32
 80021fc:	492b      	ldr	r1, [pc, #172]	; (80022ac <HAL_UART_RxCpltCallback+0xf4>)
 80021fe:	482c      	ldr	r0, [pc, #176]	; (80022b0 <HAL_UART_RxCpltCallback+0xf8>)
 8002200:	f013 fe49 	bl	8015e96 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart4_rx,DMA_IT_HT);
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_UART_RxCpltCallback+0xfc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_UART_RxCpltCallback+0xfc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
		vTaskNotifyGiveFromISR(WIFI_RECEIVEHandle, pdFALSE);
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_UART_RxCpltCallback+0x100>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f017 fdca 	bl	8019db4 <vTaskNotifyGiveFromISR>
	}
	if((huart->Instance == USART6))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_UART_RxCpltCallback+0x104>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d112      	bne.n	8002250 <HAL_UART_RxCpltCallback+0x98>
	{
		HAL_UART_Receive_DMA(&huart6, DATA_FROM_LOCAL, 50);
 800222a:	2232      	movs	r2, #50	; 0x32
 800222c:	4924      	ldr	r1, [pc, #144]	; (80022c0 <HAL_UART_RxCpltCallback+0x108>)
 800222e:	4825      	ldr	r0, [pc, #148]	; (80022c4 <HAL_UART_RxCpltCallback+0x10c>)
 8002230:	f013 fe31 	bl	8015e96 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_UART_RxCpltCallback+0x110>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_UART_RxCpltCallback+0x110>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0208 	bic.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
		vTaskNotifyGiveFromISR(RCU_RECEIVEHandle, pdFALSE);
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_UART_RxCpltCallback+0x114>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f017 fdb2 	bl	8019db4 <vTaskNotifyGiveFromISR>
	}
	if((huart->Instance == USART1))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_UART_RxCpltCallback+0x118>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d117      	bne.n	800228a <HAL_UART_RxCpltCallback+0xd2>
	{
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)DATA_FROM_SDA, 34);
 800225a:	2222      	movs	r2, #34	; 0x22
 800225c:	491d      	ldr	r1, [pc, #116]	; (80022d4 <HAL_UART_RxCpltCallback+0x11c>)
 800225e:	481e      	ldr	r0, [pc, #120]	; (80022d8 <HAL_UART_RxCpltCallback+0x120>)
 8002260:	f013 fe19 	bl	8015e96 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_UART_RxCpltCallback+0x124>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_UART_RxCpltCallback+0x124>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0208 	bic.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
		vTaskNotifyGiveFromISR(SDA_RECEIVEHandle, pdFALSE);
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_UART_RxCpltCallback+0x128>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f017 fd9a 	bl	8019db4 <vTaskNotifyGiveFromISR>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4817      	ldr	r0, [pc, #92]	; (80022e4 <HAL_UART_RxCpltCallback+0x12c>)
 8002286:	f00f fd0a 	bl	8011c9e <HAL_GPIO_TogglePin>
	}
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40005000 	.word	0x40005000
 8002298:	20001e94 	.word	0x20001e94
 800229c:	20001a14 	.word	0x20001a14
 80022a0:	20001c94 	.word	0x20001c94
 80022a4:	20001dc4 	.word	0x20001dc4
 80022a8:	40004c00 	.word	0x40004c00
 80022ac:	20001eec 	.word	0x20001eec
 80022b0:	2000198c 	.word	0x2000198c
 80022b4:	20001c34 	.word	0x20001c34
 80022b8:	20001ddc 	.word	0x20001ddc
 80022bc:	40011400 	.word	0x40011400
 80022c0:	20001f20 	.word	0x20001f20
 80022c4:	20001bac 	.word	0x20001bac
 80022c8:	20001d54 	.word	0x20001d54
 80022cc:	20001dd8 	.word	0x20001dd8
 80022d0:	40011000 	.word	0x40011000
 80022d4:	20001ec8 	.word	0x20001ec8
 80022d8:	20001a9c 	.word	0x20001a9c
 80022dc:	20001cf4 	.word	0x20001cf4
 80022e0:	20001dcc 	.word	0x20001dcc
 80022e4:	40021000 	.word	0x40021000

080022e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 80022ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  /* USER CODE BEGIN 1 */
__disable_irq();
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80022f4:	f7ff fde4 	bl	8001ec0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80022f8:	f7ff fe08 	bl	8001f0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fc:	f00d ffad 	bl	801025a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002300:	f000 fe7a 	bl	8002ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002304:	f001 fb2c 	bl	8003960 <MX_GPIO_Init>
  MX_DMA_Init();
 8002308:	f001 fae8 	bl	80038dc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800230c:	f001 fa84 	bl	8003818 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8002310:	f000 ffbc 	bl	800328c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8002314:	f001 fa4e 	bl	80037b4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002318:	f001 faae 	bl	8003878 <MX_USART6_UART_Init>
  MX_UART4_Init();
 800231c:	f001 f9e4 	bl	80036e8 <MX_UART4_Init>
  MX_I2C1_Init();
 8002320:	f000 ffe0 	bl	80032e4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002324:	f001 f990 	bl	8003648 <MX_TIM4_Init>
  MX_ADC2_Init();
 8002328:	f000 ff26 	bl	8003178 <MX_ADC2_Init>
  MX_ADC1_Init();
 800232c:	f000 fed2 	bl	80030d4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002330:	f000 ff74 	bl	800321c <MX_ADC3_Init>
  MX_I2C2_Init();
 8002334:	f001 f816 	bl	8003364 <MX_I2C2_Init>
  MX_RTC_Init();
 8002338:	f001 f872 	bl	8003420 <MX_RTC_Init>
  MX_SPI1_Init();
 800233c:	f001 f8ca 	bl	80034d4 <MX_SPI1_Init>
  MX_SPI4_Init();
 8002340:	f001 f944 	bl	80035cc <MX_SPI4_Init>
  MX_SPI3_Init();
 8002344:	f001 f904 	bl	8003550 <MX_SPI3_Init>
  MX_UART5_Init();
 8002348:	f001 fa02 	bl	8003750 <MX_UART5_Init>
  MX_IWDG_Init();
 800234c:	f001 f84a 	bl	80033e4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,SET);
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002356:	48ce      	ldr	r0, [pc, #824]	; (8002690 <main+0x3a8>)
 8002358:	f00f fc88 	bl	8011c6c <HAL_GPIO_WritePin>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TCU_SDA_TIMER */
  osTimerDef(TCU_SDA_TIMER, TCU_SDA_TIMER_CALL);
 800235c:	4bcd      	ldr	r3, [pc, #820]	; (8002694 <main+0x3ac>)
 800235e:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
  TCU_SDA_TIMERHandle = osTimerCreate(osTimer(TCU_SDA_TIMER), osTimerOnce, NULL);
 8002368:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f015 f86d 	bl	8017450 <osTimerCreate>
 8002376:	4603      	mov	r3, r0
 8002378:	4ac7      	ldr	r2, [pc, #796]	; (8002698 <main+0x3b0>)
 800237a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 800237c:	4bc7      	ldr	r3, [pc, #796]	; (800269c <main+0x3b4>)
 800237e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerOnce, NULL);
 8002388:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f015 f85d 	bl	8017450 <osTimerCreate>
 8002396:	4603      	mov	r3, r0
 8002398:	4ac1      	ldr	r2, [pc, #772]	; (80026a0 <main+0x3b8>)
 800239a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LORA_SEND_q */
  osMessageQDef(LORA_SEND_q, 2, lora_send);
 800239c:	4bc1      	ldr	r3, [pc, #772]	; (80026a4 <main+0x3bc>)
 800239e:	f507 648f 	add.w	r4, r7, #1144	; 0x478
 80023a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LORA_SEND_qHandle = osMessageCreate(osMessageQ(LORA_SEND_q), NULL);
 80023a8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f015 fa04 	bl	80177bc <osMessageCreate>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4abc      	ldr	r2, [pc, #752]	; (80026a8 <main+0x3c0>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SLAVE_ID_q */
  osMessageQDef(SLAVE_ID_q, 2, slave_id);
 80023ba:	4bba      	ldr	r3, [pc, #744]	; (80026a4 <main+0x3bc>)
 80023bc:	f507 648d 	add.w	r4, r7, #1128	; 0x468
 80023c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SLAVE_ID_qHandle = osMessageCreate(osMessageQ(SLAVE_ID_q), NULL);
 80023c6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f015 f9f5 	bl	80177bc <osMessageCreate>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4ab5      	ldr	r2, [pc, #724]	; (80026ac <main+0x3c4>)
 80023d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDA_SEND_q */
  osMessageQDef(SDA_SEND_q, 2, sda_send);
 80023d8:	4bb2      	ldr	r3, [pc, #712]	; (80026a4 <main+0x3bc>)
 80023da:	f507 648b 	add.w	r4, r7, #1112	; 0x458
 80023de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SDA_SEND_qHandle = osMessageCreate(osMessageQ(SDA_SEND_q), NULL);
 80023e4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f015 f9e6 	bl	80177bc <osMessageCreate>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4aaf      	ldr	r2, [pc, #700]	; (80026b0 <main+0x3c8>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SYSTEM_PROCESS_q */
  osMessageQDef(SYSTEM_PROCESS_q, 2, system_process);
 80023f6:	4bab      	ldr	r3, [pc, #684]	; (80026a4 <main+0x3bc>)
 80023f8:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 80023fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SYSTEM_PROCESS_qHandle = osMessageCreate(osMessageQ(SYSTEM_PROCESS_q), NULL);
 8002402:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f015 f9d7 	bl	80177bc <osMessageCreate>
 800240e:	4603      	mov	r3, r0
 8002410:	4aa8      	ldr	r2, [pc, #672]	; (80026b4 <main+0x3cc>)
 8002412:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_PROCESS_q */
  osMessageQDef(DATA_PROCESS_q, 2, data_process);
 8002414:	4ba3      	ldr	r3, [pc, #652]	; (80026a4 <main+0x3bc>)
 8002416:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 800241a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800241c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DATA_PROCESS_qHandle = osMessageCreate(osMessageQ(DATA_PROCESS_q), NULL);
 8002420:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f015 f9c8 	bl	80177bc <osMessageCreate>
 800242c:	4603      	mov	r3, r0
 800242e:	4aa2      	ldr	r2, [pc, #648]	; (80026b8 <main+0x3d0>)
 8002430:	6013      	str	r3, [r2, #0]

  /* definition and creation of SLAVE_SEND_q */
  osMessageQDef(SLAVE_SEND_q, 2, slave_send);
 8002432:	4b9c      	ldr	r3, [pc, #624]	; (80026a4 <main+0x3bc>)
 8002434:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8002438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SLAVE_SEND_qHandle = osMessageCreate(osMessageQ(SLAVE_SEND_q), NULL);
 800243e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f015 f9b9 	bl	80177bc <osMessageCreate>
 800244a:	4603      	mov	r3, r0
 800244c:	4a9b      	ldr	r2, [pc, #620]	; (80026bc <main+0x3d4>)
 800244e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SETPOINT_q */
  osMessageQDef(SETPOINT_q, 2, setpoint);
 8002450:	4b94      	ldr	r3, [pc, #592]	; (80026a4 <main+0x3bc>)
 8002452:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8002456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SETPOINT_qHandle = osMessageCreate(osMessageQ(SETPOINT_q), NULL);
 800245c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f015 f9aa 	bl	80177bc <osMessageCreate>
 8002468:	4603      	mov	r3, r0
 800246a:	4a95      	ldr	r2, [pc, #596]	; (80026c0 <main+0x3d8>)
 800246c:	6013      	str	r3, [r2, #0]

  /* definition and creation of KP_KI_KD_q */
  osMessageQDef(KP_KI_KD_q, 2, kp_ki_kd);
 800246e:	4b8d      	ldr	r3, [pc, #564]	; (80026a4 <main+0x3bc>)
 8002470:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8002474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  KP_KI_KD_qHandle = osMessageCreate(osMessageQ(KP_KI_KD_q), NULL);
 800247a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f015 f99b 	bl	80177bc <osMessageCreate>
 8002486:	4603      	mov	r3, r0
 8002488:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <main+0x3dc>)
 800248a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GIVE_ME_q */
  osMessageQDef(GIVE_ME_q, 5, give_me);
 800248c:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <main+0x3e0>)
 800248e:	f507 747e 	add.w	r4, r7, #1016	; 0x3f8
 8002492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GIVE_ME_qHandle = osMessageCreate(osMessageQ(GIVE_ME_q), NULL);
 8002498:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f015 f98c 	bl	80177bc <osMessageCreate>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a89      	ldr	r2, [pc, #548]	; (80026cc <main+0x3e4>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of FEEDBACK_q */
  osMessageQDef(FEEDBACK_q, 2, feedback);
 80024aa:	4b7e      	ldr	r3, [pc, #504]	; (80026a4 <main+0x3bc>)
 80024ac:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 80024b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FEEDBACK_qHandle = osMessageCreate(osMessageQ(FEEDBACK_q), NULL);
 80024b6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f015 f97d 	bl	80177bc <osMessageCreate>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a82      	ldr	r2, [pc, #520]	; (80026d0 <main+0x3e8>)
 80024c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_LOGGING_q */
  osMessageQDef(DATA_LOGGING_q, 4, data_logging);
 80024c8:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <main+0x3ec>)
 80024ca:	f507 7476 	add.w	r4, r7, #984	; 0x3d8
 80024ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DATA_LOGGING_qHandle = osMessageCreate(osMessageQ(DATA_LOGGING_q), NULL);
 80024d4:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f015 f96e 	bl	80177bc <osMessageCreate>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a7d      	ldr	r2, [pc, #500]	; (80026d8 <main+0x3f0>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_OF_SLAVE_q */
  osMessageQDef(DATA_OF_SLAVE_q, 4, data_of_slave);
 80024e6:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <main+0x3ec>)
 80024e8:	f507 7472 	add.w	r4, r7, #968	; 0x3c8
 80024ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DATA_OF_SLAVE_qHandle = osMessageCreate(osMessageQ(DATA_OF_SLAVE_q), NULL);
 80024f2:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f015 f95f 	bl	80177bc <osMessageCreate>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a76      	ldr	r2, [pc, #472]	; (80026dc <main+0x3f4>)
 8002502:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_QUEUE_q */
  osMessageQDef(LCD_QUEUE_q, 7, lcd_queue);
 8002504:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <main+0x3f8>)
 8002506:	f507 746e 	add.w	r4, r7, #952	; 0x3b8
 800250a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LCD_QUEUE_qHandle = osMessageCreate(osMessageQ(LCD_QUEUE_q), NULL);
 8002510:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f015 f950 	bl	80177bc <osMessageCreate>
 800251c:	4603      	mov	r3, r0
 800251e:	4a71      	ldr	r2, [pc, #452]	; (80026e4 <main+0x3fc>)
 8002520:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_ACCU_q */
  osMessageQDef(DATA_ACCU_q, 10, data_accu);
 8002522:	4b71      	ldr	r3, [pc, #452]	; (80026e8 <main+0x400>)
 8002524:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8002528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DATA_ACCU_qHandle = osMessageCreate(osMessageQ(DATA_ACCU_q), NULL);
 800252e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f015 f941 	bl	80177bc <osMessageCreate>
 800253a:	4603      	mov	r3, r0
 800253c:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <main+0x404>)
 800253e:	6013      	str	r3, [r2, #0]

  /* definition and creation of CLOSE_CURRENT_q */
  osMessageQDef(CLOSE_CURRENT_q, 2, close_curent);
 8002540:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002544:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002548:	4a56      	ldr	r2, [pc, #344]	; (80026a4 <main+0x3bc>)
 800254a:	461c      	mov	r4, r3
 800254c:	4613      	mov	r3, r2
 800254e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CLOSE_CURRENT_qHandle = osMessageCreate(osMessageQ(CLOSE_CURRENT_q), NULL);
 8002554:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f015 f92e 	bl	80177bc <osMessageCreate>
 8002560:	4603      	mov	r3, r0
 8002562:	4a63      	ldr	r2, [pc, #396]	; (80026f0 <main+0x408>)
 8002564:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_LOG_q */
  osMessageQDef(DATA_LOG_q, 2, data_log);
 8002566:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800256a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800256e:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <main+0x3bc>)
 8002570:	461c      	mov	r4, r3
 8002572:	4613      	mov	r3, r2
 8002574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DATA_LOG_qHandle = osMessageCreate(osMessageQ(DATA_LOG_q), NULL);
 800257a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f015 f91b 	bl	80177bc <osMessageCreate>
 8002586:	4603      	mov	r3, r0
 8002588:	4a5a      	ldr	r2, [pc, #360]	; (80026f4 <main+0x40c>)
 800258a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ERROR_D_q */
  osMessageQDef(ERROR_D_q, 2, error_d);
 800258c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002590:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002594:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <main+0x3bc>)
 8002596:	461c      	mov	r4, r3
 8002598:	4613      	mov	r3, r2
 800259a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ERROR_D_qHandle = osMessageCreate(osMessageQ(ERROR_D_q), NULL);
 80025a0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f015 f908 	bl	80177bc <osMessageCreate>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <main+0x410>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of DUTY_Q_q */
  osMessageQDef(DUTY_Q_q, 2, duty_q);
 80025b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80025b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <main+0x3bc>)
 80025bc:	461c      	mov	r4, r3
 80025be:	4613      	mov	r3, r2
 80025c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DUTY_Q_qHandle = osMessageCreate(osMessageQ(DUTY_Q_q), NULL);
 80025c6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f015 f8f5 	bl	80177bc <osMessageCreate>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a49      	ldr	r2, [pc, #292]	; (80026fc <main+0x414>)
 80025d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of CURRENT_P_q */
  osMessageQDef(CURRENT_P_q, 2, current_p);
 80025d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80025dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025e0:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <main+0x3bc>)
 80025e2:	461c      	mov	r4, r3
 80025e4:	4613      	mov	r3, r2
 80025e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CURRENT_P_qHandle = osMessageCreate(osMessageQ(CURRENT_P_q), NULL);
 80025ec:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f015 f8e2 	bl	80177bc <osMessageCreate>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a41      	ldr	r2, [pc, #260]	; (8002700 <main+0x418>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_DATA_q */
  osMessageQDef(PID_DATA_q, 2, pid_data);
 80025fe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002602:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002606:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <main+0x3bc>)
 8002608:	461c      	mov	r4, r3
 800260a:	4613      	mov	r3, r2
 800260c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PID_DATA_qHandle = osMessageCreate(osMessageQ(PID_DATA_q), NULL);
 8002612:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f015 f8cf 	bl	80177bc <osMessageCreate>
 800261e:	4603      	mov	r3, r0
 8002620:	4a38      	ldr	r2, [pc, #224]	; (8002704 <main+0x41c>)
 8002622:	6013      	str	r3, [r2, #0]

  /* definition and creation of CURRENT_LIMIT_Q_q */
  osMessageQDef(CURRENT_LIMIT_Q_q, 2, current_limit_q);
 8002624:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002628:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <main+0x3bc>)
 800262e:	461c      	mov	r4, r3
 8002630:	4613      	mov	r3, r2
 8002632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CURRENT_LIMIT_Q_qHandle = osMessageCreate(osMessageQ(CURRENT_LIMIT_Q_q), NULL);
 8002638:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f015 f8bc 	bl	80177bc <osMessageCreate>
 8002644:	4603      	mov	r3, r0
 8002646:	4a30      	ldr	r2, [pc, #192]	; (8002708 <main+0x420>)
 8002648:	6013      	str	r3, [r2, #0]

  /* definition and creation of FLASH_DATA */
  osMessageQDef(FLASH_DATA, 2, flash_data);
 800264a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800264e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <main+0x3bc>)
 8002654:	461c      	mov	r4, r3
 8002656:	4613      	mov	r3, r2
 8002658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800265a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FLASH_DATAHandle = osMessageCreate(osMessageQ(FLASH_DATA), NULL);
 800265e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f015 f8a9 	bl	80177bc <osMessageCreate>
 800266a:	4603      	mov	r3, r0
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <main+0x424>)
 800266e:	6013      	str	r3, [r2, #0]

  /* definition and creation of FLASH_LOGGING */
  osMessageQDef(FLASH_LOGGING, 1, flash_logging);
 8002670:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002674:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002678:	4a25      	ldr	r2, [pc, #148]	; (8002710 <main+0x428>)
 800267a:	461c      	mov	r4, r3
 800267c:	4613      	mov	r3, r2
 800267e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FLASH_LOGGINGHandle = osMessageCreate(osMessageQ(FLASH_LOGGING), NULL);
 8002684:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	e042      	b.n	8002714 <main+0x42c>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	0800f169 	.word	0x0800f169
 8002698:	20001e88 	.word	0x20001e88
 800269c:	0800f19d 	.word	0x0800f19d
 80026a0:	20001e8c 	.word	0x20001e8c
 80026a4:	080201ac 	.word	0x080201ac
 80026a8:	20001e1c 	.word	0x20001e1c
 80026ac:	20001e20 	.word	0x20001e20
 80026b0:	20001e24 	.word	0x20001e24
 80026b4:	20001e28 	.word	0x20001e28
 80026b8:	20001e2c 	.word	0x20001e2c
 80026bc:	20001e30 	.word	0x20001e30
 80026c0:	20001e34 	.word	0x20001e34
 80026c4:	20001e38 	.word	0x20001e38
 80026c8:	080201bc 	.word	0x080201bc
 80026cc:	20001e3c 	.word	0x20001e3c
 80026d0:	20001e40 	.word	0x20001e40
 80026d4:	080201cc 	.word	0x080201cc
 80026d8:	20001e44 	.word	0x20001e44
 80026dc:	20001e48 	.word	0x20001e48
 80026e0:	080201dc 	.word	0x080201dc
 80026e4:	20001e4c 	.word	0x20001e4c
 80026e8:	080201ec 	.word	0x080201ec
 80026ec:	20001e50 	.word	0x20001e50
 80026f0:	20001e54 	.word	0x20001e54
 80026f4:	20001e58 	.word	0x20001e58
 80026f8:	20001e5c 	.word	0x20001e5c
 80026fc:	20001e60 	.word	0x20001e60
 8002700:	20001e64 	.word	0x20001e64
 8002704:	20001e68 	.word	0x20001e68
 8002708:	20001e6c 	.word	0x20001e6c
 800270c:	20001e70 	.word	0x20001e70
 8002710:	080201fc 	.word	0x080201fc
 8002714:	f015 f852 	bl	80177bc <osMessageCreate>
 8002718:	4603      	mov	r3, r0
 800271a:	4abe      	ldr	r2, [pc, #760]	; (8002a14 <main+0x72c>)
 800271c:	6013      	str	r3, [r2, #0]

  /* definition and creation of FLASH_READ_q */
  osMessageQDef(FLASH_READ_q, 2, flash_read);
 800271e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002722:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002726:	4abc      	ldr	r2, [pc, #752]	; (8002a18 <main+0x730>)
 8002728:	461c      	mov	r4, r3
 800272a:	4613      	mov	r3, r2
 800272c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FLASH_READ_qHandle = osMessageCreate(osMessageQ(FLASH_READ_q), NULL);
 8002732:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f015 f83f 	bl	80177bc <osMessageCreate>
 800273e:	4603      	mov	r3, r0
 8002740:	4ab6      	ldr	r2, [pc, #728]	; (8002a1c <main+0x734>)
 8002742:	6013      	str	r3, [r2, #0]

  /* definition and creation of WIFI_TEMP */
  osMessageQDef(WIFI_TEMP, 2, wifi_temp);
 8002744:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002748:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800274c:	4ab2      	ldr	r2, [pc, #712]	; (8002a18 <main+0x730>)
 800274e:	461c      	mov	r4, r3
 8002750:	4613      	mov	r3, r2
 8002752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WIFI_TEMPHandle = osMessageCreate(osMessageQ(WIFI_TEMP), NULL);
 8002758:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f015 f82c 	bl	80177bc <osMessageCreate>
 8002764:	4603      	mov	r3, r0
 8002766:	4aae      	ldr	r2, [pc, #696]	; (8002a20 <main+0x738>)
 8002768:	6013      	str	r3, [r2, #0]

  /* definition and creation of WIFI_CURR */
  osMessageQDef(WIFI_CURR, 2, wifi_curr);
 800276a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800276e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002772:	4aa9      	ldr	r2, [pc, #676]	; (8002a18 <main+0x730>)
 8002774:	461c      	mov	r4, r3
 8002776:	4613      	mov	r3, r2
 8002778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800277a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WIFI_CURRHandle = osMessageCreate(osMessageQ(WIFI_CURR), NULL);
 800277e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f015 f819 	bl	80177bc <osMessageCreate>
 800278a:	4603      	mov	r3, r0
 800278c:	4aa5      	ldr	r2, [pc, #660]	; (8002a24 <main+0x73c>)
 800278e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDA_CONN_q */
  osMessageQDef(SDA_CONN_q, 2, sda_conn);
 8002790:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002794:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002798:	4a9f      	ldr	r2, [pc, #636]	; (8002a18 <main+0x730>)
 800279a:	461c      	mov	r4, r3
 800279c:	4613      	mov	r3, r2
 800279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SDA_CONN_qHandle = osMessageCreate(osMessageQ(SDA_CONN_q), NULL);
 80027a4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f015 f806 	bl	80177bc <osMessageCreate>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4a9d      	ldr	r2, [pc, #628]	; (8002a28 <main+0x740>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  slaveidpool = osPoolCreate(osPool(slaveidpool));//POOL FOR ID.
 80027b6:	489d      	ldr	r0, [pc, #628]	; (8002a2c <main+0x744>)
 80027b8:	f014 fefe 	bl	80175b8 <osPoolCreate>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a9c      	ldr	r2, [pc, #624]	; (8002a30 <main+0x748>)
 80027c0:	6013      	str	r3, [r2, #0]
  sdasendpool = osPoolCreate(osPool(sdasendpool));
 80027c2:	489c      	ldr	r0, [pc, #624]	; (8002a34 <main+0x74c>)
 80027c4:	f014 fef8 	bl	80175b8 <osPoolCreate>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4a9b      	ldr	r2, [pc, #620]	; (8002a38 <main+0x750>)
 80027cc:	6013      	str	r3, [r2, #0]
  syspropool = osPoolCreate(osPool(syspropool));
 80027ce:	489b      	ldr	r0, [pc, #620]	; (8002a3c <main+0x754>)
 80027d0:	f014 fef2 	bl	80175b8 <osPoolCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a9a      	ldr	r2, [pc, #616]	; (8002a40 <main+0x758>)
 80027d8:	6013      	str	r3, [r2, #0]
  datappool = osPoolCreate(osPool(datappool));
 80027da:	489a      	ldr	r0, [pc, #616]	; (8002a44 <main+0x75c>)
 80027dc:	f014 feec 	bl	80175b8 <osPoolCreate>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4a99      	ldr	r2, [pc, #612]	; (8002a48 <main+0x760>)
 80027e4:	6013      	str	r3, [r2, #0]
  slavesendpool = osPoolCreate(osPool(slavesendpool));
 80027e6:	4899      	ldr	r0, [pc, #612]	; (8002a4c <main+0x764>)
 80027e8:	f014 fee6 	bl	80175b8 <osPoolCreate>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4a98      	ldr	r2, [pc, #608]	; (8002a50 <main+0x768>)
 80027f0:	6013      	str	r3, [r2, #0]
  sppool = osPoolCreate(osPool(sppool));
 80027f2:	4898      	ldr	r0, [pc, #608]	; (8002a54 <main+0x76c>)
 80027f4:	f014 fee0 	bl	80175b8 <osPoolCreate>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a97      	ldr	r2, [pc, #604]	; (8002a58 <main+0x770>)
 80027fc:	6013      	str	r3, [r2, #0]
  dlpool = osPoolCreate(osPool(dlpool));
 80027fe:	4897      	ldr	r0, [pc, #604]	; (8002a5c <main+0x774>)
 8002800:	f014 feda 	bl	80175b8 <osPoolCreate>
 8002804:	4603      	mov	r3, r0
 8002806:	4a96      	ldr	r2, [pc, #600]	; (8002a60 <main+0x778>)
 8002808:	6013      	str	r3, [r2, #0]
  currppool = osPoolCreate(osPool(currppool));
 800280a:	4896      	ldr	r0, [pc, #600]	; (8002a64 <main+0x77c>)
 800280c:	f014 fed4 	bl	80175b8 <osPoolCreate>
 8002810:	4603      	mov	r3, r0
 8002812:	4a95      	ldr	r2, [pc, #596]	; (8002a68 <main+0x780>)
 8002814:	6013      	str	r3, [r2, #0]
  flashpool = osPoolCreate(osPool(flashpool));
 8002816:	4895      	ldr	r0, [pc, #596]	; (8002a6c <main+0x784>)
 8002818:	f014 fece 	bl	80175b8 <osPoolCreate>
 800281c:	4603      	mov	r3, r0
 800281e:	4a94      	ldr	r2, [pc, #592]	; (8002a70 <main+0x788>)
 8002820:	6013      	str	r3, [r2, #0]
  flashreadpool = osPoolCreate(osPool(flashreadpool));
 8002822:	4894      	ldr	r0, [pc, #592]	; (8002a74 <main+0x78c>)
 8002824:	f014 fec8 	bl	80175b8 <osPoolCreate>
 8002828:	4603      	mov	r3, r0
 800282a:	4a93      	ldr	r2, [pc, #588]	; (8002a78 <main+0x790>)
 800282c:	6013      	str	r3, [r2, #0]
  flashlogpool = osPoolCreate(osPool(flashlogpool));
 800282e:	4893      	ldr	r0, [pc, #588]	; (8002a7c <main+0x794>)
 8002830:	f014 fec2 	bl	80175b8 <osPoolCreate>
 8002834:	4603      	mov	r3, r0
 8002836:	4a92      	ldr	r2, [pc, #584]	; (8002a80 <main+0x798>)
 8002838:	6013      	str	r3, [r2, #0]
  currlimitpool = osPoolCreate(osPool(currlimitpool));
 800283a:	4892      	ldr	r0, [pc, #584]	; (8002a84 <main+0x79c>)
 800283c:	f014 febc 	bl	80175b8 <osPoolCreate>
 8002840:	4603      	mov	r3, r0
 8002842:	4a91      	ldr	r2, [pc, #580]	; (8002a88 <main+0x7a0>)
 8002844:	6013      	str	r3, [r2, #0]
  closecurrmail = osMailCreate(osMailQ(closecurrmail), NULL);
 8002846:	2100      	movs	r1, #0
 8002848:	4890      	ldr	r0, [pc, #576]	; (8002a8c <main+0x7a4>)
 800284a:	f015 f893 	bl	8017974 <osMailCreate>
 800284e:	4603      	mov	r3, r0
 8002850:	4a8f      	ldr	r2, [pc, #572]	; (8002a90 <main+0x7a8>)
 8002852:	6013      	str	r3, [r2, #0]
  fbpool = osPoolCreate(osPool(fbpool));
 8002854:	488f      	ldr	r0, [pc, #572]	; (8002a94 <main+0x7ac>)
 8002856:	f014 feaf 	bl	80175b8 <osPoolCreate>
 800285a:	4603      	mov	r3, r0
 800285c:	4a8e      	ldr	r2, [pc, #568]	; (8002a98 <main+0x7b0>)
 800285e:	6013      	str	r3, [r2, #0]
  wifitempmail = osMailCreate(osMailQ(wifitempmail),NULL);
 8002860:	2100      	movs	r1, #0
 8002862:	488e      	ldr	r0, [pc, #568]	; (8002a9c <main+0x7b4>)
 8002864:	f015 f886 	bl	8017974 <osMailCreate>
 8002868:	4603      	mov	r3, r0
 800286a:	4a8d      	ldr	r2, [pc, #564]	; (8002aa0 <main+0x7b8>)
 800286c:	6013      	str	r3, [r2, #0]
  wificurrmail = osMailCreate(osMailQ(wificurrmail),NULL);
 800286e:	2100      	movs	r1, #0
 8002870:	488c      	ldr	r0, [pc, #560]	; (8002aa4 <main+0x7bc>)
 8002872:	f015 f87f 	bl	8017974 <osMailCreate>
 8002876:	4603      	mov	r3, r0
 8002878:	4a8b      	ldr	r2, [pc, #556]	; (8002aa8 <main+0x7c0>)
 800287a:	6013      	str	r3, [r2, #0]
  dutypool = osPoolCreate(osPool(dutypool));
 800287c:	488b      	ldr	r0, [pc, #556]	; (8002aac <main+0x7c4>)
 800287e:	f014 fe9b 	bl	80175b8 <osPoolCreate>
 8002882:	4603      	mov	r3, r0
 8002884:	4a8a      	ldr	r2, [pc, #552]	; (8002ab0 <main+0x7c8>)
 8002886:	6013      	str	r3, [r2, #0]
  lcdpool = osPoolCreate(osPool(lcdpool));
 8002888:	488a      	ldr	r0, [pc, #552]	; (8002ab4 <main+0x7cc>)
 800288a:	f014 fe95 	bl	80175b8 <osPoolCreate>
 800288e:	4603      	mov	r3, r0
 8002890:	4a89      	ldr	r2, [pc, #548]	; (8002ab8 <main+0x7d0>)
 8002892:	6013      	str	r3, [r2, #0]
  sdaconnpool = osPoolCreate(osPool(sdaconnpool));
 8002894:	4889      	ldr	r0, [pc, #548]	; (8002abc <main+0x7d4>)
 8002896:	f014 fe8f 	bl	80175b8 <osPoolCreate>
 800289a:	4603      	mov	r3, r0
 800289c:	4a88      	ldr	r2, [pc, #544]	; (8002ac0 <main+0x7d8>)
 800289e:	6013      	str	r3, [r2, #0]
  pidpool = osPoolCreate(osPool(pidpool));
 80028a0:	4888      	ldr	r0, [pc, #544]	; (8002ac4 <main+0x7dc>)
 80028a2:	f014 fe89 	bl	80175b8 <osPoolCreate>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a87      	ldr	r2, [pc, #540]	; (8002ac8 <main+0x7e0>)
 80028aa:	6013      	str	r3, [r2, #0]
  errorpool = osPoolCreate(osPool(errorpool));
 80028ac:	4887      	ldr	r0, [pc, #540]	; (8002acc <main+0x7e4>)
 80028ae:	f014 fe83 	bl	80175b8 <osPoolCreate>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a86      	ldr	r2, [pc, #536]	; (8002ad0 <main+0x7e8>)
 80028b6:	6013      	str	r3, [r2, #0]
  givepool = osPoolCreate(osPool(givepool));
 80028b8:	4886      	ldr	r0, [pc, #536]	; (8002ad4 <main+0x7ec>)
 80028ba:	f014 fe7d 	bl	80175b8 <osPoolCreate>
 80028be:	4603      	mov	r3, r0
 80028c0:	4a85      	ldr	r2, [pc, #532]	; (8002ad8 <main+0x7f0>)
 80028c2:	6013      	str	r3, [r2, #0]
  dataaccupool = osPoolCreate(osPool(dataaccupool));
 80028c4:	4885      	ldr	r0, [pc, #532]	; (8002adc <main+0x7f4>)
 80028c6:	f014 fe77 	bl	80175b8 <osPoolCreate>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a84      	ldr	r2, [pc, #528]	; (8002ae0 <main+0x7f8>)
 80028ce:	6013      	str	r3, [r2, #0]
  datalogpool = osPoolCreate(osPool(datalogpool));
 80028d0:	4884      	ldr	r0, [pc, #528]	; (8002ae4 <main+0x7fc>)
 80028d2:	f014 fe71 	bl	80175b8 <osPoolCreate>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a83      	ldr	r2, [pc, #524]	; (8002ae8 <main+0x800>)
 80028da:	6013      	str	r3, [r2, #0]
  dataofslavepool = osPoolCreate(osPool(dataofslavepool));
 80028dc:	4883      	ldr	r0, [pc, #524]	; (8002aec <main+0x804>)
 80028de:	f014 fe6b 	bl	80175b8 <osPoolCreate>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4a82      	ldr	r2, [pc, #520]	; (8002af0 <main+0x808>)
 80028e6:	6013      	str	r3, [r2, #0]
  kpkikdpool = osPoolCreate(osPool(kpkikdpool));
 80028e8:	4882      	ldr	r0, [pc, #520]	; (8002af4 <main+0x80c>)
 80028ea:	f014 fe65 	bl	80175b8 <osPoolCreate>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4a81      	ldr	r2, [pc, #516]	; (8002af8 <main+0x810>)
 80028f2:	6013      	str	r3, [r2, #0]
  lorasendpool = osPoolCreate(osPool(lorasendpool));
 80028f4:	4881      	ldr	r0, [pc, #516]	; (8002afc <main+0x814>)
 80028f6:	f014 fe5f 	bl	80175b8 <osPoolCreate>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <main+0x818>)
 80028fe:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2000);
 8002900:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002904:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002908:	4a7e      	ldr	r2, [pc, #504]	; (8002b04 <main+0x81c>)
 800290a:	461c      	mov	r4, r3
 800290c:	4615      	mov	r5, r2
 800290e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800291a:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f014 fd28 	bl	8017376 <osThreadCreate>
 8002926:	4603      	mov	r3, r0
 8002928:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <main+0x820>)
 800292a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LORA_RECEIVE */
  osThreadDef(LORA_RECEIVE, Start_LORA_RECEIVE, osPriorityNormal, 0, 2000);
 800292c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002930:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002934:	4a75      	ldr	r2, [pc, #468]	; (8002b0c <main+0x824>)
 8002936:	461c      	mov	r4, r3
 8002938:	4615      	mov	r5, r2
 800293a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LORA_RECEIVEHandle = osThreadCreate(osThread(LORA_RECEIVE), NULL);
 8002946:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f014 fd12 	bl	8017376 <osThreadCreate>
 8002952:	4603      	mov	r3, r0
 8002954:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <main+0x828>)
 8002956:	6013      	str	r3, [r2, #0]

  /* definition and creation of LORA_SEND */
  osThreadDef(LORA_SEND, Start_LORA_SEND, osPriorityNormal, 0, 1024);
 8002958:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800295c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8002960:	4a6c      	ldr	r2, [pc, #432]	; (8002b14 <main+0x82c>)
 8002962:	461c      	mov	r4, r3
 8002964:	4615      	mov	r5, r2
 8002966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800296e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LORA_SENDHandle = osThreadCreate(osThread(LORA_SEND), NULL);
 8002972:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f014 fcfc 	bl	8017376 <osThreadCreate>
 800297e:	4603      	mov	r3, r0
 8002980:	4a65      	ldr	r2, [pc, #404]	; (8002b18 <main+0x830>)
 8002982:	6013      	str	r3, [r2, #0]

  /* definition and creation of MAS_SEND_SLAVE */
  osThreadDef(MAS_SEND_SLAVE, Start_MAS_SEND_SLAVE, osPriorityNormal, 0, 1500);
 8002984:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002988:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800298c:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <main+0x834>)
 800298e:	461c      	mov	r4, r3
 8002990:	4615      	mov	r5, r2
 8002992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800299a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MAS_SEND_SLAVEHandle = osThreadCreate(osThread(MAS_SEND_SLAVE), NULL);
 800299e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f014 fce6 	bl	8017376 <osThreadCreate>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <main+0x838>)
 80029ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of SLAVE_REC_MAS */
  osThreadDef(SLAVE_REC_MAS, Start_SLAVE_REC_MAS, osPriorityNormal, 0, 2000);
 80029b0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80029b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80029b8:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <main+0x83c>)
 80029ba:	461c      	mov	r4, r3
 80029bc:	4615      	mov	r5, r2
 80029be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SLAVE_REC_MASHandle = osThreadCreate(osThread(SLAVE_REC_MAS), NULL);
 80029ca:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f014 fcd0 	bl	8017376 <osThreadCreate>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4a53      	ldr	r2, [pc, #332]	; (8002b28 <main+0x840>)
 80029da:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDA_SEND */
  osThreadDef(SDA_SEND, Start_SDA_SEND, osPriorityNormal, 0, 512);
 80029dc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80029e0:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <main+0x844>)
 80029e6:	461c      	mov	r4, r3
 80029e8:	4615      	mov	r5, r2
 80029ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDA_SENDHandle = osThreadCreate(osThread(SDA_SEND), NULL);
 80029f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f014 fcba 	bl	8017376 <osThreadCreate>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4a4a      	ldr	r2, [pc, #296]	; (8002b30 <main+0x848>)
 8002a06:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDA_RECEIVE */
  osThreadDef(SDA_RECEIVE, Start_SDA_RECEIVE, osPriorityAboveNormal, 0, 750);
 8002a08:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002a0c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8002a10:	e090      	b.n	8002b34 <main+0x84c>
 8002a12:	bf00      	nop
 8002a14:	20001e74 	.word	0x20001e74
 8002a18:	080201ac 	.word	0x080201ac
 8002a1c:	20001e78 	.word	0x20001e78
 8002a20:	20001e7c 	.word	0x20001e7c
 8002a24:	20001e80 	.word	0x20001e80
 8002a28:	20001e84 	.word	0x20001e84
 8002a2c:	080205d4 	.word	0x080205d4
 8002a30:	200015d4 	.word	0x200015d4
 8002a34:	08020640 	.word	0x08020640
 8002a38:	20001604 	.word	0x20001604
 8002a3c:	080205e0 	.word	0x080205e0
 8002a40:	200015d8 	.word	0x200015d8
 8002a44:	080206a0 	.word	0x080206a0
 8002a48:	20001624 	.word	0x20001624
 8002a4c:	08020604 	.word	0x08020604
 8002a50:	200015e4 	.word	0x200015e4
 8002a54:	080206c4 	.word	0x080206c4
 8002a58:	20001630 	.word	0x20001630
 8002a5c:	08020694 	.word	0x08020694
 8002a60:	20001620 	.word	0x20001620
 8002a64:	080206b8 	.word	0x080206b8
 8002a68:	2000162c 	.word	0x2000162c
 8002a6c:	080205bc 	.word	0x080205bc
 8002a70:	200015cc 	.word	0x200015cc
 8002a74:	0802064c 	.word	0x0802064c
 8002a78:	20001608 	.word	0x20001608
 8002a7c:	080205c8 	.word	0x080205c8
 8002a80:	200015d0 	.word	0x200015d0
 8002a84:	0802067c 	.word	0x0802067c
 8002a88:	20001618 	.word	0x20001618
 8002a8c:	0802061c 	.word	0x0802061c
 8002a90:	200015f0 	.word	0x200015f0
 8002a94:	080206dc 	.word	0x080206dc
 8002a98:	20001638 	.word	0x20001638
 8002a9c:	08020628 	.word	0x08020628
 8002aa0:	200015f8 	.word	0x200015f8
 8002aa4:	08020634 	.word	0x08020634
 8002aa8:	20001600 	.word	0x20001600
 8002aac:	080206d0 	.word	0x080206d0
 8002ab0:	20001634 	.word	0x20001634
 8002ab4:	08020658 	.word	0x08020658
 8002ab8:	2000160c 	.word	0x2000160c
 8002abc:	08020664 	.word	0x08020664
 8002ac0:	20001610 	.word	0x20001610
 8002ac4:	080206ac 	.word	0x080206ac
 8002ac8:	20001628 	.word	0x20001628
 8002acc:	08020688 	.word	0x08020688
 8002ad0:	2000161c 	.word	0x2000161c
 8002ad4:	08020670 	.word	0x08020670
 8002ad8:	20001614 	.word	0x20001614
 8002adc:	080205f8 	.word	0x080205f8
 8002ae0:	200015e0 	.word	0x200015e0
 8002ae4:	08020610 	.word	0x08020610
 8002ae8:	200015e8 	.word	0x200015e8
 8002aec:	080205ec 	.word	0x080205ec
 8002af0:	200015dc 	.word	0x200015dc
 8002af4:	080206e8 	.word	0x080206e8
 8002af8:	2000163c 	.word	0x2000163c
 8002afc:	080205b0 	.word	0x080205b0
 8002b00:	200015c8 	.word	0x200015c8
 8002b04:	0802020c 	.word	0x0802020c
 8002b08:	20001db4 	.word	0x20001db4
 8002b0c:	08020228 	.word	0x08020228
 8002b10:	20001db8 	.word	0x20001db8
 8002b14:	08020244 	.word	0x08020244
 8002b18:	20001dbc 	.word	0x20001dbc
 8002b1c:	08020260 	.word	0x08020260
 8002b20:	20001dc0 	.word	0x20001dc0
 8002b24:	0802027c 	.word	0x0802027c
 8002b28:	20001dc4 	.word	0x20001dc4
 8002b2c:	08020298 	.word	0x08020298
 8002b30:	20001dc8 	.word	0x20001dc8
 8002b34:	4ace      	ldr	r2, [pc, #824]	; (8002e70 <main+0xb88>)
 8002b36:	461c      	mov	r4, r3
 8002b38:	4615      	mov	r5, r2
 8002b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDA_RECEIVEHandle = osThreadCreate(osThread(SDA_RECEIVE), NULL);
 8002b46:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f014 fc12 	bl	8017376 <osThreadCreate>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4ac7      	ldr	r2, [pc, #796]	; (8002e74 <main+0xb8c>)
 8002b56:	6013      	str	r3, [r2, #0]

  /* definition and creation of SYSTEM_PROCESS */
  osThreadDef(SYSTEM_PROCESS, Start_SYSTEM_PROCESS, osPriorityNormal, 0, 1500);
 8002b58:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002b5c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002b60:	4ac5      	ldr	r2, [pc, #788]	; (8002e78 <main+0xb90>)
 8002b62:	461c      	mov	r4, r3
 8002b64:	4615      	mov	r5, r2
 8002b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SYSTEM_PROCESSHandle = osThreadCreate(osThread(SYSTEM_PROCESS), NULL);
 8002b72:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f014 fbfc 	bl	8017376 <osThreadCreate>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4abe      	ldr	r2, [pc, #760]	; (8002e7c <main+0xb94>)
 8002b82:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_PROCESS */
  osThreadDef(DATA_PROCESS, Start_DATA_PROCESS, osPriorityNormal, 0, 3000);
 8002b84:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002b88:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002b8c:	4abc      	ldr	r2, [pc, #752]	; (8002e80 <main+0xb98>)
 8002b8e:	461c      	mov	r4, r3
 8002b90:	4615      	mov	r5, r2
 8002b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DATA_PROCESSHandle = osThreadCreate(osThread(DATA_PROCESS), NULL);
 8002b9e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f014 fbe6 	bl	8017376 <osThreadCreate>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4ab5      	ldr	r2, [pc, #724]	; (8002e84 <main+0xb9c>)
 8002bae:	6013      	str	r3, [r2, #0]

  /* definition and creation of RCU_RECEIVE */
  osThreadDef(RCU_RECEIVE, Start_RCU_RECEIVE, osPriorityNormal, 0, 1500);
 8002bb0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002bb4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002bb8:	4ab3      	ldr	r2, [pc, #716]	; (8002e88 <main+0xba0>)
 8002bba:	461c      	mov	r4, r3
 8002bbc:	4615      	mov	r5, r2
 8002bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RCU_RECEIVEHandle = osThreadCreate(osThread(RCU_RECEIVE), NULL);
 8002bca:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f014 fbd0 	bl	8017376 <osThreadCreate>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4aac      	ldr	r2, [pc, #688]	; (8002e8c <main+0xba4>)
 8002bda:	6013      	str	r3, [r2, #0]

  /* definition and creation of WIFI_RECEIVE */
  osThreadDef(WIFI_RECEIVE, Start_WIFI_RECEIVE, osPriorityNormal, 0, 1024);
 8002bdc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002be0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8002be4:	4aaa      	ldr	r2, [pc, #680]	; (8002e90 <main+0xba8>)
 8002be6:	461c      	mov	r4, r3
 8002be8:	4615      	mov	r5, r2
 8002bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WIFI_RECEIVEHandle = osThreadCreate(osThread(WIFI_RECEIVE), NULL);
 8002bf6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f014 fbba 	bl	8017376 <osThreadCreate>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4aa3      	ldr	r2, [pc, #652]	; (8002e94 <main+0xbac>)
 8002c06:	6013      	str	r3, [r2, #0]

  /* definition and creation of CURRENT_TASK */
  osThreadDef(CURRENT_TASK, Start_CURRENT_TASK, osPriorityNormal, 0, 1500);
 8002c08:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002c0c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002c10:	4aa1      	ldr	r2, [pc, #644]	; (8002e98 <main+0xbb0>)
 8002c12:	461c      	mov	r4, r3
 8002c14:	4615      	mov	r5, r2
 8002c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CURRENT_TASKHandle = osThreadCreate(osThread(CURRENT_TASK), NULL);
 8002c22:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f014 fba4 	bl	8017376 <osThreadCreate>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4a9a      	ldr	r2, [pc, #616]	; (8002e9c <main+0xbb4>)
 8002c32:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_TASK */
  osThreadDef(PID_TASK, Start_PID_TASK, osPriorityNormal, 0, 1024);
 8002c34:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002c38:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8002c3c:	4a98      	ldr	r2, [pc, #608]	; (8002ea0 <main+0xbb8>)
 8002c3e:	461c      	mov	r4, r3
 8002c40:	4615      	mov	r5, r2
 8002c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_TASKHandle = osThreadCreate(osThread(PID_TASK), NULL);
 8002c4e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f014 fb8e 	bl	8017376 <osThreadCreate>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a91      	ldr	r2, [pc, #580]	; (8002ea4 <main+0xbbc>)
 8002c5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of VOLTAGE_TASK */
  osThreadDef(VOLTAGE_TASK, Start_VOLTAGE_TASK, osPriorityNormal, 0, 512);
 8002c60:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002c64:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8002c68:	4a8f      	ldr	r2, [pc, #572]	; (8002ea8 <main+0xbc0>)
 8002c6a:	461c      	mov	r4, r3
 8002c6c:	4615      	mov	r5, r2
 8002c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  VOLTAGE_TASKHandle = osThreadCreate(osThread(VOLTAGE_TASK), NULL);
 8002c7a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f014 fb78 	bl	8017376 <osThreadCreate>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a88      	ldr	r2, [pc, #544]	; (8002eac <main+0xbc4>)
 8002c8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of WHOLE_CURRENT */
  osThreadDef(WHOLE_CURRENT, Start_WHOLE_CURRENT, osPriorityNormal, 0, 4000);
 8002c8c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002c90:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8002c94:	4a86      	ldr	r2, [pc, #536]	; (8002eb0 <main+0xbc8>)
 8002c96:	461c      	mov	r4, r3
 8002c98:	4615      	mov	r5, r2
 8002c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WHOLE_CURRENTHandle = osThreadCreate(osThread(WHOLE_CURRENT), NULL);
 8002ca6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f014 fb62 	bl	8017376 <osThreadCreate>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4a7f      	ldr	r2, [pc, #508]	; (8002eb4 <main+0xbcc>)
 8002cb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC_TASK */
  osThreadDef(ADC_TASK, Start_ADC_TASK, osPriorityNormal, 0, 1024);
 8002cb8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002cbc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8002cc0:	4a7d      	ldr	r2, [pc, #500]	; (8002eb8 <main+0xbd0>)
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	4615      	mov	r5, r2
 8002cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TASKHandle = osThreadCreate(osThread(ADC_TASK), NULL);
 8002cd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f014 fb4c 	bl	8017376 <osThreadCreate>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a76      	ldr	r2, [pc, #472]	; (8002ebc <main+0xbd4>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* definition and creation of FLASH_WRITE */
  osThreadDef(FLASH_WRITE, Start_FLASH_WRITE, osPriorityNormal, 0, 1024);
 8002ce4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002ce8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8002cec:	4a74      	ldr	r2, [pc, #464]	; (8002ec0 <main+0xbd8>)
 8002cee:	461c      	mov	r4, r3
 8002cf0:	4615      	mov	r5, r2
 8002cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FLASH_WRITEHandle = osThreadCreate(osThread(FLASH_WRITE), NULL);
 8002cfe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f014 fb36 	bl	8017376 <osThreadCreate>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4a6d      	ldr	r2, [pc, #436]	; (8002ec4 <main+0xbdc>)
 8002d0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of POWER_ON_TEST */
  osThreadDef(POWER_ON_TEST, Start_POWER_ON_TEST, osPriorityAboveNormal, 0, 1024);
 8002d10:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002d14:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8002d18:	4a6b      	ldr	r2, [pc, #428]	; (8002ec8 <main+0xbe0>)
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	4615      	mov	r5, r2
 8002d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  POWER_ON_TESTHandle = osThreadCreate(osThread(POWER_ON_TEST), NULL);
 8002d2a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f014 fb20 	bl	8017376 <osThreadCreate>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4a64      	ldr	r2, [pc, #400]	; (8002ecc <main+0xbe4>)
 8002d3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_TASK */
  osThreadDef(LCD_TASK, Start_LCD_TASK, osPriorityNormal, 0, 128);
 8002d3c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002d40:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8002d44:	4a62      	ldr	r2, [pc, #392]	; (8002ed0 <main+0xbe8>)
 8002d46:	461c      	mov	r4, r3
 8002d48:	4615      	mov	r5, r2
 8002d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_TASKHandle = osThreadCreate(osThread(LCD_TASK), NULL);
 8002d56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f014 fb0a 	bl	8017376 <osThreadCreate>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a5b      	ldr	r2, [pc, #364]	; (8002ed4 <main+0xbec>)
 8002d66:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_LOGGING */
  osThreadDef(DATA_LOGGING, Start_DATA_LOGGING, osPriorityNormal, 0, 3000);
 8002d68:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002d6c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8002d70:	4a59      	ldr	r2, [pc, #356]	; (8002ed8 <main+0xbf0>)
 8002d72:	461c      	mov	r4, r3
 8002d74:	4615      	mov	r5, r2
 8002d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DATA_LOGGINGHandle = osThreadCreate(osThread(DATA_LOGGING), NULL);
 8002d82:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f014 faf4 	bl	8017376 <osThreadCreate>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <main+0xbf4>)
 8002d92:	6013      	str	r3, [r2, #0]

  /* definition and creation of CURRENT_PROCESS */
  osThreadDef(CURRENT_PROCESS, Start_CURRENT_PROCESS, osPriorityNormal, 0, 7000);
 8002d94:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002d98:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002d9c:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <main+0xbf8>)
 8002d9e:	461c      	mov	r4, r3
 8002da0:	4615      	mov	r5, r2
 8002da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CURRENT_PROCESSHandle = osThreadCreate(osThread(CURRENT_PROCESS), NULL);
 8002dae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f014 fade 	bl	8017376 <osThreadCreate>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <main+0xbfc>)
 8002dbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_REGULATION */
  osThreadDef(PID_REGULATION, Start_PID_REGULATION, osPriorityNormal, 0, 1000);
 8002dc0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002dc4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002dc8:	4a47      	ldr	r2, [pc, #284]	; (8002ee8 <main+0xc00>)
 8002dca:	461c      	mov	r4, r3
 8002dcc:	4615      	mov	r5, r2
 8002dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_REGULATIONHandle = osThreadCreate(osThread(PID_REGULATION), NULL);
 8002dda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f014 fac8 	bl	8017376 <osThreadCreate>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a40      	ldr	r2, [pc, #256]	; (8002eec <main+0xc04>)
 8002dea:	6013      	str	r3, [r2, #0]

  /* definition and creation of DATA_LOG_FLASH */
  osThreadDef(DATA_LOG_FLASH, Start_DATA_LOG_FLASH, osPriorityNormal, 0, 512);
 8002dec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002df0:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8002df4:	4a3e      	ldr	r2, [pc, #248]	; (8002ef0 <main+0xc08>)
 8002df6:	461c      	mov	r4, r3
 8002df8:	4615      	mov	r5, r2
 8002dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DATA_LOG_FLASHHandle = osThreadCreate(osThread(DATA_LOG_FLASH), NULL);
 8002e06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f014 fab2 	bl	8017376 <osThreadCreate>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a37      	ldr	r2, [pc, #220]	; (8002ef4 <main+0xc0c>)
 8002e16:	6013      	str	r3, [r2, #0]

  /* definition and creation of FLASH_READ */
  osThreadDef(FLASH_READ, Start_FLASH_READ, osPriorityNormal, 0, 1024);
 8002e18:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002e1c:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <main+0xc10>)
 8002e22:	461c      	mov	r4, r3
 8002e24:	4615      	mov	r5, r2
 8002e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FLASH_READHandle = osThreadCreate(osThread(FLASH_READ), NULL);
 8002e32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f014 fa9c 	bl	8017376 <osThreadCreate>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <main+0xc14>)
 8002e42:	6013      	str	r3, [r2, #0]

  /* definition and creation of WIFI_SEND */
  osThreadDef(WIFI_SEND, Start_WIFI_SEND, osPriorityNormal, 0, 512);
 8002e44:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002e48:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8002e4c:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <main+0xc18>)
 8002e4e:	461c      	mov	r4, r3
 8002e50:	4615      	mov	r5, r2
 8002e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WIFI_SENDHandle = osThreadCreate(osThread(WIFI_SEND), NULL);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f014 fa86 	bl	8017376 <osThreadCreate>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	e04a      	b.n	8002f04 <main+0xc1c>
 8002e6e:	bf00      	nop
 8002e70:	080202b4 	.word	0x080202b4
 8002e74:	20001dcc 	.word	0x20001dcc
 8002e78:	080202d0 	.word	0x080202d0
 8002e7c:	20001dd0 	.word	0x20001dd0
 8002e80:	080202ec 	.word	0x080202ec
 8002e84:	20001dd4 	.word	0x20001dd4
 8002e88:	08020308 	.word	0x08020308
 8002e8c:	20001dd8 	.word	0x20001dd8
 8002e90:	08020324 	.word	0x08020324
 8002e94:	20001ddc 	.word	0x20001ddc
 8002e98:	08020340 	.word	0x08020340
 8002e9c:	20001de0 	.word	0x20001de0
 8002ea0:	0802035c 	.word	0x0802035c
 8002ea4:	20001de4 	.word	0x20001de4
 8002ea8:	08020378 	.word	0x08020378
 8002eac:	20001de8 	.word	0x20001de8
 8002eb0:	08020394 	.word	0x08020394
 8002eb4:	20001dec 	.word	0x20001dec
 8002eb8:	080203b0 	.word	0x080203b0
 8002ebc:	20001df0 	.word	0x20001df0
 8002ec0:	080203cc 	.word	0x080203cc
 8002ec4:	20001df4 	.word	0x20001df4
 8002ec8:	080203e8 	.word	0x080203e8
 8002ecc:	20001df8 	.word	0x20001df8
 8002ed0:	08020404 	.word	0x08020404
 8002ed4:	20001dfc 	.word	0x20001dfc
 8002ed8:	08020420 	.word	0x08020420
 8002edc:	20001e00 	.word	0x20001e00
 8002ee0:	0802043c 	.word	0x0802043c
 8002ee4:	20001e04 	.word	0x20001e04
 8002ee8:	08020458 	.word	0x08020458
 8002eec:	20001e08 	.word	0x20001e08
 8002ef0:	08020474 	.word	0x08020474
 8002ef4:	20001e0c 	.word	0x20001e0c
 8002ef8:	08020490 	.word	0x08020490
 8002efc:	20001e10 	.word	0x20001e10
 8002f00:	080204ac 	.word	0x080204ac
 8002f04:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <main+0xcd0>)
 8002f06:	6013      	str	r3, [r2, #0]

  /* definition and creation of PROFILE_START */
  osThreadDef(PROFILE_START, Start_PROFILE_START, osPriorityNormal, 0, 2500);
 8002f08:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002f0c:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8002f10:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <main+0xcd4>)
 8002f12:	461c      	mov	r4, r3
 8002f14:	4615      	mov	r5, r2
 8002f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PROFILE_STARTHandle = osThreadCreate(osThread(PROFILE_START), NULL);
 8002f22:	463b      	mov	r3, r7
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f014 fa25 	bl	8017376 <osThreadCreate>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <main+0xcd8>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadSuspend(CURRENT_TASKHandle);
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <main+0xcdc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f014 fe51 	bl	8017bde <osThreadSuspend>
  osThreadSuspend(PROFILE_STARTHandle);
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <main+0xcd8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f014 fe4c 	bl	8017bde <osThreadSuspend>

  HAL_UART_Receive_DMA(&huart4, DATA_FROM_WIFI, 50);
 8002f46:	2232      	movs	r2, #50	; 0x32
 8002f48:	491f      	ldr	r1, [pc, #124]	; (8002fc8 <main+0xce0>)
 8002f4a:	4820      	ldr	r0, [pc, #128]	; (8002fcc <main+0xce4>)
 8002f4c:	f012 ffa3 	bl	8015e96 <HAL_UART_Receive_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx,DMA_IT_HT);
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <main+0xce8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <main+0xce8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0208 	bic.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6, DATA_FROM_LOCAL, 50);
 8002f60:	2232      	movs	r2, #50	; 0x32
 8002f62:	491c      	ldr	r1, [pc, #112]	; (8002fd4 <main+0xcec>)
 8002f64:	481c      	ldr	r0, [pc, #112]	; (8002fd8 <main+0xcf0>)
 8002f66:	f012 ff96 	bl	8015e96 <HAL_UART_Receive_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <main+0xcf4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <main+0xcf4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart5, DATA_FROM_MAS_SLAVE, 50);
 8002f7a:	2232      	movs	r2, #50	; 0x32
 8002f7c:	4918      	ldr	r1, [pc, #96]	; (8002fe0 <main+0xcf8>)
 8002f7e:	4819      	ldr	r0, [pc, #100]	; (8002fe4 <main+0xcfc>)
 8002f80:	f012 ff89 	bl	8015e96 <HAL_UART_Receive_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart5_rx,DMA_IT_HT);
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <main+0xd00>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <main+0xd00>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0208 	bic.w	r2, r2, #8
 8002f92:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)DATA_FROM_SDA, 34);
 8002f94:	2222      	movs	r2, #34	; 0x22
 8002f96:	4915      	ldr	r1, [pc, #84]	; (8002fec <main+0xd04>)
 8002f98:	4815      	ldr	r0, [pc, #84]	; (8002ff0 <main+0xd08>)
 8002f9a:	f012 ff7c 	bl	8015e96 <HAL_UART_Receive_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <main+0xd0c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <main+0xd0c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0208 	bic.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fae:	b662      	cpsie	i
}
 8002fb0:	bf00      	nop
  __enable_irq();
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002fb2:	f014 f9d9 	bl	8017368 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <main+0xcce>
 8002fb8:	20001e14 	.word	0x20001e14
 8002fbc:	080204c8 	.word	0x080204c8
 8002fc0:	20001e18 	.word	0x20001e18
 8002fc4:	20001de0 	.word	0x20001de0
 8002fc8:	20001eec 	.word	0x20001eec
 8002fcc:	2000198c 	.word	0x2000198c
 8002fd0:	20001c34 	.word	0x20001c34
 8002fd4:	20001f20 	.word	0x20001f20
 8002fd8:	20001bac 	.word	0x20001bac
 8002fdc:	20001d54 	.word	0x20001d54
 8002fe0:	20001e94 	.word	0x20001e94
 8002fe4:	20001a14 	.word	0x20001a14
 8002fe8:	20001c94 	.word	0x20001c94
 8002fec:	20001ec8 	.word	0x20001ec8
 8002ff0:	20001a9c 	.word	0x20001a9c
 8002ff4:	20001cf4 	.word	0x20001cf4

08002ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b094      	sub	sp, #80	; 0x50
 8002ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	2234      	movs	r2, #52	; 0x34
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f018 f903 	bl	801b212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800301c:	f00f fd9c 	bl	8012b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <SystemClock_Config+0xd4>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a29      	ldr	r2, [pc, #164]	; (80030cc <SystemClock_Config+0xd4>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <SystemClock_Config+0xd4>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <SystemClock_Config+0xd8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003040:	4a23      	ldr	r2, [pc, #140]	; (80030d0 <SystemClock_Config+0xd8>)
 8003042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <SystemClock_Config+0xd8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003054:	230a      	movs	r3, #10
 8003056:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003058:	2301      	movs	r3, #1
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800305c:	2310      	movs	r3, #16
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003060:	2301      	movs	r3, #1
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003064:	2302      	movs	r3, #2
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003068:	2300      	movs	r3, #0
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800306c:	2308      	movs	r3, #8
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003074:	2302      	movs	r3, #2
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003078:	2302      	movs	r3, #2
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800307c:	2302      	movs	r3, #2
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	4618      	mov	r0, r3
 8003086:	f00f fd77 	bl	8012b78 <HAL_RCC_OscConfig>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003090:	f00c f8a0 	bl	800f1d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003094:	230f      	movs	r3, #15
 8003096:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003098:	2302      	movs	r3, #2
 800309a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f010 f80e 	bl	80130d4 <HAL_RCC_ClockConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80030be:	f00c f889 	bl	800f1d4 <Error_Handler>
  }
}
 80030c2:	bf00      	nop
 80030c4:	3750      	adds	r7, #80	; 0x50
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000

080030d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030da:	463b      	mov	r3, r7
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <MX_ADC1_Init+0x98>)
 80030e8:	4a21      	ldr	r2, [pc, #132]	; (8003170 <MX_ADC1_Init+0x9c>)
 80030ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <MX_ADC1_Init+0x98>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <MX_ADC1_Init+0x98>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <MX_ADC1_Init+0x98>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <MX_ADC1_Init+0x98>)
 8003100:	2201      	movs	r2, #1
 8003102:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <MX_ADC1_Init+0x98>)
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <MX_ADC1_Init+0x98>)
 800310e:	2200      	movs	r2, #0
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <MX_ADC1_Init+0x98>)
 8003114:	4a17      	ldr	r2, [pc, #92]	; (8003174 <MX_ADC1_Init+0xa0>)
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <MX_ADC1_Init+0x98>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <MX_ADC1_Init+0x98>)
 8003120:	2201      	movs	r2, #1
 8003122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <MX_ADC1_Init+0x98>)
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <MX_ADC1_Init+0x98>)
 800312e:	2201      	movs	r2, #1
 8003130:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003132:	480e      	ldr	r0, [pc, #56]	; (800316c <MX_ADC1_Init+0x98>)
 8003134:	f00d f8be 	bl	80102b4 <HAL_ADC_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800313e:	f00c f849 	bl	800f1d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003142:	2301      	movs	r3, #1
 8003144:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003146:	2301      	movs	r3, #1
 8003148:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800314e:	463b      	mov	r3, r7
 8003150:	4619      	mov	r1, r3
 8003152:	4806      	ldr	r0, [pc, #24]	; (800316c <MX_ADC1_Init+0x98>)
 8003154:	f00d fa8c 	bl	8010670 <HAL_ADC_ConfigChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800315e:	f00c f839 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20001640 	.word	0x20001640
 8003170:	40012000 	.word	0x40012000
 8003174:	0f000001 	.word	0x0f000001

08003178 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800317e:	463b      	mov	r3, r7
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <MX_ADC2_Init+0x98>)
 800318c:	4a21      	ldr	r2, [pc, #132]	; (8003214 <MX_ADC2_Init+0x9c>)
 800318e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <MX_ADC2_Init+0x98>)
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <MX_ADC2_Init+0x98>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <MX_ADC2_Init+0x98>)
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <MX_ADC2_Init+0x98>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <MX_ADC2_Init+0x98>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <MX_ADC2_Init+0x98>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <MX_ADC2_Init+0x98>)
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <MX_ADC2_Init+0xa0>)
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <MX_ADC2_Init+0x98>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <MX_ADC2_Init+0x98>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_ADC2_Init+0x98>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <MX_ADC2_Init+0x98>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80031d6:	480e      	ldr	r0, [pc, #56]	; (8003210 <MX_ADC2_Init+0x98>)
 80031d8:	f00d f86c 	bl	80102b4 <HAL_ADC_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80031e2:	f00b fff7 	bl	800f1d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	4619      	mov	r1, r3
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <MX_ADC2_Init+0x98>)
 80031f8:	f00d fa3a 	bl	8010670 <HAL_ADC_ConfigChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003202:	f00b ffe7 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20001688 	.word	0x20001688
 8003214:	40012100 	.word	0x40012100
 8003218:	0f000001 	.word	0x0f000001

0800321c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <MX_ADC3_Init+0x64>)
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <MX_ADC3_Init+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <MX_ADC3_Init+0x64>)
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <MX_ADC3_Init+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <MX_ADC3_Init+0x64>)
 8003234:	2201      	movs	r2, #1
 8003236:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <MX_ADC3_Init+0x64>)
 800323a:	2201      	movs	r2, #1
 800323c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <MX_ADC3_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <MX_ADC3_Init+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <MX_ADC3_Init+0x64>)
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <MX_ADC3_Init+0x6c>)
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <MX_ADC3_Init+0x64>)
 8003254:	2200      	movs	r2, #0
 8003256:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <MX_ADC3_Init+0x64>)
 800325a:	2201      	movs	r2, #1
 800325c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <MX_ADC3_Init+0x64>)
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <MX_ADC3_Init+0x64>)
 8003268:	2201      	movs	r2, #1
 800326a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800326c:	4804      	ldr	r0, [pc, #16]	; (8003280 <MX_ADC3_Init+0x64>)
 800326e:	f00d f821 	bl	80102b4 <HAL_ADC_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_ADC3_Init+0x60>
  {
    Error_Handler();
 8003278:	f00b ffac 	bl	800f1d4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC3_Init 2 */
//
  /* USER CODE END ADC3_Init 2 */

}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200016d0 	.word	0x200016d0
 8003284:	40012200 	.word	0x40012200
 8003288:	0f000001 	.word	0x0f000001

0800328c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
//
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <MX_CRC_Init+0x50>)
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <MX_CRC_Init+0x54>)
 8003294:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <MX_CRC_Init+0x50>)
 8003298:	2201      	movs	r2, #1
 800329a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <MX_CRC_Init+0x50>)
 800329e:	2201      	movs	r2, #1
 80032a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 203;
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <MX_CRC_Init+0x50>)
 80032a4:	22cb      	movs	r2, #203	; 0xcb
 80032a6:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <MX_CRC_Init+0x50>)
 80032aa:	2210      	movs	r2, #16
 80032ac:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 255;
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <MX_CRC_Init+0x50>)
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MX_CRC_Init+0x50>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <MX_CRC_Init+0x50>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <MX_CRC_Init+0x50>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <MX_CRC_Init+0x50>)
 80032c8:	f00d fd04 	bl	8010cd4 <HAL_CRC_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80032d2:	f00b ff7f 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20001718 	.word	0x20001718
 80032e0:	40023000 	.word	0x40023000

080032e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <MX_I2C1_Init+0x74>)
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <MX_I2C1_Init+0x78>)
 80032ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <MX_I2C1_Init+0x74>)
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <MX_I2C1_Init+0x7c>)
 80032f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <MX_I2C1_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <MX_I2C1_Init+0x74>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <MX_I2C1_Init+0x74>)
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <MX_I2C1_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <MX_I2C1_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_I2C1_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <MX_I2C1_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800331e:	480e      	ldr	r0, [pc, #56]	; (8003358 <MX_I2C1_Init+0x74>)
 8003320:	f00e fcd8 	bl	8011cd4 <HAL_I2C_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800332a:	f00b ff53 	bl	800f1d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332e:	2100      	movs	r1, #0
 8003330:	4809      	ldr	r0, [pc, #36]	; (8003358 <MX_I2C1_Init+0x74>)
 8003332:	f00f fb1b 	bl	801296c <HAL_I2CEx_ConfigAnalogFilter>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800333c:	f00b ff4a 	bl	800f1d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003340:	2100      	movs	r1, #0
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_I2C1_Init+0x74>)
 8003344:	f00f fb5d 	bl	8012a02 <HAL_I2CEx_ConfigDigitalFilter>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800334e:	f00b ff41 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	2000173c 	.word	0x2000173c
 800335c:	40005400 	.word	0x40005400
 8003360:	00300f38 	.word	0x00300f38

08003364 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <MX_I2C2_Init+0x74>)
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <MX_I2C2_Init+0x78>)
 800336c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <MX_I2C2_Init+0x74>)
 8003370:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <MX_I2C2_Init+0x7c>)
 8003372:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <MX_I2C2_Init+0x74>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <MX_I2C2_Init+0x74>)
 800337c:	2201      	movs	r2, #1
 800337e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <MX_I2C2_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <MX_I2C2_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <MX_I2C2_Init+0x74>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <MX_I2C2_Init+0x74>)
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <MX_I2C2_Init+0x74>)
 800339a:	2200      	movs	r2, #0
 800339c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <MX_I2C2_Init+0x74>)
 80033a0:	f00e fc98 	bl	8011cd4 <HAL_I2C_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80033aa:	f00b ff13 	bl	800f1d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ae:	2100      	movs	r1, #0
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <MX_I2C2_Init+0x74>)
 80033b2:	f00f fadb 	bl	801296c <HAL_I2CEx_ConfigAnalogFilter>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80033bc:	f00b ff0a 	bl	800f1d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80033c0:	2100      	movs	r1, #0
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <MX_I2C2_Init+0x74>)
 80033c4:	f00f fb1d 	bl	8012a02 <HAL_I2CEx_ConfigDigitalFilter>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80033ce:	f00b ff01 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20001790 	.word	0x20001790
 80033dc:	40005800 	.word	0x40005800
 80033e0:	00707cbb 	.word	0x00707cbb

080033e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_IWDG_Init+0x34>)
 80033ea:	4a0c      	ldr	r2, [pc, #48]	; (800341c <MX_IWDG_Init+0x38>)
 80033ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <MX_IWDG_Init+0x34>)
 80033f0:	2203      	movs	r2, #3
 80033f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <MX_IWDG_Init+0x34>)
 80033f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80033fa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3999;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <MX_IWDG_Init+0x34>)
 80033fe:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003402:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003404:	4804      	ldr	r0, [pc, #16]	; (8003418 <MX_IWDG_Init+0x34>)
 8003406:	f00f fb48 	bl	8012a9a <HAL_IWDG_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003410:	f00b fee0 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200017e4 	.word	0x200017e4
 800341c:	40003000 	.word	0x40003000

08003420 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003434:	2300      	movs	r3, #0
 8003436:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <MX_RTC_Init+0xac>)
 800343a:	4a25      	ldr	r2, [pc, #148]	; (80034d0 <MX_RTC_Init+0xb0>)
 800343c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800343e:	4b23      	ldr	r3, [pc, #140]	; (80034cc <MX_RTC_Init+0xac>)
 8003440:	2200      	movs	r2, #0
 8003442:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <MX_RTC_Init+0xac>)
 8003446:	227f      	movs	r2, #127	; 0x7f
 8003448:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <MX_RTC_Init+0xac>)
 800344c:	22ff      	movs	r2, #255	; 0xff
 800344e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <MX_RTC_Init+0xac>)
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <MX_RTC_Init+0xac>)
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <MX_RTC_Init+0xac>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003462:	481a      	ldr	r0, [pc, #104]	; (80034cc <MX_RTC_Init+0xac>)
 8003464:	f010 fc76 	bl	8013d54 <HAL_RTC_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800346e:	f00b feb1 	bl	800f1d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003472:	2300      	movs	r3, #0
 8003474:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003476:	2300      	movs	r3, #0
 8003478:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800347a:	2300      	movs	r3, #0
 800347c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	2201      	movs	r2, #1
 800348a:	4619      	mov	r1, r3
 800348c:	480f      	ldr	r0, [pc, #60]	; (80034cc <MX_RTC_Init+0xac>)
 800348e:	f010 fce5 	bl	8013e5c <HAL_RTC_SetTime>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003498:	f00b fe9c 	bl	800f1d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800349c:	2301      	movs	r3, #1
 800349e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80034a0:	2301      	movs	r3, #1
 80034a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80034a4:	2301      	movs	r3, #1
 80034a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80034ac:	463b      	mov	r3, r7
 80034ae:	2201      	movs	r2, #1
 80034b0:	4619      	mov	r1, r3
 80034b2:	4806      	ldr	r0, [pc, #24]	; (80034cc <MX_RTC_Init+0xac>)
 80034b4:	f010 fdca 	bl	801404c <HAL_RTC_SetDate>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80034be:	f00b fe89 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200017f4 	.word	0x200017f4
 80034d0:	40002800 	.word	0x40002800

080034d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <MX_SPI1_Init+0x74>)
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <MX_SPI1_Init+0x78>)
 80034dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <MX_SPI1_Init+0x74>)
 80034e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_SPI1_Init+0x74>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034ec:	4b16      	ldr	r3, [pc, #88]	; (8003548 <MX_SPI1_Init+0x74>)
 80034ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <MX_SPI1_Init+0x74>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <MX_SPI1_Init+0x74>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <MX_SPI1_Init+0x74>)
 8003502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003506:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <MX_SPI1_Init+0x74>)
 800350a:	2210      	movs	r2, #16
 800350c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <MX_SPI1_Init+0x74>)
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <MX_SPI1_Init+0x74>)
 8003516:	2200      	movs	r2, #0
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <MX_SPI1_Init+0x74>)
 800351c:	2200      	movs	r2, #0
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <MX_SPI1_Init+0x74>)
 8003522:	2207      	movs	r2, #7
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <MX_SPI1_Init+0x74>)
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <MX_SPI1_Init+0x74>)
 800352e:	2208      	movs	r2, #8
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003532:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_SPI1_Init+0x74>)
 8003534:	f010 ff1e 	bl	8014374 <HAL_SPI_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800353e:	f00b fe49 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20001814 	.word	0x20001814
 800354c:	40013000 	.word	0x40013000

08003550 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <MX_SPI3_Init+0x78>)
 8003558:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <MX_SPI3_Init+0x74>)
 800355c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003560:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <MX_SPI3_Init+0x74>)
 800356a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800356e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003578:	2200      	movs	r2, #0
 800357a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <MX_SPI3_Init+0x74>)
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003586:	2220      	movs	r2, #32
 8003588:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <MX_SPI3_Init+0x74>)
 800358c:	2200      	movs	r2, #0
 800358e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003592:	2200      	movs	r2, #0
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <MX_SPI3_Init+0x74>)
 8003598:	2200      	movs	r2, #0
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <MX_SPI3_Init+0x74>)
 800359e:	2207      	movs	r2, #7
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <MX_SPI3_Init+0x74>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <MX_SPI3_Init+0x74>)
 80035aa:	2208      	movs	r2, #8
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80035ae:	4805      	ldr	r0, [pc, #20]	; (80035c4 <MX_SPI3_Init+0x74>)
 80035b0:	f010 fee0 	bl	8014374 <HAL_SPI_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80035ba:	f00b fe0b 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20001878 	.word	0x20001878
 80035c8:	40003c00 	.word	0x40003c00

080035cc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <MX_SPI4_Init+0x74>)
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <MX_SPI4_Init+0x78>)
 80035d4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <MX_SPI4_Init+0x74>)
 80035d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035dc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <MX_SPI4_Init+0x74>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <MX_SPI4_Init+0x74>)
 80035e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035ea:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <MX_SPI4_Init+0x74>)
 80035ee:	2202      	movs	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <MX_SPI4_Init+0x74>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_SPI4_Init+0x74>)
 80035fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fe:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_SPI4_Init+0x74>)
 8003602:	2238      	movs	r2, #56	; 0x38
 8003604:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_SPI4_Init+0x74>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_SPI4_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_SPI4_Init+0x74>)
 8003614:	2200      	movs	r2, #0
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_SPI4_Init+0x74>)
 800361a:	2207      	movs	r2, #7
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_SPI4_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_SPI4_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_SPI4_Init+0x74>)
 800362c:	f010 fea2 	bl	8014374 <HAL_SPI_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003636:	f00b fdcd 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200018dc 	.word	0x200018dc
 8003644:	40013400 	.word	0x40013400

08003648 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <MX_TIM4_Init+0x98>)
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <MX_TIM4_Init+0x9c>)
 800366a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2047;
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <MX_TIM4_Init+0x98>)
 800366e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003672:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <MX_TIM4_Init+0x98>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <MX_TIM4_Init+0x98>)
 800367c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003680:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003682:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <MX_TIM4_Init+0x98>)
 8003684:	2200      	movs	r2, #0
 8003686:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <MX_TIM4_Init+0x98>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800368e:	4814      	ldr	r0, [pc, #80]	; (80036e0 <MX_TIM4_Init+0x98>)
 8003690:	f011 fdd0 	bl	8015234 <HAL_TIM_Base_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800369a:	f00b fd9b 	bl	800f1d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800369e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	4619      	mov	r1, r3
 80036aa:	480d      	ldr	r0, [pc, #52]	; (80036e0 <MX_TIM4_Init+0x98>)
 80036ac:	f012 f84a 	bl	8015744 <HAL_TIM_ConfigClockSource>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80036b6:	f00b fd8d 	bl	800f1d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4806      	ldr	r0, [pc, #24]	; (80036e0 <MX_TIM4_Init+0x98>)
 80036c8:	f012 fa68 	bl	8015b9c <HAL_TIMEx_MasterConfigSynchronization>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80036d2:	f00b fd7f 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036d6:	bf00      	nop
 80036d8:	3720      	adds	r7, #32
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20001940 	.word	0x20001940
 80036e4:	40000800 	.word	0x40000800

080036e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <MX_UART4_Init+0x60>)
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <MX_UART4_Init+0x64>)
 80036f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <MX_UART4_Init+0x60>)
 80036f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <MX_UART4_Init+0x60>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_UART4_Init+0x60>)
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <MX_UART4_Init+0x60>)
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_UART4_Init+0x60>)
 800370e:	220c      	movs	r2, #12
 8003710:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <MX_UART4_Init+0x60>)
 8003714:	2200      	movs	r2, #0
 8003716:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <MX_UART4_Init+0x60>)
 800371a:	2200      	movs	r2, #0
 800371c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <MX_UART4_Init+0x60>)
 8003720:	2200      	movs	r2, #0
 8003722:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <MX_UART4_Init+0x60>)
 8003726:	2208      	movs	r2, #8
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <MX_UART4_Init+0x60>)
 800372c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003730:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003732:	4805      	ldr	r0, [pc, #20]	; (8003748 <MX_UART4_Init+0x60>)
 8003734:	f012 fade 	bl	8015cf4 <HAL_UART_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800373e:	f00b fd49 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	2000198c 	.word	0x2000198c
 800374c:	40004c00 	.word	0x40004c00

08003750 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003754:	4b15      	ldr	r3, [pc, #84]	; (80037ac <MX_UART5_Init+0x5c>)
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <MX_UART5_Init+0x60>)
 8003758:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <MX_UART5_Init+0x5c>)
 800375c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003760:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <MX_UART5_Init+0x5c>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <MX_UART5_Init+0x5c>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MX_UART5_Init+0x5c>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <MX_UART5_Init+0x5c>)
 8003776:	220c      	movs	r2, #12
 8003778:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_UART5_Init+0x5c>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <MX_UART5_Init+0x5c>)
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_UART5_Init+0x5c>)
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <MX_UART5_Init+0x5c>)
 800378e:	2200      	movs	r2, #0
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart5, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003792:	2300      	movs	r3, #0
 8003794:	2200      	movs	r2, #0
 8003796:	2100      	movs	r1, #0
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <MX_UART5_Init+0x5c>)
 800379a:	f013 fd53 	bl	8017244 <HAL_RS485Ex_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80037a4:	f00b fd16 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20001a14 	.word	0x20001a14
 80037b0:	40005000 	.word	0x40005000

080037b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <MX_USART1_UART_Init+0x60>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80037f6:	2300      	movs	r3, #0
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	4804      	ldr	r0, [pc, #16]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037fe:	f013 fd21 	bl	8017244 <HAL_RS485Ex_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003808:	f00b fce4 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20001a9c 	.word	0x20001a9c
 8003814:	40011000 	.word	0x40011000

08003818 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <MX_USART3_UART_Init+0x58>)
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <MX_USART3_UART_Init+0x5c>)
 8003820:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <MX_USART3_UART_Init+0x58>)
 8003824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003828:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <MX_USART3_UART_Init+0x58>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <MX_USART3_UART_Init+0x58>)
 8003832:	2200      	movs	r2, #0
 8003834:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <MX_USART3_UART_Init+0x58>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <MX_USART3_UART_Init+0x58>)
 800383e:	220c      	movs	r2, #12
 8003840:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <MX_USART3_UART_Init+0x58>)
 8003844:	2200      	movs	r2, #0
 8003846:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <MX_USART3_UART_Init+0x58>)
 800384a:	2200      	movs	r2, #0
 800384c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <MX_USART3_UART_Init+0x58>)
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <MX_USART3_UART_Init+0x58>)
 8003856:	2200      	movs	r2, #0
 8003858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800385a:	4805      	ldr	r0, [pc, #20]	; (8003870 <MX_USART3_UART_Init+0x58>)
 800385c:	f012 fa4a 	bl	8015cf4 <HAL_UART_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003866:	f00b fcb5 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20001b24 	.word	0x20001b24
 8003874:	40004800 	.word	0x40004800

08003878 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800387c:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <MX_USART6_UART_Init+0x60>)
 8003880:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003882:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 8003884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003888:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80038ba:	2300      	movs	r3, #0
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	4804      	ldr	r0, [pc, #16]	; (80038d4 <MX_USART6_UART_Init+0x5c>)
 80038c2:	f013 fcbf 	bl	8017244 <HAL_RS485Ex_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80038cc:	f00b fc82 	bl	800f1d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20001bac 	.word	0x20001bac
 80038d8:	40011400 	.word	0x40011400

080038dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <MX_DMA_Init+0x80>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <MX_DMA_Init+0x80>)
 80038e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <MX_DMA_Init+0x80>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038fa:	4b18      	ldr	r3, [pc, #96]	; (800395c <MX_DMA_Init+0x80>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <MX_DMA_Init+0x80>)
 8003900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <MX_DMA_Init+0x80>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2105      	movs	r1, #5
 8003916:	200b      	movs	r0, #11
 8003918:	f00d f9b2 	bl	8010c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800391c:	200b      	movs	r0, #11
 800391e:	f00d f9cb 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2105      	movs	r1, #5
 8003926:	200d      	movs	r0, #13
 8003928:	f00d f9aa 	bl	8010c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800392c:	200d      	movs	r0, #13
 800392e:	f00d f9c3 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2105      	movs	r1, #5
 8003936:	2039      	movs	r0, #57	; 0x39
 8003938:	f00d f9a2 	bl	8010c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800393c:	2039      	movs	r0, #57	; 0x39
 800393e:	f00d f9bb 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003942:	2200      	movs	r2, #0
 8003944:	2105      	movs	r1, #5
 8003946:	203a      	movs	r0, #58	; 0x3a
 8003948:	f00d f99a 	bl	8010c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800394c:	203a      	movs	r0, #58	; 0x3a
 800394e:	f00d f9b3 	bl	8010cb8 <HAL_NVIC_EnableIRQ>

}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 800397c:	f043 0310 	orr.w	r3, r3, #16
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800398e:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003994:	f043 0304 	orr.w	r3, r3, #4
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039a6:	4b63      	ldr	r3, [pc, #396]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a62      	ldr	r2, [pc, #392]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039ac:	f043 0320 	orr.w	r3, r3, #32
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b60      	ldr	r3, [pc, #384]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a5c      	ldr	r2, [pc, #368]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d6:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a50      	ldr	r2, [pc, #320]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b4e      	ldr	r3, [pc, #312]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a06:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b48      	ldr	r3, [pc, #288]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <MX_GPIO_Init+0x1d4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 8003a36:	2201      	movs	r2, #1
 8003a38:	2110      	movs	r1, #16
 8003a3a:	483f      	ldr	r0, [pc, #252]	; (8003b38 <MX_GPIO_Init+0x1d8>)
 8003a3c:	f00e f916 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8003a40:	2201      	movs	r2, #1
 8003a42:	2110      	movs	r1, #16
 8003a44:	483d      	ldr	r0, [pc, #244]	; (8003b3c <MX_GPIO_Init+0x1dc>)
 8003a46:	f00e f911 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_TX_SW_GPIO_Port, LORA_TX_SW_Pin, GPIO_PIN_SET);
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a50:	483b      	ldr	r0, [pc, #236]	; (8003b40 <MX_GPIO_Init+0x1e0>)
 8003a52:	f00e f90b 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003a5c:	4836      	ldr	r0, [pc, #216]	; (8003b38 <MX_GPIO_Init+0x1d8>)
 8003a5e:	f00e f905 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8003a62:	2201      	movs	r2, #1
 8003a64:	2104      	movs	r1, #4
 8003a66:	4837      	ldr	r0, [pc, #220]	; (8003b44 <MX_GPIO_Init+0x1e4>)
 8003a68:	f00e f900 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a72:	4832      	ldr	r0, [pc, #200]	; (8003b3c <MX_GPIO_Init+0x1dc>)
 8003a74:	f00e f8fa 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	; 0x80
 8003a7c:	4832      	ldr	r0, [pc, #200]	; (8003b48 <MX_GPIO_Init+0x1e8>)
 8003a7e:	f00e f8f5 	bl	8011c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CURRENT_CS_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = CURRENT_CS_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8003a82:	f641 4310 	movw	r3, #7184	; 0x1c10
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a90:	2300      	movs	r3, #0
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4827      	ldr	r0, [pc, #156]	; (8003b38 <MX_GPIO_Init+0x1d8>)
 8003a9c:	f00d ff22 	bl	80118e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|FLASH_CS_Pin;
 8003aa0:	f248 0310 	movw	r3, #32784	; 0x8010
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4820      	ldr	r0, [pc, #128]	; (8003b3c <MX_GPIO_Init+0x1dc>)
 8003aba:	f00d ff13 	bl	80118e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_TX_SW_Pin */
  GPIO_InitStruct.Pin = LORA_TX_SW_Pin;
 8003abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003acc:	2300      	movs	r3, #0
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LORA_TX_SW_GPIO_Port, &GPIO_InitStruct);
 8003ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	481a      	ldr	r0, [pc, #104]	; (8003b40 <MX_GPIO_Init+0x1e0>)
 8003ad8:	f00d ff04 	bl	80118e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_BUSY_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin|DIO1_Pin;
 8003adc:	230a      	movs	r3, #10
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aec:	4619      	mov	r1, r3
 8003aee:	4815      	ldr	r0, [pc, #84]	; (8003b44 <MX_GPIO_Init+0x1e4>)
 8003af0:	f00d fef8 	bl	80118e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 8003af4:	2304      	movs	r3, #4
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	2301      	movs	r3, #1
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480e      	ldr	r0, [pc, #56]	; (8003b44 <MX_GPIO_Init+0x1e4>)
 8003b0c:	f00d feea 	bl	80118e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b14:	2301      	movs	r3, #1
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b24:	4619      	mov	r1, r3
 8003b26:	4808      	ldr	r0, [pc, #32]	; (8003b48 <MX_GPIO_Init+0x1e8>)
 8003b28:	f00d fedc 	bl	80118e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b2c:	bf00      	nop
 8003b2e:	3738      	adds	r7, #56	; 0x38
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40021400 	.word	0x40021400
 8003b44:	40021800 	.word	0x40021800
 8003b48:	40020400 	.word	0x40020400

08003b4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0e2      	sub	sp, #392	; 0x188
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003b56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003b5a:	6018      	str	r0, [r3, #0]
	SDA_SEND *sda_msg;
	SDA_CONN	*connmsg;
	osEvent	connevt;
	SYSTEM_PROCESS	*syspromsg;

	uint8_t DUMMY_RADIO_SEND = 0x00;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	uint8_t DUMMY_RADIO_SEND_LENGTH = 1;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	static uint8_t CONN_CHECK_DATA = 0xFF;
	static uint8_t START_STOP_MODE_DATA = 0xFF;
	static uint8_t CONN_DATA=0;
	static int increment = 0;

	RADIO_START(LORA_DEVICE);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fd f9fd 	bl	8000f68 <RADIO_START>
	osDelay(1000);
 8003b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b72:	f013 fc58 	bl	8017426 <osDelay>
	osTimerStart(TCU_SDA_TIMERHandle, 1000);
 8003b76:	4bd1      	ldr	r3, [pc, #836]	; (8003ebc <StartDefaultTask+0x370>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f013 fc9a 	bl	80174b8 <osTimerStart>

	for(int i =0;i<50;i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003b8a:	e039      	b.n	8003c00 <StartDefaultTask+0xb4>
	{
		SLAVE_Read_Data((STARTING_ADD_OF_PROFILES+increment), P_DATA, 50);
 8003b8c:	4bcc      	ldr	r3, [pc, #816]	; (8003ec0 <StartDefaultTask+0x374>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b94:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8003b98:	2232      	movs	r2, #50	; 0x32
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd f863 	bl	8000c66 <SLAVE_Read_Data>
		increment = increment+50;
 8003ba0:	4bc7      	ldr	r3, [pc, #796]	; (8003ec0 <StartDefaultTask+0x374>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4ac6      	ldr	r2, [pc, #792]	; (8003ec0 <StartDefaultTask+0x374>)
 8003ba8:	6013      	str	r3, [r2, #0]
		for(int j =0;j<50;j++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003bb0:	e016      	b.n	8003be0 <StartDefaultTask+0x94>
		{
			PROFILES[i][j] = P_DATA[j];
 8003bb2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003bb6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003bba:	4413      	add	r3, r2
 8003bbc:	7818      	ldrb	r0, [r3, #0]
 8003bbe:	4ac1      	ldr	r2, [pc, #772]	; (8003ec4 <StartDefaultTask+0x378>)
 8003bc0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003bc4:	2132      	movs	r1, #50	; 0x32
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	441a      	add	r2, r3
 8003bcc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	701a      	strb	r2, [r3, #0]
		for(int j =0;j<50;j++)
 8003bd6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003be0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003be4:	2b31      	cmp	r3, #49	; 0x31
 8003be6:	dde4      	ble.n	8003bb2 <StartDefaultTask+0x66>
		}
		memset(P_DATA,0,50);
 8003be8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bec:	2232      	movs	r2, #50	; 0x32
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f017 fb0e 	bl	801b212 <memset>
	for(int i =0;i<50;i++)
 8003bf6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003c00:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003c04:	2b31      	cmp	r3, #49	; 0x31
 8003c06:	ddc1      	ble.n	8003b8c <StartDefaultTask+0x40>
	}

	SLAVE_Read_Data(STARTING_ADD_OF_ENGG_MODE,DATA_FROM_FLASH,200);
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	22c8      	movs	r2, #200	; 0xc8
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003c14:	f7fd f827 	bl	8000c66 <SLAVE_Read_Data>
	log_interval = (((int)DATA_FROM_FLASH[8])<<8)|(int)DATA_FROM_FLASH[9];
 8003c18:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003c1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c20:	7a1b      	ldrb	r3, [r3, #8]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003c28:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8003c2c:	7a52      	ldrb	r2, [r2, #9]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	4aa5      	ldr	r2, [pc, #660]	; (8003ec8 <StartDefaultTask+0x37c>)
 8003c32:	6013      	str	r3, [r2, #0]
	current_limit_value = (int)DATA_FROM_FLASH[7];
 8003c34:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003c38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c3c:	79db      	ldrb	r3, [r3, #7]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4ba2      	ldr	r3, [pc, #648]	; (8003ecc <StartDefaultTask+0x380>)
 8003c42:	601a      	str	r2, [r3, #0]

	sda_msg = osPoolAlloc(sdasendpool);
 8003c44:	4ba2      	ldr	r3, [pc, #648]	; (8003ed0 <StartDefaultTask+0x384>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f013 fd12 	bl	8017672 <osPoolAlloc>
 8003c4e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
	sda_msg->SDA_SEND_DATA[0] = SDA_CALLIBRATION_FACTOR;
 8003c52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c56:	22b8      	movs	r2, #184	; 0xb8
 8003c58:	701a      	strb	r2, [r3, #0]
	sda_msg->SDA_SEND_DATA[1] = DATA_FROM_FLASH[12];
 8003c5a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003c5e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c62:	7b1a      	ldrb	r2, [r3, #12]
 8003c64:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c68:	705a      	strb	r2, [r3, #1]
	sda_msg->SDA_SEND_DATA[2] = DATA_FROM_FLASH[13];
 8003c6a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003c6e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c72:	7b5a      	ldrb	r2, [r3, #13]
 8003c74:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c78:	709a      	strb	r2, [r3, #2]
	sda_msg->SDA_SEND_DATA[3] = DATA_FROM_FLASH[14];
 8003c7a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003c7e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c82:	7b9a      	ldrb	r2, [r3, #14]
 8003c84:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c88:	70da      	strb	r2, [r3, #3]
	sda_msg->SDA_SEND_DATA[4] = DATA_FROM_FLASH[15];
 8003c8a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003c8e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c92:	7bda      	ldrb	r2, [r3, #15]
 8003c94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c98:	711a      	strb	r2, [r3, #4]
	osMessagePut(SDA_SEND_qHandle, (uint32_t)sda_msg,100);
 8003c9a:	4b8e      	ldr	r3, [pc, #568]	; (8003ed4 <StartDefaultTask+0x388>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8003ca2:	2264      	movs	r2, #100	; 0x64
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f013 fdb1 	bl	801780c <osMessagePut>
	osDelay(1000);
 8003caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cae:	f013 fbba 	bl	8017426 <osDelay>
	frequency_t = (((uint32_t)DATA_FROM_FLASH[17])<<24)|(((uint32_t)DATA_FROM_FLASH[18])<<16)|(((uint32_t)DATA_FROM_FLASH[19])<<8)|((uint32_t)DATA_FROM_FLASH[20]);
 8003cb2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003cb6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cba:	7c5b      	ldrb	r3, [r3, #17]
 8003cbc:	061a      	lsls	r2, r3, #24
 8003cbe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003cc2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cc6:	7c9b      	ldrb	r3, [r3, #18]
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003cd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cd4:	7cdb      	ldrb	r3, [r3, #19]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003cde:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8003ce2:	7d12      	ldrb	r2, [r2, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	offset_t = (((uint32_t)DATA_FROM_FLASH[21])<<24)|(((uint32_t)DATA_FROM_FLASH[22])<<16)|(((uint32_t)DATA_FROM_FLASH[23])<<8)|((uint32_t)DATA_FROM_FLASH[24]);
 8003cea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003cee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cf2:	7d5b      	ldrb	r3, [r3, #21]
 8003cf4:	061a      	lsls	r2, r3, #24
 8003cf6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003cfa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cfe:	7d9b      	ldrb	r3, [r3, #22]
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003d08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d0c:	7ddb      	ldrb	r3, [r3, #23]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003d16:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8003d1a:	7e12      	ldrb	r2, [r2, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	Sperading_Factor = DATA_FROM_FLASH[25];
 8003d22:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003d26:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d2a:	7e5b      	ldrb	r3, [r3, #25]
 8003d2c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	Band_Width = (((uint16_t)DATA_FROM_FLASH[26])<<8)|((uint16_t)DATA_FROM_FLASH[27]);
 8003d30:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003d34:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d38:	7e9b      	ldrb	r3, [r3, #26]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	b21a      	sxth	r2, r3
 8003d3e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003d42:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d46:	7edb      	ldrb	r3, [r3, #27]
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
	switch(Band_Width)
 8003d52:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8003d56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d5a:	f000 808a 	beq.w	8003e72 <StartDefaultTask+0x326>
 8003d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d62:	f300 80bd 	bgt.w	8003ee0 <StartDefaultTask+0x394>
 8003d66:	2bfa      	cmp	r3, #250	; 0xfa
 8003d68:	f000 8087 	beq.w	8003e7a <StartDefaultTask+0x32e>
 8003d6c:	2bfa      	cmp	r3, #250	; 0xfa
 8003d6e:	f300 80b7 	bgt.w	8003ee0 <StartDefaultTask+0x394>
 8003d72:	2b3e      	cmp	r3, #62	; 0x3e
 8003d74:	dc7a      	bgt.n	8003e6c <StartDefaultTask+0x320>
 8003d76:	2b07      	cmp	r3, #7
 8003d78:	f2c0 80b2 	blt.w	8003ee0 <StartDefaultTask+0x394>
 8003d7c:	3b07      	subs	r3, #7
 8003d7e:	2b37      	cmp	r3, #55	; 0x37
 8003d80:	f200 80ae 	bhi.w	8003ee0 <StartDefaultTask+0x394>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <StartDefaultTask+0x240>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003ed9 	.word	0x08003ed9
 8003d90:	08003ee1 	.word	0x08003ee1
 8003d94:	08003ee1 	.word	0x08003ee1
 8003d98:	08003eb3 	.word	0x08003eb3
 8003d9c:	08003ee1 	.word	0x08003ee1
 8003da0:	08003ee1 	.word	0x08003ee1
 8003da4:	08003ee1 	.word	0x08003ee1
 8003da8:	08003ee1 	.word	0x08003ee1
 8003dac:	08003eab 	.word	0x08003eab
 8003db0:	08003ee1 	.word	0x08003ee1
 8003db4:	08003ee1 	.word	0x08003ee1
 8003db8:	08003ee1 	.word	0x08003ee1
 8003dbc:	08003ee1 	.word	0x08003ee1
 8003dc0:	08003ea3 	.word	0x08003ea3
 8003dc4:	08003ee1 	.word	0x08003ee1
 8003dc8:	08003ee1 	.word	0x08003ee1
 8003dcc:	08003ee1 	.word	0x08003ee1
 8003dd0:	08003ee1 	.word	0x08003ee1
 8003dd4:	08003ee1 	.word	0x08003ee1
 8003dd8:	08003ee1 	.word	0x08003ee1
 8003ddc:	08003ee1 	.word	0x08003ee1
 8003de0:	08003ee1 	.word	0x08003ee1
 8003de4:	08003ee1 	.word	0x08003ee1
 8003de8:	08003ee1 	.word	0x08003ee1
 8003dec:	08003e9b 	.word	0x08003e9b
 8003df0:	08003ee1 	.word	0x08003ee1
 8003df4:	08003ee1 	.word	0x08003ee1
 8003df8:	08003ee1 	.word	0x08003ee1
 8003dfc:	08003ee1 	.word	0x08003ee1
 8003e00:	08003ee1 	.word	0x08003ee1
 8003e04:	08003ee1 	.word	0x08003ee1
 8003e08:	08003ee1 	.word	0x08003ee1
 8003e0c:	08003ee1 	.word	0x08003ee1
 8003e10:	08003ee1 	.word	0x08003ee1
 8003e14:	08003e93 	.word	0x08003e93
 8003e18:	08003ee1 	.word	0x08003ee1
 8003e1c:	08003ee1 	.word	0x08003ee1
 8003e20:	08003ee1 	.word	0x08003ee1
 8003e24:	08003ee1 	.word	0x08003ee1
 8003e28:	08003ee1 	.word	0x08003ee1
 8003e2c:	08003ee1 	.word	0x08003ee1
 8003e30:	08003ee1 	.word	0x08003ee1
 8003e34:	08003ee1 	.word	0x08003ee1
 8003e38:	08003ee1 	.word	0x08003ee1
 8003e3c:	08003ee1 	.word	0x08003ee1
 8003e40:	08003ee1 	.word	0x08003ee1
 8003e44:	08003ee1 	.word	0x08003ee1
 8003e48:	08003ee1 	.word	0x08003ee1
 8003e4c:	08003ee1 	.word	0x08003ee1
 8003e50:	08003ee1 	.word	0x08003ee1
 8003e54:	08003ee1 	.word	0x08003ee1
 8003e58:	08003ee1 	.word	0x08003ee1
 8003e5c:	08003ee1 	.word	0x08003ee1
 8003e60:	08003ee1 	.word	0x08003ee1
 8003e64:	08003ee1 	.word	0x08003ee1
 8003e68:	08003e8b 	.word	0x08003e8b
 8003e6c:	2b7d      	cmp	r3, #125	; 0x7d
 8003e6e:	d008      	beq.n	8003e82 <StartDefaultTask+0x336>
 8003e70:	e036      	b.n	8003ee0 <StartDefaultTask+0x394>
	{
	case 500:
		Band_Width = 6;
 8003e72:	2306      	movs	r3, #6
 8003e74:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003e78:	e032      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 250:
		Band_Width = 5;
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003e80:	e02e      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 125:
		Band_Width = 4;
 8003e82:	2304      	movs	r3, #4
 8003e84:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003e88:	e02a      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 62:
		Band_Width = 3;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003e90:	e026      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 41:
		Band_Width = 10;
 8003e92:	230a      	movs	r3, #10
 8003e94:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003e98:	e022      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 31:
		Band_Width = 2;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003ea0:	e01e      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 20:
		Band_Width = 9;
 8003ea2:	2309      	movs	r3, #9
 8003ea4:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003ea8:	e01a      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 15:
		Band_Width = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003eb0:	e016      	b.n	8003ee0 <StartDefaultTask+0x394>
	case 10:
		Band_Width = 8;
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003eb8:	e012      	b.n	8003ee0 <StartDefaultTask+0x394>
 8003eba:	bf00      	nop
 8003ebc:	20001e88 	.word	0x20001e88
 8003ec0:	20002a3c 	.word	0x20002a3c
 8003ec4:	20001fb4 	.word	0x20001fb4
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	20000014 	.word	0x20000014
 8003ed0:	20001604 	.word	0x20001604
 8003ed4:	20001e24 	.word	0x20001e24
	case 7:
		Band_Width = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
		break;
 8003ede:	bf00      	nop
	}
	CR = DATA_FROM_FLASH[28];
 8003ee0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003ee4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ee8:	7f1b      	ldrb	r3, [r3, #28]
 8003eea:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	switch(CR)
 8003eee:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8003ef2:	3b2d      	subs	r3, #45	; 0x2d
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d81b      	bhi.n	8003f30 <StartDefaultTask+0x3e4>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <StartDefaultTask+0x3b4>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f19 	.word	0x08003f19
 8003f08:	08003f21 	.word	0x08003f21
 8003f0c:	08003f29 	.word	0x08003f29
	{
	case 45:
		CR =1 ;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		break;
 8003f16:	e00b      	b.n	8003f30 <StartDefaultTask+0x3e4>
	case 46:
		CR =2 ;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		break;
 8003f1e:	e007      	b.n	8003f30 <StartDefaultTask+0x3e4>
	case 47:
		CR =3 ;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		break;
 8003f26:	e003      	b.n	8003f30 <StartDefaultTask+0x3e4>
	case 48:
		CR =4 ;
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		break;
 8003f2e:	bf00      	nop
	}
	RADIO_SETUP_LORA(frequency_t, offset_t, Sperading_Factor, Band_Width, CR, LDRO_OFF);
 8003f30:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003f34:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8003f38:	b2d8      	uxtb	r0, r3
 8003f3a:	f897 2157 	ldrb.w	r2, [r7, #343]	; 0x157
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8003f4e:	f7fd f81e 	bl	8000f8e <RADIO_SETUP_LORA>
	RADIO_TRANSMIT((uint8_t *)&DUMMY_RADIO_SEND,DUMMY_RADIO_SEND_LENGTH,1000,TXPower,WAIT_TX);
 8003f52:	f897 1167 	ldrb.w	r1, [r7, #359]	; 0x167
 8003f56:	f207 103b 	addw	r0, r7, #315	; 0x13b
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2316      	movs	r3, #22
 8003f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f64:	f7fd fbfe 	bl	8001764 <RADIO_TRANSMIT>

	int pannel =0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	int index = 36;
 8003f6e:	2324      	movs	r3, #36	; 0x24
 8003f70:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	if(DATA_FROM_FLASH[index]==KP_KI_KD_DATA)
 8003f74:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003f78:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8003f7c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b2c      	cmp	r3, #44	; 0x2c
 8003f86:	d170      	bne.n	800406a <StartDefaultTask+0x51e>
	{

		for(int i =0;i<16;i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003f8e:	e068      	b.n	8004062 <StartDefaultTask+0x516>
		{
		pannel = (DATA_FROM_FLASH[index+1])/10;
 8003f90:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003f94:	3301      	adds	r3, #1
 8003f96:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003f9a:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	4a79      	ldr	r2, [pc, #484]	; (8004188 <StartDefaultTask+0x63c>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		if((pannel >=0)&&(pannel<=15))
 8003fae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db50      	blt.n	8004058 <StartDefaultTask+0x50c>
 8003fb6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	dc4c      	bgt.n	8004058 <StartDefaultTask+0x50c>
		{
			KP[pannel] = (DATA_FROM_FLASH[index+2])/10;
 8003fbe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003fc8:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8003fcc:	5cd3      	ldrb	r3, [r2, r3]
 8003fce:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <StartDefaultTask+0x63c>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe0:	4a6a      	ldr	r2, [pc, #424]	; (800418c <StartDefaultTask+0x640>)
 8003fe2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	edc3 7a00 	vstr	s15, [r3]
				KI[pannel] = (DATA_FROM_FLASH[index+3])/10;
 8003fee:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003ff2:	3303      	adds	r3, #3
 8003ff4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003ff8:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	4a62      	ldr	r2, [pc, #392]	; (8004188 <StartDefaultTask+0x63c>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004010:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <StartDefaultTask+0x644>)
 8004012:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	edc3 7a00 	vstr	s15, [r3]
				KD[pannel] = (DATA_FROM_FLASH[index+4])/10;
 800401e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004022:	3304      	adds	r3, #4
 8004024:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004028:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	4a56      	ldr	r2, [pc, #344]	; (8004188 <StartDefaultTask+0x63c>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004040:	4a54      	ldr	r2, [pc, #336]	; (8004194 <StartDefaultTask+0x648>)
 8004042:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	edc3 7a00 	vstr	s15, [r3]
				index = index+4;
 800404e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004052:	3304      	adds	r3, #4
 8004054:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		for(int i =0;i<16;i++)
 8004058:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800405c:	3301      	adds	r3, #1
 800405e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004062:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004066:	2b0f      	cmp	r3, #15
 8004068:	dd92      	ble.n	8003f90 <StartDefaultTask+0x444>
		}

		}
	}

	if(DATA_FROM_FLASH[192] == 1)
 800406a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800406e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004072:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004076:	2b01      	cmp	r3, #1
 8004078:	d145      	bne.n	8004106 <StartDefaultTask+0x5ba>
	{

		if(DATA_FROM_FLASH[138] == SYSTEM_STATE)
 800407a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800407e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004082:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004086:	2bc6      	cmp	r3, #198	; 0xc6
 8004088:	d13d      	bne.n	8004106 <StartDefaultTask+0x5ba>
		{
		syspromsg = osPoolAlloc(syspropool);
 800408a:	4b43      	ldr	r3, [pc, #268]	; (8004198 <StartDefaultTask+0x64c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f013 faef 	bl	8017672 <osPoolAlloc>
 8004094:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		for(int i =0;i<50;i++)
 8004098:	2300      	movs	r3, #0
 800409a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800409e:	e013      	b.n	80040c8 <StartDefaultTask+0x57c>
		{
		syspromsg->DATA_TO_PROCESS[i] = DATA_FOR_PROCESSING[i+141];
 80040a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040a4:	338d      	adds	r3, #141	; 0x8d
 80040a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040aa:	443b      	add	r3, r7
 80040ac:	f813 1c78 	ldrb.w	r1, [r3, #-120]
 80040b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80040b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040b8:	4413      	add	r3, r2
 80040ba:	460a      	mov	r2, r1
 80040bc:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<50;i++)
 80040be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040c2:	3301      	adds	r3, #1
 80040c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80040c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040cc:	2b31      	cmp	r3, #49	; 0x31
 80040ce:	dde7      	ble.n	80040a0 <StartDefaultTask+0x554>
		}
		osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 80040d0:	4b32      	ldr	r3, [pc, #200]	; (800419c <StartDefaultTask+0x650>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80040d8:	2264      	movs	r2, #100	; 0x64
 80040da:	4618      	mov	r0, r3
 80040dc:	f013 fb96 	bl	801780c <osMessagePut>
		DATA_FROM_FLASH[192] = 0;
 80040e0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80040e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		SLAVE_Erase_4K(STARTING_ADD_OF_ENGG_MODE);
 80040ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040f2:	f7fc fd41 	bl	8000b78 <SLAVE_Erase_4K>
		SLAVE_Write_Data(STARTING_ADD_OF_ENGG_MODE, (char*)DATA_FROM_FLASH,200);
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	22c8      	movs	r2, #200	; 0xc8
 80040fc:	4619      	mov	r1, r3
 80040fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004102:	f7fc fd67 	bl	8000bd4 <SLAVE_Write_Data>
	}

  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8004106:	4826      	ldr	r0, [pc, #152]	; (80041a0 <StartDefaultTask+0x654>)
 8004108:	f00e fd16 	bl	8012b38 <HAL_IWDG_Refresh>
	  connevt = osMessageGet(SDA_CONN_qHandle, 0);
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <StartDefaultTask+0x658>)
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004114:	2200      	movs	r2, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f013 fbb8 	bl	801788c <osMessageGet>
	  if(connevt.status == osEventMessage)
 800411c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004120:	2b10      	cmp	r3, #16
 8004122:	d10f      	bne.n	8004144 <StartDefaultTask+0x5f8>
	  {
		  connmsg = connevt.value.p;
 8004124:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004128:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		  CONN_DATA = connmsg->SDA_CONN_DATA[0];
 800412c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <StartDefaultTask+0x65c>)
 8004134:	701a      	strb	r2, [r3, #0]
		  osPoolFree(sdaconnpool, connmsg);
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <StartDefaultTask+0x660>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800413e:	4618      	mov	r0, r3
 8004140:	f013 fafb 	bl	801773a <osPoolFree>
	  }
	  if(CONN_DATA == 0)
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <StartDefaultTask+0x65c>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d118      	bne.n	800417e <StartDefaultTask+0x632>
	  {
	  sda_msg = osPoolAlloc(sdasendpool);
 800414c:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <StartDefaultTask+0x664>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f013 fa8e 	bl	8017672 <osPoolAlloc>
 8004156:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
	  sda_msg->SDA_SEND_DATA[0]=CONN_CHECK_DATA;
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <StartDefaultTask+0x668>)
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004162:	701a      	strb	r2, [r3, #0]
	  sda_msg->SDA_SEND_DATA[1]=START_STOP_MODE_DATA;
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <StartDefaultTask+0x66c>)
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800416c:	705a      	strb	r2, [r3, #1]
	  osMessagePut(SDA_SEND_qHandle, (uint32_t)sda_msg,10);
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <StartDefaultTask+0x670>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8004176:	220a      	movs	r2, #10
 8004178:	4618      	mov	r0, r3
 800417a:	f013 fb47 	bl	801780c <osMessagePut>
	  }
    osDelay(1000);
 800417e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004182:	f013 f950 	bl	8017426 <osDelay>
	  HAL_IWDG_Refresh(&hiwdg);
 8004186:	e7be      	b.n	8004106 <StartDefaultTask+0x5ba>
 8004188:	cccccccd 	.word	0xcccccccd
 800418c:	2000297c 	.word	0x2000297c
 8004190:	200029bc 	.word	0x200029bc
 8004194:	200029fc 	.word	0x200029fc
 8004198:	200015d8 	.word	0x200015d8
 800419c:	20001e28 	.word	0x20001e28
 80041a0:	200017e4 	.word	0x200017e4
 80041a4:	20001e84 	.word	0x20001e84
 80041a8:	20002a40 	.word	0x20002a40
 80041ac:	20001610 	.word	0x20001610
 80041b0:	20001604 	.word	0x20001604
 80041b4:	20000018 	.word	0x20000018
 80041b8:	20000019 	.word	0x20000019
 80041bc:	20001e24 	.word	0x20001e24

080041c0 <Start_LORA_RECEIVE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LORA_RECEIVE */
void Start_LORA_RECEIVE(void const * argument)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 80041c6:	af02      	add	r7, sp, #8
 80041c8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80041cc:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80041d0:	6018      	str	r0, [r3, #0]
	uint8_t DATA_OF_PROFILE[50];
	uint8_t Sperading_Factor;
	uint16_t Band_Width;
	uint32_t frequency_t;
	uint32_t offset_t;
    int pos =0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	static int state=0;
	static int z =0;
  /* Infinite loop */
  for(;;)
  {
	  memset(DATA_FROM_RCU,0,LORA_RX_BUFF_SIZE);
 80041d8:	4b9a      	ldr	r3, [pc, #616]	; (8004444 <Start_LORA_RECEIVE+0x284>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f017 f814 	bl	801b212 <memset>
	  RXPacketL = RADIO_RECEIVE(DATA_FROM_RCU, LORA_RX_BUFF_SIZE, 5000, WAIT_RX);
 80041ea:	4b96      	ldr	r3, [pc, #600]	; (8004444 <Start_LORA_RECEIVE+0x284>)
 80041ec:	7819      	ldrb	r1, [r3, #0]
 80041ee:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80041f2:	2301      	movs	r3, #1
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	f7fd f9b0 	bl	800155c <RADIO_RECEIVE>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f

		if(RXPacketL !=0)
 8004202:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8004206:	2b00      	cmp	r3, #0
 8004208:	f001 8352 	beq.w	80058b0 <Start_LORA_RECEIVE+0x16f0>
		{
		LORA_ERROR_DATA =0;
 800420c:	4b8e      	ldr	r3, [pc, #568]	; (8004448 <Start_LORA_RECEIVE+0x288>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
		DATA_FROM_RCU[0] = LORA_BIT;
 8004212:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004216:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
		if(DATA_FROM_RCU[1] == MODEM_BIT)
 800421e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004222:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	2b01      	cmp	r3, #1
 800422a:	f041 8341 	bne.w	80058b0 <Start_LORA_RECEIVE+0x16f0>
		{
		RECEIVED_CRC = DATA_FROM_RCU[LORA_RX_BUFF_SIZE-1];
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <Start_LORA_RECEIVE+0x284>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	3b01      	subs	r3, #1
 8004234:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004238:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
		CALCULATED_CRC = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FROM_RCU,(LORA_RX_BUFF_SIZE-1));
 8004242:	4b80      	ldr	r3, [pc, #512]	; (8004444 <Start_LORA_RECEIVE+0x284>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	461a      	mov	r2, r3
 800424a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800424e:	4619      	mov	r1, r3
 8004250:	487e      	ldr	r0, [pc, #504]	; (800444c <Start_LORA_RECEIVE+0x28c>)
 8004252:	f00c fda3 	bl	8010d9c <HAL_CRC_Calculate>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
		if(RECEIVED_CRC == CALCULATED_CRC)
 800425c:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 8004260:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 8004264:	429a      	cmp	r2, r3
 8004266:	f041 8323 	bne.w	80058b0 <Start_LORA_RECEIVE+0x16f0>
		{
		if((DATA_FROM_RCU[3] == SEARCHING_DEVICES) &&(DATA_FROM_RCU[4]!=MY_TCU_ID)&&(DATA_FROM_RCU[5]!=MY_TCU_ID)&&(DATA_FROM_RCU[6]!=MY_TCU_ID)&&(DATA_FROM_RCU[7]!=MY_TCU_ID))
 800426a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800426e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004272:	78db      	ldrb	r3, [r3, #3]
 8004274:	2b09      	cmp	r3, #9
 8004276:	d15f      	bne.n	8004338 <Start_LORA_RECEIVE+0x178>
 8004278:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800427c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d058      	beq.n	8004338 <Start_LORA_RECEIVE+0x178>
 8004286:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800428a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800428e:	795b      	ldrb	r3, [r3, #5]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d051      	beq.n	8004338 <Start_LORA_RECEIVE+0x178>
 8004294:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004298:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800429c:	799b      	ldrb	r3, [r3, #6]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d04a      	beq.n	8004338 <Start_LORA_RECEIVE+0x178>
 80042a2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80042a6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80042aa:	79db      	ldrb	r3, [r3, #7]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d043      	beq.n	8004338 <Start_LORA_RECEIVE+0x178>
		{
		WHOM_TO_GIVE_DATA = MODEM_SYSTEM;
 80042b0:	4b67      	ldr	r3, [pc, #412]	; (8004450 <Start_LORA_RECEIVE+0x290>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
		state = SEARCHING_DEVICES;
 80042b6:	4b67      	ldr	r3, [pc, #412]	; (8004454 <Start_LORA_RECEIVE+0x294>)
 80042b8:	2209      	movs	r2, #9
 80042ba:	601a      	str	r2, [r3, #0]
		sDate.Date = DATA_FROM_RCU[10];
 80042bc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80042c0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80042c4:	7a9b      	ldrb	r3, [r3, #10]
 80042c6:	f887 323a 	strb.w	r3, [r7, #570]	; 0x23a
		sDate.Month = DATA_FROM_RCU[11];
 80042ca:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80042ce:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80042d2:	7adb      	ldrb	r3, [r3, #11]
 80042d4:	f887 3239 	strb.w	r3, [r7, #569]	; 0x239
		sDate.Year = DATA_FROM_RCU[12];
 80042d8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80042dc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80042e0:	7b1b      	ldrb	r3, [r3, #12]
 80042e2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
		sTime.Hours = DATA_FROM_RCU[13];
 80042e6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80042ea:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80042ee:	7b5b      	ldrb	r3, [r3, #13]
 80042f0:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
		sTime.Minutes = DATA_FROM_RCU[14];
 80042f4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80042f8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80042fc:	7b9b      	ldrb	r3, [r3, #14]
 80042fe:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
		sTime.Seconds = DATA_FROM_RCU[15];
 8004302:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004306:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800430a:	7bdb      	ldrb	r3, [r3, #15]
 800430c:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8004310:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004314:	2201      	movs	r2, #1
 8004316:	4619      	mov	r1, r3
 8004318:	484f      	ldr	r0, [pc, #316]	; (8004458 <Start_LORA_RECEIVE+0x298>)
 800431a:	f00f fe97 	bl	801404c <HAL_RTC_SetDate>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800431e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004322:	2201      	movs	r2, #1
 8004324:	4619      	mov	r1, r3
 8004326:	484c      	ldr	r0, [pc, #304]	; (8004458 <Start_LORA_RECEIVE+0x298>)
 8004328:	f00f fd98 	bl	8013e5c <HAL_RTC_SetTime>
		osThreadSuspend(RCU_RECEIVEHandle);
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <Start_LORA_RECEIVE+0x29c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f013 fc54 	bl	8017bde <osThreadSuspend>
 8004336:	e06e      	b.n	8004416 <Start_LORA_RECEIVE+0x256>
		}
		else if(((DATA_FROM_RCU[3] == CLOSE_LOOP_START)||(DATA_FROM_RCU[3] == UPADTE_TEMP_OR_POWER)||(DATA_FROM_RCU[3] == OPEN_LOOP_START)||(DATA_FROM_RCU[3] == SLEEP)||(DATA_FROM_RCU[3]==SDA_CALLIBRATION)||(DATA_FROM_RCU[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_RCU[3]==CLOSE_LOOP_START_PROFILE)) && (DATA_FROM_RCU[2]==MY_TCU_ID))
 8004338:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800433c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	2b07      	cmp	r3, #7
 8004344:	d029      	beq.n	800439a <Start_LORA_RECEIVE+0x1da>
 8004346:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800434a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800434e:	78db      	ldrb	r3, [r3, #3]
 8004350:	2b05      	cmp	r3, #5
 8004352:	d022      	beq.n	800439a <Start_LORA_RECEIVE+0x1da>
 8004354:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004358:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800435c:	78db      	ldrb	r3, [r3, #3]
 800435e:	2b0d      	cmp	r3, #13
 8004360:	d01b      	beq.n	800439a <Start_LORA_RECEIVE+0x1da>
 8004362:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004366:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800436a:	78db      	ldrb	r3, [r3, #3]
 800436c:	2bf0      	cmp	r3, #240	; 0xf0
 800436e:	d014      	beq.n	800439a <Start_LORA_RECEIVE+0x1da>
 8004370:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004374:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004378:	78db      	ldrb	r3, [r3, #3]
 800437a:	2bce      	cmp	r3, #206	; 0xce
 800437c:	d00d      	beq.n	800439a <Start_LORA_RECEIVE+0x1da>
 800437e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004382:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	2bdd      	cmp	r3, #221	; 0xdd
 800438a:	d006      	beq.n	800439a <Start_LORA_RECEIVE+0x1da>
 800438c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004390:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004394:	78db      	ldrb	r3, [r3, #3]
 8004396:	2b77      	cmp	r3, #119	; 0x77
 8004398:	d10a      	bne.n	80043b0 <Start_LORA_RECEIVE+0x1f0>
 800439a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800439e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043a2:	789b      	ldrb	r3, [r3, #2]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d103      	bne.n	80043b0 <Start_LORA_RECEIVE+0x1f0>
		{
		state = PROCESS_DATA;
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <Start_LORA_RECEIVE+0x294>)
 80043aa:	2211      	movs	r2, #17
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e032      	b.n	8004416 <Start_LORA_RECEIVE+0x256>
		}
		else if(((DATA_FROM_RCU[3] == UPADTE_TEMP_OR_POWER)||(DATA_FROM_RCU[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_RCU[3]==CLOSE_LOOP_START_PROFILE)) && ((DATA_FROM_RCU[2]==ID_S_PRESENT[0])||(DATA_FROM_RCU[2]==ID_S_PRESENT[1])||(DATA_FROM_RCU[2]==ID_S_PRESENT[2])))
 80043b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80043b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043b8:	78db      	ldrb	r3, [r3, #3]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d00d      	beq.n	80043da <Start_LORA_RECEIVE+0x21a>
 80043be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80043c2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043c6:	78db      	ldrb	r3, [r3, #3]
 80043c8:	2bdd      	cmp	r3, #221	; 0xdd
 80043ca:	d006      	beq.n	80043da <Start_LORA_RECEIVE+0x21a>
 80043cc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80043d0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043d4:	78db      	ldrb	r3, [r3, #3]
 80043d6:	2b77      	cmp	r3, #119	; 0x77
 80043d8:	d11d      	bne.n	8004416 <Start_LORA_RECEIVE+0x256>
 80043da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80043de:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043e2:	789a      	ldrb	r2, [r3, #2]
 80043e4:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <Start_LORA_RECEIVE+0x2a0>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d011      	beq.n	8004410 <Start_LORA_RECEIVE+0x250>
 80043ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80043f0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80043f4:	789a      	ldrb	r2, [r3, #2]
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <Start_LORA_RECEIVE+0x2a0>)
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d008      	beq.n	8004410 <Start_LORA_RECEIVE+0x250>
 80043fe:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004402:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004406:	789a      	ldrb	r2, [r3, #2]
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <Start_LORA_RECEIVE+0x2a0>)
 800440a:	789b      	ldrb	r3, [r3, #2]
 800440c:	429a      	cmp	r2, r3
 800440e:	d102      	bne.n	8004416 <Start_LORA_RECEIVE+0x256>
		{
		state = SEND_DATA_TO_SLAVE;
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <Start_LORA_RECEIVE+0x294>)
 8004412:	2210      	movs	r2, #16
 8004414:	601a      	str	r2, [r3, #0]
		}

		switch(DATA_FROM_RCU[3])
 8004416:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800441a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800441e:	78db      	ldrb	r3, [r3, #3]
 8004420:	2bed      	cmp	r3, #237	; 0xed
 8004422:	f300 80d3 	bgt.w	80045cc <Start_LORA_RECEIVE+0x40c>
 8004426:	2bb4      	cmp	r3, #180	; 0xb4
 8004428:	da1c      	bge.n	8004464 <Start_LORA_RECEIVE+0x2a4>
 800442a:	2b55      	cmp	r3, #85	; 0x55
 800442c:	f000 80bc 	beq.w	80045a8 <Start_LORA_RECEIVE+0x3e8>
 8004430:	2b55      	cmp	r3, #85	; 0x55
 8004432:	f300 80cb 	bgt.w	80045cc <Start_LORA_RECEIVE+0x40c>
 8004436:	2b2c      	cmp	r3, #44	; 0x2c
 8004438:	f000 80ba 	beq.w	80045b0 <Start_LORA_RECEIVE+0x3f0>
 800443c:	2b4b      	cmp	r3, #75	; 0x4b
 800443e:	f000 80a7 	beq.w	8004590 <Start_LORA_RECEIVE+0x3d0>
 8004442:	e0c3      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
 8004444:	2000000a 	.word	0x2000000a
 8004448:	20000011 	.word	0x20000011
 800444c:	20001718 	.word	0x20001718
 8004450:	20001f5c 	.word	0x20001f5c
 8004454:	20002a44 	.word	0x20002a44
 8004458:	200017f4 	.word	0x200017f4
 800445c:	20001dd8 	.word	0x20001dd8
 8004460:	20001f54 	.word	0x20001f54
 8004464:	3bb4      	subs	r3, #180	; 0xb4
 8004466:	2b39      	cmp	r3, #57	; 0x39
 8004468:	f200 80b0 	bhi.w	80045cc <Start_LORA_RECEIVE+0x40c>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <Start_LORA_RECEIVE+0x2b4>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	08004589 	.word	0x08004589
 8004478:	080045cd 	.word	0x080045cd
 800447c:	080045cd 	.word	0x080045cd
 8004480:	080045cd 	.word	0x080045cd
 8004484:	080045cd 	.word	0x080045cd
 8004488:	0800455d 	.word	0x0800455d
 800448c:	0800457d 	.word	0x0800457d
 8004490:	080045bd 	.word	0x080045bd
 8004494:	080045cd 	.word	0x080045cd
 8004498:	080045cd 	.word	0x080045cd
 800449c:	080045cd 	.word	0x080045cd
 80044a0:	08004571 	.word	0x08004571
 80044a4:	080045cd 	.word	0x080045cd
 80044a8:	080045cd 	.word	0x080045cd
 80044ac:	080045cd 	.word	0x080045cd
 80044b0:	080045cd 	.word	0x080045cd
 80044b4:	080045cd 	.word	0x080045cd
 80044b8:	080045cd 	.word	0x080045cd
 80044bc:	080045cd 	.word	0x080045cd
 80044c0:	080045cd 	.word	0x080045cd
 80044c4:	080045cd 	.word	0x080045cd
 80044c8:	080045cd 	.word	0x080045cd
 80044cc:	080045cd 	.word	0x080045cd
 80044d0:	080045cd 	.word	0x080045cd
 80044d4:	080045cd 	.word	0x080045cd
 80044d8:	080045cd 	.word	0x080045cd
 80044dc:	0800459d 	.word	0x0800459d
 80044e0:	08004565 	.word	0x08004565
 80044e4:	080045cd 	.word	0x080045cd
 80044e8:	080045cd 	.word	0x080045cd
 80044ec:	080045cd 	.word	0x080045cd
 80044f0:	080045cd 	.word	0x080045cd
 80044f4:	080045cd 	.word	0x080045cd
 80044f8:	080045cd 	.word	0x080045cd
 80044fc:	080045cd 	.word	0x080045cd
 8004500:	080045cd 	.word	0x080045cd
 8004504:	080045cd 	.word	0x080045cd
 8004508:	080045cd 	.word	0x080045cd
 800450c:	080045cd 	.word	0x080045cd
 8004510:	080045cd 	.word	0x080045cd
 8004514:	080045cd 	.word	0x080045cd
 8004518:	080045cd 	.word	0x080045cd
 800451c:	080045cd 	.word	0x080045cd
 8004520:	080045cd 	.word	0x080045cd
 8004524:	080045cd 	.word	0x080045cd
 8004528:	080045cd 	.word	0x080045cd
 800452c:	080045cd 	.word	0x080045cd
 8004530:	080045cd 	.word	0x080045cd
 8004534:	080045cd 	.word	0x080045cd
 8004538:	080045cd 	.word	0x080045cd
 800453c:	080045cd 	.word	0x080045cd
 8004540:	080045cd 	.word	0x080045cd
 8004544:	080045cd 	.word	0x080045cd
 8004548:	080045cd 	.word	0x080045cd
 800454c:	080045cd 	.word	0x080045cd
 8004550:	080045cd 	.word	0x080045cd
 8004554:	080045cd 	.word	0x080045cd
 8004558:	080045c5 	.word	0x080045c5
		{
		case FETCH_BIST:
			state = FETCH_BIST;
 800455c:	4bcb      	ldr	r3, [pc, #812]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 800455e:	22b9      	movs	r2, #185	; 0xb9
 8004560:	601a      	str	r2, [r3, #0]
			break;
 8004562:	e033      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case CURRENT_LIMIT:
			SEND_ACK();
 8004564:	f7fd fdd6 	bl	8002114 <SEND_ACK>
			state = CURRENT_LIMIT;
 8004568:	4bc8      	ldr	r3, [pc, #800]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 800456a:	22cf      	movs	r2, #207	; 0xcf
 800456c:	601a      	str	r2, [r3, #0]
			break;
 800456e:	e02d      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case LOGGING_INTERVAL:
			SEND_ACK();
 8004570:	f7fd fdd0 	bl	8002114 <SEND_ACK>
			state = LOGGING_INTERVAL;
 8004574:	4bc5      	ldr	r3, [pc, #788]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 8004576:	22bf      	movs	r2, #191	; 0xbf
 8004578:	601a      	str	r2, [r3, #0]
			break;
 800457a:	e027      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case LORA_PARAMETERS:
			SEND_ACK();
 800457c:	f7fd fdca 	bl	8002114 <SEND_ACK>
			state = LORA_PARAMETERS;
 8004580:	4bc2      	ldr	r3, [pc, #776]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 8004582:	22ba      	movs	r2, #186	; 0xba
 8004584:	601a      	str	r2, [r3, #0]
			break;
 8004586:	e021      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case FETCH_DATA:
			state = FETCH_DATA;
 8004588:	4bc0      	ldr	r3, [pc, #768]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 800458a:	22b4      	movs	r2, #180	; 0xb4
 800458c:	601a      	str	r2, [r3, #0]
			break;
 800458e:	e01d      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case CLEAR_FLASH:
			SEND_ACK();
 8004590:	f7fd fdc0 	bl	8002114 <SEND_ACK>
			state = CLEAR_FLASH;
 8004594:	4bbd      	ldr	r3, [pc, #756]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 8004596:	224b      	movs	r2, #75	; 0x4b
 8004598:	601a      	str	r2, [r3, #0]
			break;
 800459a:	e017      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case SDA_CALLIBRATION:
			SEND_ACK();
 800459c:	f7fd fdba 	bl	8002114 <SEND_ACK>
			state = SDA_CALLIBRATION;
 80045a0:	4bba      	ldr	r3, [pc, #744]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80045a2:	22ce      	movs	r2, #206	; 0xce
 80045a4:	601a      	str	r2, [r3, #0]
			break;
 80045a6:	e011      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case UPDATE_PROFILE:

			state = UPDATE_PROFILE;
 80045a8:	4bb8      	ldr	r3, [pc, #736]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80045aa:	2255      	movs	r2, #85	; 0x55
 80045ac:	601a      	str	r2, [r3, #0]
			break;
 80045ae:	e00d      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case KP_KI_KD_DATA:
			SEND_ACK();
 80045b0:	f7fd fdb0 	bl	8002114 <SEND_ACK>
			state = KP_KI_KD_DATA;
 80045b4:	4bb5      	ldr	r3, [pc, #724]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80045b6:	222c      	movs	r2, #44	; 0x2c
 80045b8:	601a      	str	r2, [r3, #0]
			break;
 80045ba:	e007      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case MASTER_SLAVE_CONFIG:
			state = MASTER_SLAVE_CONFIG;
 80045bc:	4bb3      	ldr	r3, [pc, #716]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80045be:	22bb      	movs	r2, #187	; 0xbb
 80045c0:	601a      	str	r2, [r3, #0]
			break;
 80045c2:	e003      	b.n	80045cc <Start_LORA_RECEIVE+0x40c>
		case RESET_MAS_SLAVE:
			state = RESET_MAS_SLAVE;
 80045c4:	4bb1      	ldr	r3, [pc, #708]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80045c6:	22ed      	movs	r2, #237	; 0xed
 80045c8:	601a      	str	r2, [r3, #0]
			break;
 80045ca:	bf00      	nop
		}
		switch(state)
 80045cc:	4baf      	ldr	r3, [pc, #700]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2bed      	cmp	r3, #237	; 0xed
 80045d2:	f301 8156 	bgt.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 80045d6:	2bb4      	cmp	r3, #180	; 0xb4
 80045d8:	da1f      	bge.n	800461a <Start_LORA_RECEIVE+0x45a>
 80045da:	2b55      	cmp	r3, #85	; 0x55
 80045dc:	f000 87d1 	beq.w	8005582 <Start_LORA_RECEIVE+0x13c2>
 80045e0:	2b55      	cmp	r3, #85	; 0x55
 80045e2:	f301 814e 	bgt.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 80045e6:	2b4b      	cmp	r3, #75	; 0x4b
 80045e8:	f000 817e 	beq.w	80048e8 <Start_LORA_RECEIVE+0x728>
 80045ec:	2b4b      	cmp	r3, #75	; 0x4b
 80045ee:	f301 8148 	bgt.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 80045f2:	2b2c      	cmp	r3, #44	; 0x2c
 80045f4:	f000 822c 	beq.w	8004a50 <Start_LORA_RECEIVE+0x890>
 80045f8:	2b2c      	cmp	r3, #44	; 0x2c
 80045fa:	f301 8142 	bgt.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 80045fe:	2b11      	cmp	r3, #17
 8004600:	f000 86e0 	beq.w	80053c4 <Start_LORA_RECEIVE+0x1204>
 8004604:	2b11      	cmp	r3, #17
 8004606:	f301 813c 	bgt.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 800460a:	2b09      	cmp	r3, #9
 800460c:	f000 845e 	beq.w	8004ecc <Start_LORA_RECEIVE+0xd0c>
 8004610:	2b10      	cmp	r3, #16
 8004612:	f001 8053 	beq.w	80056bc <Start_LORA_RECEIVE+0x14fc>
 8004616:	f001 b934 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 800461a:	3bb4      	subs	r3, #180	; 0xb4
 800461c:	2b39      	cmp	r3, #57	; 0x39
 800461e:	f201 8130 	bhi.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <Start_LORA_RECEIVE+0x468>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	08004855 	.word	0x08004855
 800462c:	08005883 	.word	0x08005883
 8004630:	08005883 	.word	0x08005883
 8004634:	08005883 	.word	0x08005883
 8004638:	08005883 	.word	0x08005883
 800463c:	080048b1 	.word	0x080048b1
 8004640:	08004bd5 	.word	0x08004bd5
 8004644:	08005063 	.word	0x08005063
 8004648:	08005883 	.word	0x08005883
 800464c:	08005883 	.word	0x08005883
 8004650:	08005883 	.word	0x08005883
 8004654:	080049e5 	.word	0x080049e5
 8004658:	08005883 	.word	0x08005883
 800465c:	08005883 	.word	0x08005883
 8004660:	08005883 	.word	0x08005883
 8004664:	08005883 	.word	0x08005883
 8004668:	08005883 	.word	0x08005883
 800466c:	08005883 	.word	0x08005883
 8004670:	08005883 	.word	0x08005883
 8004674:	08005883 	.word	0x08005883
 8004678:	08005883 	.word	0x08005883
 800467c:	08005883 	.word	0x08005883
 8004680:	08005883 	.word	0x08005883
 8004684:	08005883 	.word	0x08005883
 8004688:	08005883 	.word	0x08005883
 800468c:	08005883 	.word	0x08005883
 8004690:	08004711 	.word	0x08004711
 8004694:	080047e7 	.word	0x080047e7
 8004698:	08005883 	.word	0x08005883
 800469c:	08005883 	.word	0x08005883
 80046a0:	08005883 	.word	0x08005883
 80046a4:	08005883 	.word	0x08005883
 80046a8:	08005883 	.word	0x08005883
 80046ac:	08005883 	.word	0x08005883
 80046b0:	08005883 	.word	0x08005883
 80046b4:	08005883 	.word	0x08005883
 80046b8:	08005883 	.word	0x08005883
 80046bc:	08005883 	.word	0x08005883
 80046c0:	08005883 	.word	0x08005883
 80046c4:	08005883 	.word	0x08005883
 80046c8:	08005883 	.word	0x08005883
 80046cc:	08005883 	.word	0x08005883
 80046d0:	08005883 	.word	0x08005883
 80046d4:	08005883 	.word	0x08005883
 80046d8:	08005883 	.word	0x08005883
 80046dc:	08005883 	.word	0x08005883
 80046e0:	08005883 	.word	0x08005883
 80046e4:	08005883 	.word	0x08005883
 80046e8:	08005883 	.word	0x08005883
 80046ec:	08005883 	.word	0x08005883
 80046f0:	08005883 	.word	0x08005883
 80046f4:	08005883 	.word	0x08005883
 80046f8:	08005883 	.word	0x08005883
 80046fc:	08005883 	.word	0x08005883
 8004700:	08005883 	.word	0x08005883
 8004704:	08005883 	.word	0x08005883
 8004708:	08005883 	.word	0x08005883
 800470c:	080048fd 	.word	0x080048fd
		{
		case	SDA_CALLIBRATION:
			sda_msg = osPoolAlloc(sdasendpool);
 8004710:	4b5f      	ldr	r3, [pc, #380]	; (8004890 <Start_LORA_RECEIVE+0x6d0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f012 ffac 	bl	8017672 <osPoolAlloc>
 800471a:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
			sda_msg->SDA_SEND_DATA[0] = SDA_CALLIBRATION_FACTOR;
 800471e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004722:	22b8      	movs	r2, #184	; 0xb8
 8004724:	701a      	strb	r2, [r3, #0]
			sda_msg->SDA_SEND_DATA[1] = DATA_FROM_RCU[4];
 8004726:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800472a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800472e:	791a      	ldrb	r2, [r3, #4]
 8004730:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004734:	705a      	strb	r2, [r3, #1]
			sda_msg->SDA_SEND_DATA[2] = DATA_FROM_RCU[5];
 8004736:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800473a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800473e:	795a      	ldrb	r2, [r3, #5]
 8004740:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004744:	709a      	strb	r2, [r3, #2]
			sda_msg->SDA_SEND_DATA[3] = DATA_FROM_RCU[6];
 8004746:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800474a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800474e:	799a      	ldrb	r2, [r3, #6]
 8004750:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004754:	70da      	strb	r2, [r3, #3]
			sda_msg->SDA_SEND_DATA[4] = DATA_FROM_RCU[7];
 8004756:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800475a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800475e:	79da      	ldrb	r2, [r3, #7]
 8004760:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004764:	711a      	strb	r2, [r3, #4]
			osMessagePut(SDA_SEND_qHandle, (uint32_t)sda_msg,100);
 8004766:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <Start_LORA_RECEIVE+0x6d4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 800476e:	2264      	movs	r2, #100	; 0x64
 8004770:	4618      	mov	r0, r3
 8004772:	f013 f84b 	bl	801780c <osMessagePut>
			flashmsg = osPoolAlloc(flashpool);
 8004776:	4b48      	ldr	r3, [pc, #288]	; (8004898 <Start_LORA_RECEIVE+0x6d8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f012 ff79 	bl	8017672 <osPoolAlloc>
 8004780:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
			flashmsg->FLASH_DATA_t[0] = SDA_CALLIBRATION_FACTOR;
 8004784:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004788:	22b8      	movs	r2, #184	; 0xb8
 800478a:	701a      	strb	r2, [r3, #0]
			flashmsg->FLASH_DATA_t[1] = DATA_FROM_RCU[4];
 800478c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004790:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004794:	791a      	ldrb	r2, [r3, #4]
 8004796:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800479a:	705a      	strb	r2, [r3, #1]
			flashmsg->FLASH_DATA_t[2] = DATA_FROM_RCU[5];
 800479c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80047a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80047a4:	795a      	ldrb	r2, [r3, #5]
 80047a6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80047aa:	709a      	strb	r2, [r3, #2]
			flashmsg->FLASH_DATA_t[3] = DATA_FROM_RCU[6];
 80047ac:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80047b0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80047b4:	799a      	ldrb	r2, [r3, #6]
 80047b6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80047ba:	70da      	strb	r2, [r3, #3]
			flashmsg->FLASH_DATA_t[4] = DATA_FROM_RCU[7];
 80047bc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80047c0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80047c4:	79da      	ldrb	r2, [r3, #7]
 80047c6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80047ca:	711a      	strb	r2, [r3, #4]
			osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 80047cc:	4b33      	ldr	r3, [pc, #204]	; (800489c <Start_LORA_RECEIVE+0x6dc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 80047d4:	2264      	movs	r2, #100	; 0x64
 80047d6:	4618      	mov	r0, r3
 80047d8:	f013 f818 	bl	801780c <osMessagePut>
			state = 0;
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
		break;
 80047e2:	f001 b84e 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case CURRENT_LIMIT:
			currlimitmsg = osPoolAlloc(currlimitpool);
 80047e6:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <Start_LORA_RECEIVE+0x6e0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f012 ff41 	bl	8017672 <osPoolAlloc>
 80047f0:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
			currlimitmsg->CURRENT_LIMIT_DATA = DATA_FROM_RCU[4];
 80047f4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80047f8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80047fc:	791a      	ldrb	r2, [r3, #4]
 80047fe:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004802:	701a      	strb	r2, [r3, #0]
			osMessagePut(CURRENT_LIMIT_Q_qHandle, (uint32_t)currlimitmsg, 10);
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <Start_LORA_RECEIVE+0x6e4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 800480c:	220a      	movs	r2, #10
 800480e:	4618      	mov	r0, r3
 8004810:	f012 fffc 	bl	801780c <osMessagePut>
			flashmsg = osPoolAlloc(flashpool);
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <Start_LORA_RECEIVE+0x6d8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f012 ff2a 	bl	8017672 <osPoolAlloc>
 800481e:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
			flashmsg->FLASH_DATA_t[0] = CURRENT_LIMIT;
 8004822:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004826:	22cf      	movs	r2, #207	; 0xcf
 8004828:	701a      	strb	r2, [r3, #0]
			flashmsg->FLASH_DATA_t[1] = DATA_FROM_RCU[4];
 800482a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800482e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004832:	791a      	ldrb	r2, [r3, #4]
 8004834:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004838:	705a      	strb	r2, [r3, #1]
			osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 800483a:	4b18      	ldr	r3, [pc, #96]	; (800489c <Start_LORA_RECEIVE+0x6dc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8004842:	2264      	movs	r2, #100	; 0x64
 8004844:	4618      	mov	r0, r3
 8004846:	f012 ffe1 	bl	801780c <osMessagePut>
			state = 0;
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
		break;
 8004850:	f001 b817 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case FETCH_DATA:
			flashreadmsg = osPoolAlloc(flashreadpool);
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <Start_LORA_RECEIVE+0x6e8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f012 ff0a 	bl	8017672 <osPoolAlloc>
 800485e:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
			flashreadmsg->FLASH_READ_DATA[0] = DATA_FOR_RCU[4];
 8004862:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004866:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800486a:	791a      	ldrb	r2, [r3, #4]
 800486c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004870:	701a      	strb	r2, [r3, #0]
			osMessagePut(FLASH_READ_qHandle,(uint32_t) flashreadmsg,10);
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <Start_LORA_RECEIVE+0x6ec>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800487a:	220a      	movs	r2, #10
 800487c:	4618      	mov	r0, r3
 800487e:	f012 ffc5 	bl	801780c <osMessagePut>
			state = 0;
 8004882:	4b02      	ldr	r3, [pc, #8]	; (800488c <Start_LORA_RECEIVE+0x6cc>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
		break;
 8004888:	f000 bffb 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 800488c:	20002a44 	.word	0x20002a44
 8004890:	20001604 	.word	0x20001604
 8004894:	20001e24 	.word	0x20001e24
 8004898:	200015cc 	.word	0x200015cc
 800489c:	20001e70 	.word	0x20001e70
 80048a0:	20001618 	.word	0x20001618
 80048a4:	20001e6c 	.word	0x20001e6c
 80048a8:	20001608 	.word	0x20001608
 80048ac:	20001e78 	.word	0x20001e78

		case FETCH_BIST:
			flashreadmsg = osPoolAlloc(flashreadpool);
 80048b0:	4bbb      	ldr	r3, [pc, #748]	; (8004ba0 <Start_LORA_RECEIVE+0x9e0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f012 fedc 	bl	8017672 <osPoolAlloc>
 80048ba:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
			flashreadmsg->FLASH_READ_DATA[0] = DATA_FOR_RCU[3];
 80048be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80048c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80048c6:	78da      	ldrb	r2, [r3, #3]
 80048c8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80048cc:	701a      	strb	r2, [r3, #0]
			osMessagePut(FLASH_READ_qHandle,(uint32_t) flashreadmsg,10);
 80048ce:	4bb5      	ldr	r3, [pc, #724]	; (8004ba4 <Start_LORA_RECEIVE+0x9e4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80048d6:	220a      	movs	r2, #10
 80048d8:	4618      	mov	r0, r3
 80048da:	f012 ff97 	bl	801780c <osMessagePut>
			state = 0;
 80048de:	4bb2      	ldr	r3, [pc, #712]	; (8004ba8 <Start_LORA_RECEIVE+0x9e8>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		break;
 80048e4:	f000 bfcd 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case CLEAR_FLASH:
			SLAVE_Erase_4K(clear_address);
 80048e8:	4bb0      	ldr	r3, [pc, #704]	; (8004bac <Start_LORA_RECEIVE+0x9ec>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fc f943 	bl	8000b78 <SLAVE_Erase_4K>
			state = 0;
 80048f2:	4bad      	ldr	r3, [pc, #692]	; (8004ba8 <Start_LORA_RECEIVE+0x9e8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
		break;
 80048f8:	f000 bfc3 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>


		case RESET_MAS_SLAVE:
			  memset(slavemsg->SLAVE_DATA,0,50);
 80048fc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8004900:	2232      	movs	r2, #50	; 0x32
 8004902:	2100      	movs	r1, #0
 8004904:	4618      	mov	r0, r3
 8004906:	f016 fc84 	bl	801b212 <memset>
			  slavemsg = osPoolAlloc(slavesendpool);
 800490a:	4ba9      	ldr	r3, [pc, #676]	; (8004bb0 <Start_LORA_RECEIVE+0x9f0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f012 feaf 	bl	8017672 <osPoolAlloc>
 8004914:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
			  slavemsg->SLAVE_DATA[0] = MASTER_BIT;
 8004918:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800491c:	2202      	movs	r2, #2
 800491e:	701a      	strb	r2, [r3, #0]
			  slavemsg->SLAVE_DATA[1] = ID_S_PRESENT[0];
 8004920:	4ba4      	ldr	r3, [pc, #656]	; (8004bb4 <Start_LORA_RECEIVE+0x9f4>)
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8004928:	705a      	strb	r2, [r3, #1]
			  slavemsg->SLAVE_DATA[2] = RESET_MAS_SLAVE;
 800492a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800492e:	22ed      	movs	r2, #237	; 0xed
 8004930:	709a      	strb	r2, [r3, #2]
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 8004932:	4ba1      	ldr	r3, [pc, #644]	; (8004bb8 <Start_LORA_RECEIVE+0x9f8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 800493a:	2264      	movs	r2, #100	; 0x64
 800493c:	4618      	mov	r0, r3
 800493e:	f012 ff65 	bl	801780c <osMessagePut>
			  osDelay(100);
 8004942:	2064      	movs	r0, #100	; 0x64
 8004944:	f012 fd6f 	bl	8017426 <osDelay>
			  memset(slavemsg->SLAVE_DATA,0,50);
 8004948:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800494c:	2232      	movs	r2, #50	; 0x32
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f016 fc5e 	bl	801b212 <memset>
			  slavemsg = osPoolAlloc(slavesendpool);
 8004956:	4b96      	ldr	r3, [pc, #600]	; (8004bb0 <Start_LORA_RECEIVE+0x9f0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f012 fe89 	bl	8017672 <osPoolAlloc>
 8004960:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
			  slavemsg->SLAVE_DATA[0] = MASTER_BIT;
 8004964:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8004968:	2202      	movs	r2, #2
 800496a:	701a      	strb	r2, [r3, #0]
			  slavemsg->SLAVE_DATA[1] = ID_S_PRESENT[1];
 800496c:	4b91      	ldr	r3, [pc, #580]	; (8004bb4 <Start_LORA_RECEIVE+0x9f4>)
 800496e:	785a      	ldrb	r2, [r3, #1]
 8004970:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8004974:	705a      	strb	r2, [r3, #1]
			  slavemsg->SLAVE_DATA[2] = RESET_MAS_SLAVE;
 8004976:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800497a:	22ed      	movs	r2, #237	; 0xed
 800497c:	709a      	strb	r2, [r3, #2]
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800497e:	4b8e      	ldr	r3, [pc, #568]	; (8004bb8 <Start_LORA_RECEIVE+0x9f8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8004986:	2264      	movs	r2, #100	; 0x64
 8004988:	4618      	mov	r0, r3
 800498a:	f012 ff3f 	bl	801780c <osMessagePut>
			  osDelay(100);
 800498e:	2064      	movs	r0, #100	; 0x64
 8004990:	f012 fd49 	bl	8017426 <osDelay>
			  memset(slavemsg->SLAVE_DATA,0,50);
 8004994:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8004998:	2232      	movs	r2, #50	; 0x32
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f016 fc38 	bl	801b212 <memset>
			  slavemsg = osPoolAlloc(slavesendpool);
 80049a2:	4b83      	ldr	r3, [pc, #524]	; (8004bb0 <Start_LORA_RECEIVE+0x9f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f012 fe63 	bl	8017672 <osPoolAlloc>
 80049ac:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
			  slavemsg->SLAVE_DATA[0] = MASTER_BIT;
 80049b0:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80049b4:	2202      	movs	r2, #2
 80049b6:	701a      	strb	r2, [r3, #0]
			  slavemsg->SLAVE_DATA[1] = ID_S_PRESENT[2];
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <Start_LORA_RECEIVE+0x9f4>)
 80049ba:	789a      	ldrb	r2, [r3, #2]
 80049bc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80049c0:	705a      	strb	r2, [r3, #1]
			  slavemsg->SLAVE_DATA[2] = RESET_MAS_SLAVE;
 80049c2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80049c6:	22ed      	movs	r2, #237	; 0xed
 80049c8:	709a      	strb	r2, [r3, #2]
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 80049ca:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <Start_LORA_RECEIVE+0x9f8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 80049d2:	2264      	movs	r2, #100	; 0x64
 80049d4:	4618      	mov	r0, r3
 80049d6:	f012 ff19 	bl	801780c <osMessagePut>
			  osDelay(100);
 80049da:	2064      	movs	r0, #100	; 0x64
 80049dc:	f012 fd23 	bl	8017426 <osDelay>
		break;
 80049e0:	f000 bf4f 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case LOGGING_INTERVAL:
			log_interval = ((uint16_t)DATA_FROM_RCU[4]<<8)|(uint16_t)DATA_FROM_RCU[5];
 80049e4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80049e8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80049f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80049f8:	7952      	ldrb	r2, [r2, #5]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	4a6f      	ldr	r2, [pc, #444]	; (8004bbc <Start_LORA_RECEIVE+0x9fc>)
 80049fe:	6013      	str	r3, [r2, #0]
			flashmsg = osPoolAlloc(flashpool);
 8004a00:	4b6f      	ldr	r3, [pc, #444]	; (8004bc0 <Start_LORA_RECEIVE+0xa00>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f012 fe34 	bl	8017672 <osPoolAlloc>
 8004a0a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
			flashmsg->FLASH_DATA_t[0] = LOGGING_INTERVAL;
 8004a0e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004a12:	22bf      	movs	r2, #191	; 0xbf
 8004a14:	701a      	strb	r2, [r3, #0]
			flashmsg->FLASH_DATA_t[1] = DATA_FROM_RCU[4];
 8004a16:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004a1a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004a1e:	791a      	ldrb	r2, [r3, #4]
 8004a20:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004a24:	705a      	strb	r2, [r3, #1]
			flashmsg->FLASH_DATA_t[2] = DATA_FROM_RCU[5];
 8004a26:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004a2a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004a2e:	795a      	ldrb	r2, [r3, #5]
 8004a30:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004a34:	709a      	strb	r2, [r3, #2]
			osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,10);
 8004a36:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <Start_LORA_RECEIVE+0xa04>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8004a3e:	220a      	movs	r2, #10
 8004a40:	4618      	mov	r0, r3
 8004a42:	f012 fee3 	bl	801780c <osMessagePut>
			state = 0;
 8004a46:	4b58      	ldr	r3, [pc, #352]	; (8004ba8 <Start_LORA_RECEIVE+0x9e8>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
		break;
 8004a4c:	f000 bf19 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case KP_KI_KD_DATA:
			 pos =0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 	  	  	 kpkikd_msg = osPoolAlloc(kpkikdpool);
 8004a56:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <Start_LORA_RECEIVE+0xa08>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f012 fe09 	bl	8017672 <osPoolAlloc>
 8004a60:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
 	  	  	 for(int i =0;i<4;i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8004a6a:	e013      	b.n	8004a94 <Start_LORA_RECEIVE+0x8d4>
 	  	  	 {
 	  	  	 kpkikd_msg->KP_KI_KD_t[i] = DATA_FROM_RCU[i+4];
 8004a6c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8004a70:	3304      	adds	r3, #4
 8004a72:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004a76:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004a7a:	5cd1      	ldrb	r1, [r2, r3]
 8004a7c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8004a80:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8004a84:	4413      	add	r3, r2
 8004a86:	460a      	mov	r2, r1
 8004a88:	701a      	strb	r2, [r3, #0]
 	  	  	 for(int i =0;i<4;i++)
 8004a8a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8004a94:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	dde7      	ble.n	8004a6c <Start_LORA_RECEIVE+0x8ac>
 	  	  	 }
 	  	  	 osMessagePut(KP_KI_KD_qHandle, (uint32_t)kpkikd_msg,100);
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <Start_LORA_RECEIVE+0xa0c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f012 feb0 	bl	801780c <osMessagePut>
 	  	  	 SLAVE_Read_Data(STARTING_ADD_OF_ENGG_MODE,DATA_FROM_FLASH,200);
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	22c8      	movs	r2, #200	; 0xc8
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ab8:	f7fc f8d5 	bl	8000c66 <SLAVE_Read_Data>
 	  	  	 for(int i =0;i<200;i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8004ac2:	e013      	b.n	8004aec <Start_LORA_RECEIVE+0x92c>
 	  	  	 {
 	  	  		 flashmsg->FLASH_DATA_t[i] = DATA_FROM_FLASH[i];
 8004ac4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004ac8:	f5a3 7234 	sub.w	r2, r3, #720	; 0x2d0
 8004acc:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8004ad0:	4413      	add	r3, r2
 8004ad2:	7819      	ldrb	r1, [r3, #0]
 8004ad4:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8004ad8:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8004adc:	4413      	add	r3, r2
 8004ade:	460a      	mov	r2, r1
 8004ae0:	701a      	strb	r2, [r3, #0]
 	  	  	 for(int i =0;i<200;i++)
 8004ae2:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8004aec:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8004af0:	2bc7      	cmp	r3, #199	; 0xc7
 8004af2:	dde7      	ble.n	8004ac4 <Start_LORA_RECEIVE+0x904>
 	  	  	 }
 	  	  	 pos = (DATA_FROM_RCU[4])/10;
 8004af4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004af8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004afc:	791b      	ldrb	r3, [r3, #4]
 8004afe:	4a34      	ldr	r2, [pc, #208]	; (8004bd0 <Start_LORA_RECEIVE+0xa10>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	08db      	lsrs	r3, r3, #3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 	  	  	 pos = (pos*4)+37;
 8004b0c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	3325      	adds	r3, #37	; 0x25
 8004b14:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	  	  	 	flashmsg->FLASH_DATA_t[0] = KP_KI_KD_DATA;
 8004b18:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004b1c:	222c      	movs	r2, #44	; 0x2c
 8004b1e:	701a      	strb	r2, [r3, #0]
 	  	  	 	flashmsg->FLASH_DATA_t[36] = KP_KI_KD_DATA;
 8004b20:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004b24:	222c      	movs	r2, #44	; 0x2c
 8004b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				flashmsg->FLASH_DATA_t[pos] = DATA_FROM_RCU[4];
 8004b2a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004b2e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004b32:	7919      	ldrb	r1, [r3, #4]
 8004b34:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8004b38:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004b3c:	4413      	add	r3, r2
 8004b3e:	460a      	mov	r2, r1
 8004b40:	701a      	strb	r2, [r3, #0]
				flashmsg->FLASH_DATA_t[pos+1] = DATA_FROM_RCU[5];
 8004b42:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004b46:	3301      	adds	r3, #1
 8004b48:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004b4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b50:	7951      	ldrb	r1, [r2, #5]
 8004b52:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8004b56:	54d1      	strb	r1, [r2, r3]
				flashmsg->FLASH_DATA_t[pos+2] = DATA_FROM_RCU[6];
 8004b58:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004b62:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b66:	7991      	ldrb	r1, [r2, #6]
 8004b68:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8004b6c:	54d1      	strb	r1, [r2, r3]
				flashmsg->FLASH_DATA_t[pos+3] = DATA_FROM_RCU[7];
 8004b6e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004b72:	3303      	adds	r3, #3
 8004b74:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004b78:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b7c:	79d1      	ldrb	r1, [r2, #7]
 8004b7e:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8004b82:	54d1      	strb	r1, [r2, r3]

 	  	  	 osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <Start_LORA_RECEIVE+0xa04>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8004b8c:	2264      	movs	r2, #100	; 0x64
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f012 fe3c 	bl	801780c <osMessagePut>
 			state = 0;
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <Start_LORA_RECEIVE+0x9e8>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
		break;
 8004b9a:	f000 be72 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>
 8004b9e:	bf00      	nop
 8004ba0:	20001608 	.word	0x20001608
 8004ba4:	20001e78 	.word	0x20001e78
 8004ba8:	20002a44 	.word	0x20002a44
 8004bac:	2000001c 	.word	0x2000001c
 8004bb0:	200015e4 	.word	0x200015e4
 8004bb4:	20001f54 	.word	0x20001f54
 8004bb8:	20001e30 	.word	0x20001e30
 8004bbc:	2000000c 	.word	0x2000000c
 8004bc0:	200015cc 	.word	0x200015cc
 8004bc4:	20001e70 	.word	0x20001e70
 8004bc8:	2000163c 	.word	0x2000163c
 8004bcc:	20001e38 	.word	0x20001e38
 8004bd0:	cccccccd 	.word	0xcccccccd

		case LORA_PARAMETERS:
			frequency_t = (((uint32_t)DATA_FROM_RCU[4])<<24)|(((uint32_t)DATA_FROM_RCU[5])<<16)|(((uint32_t)DATA_FROM_RCU[6])<<8)|((uint32_t)DATA_FROM_RCU[7]);
 8004bd4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004bd8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	061a      	lsls	r2, r3, #24
 8004be0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004be4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004be8:	795b      	ldrb	r3, [r3, #5]
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	431a      	orrs	r2, r3
 8004bee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004bf2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004bf6:	799b      	ldrb	r3, [r3, #6]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004c00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c04:	79d2      	ldrb	r2, [r2, #7]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
			offset_t = (((uint32_t)DATA_FROM_RCU[8])<<24)|(((uint32_t)DATA_FROM_RCU[9])<<16)|(((uint32_t)DATA_FROM_RCU[10])<<8)|((uint32_t)DATA_FROM_RCU[11]);
 8004c0c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c10:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c14:	7a1b      	ldrb	r3, [r3, #8]
 8004c16:	061a      	lsls	r2, r3, #24
 8004c18:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c1c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c20:	7a5b      	ldrb	r3, [r3, #9]
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c2a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c2e:	7a9b      	ldrb	r3, [r3, #10]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004c38:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c3c:	7ad2      	ldrb	r2, [r2, #11]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
			Sperading_Factor = DATA_FROM_RCU[12];
 8004c44:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c48:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c4c:	7b1b      	ldrb	r3, [r3, #12]
 8004c4e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			Band_Width = (((uint16_t)DATA_FROM_RCU[13])<<8)|((uint16_t)DATA_FROM_RCU[14]);
 8004c52:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c56:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c5a:	7b5b      	ldrb	r3, [r3, #13]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	b21a      	sxth	r2, r3
 8004c60:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c64:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c68:	7b9b      	ldrb	r3, [r3, #14]
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
			switch(Band_Width)
 8004c74:	f8b7 32cc 	ldrh.w	r3, [r7, #716]	; 0x2cc
 8004c78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c7c:	f000 8089 	beq.w	8004d92 <Start_LORA_RECEIVE+0xbd2>
 8004c80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c84:	f300 80ad 	bgt.w	8004de2 <Start_LORA_RECEIVE+0xc22>
 8004c88:	2bfa      	cmp	r3, #250	; 0xfa
 8004c8a:	f000 8086 	beq.w	8004d9a <Start_LORA_RECEIVE+0xbda>
 8004c8e:	2bfa      	cmp	r3, #250	; 0xfa
 8004c90:	f300 80a7 	bgt.w	8004de2 <Start_LORA_RECEIVE+0xc22>
 8004c94:	2b3e      	cmp	r3, #62	; 0x3e
 8004c96:	dc79      	bgt.n	8004d8c <Start_LORA_RECEIVE+0xbcc>
 8004c98:	2b07      	cmp	r3, #7
 8004c9a:	f2c0 80a2 	blt.w	8004de2 <Start_LORA_RECEIVE+0xc22>
 8004c9e:	3b07      	subs	r3, #7
 8004ca0:	2b37      	cmp	r3, #55	; 0x37
 8004ca2:	f200 809e 	bhi.w	8004de2 <Start_LORA_RECEIVE+0xc22>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <Start_LORA_RECEIVE+0xaec>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004ddb 	.word	0x08004ddb
 8004cb0:	08004de3 	.word	0x08004de3
 8004cb4:	08004de3 	.word	0x08004de3
 8004cb8:	08004dd3 	.word	0x08004dd3
 8004cbc:	08004de3 	.word	0x08004de3
 8004cc0:	08004de3 	.word	0x08004de3
 8004cc4:	08004de3 	.word	0x08004de3
 8004cc8:	08004de3 	.word	0x08004de3
 8004ccc:	08004dcb 	.word	0x08004dcb
 8004cd0:	08004de3 	.word	0x08004de3
 8004cd4:	08004de3 	.word	0x08004de3
 8004cd8:	08004de3 	.word	0x08004de3
 8004cdc:	08004de3 	.word	0x08004de3
 8004ce0:	08004dc3 	.word	0x08004dc3
 8004ce4:	08004de3 	.word	0x08004de3
 8004ce8:	08004de3 	.word	0x08004de3
 8004cec:	08004de3 	.word	0x08004de3
 8004cf0:	08004de3 	.word	0x08004de3
 8004cf4:	08004de3 	.word	0x08004de3
 8004cf8:	08004de3 	.word	0x08004de3
 8004cfc:	08004de3 	.word	0x08004de3
 8004d00:	08004de3 	.word	0x08004de3
 8004d04:	08004de3 	.word	0x08004de3
 8004d08:	08004de3 	.word	0x08004de3
 8004d0c:	08004dbb 	.word	0x08004dbb
 8004d10:	08004de3 	.word	0x08004de3
 8004d14:	08004de3 	.word	0x08004de3
 8004d18:	08004de3 	.word	0x08004de3
 8004d1c:	08004de3 	.word	0x08004de3
 8004d20:	08004de3 	.word	0x08004de3
 8004d24:	08004de3 	.word	0x08004de3
 8004d28:	08004de3 	.word	0x08004de3
 8004d2c:	08004de3 	.word	0x08004de3
 8004d30:	08004de3 	.word	0x08004de3
 8004d34:	08004db3 	.word	0x08004db3
 8004d38:	08004de3 	.word	0x08004de3
 8004d3c:	08004de3 	.word	0x08004de3
 8004d40:	08004de3 	.word	0x08004de3
 8004d44:	08004de3 	.word	0x08004de3
 8004d48:	08004de3 	.word	0x08004de3
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004de3 	.word	0x08004de3
 8004d54:	08004de3 	.word	0x08004de3
 8004d58:	08004de3 	.word	0x08004de3
 8004d5c:	08004de3 	.word	0x08004de3
 8004d60:	08004de3 	.word	0x08004de3
 8004d64:	08004de3 	.word	0x08004de3
 8004d68:	08004de3 	.word	0x08004de3
 8004d6c:	08004de3 	.word	0x08004de3
 8004d70:	08004de3 	.word	0x08004de3
 8004d74:	08004de3 	.word	0x08004de3
 8004d78:	08004de3 	.word	0x08004de3
 8004d7c:	08004de3 	.word	0x08004de3
 8004d80:	08004de3 	.word	0x08004de3
 8004d84:	08004de3 	.word	0x08004de3
 8004d88:	08004dab 	.word	0x08004dab
 8004d8c:	2b7d      	cmp	r3, #125	; 0x7d
 8004d8e:	d008      	beq.n	8004da2 <Start_LORA_RECEIVE+0xbe2>
 8004d90:	e027      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			{
			case 500:
				Band_Width = 6;
 8004d92:	2306      	movs	r3, #6
 8004d94:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004d98:	e023      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 250:
				Band_Width = 5;
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004da0:	e01f      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 125:
				Band_Width = 4;
 8004da2:	2304      	movs	r3, #4
 8004da4:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004da8:	e01b      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 62:
				Band_Width = 3;
 8004daa:	2303      	movs	r3, #3
 8004dac:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004db0:	e017      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 41:
				Band_Width = 10;
 8004db2:	230a      	movs	r3, #10
 8004db4:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004db8:	e013      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 31:
				Band_Width = 2;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004dc0:	e00f      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 20:
				Band_Width = 9;
 8004dc2:	2309      	movs	r3, #9
 8004dc4:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004dc8:	e00b      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 15:
				Band_Width = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004dd0:	e007      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 10:
				Band_Width = 8;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004dd8:	e003      	b.n	8004de2 <Start_LORA_RECEIVE+0xc22>
			case 7:
				Band_Width = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
				break;
 8004de0:	bf00      	nop
			}
			CR = DATA_FROM_RCU[15];
 8004de2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004de6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004dea:	7bdb      	ldrb	r3, [r3, #15]
 8004dec:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
			switch(CR)
 8004df0:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8004df4:	3b2d      	subs	r3, #45	; 0x2d
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d81a      	bhi.n	8004e30 <Start_LORA_RECEIVE+0xc70>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <Start_LORA_RECEIVE+0xc40>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e19 	.word	0x08004e19
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e29 	.word	0x08004e29
			{
			case 45:
				CR =1 ;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
				break;
 8004e16:	e00b      	b.n	8004e30 <Start_LORA_RECEIVE+0xc70>
			case 46:
				CR =2 ;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
				break;
 8004e1e:	e007      	b.n	8004e30 <Start_LORA_RECEIVE+0xc70>
			case 47:
				CR =3 ;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
				break;
 8004e26:	e003      	b.n	8004e30 <Start_LORA_RECEIVE+0xc70>
			case 48:
				CR =4 ;
 8004e28:	2304      	movs	r3, #4
 8004e2a:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
				break;
 8004e2e:	bf00      	nop
			}
			RADIO_RESET();
 8004e30:	f7fc f85a 	bl	8000ee8 <RADIO_RESET>
			RADIO_START(LORA_DEVICE);
 8004e34:	2000      	movs	r0, #0
 8004e36:	f7fc f897 	bl	8000f68 <RADIO_START>
			osDelay(1000);
 8004e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e3e:	f012 faf2 	bl	8017426 <osDelay>
			RADIO_SETUP_LORA(frequency_t, offset_t, Sperading_Factor, Band_Width, CR, LDRO_OFF);
 8004e42:	f8d7 1268 	ldr.w	r1, [r7, #616]	; 0x268
 8004e46:	f8b7 32cc 	ldrh.w	r3, [r7, #716]	; 0x2cc
 8004e4a:	b2d8      	uxtb	r0, r3
 8004e4c:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8004e50:	2300      	movs	r3, #0
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 8004e60:	f7fc f895 	bl	8000f8e <RADIO_SETUP_LORA>
			flashmsg = osPoolAlloc(flashpool);
 8004e64:	4bb5      	ldr	r3, [pc, #724]	; (800513c <Start_LORA_RECEIVE+0xf7c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f012 fc02 	bl	8017672 <osPoolAlloc>
 8004e6e:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
			flashmsg->FLASH_DATA_t[0] = LORA_PARAMETERS;
 8004e72:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8004e76:	22ba      	movs	r2, #186	; 0xba
 8004e78:	701a      	strb	r2, [r3, #0]
			for(int i =1;i<13;i++)
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8004e80:	e013      	b.n	8004eaa <Start_LORA_RECEIVE+0xcea>
			{
				flashmsg->FLASH_DATA_t[i] = DATA_FROM_RCU[i+3];
 8004e82:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004e86:	3303      	adds	r3, #3
 8004e88:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004e8c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004e90:	5cd1      	ldrb	r1, [r2, r3]
 8004e92:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8004e96:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004e9a:	4413      	add	r3, r2
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	701a      	strb	r2, [r3, #0]
			for(int i =1;i<13;i++)
 8004ea0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8004eaa:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	dde7      	ble.n	8004e82 <Start_LORA_RECEIVE+0xcc2>
			}
			osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 8004eb2:	4ba3      	ldr	r3, [pc, #652]	; (8005140 <Start_LORA_RECEIVE+0xf80>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8004eba:	2264      	movs	r2, #100	; 0x64
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f012 fca5 	bl	801780c <osMessagePut>
			state = 0;
 8004ec2:	4ba0      	ldr	r3, [pc, #640]	; (8005144 <Start_LORA_RECEIVE+0xf84>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
		break;
 8004ec8:	f000 bcdb 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case SEARCHING_DEVICES:
			memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 8004ecc:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004ed0:	22c8      	movs	r2, #200	; 0xc8
 8004ed2:	21ff      	movs	r1, #255	; 0xff
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f016 f99c 	bl	801b212 <memset>
			switch(Running_Status)
 8004eda:	4b9b      	ldr	r3, [pc, #620]	; (8005148 <Start_LORA_RECEIVE+0xf88>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <Start_LORA_RECEIVE+0xd28>
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d046      	beq.n	8004f74 <Start_LORA_RECEIVE+0xdb4>
 8004ee6:	e0b7      	b.n	8005058 <Start_LORA_RECEIVE+0xe98>
			{
			case FIRST_TIME:
				DATA_FOR_RCU[0]=LORA_BIT;
 8004ee8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004eec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
				DATA_FOR_RCU[1]=MODEM_REPLY_BIT;
 8004ef4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004ef8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004efc:	2204      	movs	r2, #4
 8004efe:	705a      	strb	r2, [r3, #1]
				DATA_FOR_RCU[3]=SEARCH_IDs;
 8004f00:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f08:	220a      	movs	r2, #10
 8004f0a:	70da      	strb	r2, [r3, #3]
				DATA_FOR_RCU[4]=MY_TCU_ID;
 8004f0c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f14:	2204      	movs	r2, #4
 8004f16:	711a      	strb	r2, [r3, #4]
				CRC_VALUE_OF_DATA_FOR_RCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_RCU,(BUFFER_SIZE_ALL-1));
 8004f18:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004f1c:	22c7      	movs	r2, #199	; 0xc7
 8004f1e:	4619      	mov	r1, r3
 8004f20:	488a      	ldr	r0, [pc, #552]	; (800514c <Start_LORA_RECEIVE+0xf8c>)
 8004f22:	f00b ff3b 	bl	8010d9c <HAL_CRC_Calculate>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)]=CRC_VALUE_OF_DATA_FOR_RCU;
 8004f2c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f34:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 8004f38:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
				lorasendmsg = osPoolAlloc(lorasendpool);
 8004f3c:	4b84      	ldr	r3, [pc, #528]	; (8005150 <Start_LORA_RECEIVE+0xf90>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f012 fb96 	bl	8017672 <osPoolAlloc>
 8004f46:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
				memcpy(lorasendmsg->LORA_SEND_DATA,DATA_FOR_RCU,200);
 8004f4a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004f4e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f52:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	23c8      	movs	r3, #200	; 0xc8
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f016 f94a 	bl	801b1f6 <memcpy>
				osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 8004f62:	4b7c      	ldr	r3, [pc, #496]	; (8005154 <Start_LORA_RECEIVE+0xf94>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8004f6a:	2264      	movs	r2, #100	; 0x64
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f012 fc4d 	bl	801780c <osMessagePut>

			break;
 8004f72:	e071      	b.n	8005058 <Start_LORA_RECEIVE+0xe98>

			case RUNNING:
				DATA_FOR_RCU[0]=LORA_BIT;
 8004f74:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
				DATA_FOR_RCU[1]=MODEM_REPLY_BIT;
 8004f80:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f88:	2204      	movs	r2, #4
 8004f8a:	705a      	strb	r2, [r3, #1]
				DATA_FOR_RCU[3]=RUNNING_SEARCH;
 8004f8c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f94:	22aa      	movs	r2, #170	; 0xaa
 8004f96:	70da      	strb	r2, [r3, #3]
				DATA_FOR_RCU[4]=MY_TCU_ID;
 8004f98:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004f9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	711a      	strb	r2, [r3, #4]
				DATA_FOR_RCU[5] = ID_S_PRESENT[0];
 8004fa4:	4b6c      	ldr	r3, [pc, #432]	; (8005158 <Start_LORA_RECEIVE+0xf98>)
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004fac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fb0:	715a      	strb	r2, [r3, #5]
				DATA_FOR_RCU[6] = ID_S_PRESENT[1];
 8004fb2:	4b69      	ldr	r3, [pc, #420]	; (8005158 <Start_LORA_RECEIVE+0xf98>)
 8004fb4:	785a      	ldrb	r2, [r3, #1]
 8004fb6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004fba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fbe:	719a      	strb	r2, [r3, #6]
				DATA_FOR_RCU[7] = ID_S_PRESENT[2];
 8004fc0:	4b65      	ldr	r3, [pc, #404]	; (8005158 <Start_LORA_RECEIVE+0xf98>)
 8004fc2:	789a      	ldrb	r2, [r3, #2]
 8004fc4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004fc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fcc:	71da      	strb	r2, [r3, #7]
				DATA_FOR_RCU[8] = START_STOP_STATE;
 8004fce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004fd2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fd6:	229a      	movs	r2, #154	; 0x9a
 8004fd8:	721a      	strb	r2, [r3, #8]
				DATA_FOR_RCU[9] = START_CONDITION;
 8004fda:	4b60      	ldr	r3, [pc, #384]	; (800515c <Start_LORA_RECEIVE+0xf9c>)
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004fe2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004fe6:	725a      	strb	r2, [r3, #9]
				DATA_FOR_RCU[10] = MODE_CONDITION;
 8004fe8:	4b5d      	ldr	r3, [pc, #372]	; (8005160 <Start_LORA_RECEIVE+0xfa0>)
 8004fea:	781a      	ldrb	r2, [r3, #0]
 8004fec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004ff0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ff4:	729a      	strb	r2, [r3, #10]
				CRC_VALUE_OF_DATA_FOR_RCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_RCU,(BUFFER_SIZE_ALL-1));
 8004ff6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004ffa:	22c7      	movs	r2, #199	; 0xc7
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4853      	ldr	r0, [pc, #332]	; (800514c <Start_LORA_RECEIVE+0xf8c>)
 8005000:	f00b fecc 	bl	8010d9c <HAL_CRC_Calculate>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)]=CRC_VALUE_OF_DATA_FOR_RCU;
 800500a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800500e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005012:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 8005016:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
				lorasendmsg = osPoolAlloc(lorasendpool);
 800501a:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <Start_LORA_RECEIVE+0xf90>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f012 fb27 	bl	8017672 <osPoolAlloc>
 8005024:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
				memcpy(lorasendmsg->LORA_SEND_DATA,DATA_FOR_RCU,200);
 8005028:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800502c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005030:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	23c8      	movs	r3, #200	; 0xc8
 800503a:	461a      	mov	r2, r3
 800503c:	f016 f8db 	bl	801b1f6 <memcpy>
				osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 8005040:	4b44      	ldr	r3, [pc, #272]	; (8005154 <Start_LORA_RECEIVE+0xf94>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8005048:	2264      	movs	r2, #100	; 0x64
 800504a:	4618      	mov	r0, r3
 800504c:	f012 fbde 	bl	801780c <osMessagePut>
				Running_Status = RUNNING;
 8005050:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <Start_LORA_RECEIVE+0xf88>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]
			break;
 8005056:	bf00      	nop
			}
			state = 0;
 8005058:	4b3a      	ldr	r3, [pc, #232]	; (8005144 <Start_LORA_RECEIVE+0xf84>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
		break;
 800505e:	f000 bc10 	b.w	8005882 <Start_LORA_RECEIVE+0x16c2>

		case MASTER_SLAVE_CONFIG:
		if((DATA_FROM_RCU[4]==MY_TCU_ID)||(DATA_FROM_RCU[6]==MY_TCU_ID)||(DATA_FROM_RCU[8]==MY_TCU_ID)||(DATA_FROM_RCU[10]==MY_TCU_ID))
 8005062:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005066:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800506a:	791b      	ldrb	r3, [r3, #4]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d015      	beq.n	800509c <Start_LORA_RECEIVE+0xedc>
 8005070:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005074:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005078:	799b      	ldrb	r3, [r3, #6]
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00e      	beq.n	800509c <Start_LORA_RECEIVE+0xedc>
 800507e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005082:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005086:	7a1b      	ldrb	r3, [r3, #8]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d007      	beq.n	800509c <Start_LORA_RECEIVE+0xedc>
 800508c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005090:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005094:	7a9b      	ldrb	r3, [r3, #10]
 8005096:	2b04      	cmp	r3, #4
 8005098:	f040 8190 	bne.w	80053bc <Start_LORA_RECEIVE+0x11fc>
		{
		if(DATA_FROM_RCU[4]==MY_TCU_ID)
 800509c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80050a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80050a4:	791b      	ldrb	r3, [r3, #4]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d16c      	bne.n	8005184 <Start_LORA_RECEIVE+0xfc4>
		{
		if(DATA_FROM_RCU[5]==I_AM_MASTER)
 80050aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80050ae:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80050b2:	795b      	ldrb	r3, [r3, #5]
 80050b4:	2b0a      	cmp	r3, #10
 80050b6:	d15b      	bne.n	8005170 <Start_LORA_RECEIVE+0xfb0>
		{
			I_AM = I_AM_MASTER;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <Start_LORA_RECEIVE+0xfa4>)
 80050ba:	220a      	movs	r2, #10
 80050bc:	701a      	strb	r2, [r3, #0]
			ID_S[0]=DATA_FROM_RCU[6];
 80050be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80050c2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80050c6:	799b      	ldrb	r3, [r3, #6]
 80050c8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
			ID_S[1]=DATA_FROM_RCU[8];
 80050cc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80050d0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80050d4:	7a1b      	ldrb	r3, [r3, #8]
 80050d6:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
			ID_S[2]=DATA_FROM_RCU[10];
 80050da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80050de:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80050e2:	7a9b      	ldrb	r3, [r3, #10]
 80050e4:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
			idmsg = osPoolAlloc(slaveidpool);
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <Start_LORA_RECEIVE+0xfa8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f012 fac0 	bl	8017672 <osPoolAlloc>
 80050f2:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
			for(int i =0;i<3;i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80050fc:	e011      	b.n	8005122 <Start_LORA_RECEIVE+0xf62>
			{
			  idmsg->SLAVE_ID[i] = ID_S[i];
 80050fe:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8005102:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8005106:	4413      	add	r3, r2
 8005108:	7819      	ldrb	r1, [r3, #0]
 800510a:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 800510e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8005112:	4413      	add	r3, r2
 8005114:	460a      	mov	r2, r1
 8005116:	701a      	strb	r2, [r3, #0]
			for(int i =0;i<3;i++)
 8005118:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800511c:	3301      	adds	r3, #1
 800511e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8005122:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8005126:	2b02      	cmp	r3, #2
 8005128:	dde9      	ble.n	80050fe <Start_LORA_RECEIVE+0xf3e>
			}
			osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <Start_LORA_RECEIVE+0xfac>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 8005132:	2264      	movs	r2, #100	; 0x64
 8005134:	4618      	mov	r0, r3
 8005136:	f012 fb69 	bl	801780c <osMessagePut>
 800513a:	e023      	b.n	8005184 <Start_LORA_RECEIVE+0xfc4>
 800513c:	200015cc 	.word	0x200015cc
 8005140:	20001e70 	.word	0x20001e70
 8005144:	20002a44 	.word	0x20002a44
 8005148:	20001fa4 	.word	0x20001fa4
 800514c:	20001718 	.word	0x20001718
 8005150:	200015c8 	.word	0x200015c8
 8005154:	20001e1c 	.word	0x20001e1c
 8005158:	20001f54 	.word	0x20001f54
 800515c:	20001e91 	.word	0x20001e91
 8005160:	20001e92 	.word	0x20001e92
 8005164:	20000009 	.word	0x20000009
 8005168:	200015d4 	.word	0x200015d4
 800516c:	20001e20 	.word	0x20001e20
		}
		else if(DATA_FROM_RCU[5]==I_AM_SLAVE)
 8005170:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005174:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005178:	795b      	ldrb	r3, [r3, #5]
 800517a:	2b0b      	cmp	r3, #11
 800517c:	d102      	bne.n	8005184 <Start_LORA_RECEIVE+0xfc4>
		{
			  I_AM = I_AM_SLAVE;
 800517e:	4bac      	ldr	r3, [pc, #688]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 8005180:	220b      	movs	r2, #11
 8005182:	701a      	strb	r2, [r3, #0]
		}
		}
		if(DATA_FROM_RCU[8]==MY_TCU_ID)
 8005184:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005188:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800518c:	7a1b      	ldrb	r3, [r3, #8]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d152      	bne.n	8005238 <Start_LORA_RECEIVE+0x1078>
		{
		if(DATA_FROM_RCU[9]==I_AM_MASTER)
 8005192:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005196:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800519a:	7a5b      	ldrb	r3, [r3, #9]
 800519c:	2b0a      	cmp	r3, #10
 800519e:	d141      	bne.n	8005224 <Start_LORA_RECEIVE+0x1064>
		{
			  I_AM = I_AM_MASTER;
 80051a0:	4ba3      	ldr	r3, [pc, #652]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 80051a2:	220a      	movs	r2, #10
 80051a4:	701a      	strb	r2, [r3, #0]
			  ID_S[0]=DATA_FROM_RCU[4];
 80051a6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80051aa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
			  ID_S[1]=DATA_FROM_RCU[6];
 80051b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80051b8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80051bc:	799b      	ldrb	r3, [r3, #6]
 80051be:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
			  ID_S[2]=DATA_FROM_RCU[10];
 80051c2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80051c6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80051ca:	7a9b      	ldrb	r3, [r3, #10]
 80051cc:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
			  idmsg = osPoolAlloc(slaveidpool);
 80051d0:	4b98      	ldr	r3, [pc, #608]	; (8005434 <Start_LORA_RECEIVE+0x1274>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f012 fa4c 	bl	8017672 <osPoolAlloc>
 80051da:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
			  for(int i =0;i<3;i++)
 80051de:	2300      	movs	r3, #0
 80051e0:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 80051e4:	e011      	b.n	800520a <Start_LORA_RECEIVE+0x104a>
			  {
				  idmsg->SLAVE_ID[i] = ID_S[i];
 80051e6:	f507 720d 	add.w	r2, r7, #564	; 0x234
 80051ea:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80051ee:	4413      	add	r3, r2
 80051f0:	7819      	ldrb	r1, [r3, #0]
 80051f2:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80051f6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80051fa:	4413      	add	r3, r2
 80051fc:	460a      	mov	r2, r1
 80051fe:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<3;i++)
 8005200:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005204:	3301      	adds	r3, #1
 8005206:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800520a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800520e:	2b02      	cmp	r3, #2
 8005210:	dde9      	ble.n	80051e6 <Start_LORA_RECEIVE+0x1026>
			  }
			  osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 8005212:	4b89      	ldr	r3, [pc, #548]	; (8005438 <Start_LORA_RECEIVE+0x1278>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 800521a:	2264      	movs	r2, #100	; 0x64
 800521c:	4618      	mov	r0, r3
 800521e:	f012 faf5 	bl	801780c <osMessagePut>
 8005222:	e009      	b.n	8005238 <Start_LORA_RECEIVE+0x1078>
		 }
		 else if(DATA_FROM_RCU[9]==I_AM_SLAVE)
 8005224:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005228:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800522c:	7a5b      	ldrb	r3, [r3, #9]
 800522e:	2b0b      	cmp	r3, #11
 8005230:	d102      	bne.n	8005238 <Start_LORA_RECEIVE+0x1078>
		 {
			  I_AM = I_AM_SLAVE;
 8005232:	4b7f      	ldr	r3, [pc, #508]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 8005234:	220b      	movs	r2, #11
 8005236:	701a      	strb	r2, [r3, #0]
		 }
		}
		if(DATA_FROM_RCU[6]==MY_TCU_ID)
 8005238:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800523c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005240:	799b      	ldrb	r3, [r3, #6]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d152      	bne.n	80052ec <Start_LORA_RECEIVE+0x112c>
		{
		if(DATA_FROM_RCU[7]==I_AM_MASTER)
 8005246:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800524a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800524e:	79db      	ldrb	r3, [r3, #7]
 8005250:	2b0a      	cmp	r3, #10
 8005252:	d141      	bne.n	80052d8 <Start_LORA_RECEIVE+0x1118>
		{
			  I_AM = I_AM_MASTER;
 8005254:	4b76      	ldr	r3, [pc, #472]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 8005256:	220a      	movs	r2, #10
 8005258:	701a      	strb	r2, [r3, #0]
			  ID_S[0]=DATA_FROM_RCU[4];
 800525a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800525e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005262:	791b      	ldrb	r3, [r3, #4]
 8005264:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
			  ID_S[1]=DATA_FROM_RCU[8];
 8005268:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800526c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005270:	7a1b      	ldrb	r3, [r3, #8]
 8005272:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
			  ID_S[2]=DATA_FROM_RCU[10];
 8005276:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800527a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800527e:	7a9b      	ldrb	r3, [r3, #10]
 8005280:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
			  idmsg = osPoolAlloc(slaveidpool);
 8005284:	4b6b      	ldr	r3, [pc, #428]	; (8005434 <Start_LORA_RECEIVE+0x1274>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f012 f9f2 	bl	8017672 <osPoolAlloc>
 800528e:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
			  for(int i =0;i<3;i++)
 8005292:	2300      	movs	r3, #0
 8005294:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8005298:	e011      	b.n	80052be <Start_LORA_RECEIVE+0x10fe>
			  {
				  idmsg->SLAVE_ID[i] = ID_S[i];
 800529a:	f507 720d 	add.w	r2, r7, #564	; 0x234
 800529e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80052a2:	4413      	add	r3, r2
 80052a4:	7819      	ldrb	r1, [r3, #0]
 80052a6:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80052aa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80052ae:	4413      	add	r3, r2
 80052b0:	460a      	mov	r2, r1
 80052b2:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<3;i++)
 80052b4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80052be:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	dde9      	ble.n	800529a <Start_LORA_RECEIVE+0x10da>
			  }
			  osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 80052c6:	4b5c      	ldr	r3, [pc, #368]	; (8005438 <Start_LORA_RECEIVE+0x1278>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 80052ce:	2264      	movs	r2, #100	; 0x64
 80052d0:	4618      	mov	r0, r3
 80052d2:	f012 fa9b 	bl	801780c <osMessagePut>
 80052d6:	e009      	b.n	80052ec <Start_LORA_RECEIVE+0x112c>
		 }
		 else if(DATA_FROM_RCU[7]==I_AM_SLAVE)
 80052d8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80052dc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80052e0:	79db      	ldrb	r3, [r3, #7]
 80052e2:	2b0b      	cmp	r3, #11
 80052e4:	d102      	bne.n	80052ec <Start_LORA_RECEIVE+0x112c>
		 {
			  I_AM = I_AM_SLAVE;
 80052e6:	4b52      	ldr	r3, [pc, #328]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 80052e8:	220b      	movs	r2, #11
 80052ea:	701a      	strb	r2, [r3, #0]
		 }
		}
		if(DATA_FROM_RCU[10]==MY_TCU_ID)
 80052ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80052f0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80052f4:	7a9b      	ldrb	r3, [r3, #10]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d152      	bne.n	80053a0 <Start_LORA_RECEIVE+0x11e0>
		{
		if(DATA_FROM_RCU[11]==I_AM_MASTER)
 80052fa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80052fe:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005302:	7adb      	ldrb	r3, [r3, #11]
 8005304:	2b0a      	cmp	r3, #10
 8005306:	d141      	bne.n	800538c <Start_LORA_RECEIVE+0x11cc>
		{
			  I_AM = I_AM_MASTER;
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 800530a:	220a      	movs	r2, #10
 800530c:	701a      	strb	r2, [r3, #0]
			  ID_S[0]=DATA_FROM_RCU[6];
 800530e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005312:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005316:	799b      	ldrb	r3, [r3, #6]
 8005318:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
			  ID_S[1]=DATA_FROM_RCU[8];
 800531c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005320:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005324:	7a1b      	ldrb	r3, [r3, #8]
 8005326:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
			  ID_S[2]=DATA_FROM_RCU[4];
 800532a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800532e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005332:	791b      	ldrb	r3, [r3, #4]
 8005334:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
			  idmsg = osPoolAlloc(slaveidpool);
 8005338:	4b3e      	ldr	r3, [pc, #248]	; (8005434 <Start_LORA_RECEIVE+0x1274>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f012 f998 	bl	8017672 <osPoolAlloc>
 8005342:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
			  for(int i =0;i<3;i++)
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 800534c:	e011      	b.n	8005372 <Start_LORA_RECEIVE+0x11b2>
			  {
				  idmsg->SLAVE_ID[i] = ID_S[i];
 800534e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8005352:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8005356:	4413      	add	r3, r2
 8005358:	7819      	ldrb	r1, [r3, #0]
 800535a:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 800535e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8005362:	4413      	add	r3, r2
 8005364:	460a      	mov	r2, r1
 8005366:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<3;i++)
 8005368:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800536c:	3301      	adds	r3, #1
 800536e:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8005372:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8005376:	2b02      	cmp	r3, #2
 8005378:	dde9      	ble.n	800534e <Start_LORA_RECEIVE+0x118e>
			  }
			  osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <Start_LORA_RECEIVE+0x1278>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 8005382:	2264      	movs	r2, #100	; 0x64
 8005384:	4618      	mov	r0, r3
 8005386:	f012 fa41 	bl	801780c <osMessagePut>
 800538a:	e009      	b.n	80053a0 <Start_LORA_RECEIVE+0x11e0>
		 }
		 else if(DATA_FROM_RCU[11]==I_AM_SLAVE)
 800538c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005390:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005394:	7adb      	ldrb	r3, [r3, #11]
 8005396:	2b0b      	cmp	r3, #11
 8005398:	d102      	bne.n	80053a0 <Start_LORA_RECEIVE+0x11e0>
		 {
			  I_AM = I_AM_SLAVE;
 800539a:	4b25      	ldr	r3, [pc, #148]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 800539c:	220b      	movs	r2, #11
 800539e:	701a      	strb	r2, [r3, #0]
		 }
		}
		if(I_AM == I_AM_MASTER)
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b0a      	cmp	r3, #10
 80053a6:	d102      	bne.n	80053ae <Start_LORA_RECEIVE+0x11ee>
		{
		  WHOM_TO_GIVE_DATA = MODEM_SYSTEM;
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <Start_LORA_RECEIVE+0x127c>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
		}
		if(I_AM == I_AM_SLAVE)
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <Start_LORA_RECEIVE+0x1270>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b0b      	cmp	r3, #11
 80053b4:	d102      	bne.n	80053bc <Start_LORA_RECEIVE+0x11fc>
		{
		  WHOM_TO_GIVE_DATA = MAS_SLAVE_SYSTEM;
 80053b6:	4b21      	ldr	r3, [pc, #132]	; (800543c <Start_LORA_RECEIVE+0x127c>)
 80053b8:	2204      	movs	r2, #4
 80053ba:	601a      	str	r2, [r3, #0]
		}
		}
		state = 0;
 80053bc:	4b20      	ldr	r3, [pc, #128]	; (8005440 <Start_LORA_RECEIVE+0x1280>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
		break;
 80053c2:	e25e      	b.n	8005882 <Start_LORA_RECEIVE+0x16c2>

		case PROCESS_DATA:
		for(int i =0;i<49;i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80053ca:	e015      	b.n	80053f8 <Start_LORA_RECEIVE+0x1238>
		{
		DATA_FOR_PROCESSING[i] = DATA_FROM_RCU[i+1];
 80053cc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80053d0:	3301      	adds	r3, #1
 80053d2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80053d6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80053da:	5cd1      	ldrb	r1, [r2, r3]
 80053dc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80053e0:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80053e4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80053e8:	4413      	add	r3, r2
 80053ea:	460a      	mov	r2, r1
 80053ec:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<49;i++)
 80053ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80053f2:	3301      	adds	r3, #1
 80053f4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80053f8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80053fc:	2b30      	cmp	r3, #48	; 0x30
 80053fe:	dde5      	ble.n	80053cc <Start_LORA_RECEIVE+0x120c>
		}
		DATA_FOR_PROCESSING[0] = MASTER_BIT;
 8005400:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005404:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]
		DATA_FOR_PROCESSING[49] = 0x00;
 800540c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005410:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		syspromsg = osPoolAlloc(syspropool);
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <Start_LORA_RECEIVE+0x1284>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f012 f927 	bl	8017672 <osPoolAlloc>
 8005424:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
		for(int i =0;i<50;i++)
 8005428:	2300      	movs	r3, #0
 800542a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800542e:	e01f      	b.n	8005470 <Start_LORA_RECEIVE+0x12b0>
 8005430:	20000009 	.word	0x20000009
 8005434:	200015d4 	.word	0x200015d4
 8005438:	20001e20 	.word	0x20001e20
 800543c:	20001f5c 	.word	0x20001f5c
 8005440:	20002a44 	.word	0x20002a44
 8005444:	200015d8 	.word	0x200015d8
		{
		syspromsg->DATA_TO_PROCESS[i] = DATA_FOR_PROCESSING[i];
 8005448:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800544c:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8005450:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8005454:	4413      	add	r3, r2
 8005456:	7819      	ldrb	r1, [r3, #0]
 8005458:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800545c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8005460:	4413      	add	r3, r2
 8005462:	460a      	mov	r2, r1
 8005464:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<50;i++)
 8005466:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800546a:	3301      	adds	r3, #1
 800546c:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8005470:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8005474:	2b31      	cmp	r3, #49	; 0x31
 8005476:	dde7      	ble.n	8005448 <Start_LORA_RECEIVE+0x1288>
		}
		osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 8005478:	4bab      	ldr	r3, [pc, #684]	; (8005728 <Start_LORA_RECEIVE+0x1568>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8005480:	2264      	movs	r2, #100	; 0x64
 8005482:	4618      	mov	r0, r3
 8005484:	f012 f9c2 	bl	801780c <osMessagePut>
		if((DATA_FROM_RCU[3] == CLOSE_LOOP_START)||(DATA_FROM_RCU[3] == OPEN_LOOP_START)||(DATA_FROM_RCU[3] == SLEEP)||(DATA_FROM_RCU[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_RCU[3]==CLOSE_LOOP_START_PROFILE))
 8005488:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800548c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b07      	cmp	r3, #7
 8005494:	d01b      	beq.n	80054ce <Start_LORA_RECEIVE+0x130e>
 8005496:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800549a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800549e:	78db      	ldrb	r3, [r3, #3]
 80054a0:	2b0d      	cmp	r3, #13
 80054a2:	d014      	beq.n	80054ce <Start_LORA_RECEIVE+0x130e>
 80054a4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80054a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	2bf0      	cmp	r3, #240	; 0xf0
 80054b0:	d00d      	beq.n	80054ce <Start_LORA_RECEIVE+0x130e>
 80054b2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80054b6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80054ba:	78db      	ldrb	r3, [r3, #3]
 80054bc:	2bdd      	cmp	r3, #221	; 0xdd
 80054be:	d006      	beq.n	80054ce <Start_LORA_RECEIVE+0x130e>
 80054c0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80054c4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	2b77      	cmp	r3, #119	; 0x77
 80054cc:	d155      	bne.n	800557a <Start_LORA_RECEIVE+0x13ba>
		{
		  for(int i =0;i<49;i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80054d4:	e015      	b.n	8005502 <Start_LORA_RECEIVE+0x1342>
		  {
			  DATA_FOR_PROCESSING[i] = DATA_FROM_RCU[i+1];
 80054d6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80054da:	3301      	adds	r3, #1
 80054dc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80054e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054e4:	5cd1      	ldrb	r1, [r2, r3]
 80054e6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80054ea:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80054ee:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80054f2:	4413      	add	r3, r2
 80054f4:	460a      	mov	r2, r1
 80054f6:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<49;i++)
 80054f8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80054fc:	3301      	adds	r3, #1
 80054fe:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8005502:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005506:	2b30      	cmp	r3, #48	; 0x30
 8005508:	dde5      	ble.n	80054d6 <Start_LORA_RECEIVE+0x1316>
		  }
		  DATA_FOR_PROCESSING[0] = MASTER_BIT;
 800550a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800550e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005512:	2202      	movs	r2, #2
 8005514:	701a      	strb	r2, [r3, #0]
		  DATA_FOR_PROCESSING[49] = 0x00;
 8005516:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800551a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		  slavemsg = osPoolAlloc(slavesendpool);
 8005524:	4b81      	ldr	r3, [pc, #516]	; (800572c <Start_LORA_RECEIVE+0x156c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f012 f8a2 	bl	8017672 <osPoolAlloc>
 800552e:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		  for(int i =0;i<50;i++)
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8005538:	e013      	b.n	8005562 <Start_LORA_RECEIVE+0x13a2>
		  {
			  slavemsg->SLAVE_DATA[i] = DATA_FOR_PROCESSING[i];
 800553a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800553e:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8005542:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005546:	4413      	add	r3, r2
 8005548:	7819      	ldrb	r1, [r3, #0]
 800554a:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 800554e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005552:	4413      	add	r3, r2
 8005554:	460a      	mov	r2, r1
 8005556:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<50;i++)
 8005558:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800555c:	3301      	adds	r3, #1
 800555e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8005562:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005566:	2b31      	cmp	r3, #49	; 0x31
 8005568:	dde7      	ble.n	800553a <Start_LORA_RECEIVE+0x137a>
		  }
		  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800556a:	4b71      	ldr	r3, [pc, #452]	; (8005730 <Start_LORA_RECEIVE+0x1570>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8005572:	2264      	movs	r2, #100	; 0x64
 8005574:	4618      	mov	r0, r3
 8005576:	f012 f949 	bl	801780c <osMessagePut>
		}
		state = 0;
 800557a:	4b6e      	ldr	r3, [pc, #440]	; (8005734 <Start_LORA_RECEIVE+0x1574>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
		break;
 8005580:	e17f      	b.n	8005882 <Start_LORA_RECEIVE+0x16c2>

		case UPDATE_PROFILE:
		for(int i =0;i<49;i++)
 8005582:	2300      	movs	r3, #0
 8005584:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8005588:	e015      	b.n	80055b6 <Start_LORA_RECEIVE+0x13f6>
		{
		DATA_OF_PROFILE[i] = DATA_FROM_RCU[i+1];
 800558a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800558e:	3301      	adds	r3, #1
 8005590:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8005594:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005598:	5cd1      	ldrb	r1, [r2, r3]
 800559a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800559e:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80055a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80055a6:	4413      	add	r3, r2
 80055a8:	460a      	mov	r2, r1
 80055aa:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<49;i++)
 80055ac:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80055b0:	3301      	adds	r3, #1
 80055b2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80055b6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80055ba:	2b30      	cmp	r3, #48	; 0x30
 80055bc:	dde5      	ble.n	800558a <Start_LORA_RECEIVE+0x13ca>
		}

		if((I_AM==I_AM_MASTER)&&(DATA_FROM_RCU[2]==MY_TCU_ID))
 80055be:	4b5e      	ldr	r3, [pc, #376]	; (8005738 <Start_LORA_RECEIVE+0x1578>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b0a      	cmp	r3, #10
 80055c4:	d138      	bne.n	8005638 <Start_LORA_RECEIVE+0x1478>
 80055c6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80055ca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80055ce:	789b      	ldrb	r3, [r3, #2]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d131      	bne.n	8005638 <Start_LORA_RECEIVE+0x1478>
		{
			for(int i=0;i<50;i++)
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80055da:	e018      	b.n	800560e <Start_LORA_RECEIVE+0x144e>
			{
				PROFILES[z][i] = DATA_OF_PROFILE[i];
 80055dc:	4b57      	ldr	r3, [pc, #348]	; (800573c <Start_LORA_RECEIVE+0x157c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80055e4:	f5a2 7102 	sub.w	r1, r2, #520	; 0x208
 80055e8:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80055ec:	440a      	add	r2, r1
 80055ee:	7810      	ldrb	r0, [r2, #0]
 80055f0:	4a53      	ldr	r2, [pc, #332]	; (8005740 <Start_LORA_RECEIVE+0x1580>)
 80055f2:	2132      	movs	r1, #50	; 0x32
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	441a      	add	r2, r3
 80055fa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80055fe:	4413      	add	r3, r2
 8005600:	4602      	mov	r2, r0
 8005602:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<50;i++)
 8005604:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800560e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005612:	2b31      	cmp	r3, #49	; 0x31
 8005614:	dde2      	ble.n	80055dc <Start_LORA_RECEIVE+0x141c>
			}
			PROFILE_COUNT=z;
 8005616:	4b49      	ldr	r3, [pc, #292]	; (800573c <Start_LORA_RECEIVE+0x157c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	4b49      	ldr	r3, [pc, #292]	; (8005744 <Start_LORA_RECEIVE+0x1584>)
 800561e:	701a      	strb	r2, [r3, #0]
			z = z+1;
 8005620:	4b46      	ldr	r3, [pc, #280]	; (800573c <Start_LORA_RECEIVE+0x157c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a45      	ldr	r2, [pc, #276]	; (800573c <Start_LORA_RECEIVE+0x157c>)
 8005628:	6013      	str	r3, [r2, #0]
			if(z==50)
 800562a:	4b44      	ldr	r3, [pc, #272]	; (800573c <Start_LORA_RECEIVE+0x157c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b32      	cmp	r3, #50	; 0x32
 8005630:	d102      	bne.n	8005638 <Start_LORA_RECEIVE+0x1478>
			{
				z=0;
 8005632:	4b42      	ldr	r3, [pc, #264]	; (800573c <Start_LORA_RECEIVE+0x157c>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
			}
		}
		if((I_AM==I_AM_MASTER)&&(DATA_FROM_RCU[2]!=MY_TCU_ID))
 8005638:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <Start_LORA_RECEIVE+0x1578>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b0a      	cmp	r3, #10
 800563e:	d137      	bne.n	80056b0 <Start_LORA_RECEIVE+0x14f0>
 8005640:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005644:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005648:	789b      	ldrb	r3, [r3, #2]
 800564a:	2b04      	cmp	r3, #4
 800564c:	d030      	beq.n	80056b0 <Start_LORA_RECEIVE+0x14f0>
		{
			DATA_OF_PROFILE[0] = MASTER_BIT;
 800564e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005652:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8005656:	2202      	movs	r2, #2
 8005658:	701a      	strb	r2, [r3, #0]
			  slavemsg = osPoolAlloc(slavesendpool);
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <Start_LORA_RECEIVE+0x156c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f012 f807 	bl	8017672 <osPoolAlloc>
 8005664:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
			  for(int i =0;i<50;i++)
 8005668:	2300      	movs	r3, #0
 800566a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800566e:	e013      	b.n	8005698 <Start_LORA_RECEIVE+0x14d8>
			  {
				  slavemsg->SLAVE_DATA[i] = DATA_OF_PROFILE[i];
 8005670:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005674:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8005678:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800567c:	4413      	add	r3, r2
 800567e:	7819      	ldrb	r1, [r3, #0]
 8005680:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8005684:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005688:	4413      	add	r3, r2
 800568a:	460a      	mov	r2, r1
 800568c:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<50;i++)
 800568e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005692:	3301      	adds	r3, #1
 8005694:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8005698:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800569c:	2b31      	cmp	r3, #49	; 0x31
 800569e:	dde7      	ble.n	8005670 <Start_LORA_RECEIVE+0x14b0>
			  }
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 80056a0:	4b23      	ldr	r3, [pc, #140]	; (8005730 <Start_LORA_RECEIVE+0x1570>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 80056a8:	2264      	movs	r2, #100	; 0x64
 80056aa:	4618      	mov	r0, r3
 80056ac:	f012 f8ae 	bl	801780c <osMessagePut>
		}
		state = 0;
 80056b0:	4b20      	ldr	r3, [pc, #128]	; (8005734 <Start_LORA_RECEIVE+0x1574>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
		SEND_ACK();
 80056b6:	f7fc fd2d 	bl	8002114 <SEND_ACK>
		break;
 80056ba:	e0e2      	b.n	8005882 <Start_LORA_RECEIVE+0x16c2>


		case SEND_DATA_TO_SLAVE:
		for(int i =0;i<49;i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80056c2:	e015      	b.n	80056f0 <Start_LORA_RECEIVE+0x1530>
		{
		DATA_FOR_PROCESSING[i] = DATA_FROM_RCU[i+1];
 80056c4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80056c8:	3301      	adds	r3, #1
 80056ca:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80056ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056d2:	5cd1      	ldrb	r1, [r2, r3]
 80056d4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80056d8:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80056dc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80056e0:	4413      	add	r3, r2
 80056e2:	460a      	mov	r2, r1
 80056e4:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<49;i++)
 80056e6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80056ea:	3301      	adds	r3, #1
 80056ec:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80056f0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80056f4:	2b30      	cmp	r3, #48	; 0x30
 80056f6:	dde5      	ble.n	80056c4 <Start_LORA_RECEIVE+0x1504>
		}
		DATA_FOR_PROCESSING[0] = MASTER_BIT;
 80056f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80056fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005700:	2202      	movs	r2, #2
 8005702:	701a      	strb	r2, [r3, #0]
		DATA_FOR_PROCESSING[49] = 0x00;
 8005704:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005708:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		slavemsg = osPoolAlloc(slavesendpool);
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <Start_LORA_RECEIVE+0x156c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f011 ffab 	bl	8017672 <osPoolAlloc>
 800571c:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		for(int i =0;i<50;i++)
 8005720:	2300      	movs	r3, #0
 8005722:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005726:	e023      	b.n	8005770 <Start_LORA_RECEIVE+0x15b0>
 8005728:	20001e28 	.word	0x20001e28
 800572c:	200015e4 	.word	0x200015e4
 8005730:	20001e30 	.word	0x20001e30
 8005734:	20002a44 	.word	0x20002a44
 8005738:	20000009 	.word	0x20000009
 800573c:	20002a48 	.word	0x20002a48
 8005740:	20001fb4 	.word	0x20001fb4
 8005744:	20002978 	.word	0x20002978
		{
		slavemsg->SLAVE_DATA[i] = DATA_FOR_PROCESSING[i];
 8005748:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800574c:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8005750:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005754:	4413      	add	r3, r2
 8005756:	7819      	ldrb	r1, [r3, #0]
 8005758:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 800575c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005760:	4413      	add	r3, r2
 8005762:	460a      	mov	r2, r1
 8005764:	701a      	strb	r2, [r3, #0]
		for(int i =0;i<50;i++)
 8005766:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800576a:	3301      	adds	r3, #1
 800576c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005770:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005774:	2b31      	cmp	r3, #49	; 0x31
 8005776:	dde7      	ble.n	8005748 <Start_LORA_RECEIVE+0x1588>
		}
		osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 8005778:	4b50      	ldr	r3, [pc, #320]	; (80058bc <Start_LORA_RECEIVE+0x16fc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8005780:	2264      	movs	r2, #100	; 0x64
 8005782:	4618      	mov	r0, r3
 8005784:	f012 f842 	bl	801780c <osMessagePut>
		if((DATA_FROM_RCU[3] == CLOSE_LOOP_START)||(DATA_FROM_RCU[3] == OPEN_LOOP_START)||(DATA_FROM_RCU[3] == SLEEP)||(DATA_FROM_RCU[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_RCU[3]==CLOSE_LOOP_START_PROFILE))
 8005788:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800578c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	2b07      	cmp	r3, #7
 8005794:	d01b      	beq.n	80057ce <Start_LORA_RECEIVE+0x160e>
 8005796:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800579a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800579e:	78db      	ldrb	r3, [r3, #3]
 80057a0:	2b0d      	cmp	r3, #13
 80057a2:	d014      	beq.n	80057ce <Start_LORA_RECEIVE+0x160e>
 80057a4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80057a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80057ac:	78db      	ldrb	r3, [r3, #3]
 80057ae:	2bf0      	cmp	r3, #240	; 0xf0
 80057b0:	d00d      	beq.n	80057ce <Start_LORA_RECEIVE+0x160e>
 80057b2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80057b6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80057ba:	78db      	ldrb	r3, [r3, #3]
 80057bc:	2bdd      	cmp	r3, #221	; 0xdd
 80057be:	d006      	beq.n	80057ce <Start_LORA_RECEIVE+0x160e>
 80057c0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80057c4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80057c8:	78db      	ldrb	r3, [r3, #3]
 80057ca:	2b77      	cmp	r3, #119	; 0x77
 80057cc:	d155      	bne.n	800587a <Start_LORA_RECEIVE+0x16ba>
		{
		  for(int i =0;i<49;i++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80057d4:	e015      	b.n	8005802 <Start_LORA_RECEIVE+0x1642>
		  {
			  DATA_FOR_PROCESSING[i] = DATA_FROM_RCU[i+1];
 80057d6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80057da:	3301      	adds	r3, #1
 80057dc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80057e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80057e4:	5cd1      	ldrb	r1, [r2, r3]
 80057e6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80057ea:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 80057ee:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80057f2:	4413      	add	r3, r2
 80057f4:	460a      	mov	r2, r1
 80057f6:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<49;i++)
 80057f8:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8005802:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	dde5      	ble.n	80057d6 <Start_LORA_RECEIVE+0x1616>
		  }
		  DATA_FOR_PROCESSING[0] = MASTER_BIT;
 800580a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800580e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
		  DATA_FOR_PROCESSING[49] = 0x00;
 8005816:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800581a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		  syspromsg = osPoolAlloc(syspropool);
 8005824:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <Start_LORA_RECEIVE+0x1700>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f011 ff22 	bl	8017672 <osPoolAlloc>
 800582e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
		  for(int i =0;i<50;i++)
 8005832:	2300      	movs	r3, #0
 8005834:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8005838:	e013      	b.n	8005862 <Start_LORA_RECEIVE+0x16a2>
		  {
			  syspromsg->DATA_TO_PROCESS[i] = DATA_FOR_PROCESSING[i];
 800583a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800583e:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8005842:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8005846:	4413      	add	r3, r2
 8005848:	7819      	ldrb	r1, [r3, #0]
 800584a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800584e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8005852:	4413      	add	r3, r2
 8005854:	460a      	mov	r2, r1
 8005856:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<50;i++)
 8005858:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800585c:	3301      	adds	r3, #1
 800585e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8005862:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8005866:	2b31      	cmp	r3, #49	; 0x31
 8005868:	dde7      	ble.n	800583a <Start_LORA_RECEIVE+0x167a>
		  }
		  osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 800586a:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <Start_LORA_RECEIVE+0x1704>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8005872:	2264      	movs	r2, #100	; 0x64
 8005874:	4618      	mov	r0, r3
 8005876:	f011 ffc9 	bl	801780c <osMessagePut>
		}
		state = 0;
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <Start_LORA_RECEIVE+0x1708>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
		break;
 8005880:	bf00      	nop
		}


		if(DATA_FROM_RCU[40]==ACK_NACK_DATA)
 8005882:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005886:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800588a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800588e:	2b9a      	cmp	r3, #154	; 0x9a
 8005890:	d10e      	bne.n	80058b0 <Start_LORA_RECEIVE+0x16f0>
		{
			  if(DATA_FROM_RCU[41]==ACK)
 8005892:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8005896:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800589a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800589e:	2b61      	cmp	r3, #97	; 0x61
 80058a0:	d106      	bne.n	80058b0 <Start_LORA_RECEIVE+0x16f0>
			  {
			  xTaskNotifyGive(DATA_LOGGINGHandle);
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <Start_LORA_RECEIVE+0x170c>)
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	2300      	movs	r3, #0
 80058a8:	2202      	movs	r2, #2
 80058aa:	2100      	movs	r1, #0
 80058ac:	f014 f9be 	bl	8019c2c <xTaskGenericNotify>
		}
		}
		}


    osDelay(1);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f011 fdb8 	bl	8017426 <osDelay>
	  memset(DATA_FROM_RCU,0,LORA_RX_BUFF_SIZE);
 80058b6:	f7fe bc8f 	b.w	80041d8 <Start_LORA_RECEIVE+0x18>
 80058ba:	bf00      	nop
 80058bc:	20001e30 	.word	0x20001e30
 80058c0:	200015d8 	.word	0x200015d8
 80058c4:	20001e28 	.word	0x20001e28
 80058c8:	20002a44 	.word	0x20002a44
 80058cc:	20001e00 	.word	0x20001e00

080058d0 <Start_LORA_SEND>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LORA_SEND */
void Start_LORA_SEND(void const * argument)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b0bc      	sub	sp, #240	; 0xf0
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	6078      	str	r0, [r7, #4]
	uint8_t DATA_FOR_RCU[MAX_BUFFER_SIZE];
	uint8_t TXPacketL;
  /* Infinite loop */
  for(;;)
  {
	  lorasendevt = osMessageGet(LORA_SEND_qHandle, osWaitForever);
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <Start_LORA_SEND+0x7c>)
 80058da:	6819      	ldr	r1, [r3, #0]
 80058dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	4618      	mov	r0, r3
 80058e6:	f011 ffd1 	bl	801788c <osMessageGet>
	  if(lorasendevt.status == osEventMessage)
 80058ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d128      	bne.n	8005944 <Start_LORA_SEND+0x74>
	  {
		  lorasendmsg = lorasendevt.value.p;
 80058f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  memcpy(DATA_FOR_RCU,lorasendmsg->LORA_SEND_DATA,200);
 80058fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058fe:	f107 030c 	add.w	r3, r7, #12
 8005902:	4611      	mov	r1, r2
 8005904:	22c8      	movs	r2, #200	; 0xc8
 8005906:	4618      	mov	r0, r3
 8005908:	f015 fc75 	bl	801b1f6 <memcpy>
		  osPoolFree(lorasendpool, lorasendmsg);
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <Start_LORA_SEND+0x80>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005914:	4618      	mov	r0, r3
 8005916:	f011 ff10 	bl	801773a <osPoolFree>
		  TXPacketL = 200;
 800591a:	23c8      	movs	r3, #200	; 0xc8
 800591c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		  RADIO_CHECK_BUSY();
 8005920:	f7fb fabc 	bl	8000e9c <RADIO_CHECK_BUSY>
		  RADIO_TRANSMIT(DATA_FOR_RCU,TXPacketL,5000,TXPower,WAIT_TX);
 8005924:	f897 10e3 	ldrb.w	r1, [r7, #227]	; 0xe3
 8005928:	f107 000c 	add.w	r0, r7, #12
 800592c:	2301      	movs	r3, #1
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2316      	movs	r3, #22
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	f7fb ff15 	bl	8001764 <RADIO_TRANSMIT>
		  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800593a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800593e:	4805      	ldr	r0, [pc, #20]	; (8005954 <Start_LORA_SEND+0x84>)
 8005940:	f00c f9ad 	bl	8011c9e <HAL_GPIO_TogglePin>
	  }
    osDelay(5);
 8005944:	2005      	movs	r0, #5
 8005946:	f011 fd6e 	bl	8017426 <osDelay>
	  lorasendevt = osMessageGet(LORA_SEND_qHandle, osWaitForever);
 800594a:	e7c5      	b.n	80058d8 <Start_LORA_SEND+0x8>
 800594c:	20001e1c 	.word	0x20001e1c
 8005950:	200015c8 	.word	0x200015c8
 8005954:	40021000 	.word	0x40021000

08005958 <Start_MAS_SEND_SLAVE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_MAS_SEND_SLAVE */
void Start_MAS_SEND_SLAVE(void const * argument)
{
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	b0d9      	sub	sp, #356	; 0x164
 800595c:	af00      	add	r7, sp, #0
 800595e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005962:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005966:	6018      	str	r0, [r3, #0]
	osEvent idevt,slaveevt;

	uint8_t SLAVE_ID_RX[3];
	uint8_t DATA_FOR_SLAVE[50];
	uint8_t DATA_FOR_RCU[MAX_BUFFER_SIZE];
	uint8_t DUMMY =0;
 8005968:	2300      	movs	r3, #0
 800596a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	uint8_t CRC_VALUE_FOR_LORA;
	int notification_value;
  /* Infinite loop */
  for(;;)
  {
	  slaveevt = osMessageGet(SLAVE_SEND_qHandle, 0);
 800596e:	4bdb      	ldr	r3, [pc, #876]	; (8005cdc <Start_MAS_SEND_SLAVE+0x384>)
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	2200      	movs	r2, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f011 ff87 	bl	801788c <osMessageGet>
	  if(slaveevt.status == osEventMessage)
 800597e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005982:	2b10      	cmp	r3, #16
 8005984:	d13c      	bne.n	8005a00 <Start_MAS_SEND_SLAVE+0xa8>
	  {
		  memset(DATA_FOR_SLAVE,0xFF,50);
 8005986:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800598a:	2232      	movs	r2, #50	; 0x32
 800598c:	21ff      	movs	r1, #255	; 0xff
 800598e:	4618      	mov	r0, r3
 8005990:	f015 fc3f 	bl	801b212 <memset>
		  slavemsg = slaveevt.value.p;
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005998:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		  memcpy(DATA_FOR_SLAVE,slavemsg->SLAVE_DATA,50);
 800599c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059a0:	461c      	mov	r4, r3
 80059a2:	f107 06d0 	add.w	r6, r7, #208	; 0xd0
 80059a6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80059aa:	4635      	mov	r5, r6
 80059ac:	4623      	mov	r3, r4
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b8:	3410      	adds	r4, #16
 80059ba:	3610      	adds	r6, #16
 80059bc:	4564      	cmp	r4, ip
 80059be:	d1f4      	bne.n	80059aa <Start_MAS_SEND_SLAVE+0x52>
 80059c0:	4632      	mov	r2, r6
 80059c2:	4623      	mov	r3, r4
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	8013      	strh	r3, [r2, #0]
		  osPoolFree(slavesendpool, slavemsg);
 80059c8:	4bc5      	ldr	r3, [pc, #788]	; (8005ce0 <Start_MAS_SEND_SLAVE+0x388>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80059d0:	4618      	mov	r0, r3
 80059d2:	f011 feb2 	bl	801773a <osPoolFree>
		  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_SLAVE,49);
 80059d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80059da:	2231      	movs	r2, #49	; 0x31
 80059dc:	4619      	mov	r1, r3
 80059de:	48c1      	ldr	r0, [pc, #772]	; (8005ce4 <Start_MAS_SEND_SLAVE+0x38c>)
 80059e0:	f00b f9dc 	bl	8010d9c <HAL_CRC_Calculate>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
		  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 80059ea:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80059ee:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 80059f2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80059f6:	2364      	movs	r3, #100	; 0x64
 80059f8:	2232      	movs	r2, #50	; 0x32
 80059fa:	48bb      	ldr	r0, [pc, #748]	; (8005ce8 <Start_MAS_SEND_SLAVE+0x390>)
 80059fc:	f010 f9c8 	bl	8015d90 <HAL_UART_Transmit>
	  }

	  idevt = osMessageGet(SLAVE_ID_qHandle, 0);
 8005a00:	4bba      	ldr	r3, [pc, #744]	; (8005cec <Start_MAS_SEND_SLAVE+0x394>)
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f011 ff3e 	bl	801788c <osMessageGet>
	  if(idevt.status == osEventMessage)
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	f040 8648 	bne.w	80066aa <Start_MAS_SEND_SLAVE+0xd52>
	  {
		  idmsg = idevt.value.p;
 8005a1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  for(int i =0;i<3;i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005a28:	e011      	b.n	8005a4e <Start_MAS_SEND_SLAVE+0xf6>
		  {
			  SLAVE_ID_RX[i] = idmsg->SLAVE_ID[i];
 8005a2a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005a2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a32:	4413      	add	r3, r2
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8005a3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a3e:	4413      	add	r3, r2
 8005a40:	460a      	mov	r2, r1
 8005a42:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<3;i++)
 8005a44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005a4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	dde9      	ble.n	8005a2a <Start_MAS_SEND_SLAVE+0xd2>
		  }
		  osPoolFree(slaveidpool, idmsg);
 8005a56:	4ba6      	ldr	r3, [pc, #664]	; (8005cf0 <Start_MAS_SEND_SLAVE+0x398>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f011 fe6b 	bl	801773a <osPoolFree>
		  memset(DATA_FOR_SLAVE,0xFF,50);
 8005a64:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a68:	2232      	movs	r2, #50	; 0x32
 8005a6a:	21ff      	movs	r1, #255	; 0xff
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f015 fbd0 	bl	801b212 <memset>
		  DATA_FOR_SLAVE[0] = MASTER_BIT;
 8005a72:	2302      	movs	r3, #2
 8005a74:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
		  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[0];
 8005a78:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005a7c:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
		  DATA_FOR_SLAVE[2] = ALL_OK;
 8005a80:	23a0      	movs	r3, #160	; 0xa0
 8005a82:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
		  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_SLAVE,49);
 8005a86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a8a:	2231      	movs	r2, #49	; 0x31
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4895      	ldr	r0, [pc, #596]	; (8005ce4 <Start_MAS_SEND_SLAVE+0x38c>)
 8005a90:	f00b f984 	bl	8010d9c <HAL_CRC_Calculate>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
		  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 8005a9a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005a9e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8005aa2:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005aa6:	2364      	movs	r3, #100	; 0x64
 8005aa8:	2232      	movs	r2, #50	; 0x32
 8005aaa:	488f      	ldr	r0, [pc, #572]	; (8005ce8 <Start_MAS_SEND_SLAVE+0x390>)
 8005aac:	f010 f970 	bl	8015d90 <HAL_UART_Transmit>

		  notification_value = ulTaskNotifyTake(0,5000);
 8005ab0:	f241 3188 	movw	r1, #5000	; 0x1388
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f014 f86d 	bl	8019b94 <ulTaskNotifyTake>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		  if(notification_value >0)
 8005ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f340 830c 	ble.w	80060e2 <Start_MAS_SEND_SLAVE+0x78a>
		  {
			  notification_value=0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			  ID_S_PRESENT[0] = SLAVE_ID_RX[0];
 8005ad0:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8005ad4:	4b87      	ldr	r3, [pc, #540]	; (8005cf4 <Start_MAS_SEND_SLAVE+0x39c>)
 8005ad6:	701a      	strb	r2, [r3, #0]
			  memset(DATA_FOR_SLAVE,0xFF,50);
 8005ad8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005adc:	2232      	movs	r2, #50	; 0x32
 8005ade:	21ff      	movs	r1, #255	; 0xff
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f015 fb96 	bl	801b212 <memset>
			  DATA_FOR_SLAVE[0] = MASTER_BIT;
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
			  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[1];
 8005aec:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005af0:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			  DATA_FOR_SLAVE[2] = ALL_OK;
 8005af4:	23a0      	movs	r3, #160	; 0xa0
 8005af6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
			  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_SLAVE,49);
 8005afa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005afe:	2231      	movs	r2, #49	; 0x31
 8005b00:	4619      	mov	r1, r3
 8005b02:	4878      	ldr	r0, [pc, #480]	; (8005ce4 <Start_MAS_SEND_SLAVE+0x38c>)
 8005b04:	f00b f94a 	bl	8010d9c <HAL_CRC_Calculate>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 8005b0e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b12:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
			  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8005b16:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005b1a:	2364      	movs	r3, #100	; 0x64
 8005b1c:	2232      	movs	r2, #50	; 0x32
 8005b1e:	4872      	ldr	r0, [pc, #456]	; (8005ce8 <Start_MAS_SEND_SLAVE+0x390>)
 8005b20:	f010 f936 	bl	8015d90 <HAL_UART_Transmit>

			  notification_value = ulTaskNotifyTake(0,5000);
 8005b24:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f014 f833 	bl	8019b94 <ulTaskNotifyTake>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			  if(notification_value >0)
 8005b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f340 8174 	ble.w	8005e26 <Start_MAS_SEND_SLAVE+0x4ce>
			  {
				  notification_value=0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				  ID_S_PRESENT[1] = SLAVE_ID_RX[1];
 8005b44:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8005b48:	4b6a      	ldr	r3, [pc, #424]	; (8005cf4 <Start_MAS_SEND_SLAVE+0x39c>)
 8005b4a:	705a      	strb	r2, [r3, #1]
				  memset(DATA_FOR_SLAVE,0xFF,50);
 8005b4c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b50:	2232      	movs	r2, #50	; 0x32
 8005b52:	21ff      	movs	r1, #255	; 0xff
 8005b54:	4618      	mov	r0, r3
 8005b56:	f015 fb5c 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
				  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[2];
 8005b60:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005b64:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
				  DATA_FOR_SLAVE[2] = ALL_OK;
 8005b68:	23a0      	movs	r3, #160	; 0xa0
 8005b6a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
				  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_SLAVE,49);
 8005b6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b72:	2231      	movs	r2, #49	; 0x31
 8005b74:	4619      	mov	r1, r3
 8005b76:	485b      	ldr	r0, [pc, #364]	; (8005ce4 <Start_MAS_SEND_SLAVE+0x38c>)
 8005b78:	f00b f910 	bl	8010d9c <HAL_CRC_Calculate>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 8005b82:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005b86:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8005b8a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005b8e:	2364      	movs	r3, #100	; 0x64
 8005b90:	2232      	movs	r2, #50	; 0x32
 8005b92:	4855      	ldr	r0, [pc, #340]	; (8005ce8 <Start_MAS_SEND_SLAVE+0x390>)
 8005b94:	f010 f8fc 	bl	8015d90 <HAL_UART_Transmit>

				  notification_value = ulTaskNotifyTake(0,5000);
 8005b98:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f013 fff9 	bl	8019b94 <ulTaskNotifyTake>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				  if(notification_value >0)
 8005ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f340 80ad 	ble.w	8005d0c <Start_MAS_SEND_SLAVE+0x3b4>
				  {
					  notification_value=0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					  ID_S_PRESENT[2] = SLAVE_ID_RX[2];
 8005bb8:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8005bbc:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <Start_MAS_SEND_SLAVE+0x39c>)
 8005bbe:	709a      	strb	r2, [r3, #2]
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	22c8      	movs	r2, #200	; 0xc8
 8005bc6:	21ff      	movs	r1, #255	; 0xff
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f015 fb22 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_4SYS;
 8005bce:	4b4a      	ldr	r3, [pc, #296]	; (8005cf8 <Start_MAS_SEND_SLAVE+0x3a0>)
 8005bd0:	22c8      	movs	r2, #200	; 0xc8
 8005bd2:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 8005bd4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005bd8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005bdc:	2201      	movs	r2, #1
 8005bde:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 8005be0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005be4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005be8:	2204      	movs	r2, #4
 8005bea:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 8005bec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005bf0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005bf4:	220a      	movs	r2, #10
 8005bf6:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 8005bf8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005bfc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c00:	2204      	movs	r2, #4
 8005c02:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 8005c04:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <Start_MAS_SEND_SLAVE+0x39c>)
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005c0c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c10:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = ID_S_PRESENT[1];
 8005c12:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <Start_MAS_SEND_SLAVE+0x39c>)
 8005c14:	785a      	ldrb	r2, [r3, #1]
 8005c16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005c1a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c1e:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = ID_S_PRESENT[2];
 8005c20:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <Start_MAS_SEND_SLAVE+0x39c>)
 8005c22:	789a      	ldrb	r2, [r3, #2]
 8005c24:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005c28:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c2c:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_4SYS;
 8005c2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005c32:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c36:	22c8      	movs	r2, #200	; 0xc8
 8005c38:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	22c7      	movs	r2, #199	; 0xc7
 8005c40:	4619      	mov	r1, r3
 8005c42:	4828      	ldr	r0, [pc, #160]	; (8005ce4 <Start_MAS_SEND_SLAVE+0x38c>)
 8005c44:	f00b f8aa 	bl	8010d9c <HAL_CRC_Calculate>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 8005c4e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005c52:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c56:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8005c5a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 8005c5e:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <Start_MAS_SEND_SLAVE+0x3a4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d003      	beq.n	8005c6e <Start_MAS_SEND_SLAVE+0x316>
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d02e      	beq.n	8005cc8 <Start_MAS_SEND_SLAVE+0x370>
 8005c6a:	f000 bd1f 	b.w	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <Start_MAS_SEND_SLAVE+0x3a8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f011 fcfd 	bl	8017672 <osPoolAlloc>
 8005c78:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005c82:	e013      	b.n	8005cac <Start_MAS_SEND_SLAVE+0x354>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 8005c84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005c88:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8005c8c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005c90:	4413      	add	r3, r2
 8005c92:	7819      	ldrb	r1, [r3, #0]
 8005c94:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005c98:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005c9c:	4413      	add	r3, r2
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8005ca2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005cac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005cb0:	2bc7      	cmp	r3, #199	; 0xc7
 8005cb2:	dde7      	ble.n	8005c84 <Start_MAS_SEND_SLAVE+0x32c>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <Start_MAS_SEND_SLAVE+0x3ac>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005cbc:	2264      	movs	r2, #100	; 0x64
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f011 fda4 	bl	801780c <osMessagePut>
						  break;
 8005cc4:	f000 bcf2 	b.w	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 8005cc8:	f107 0108 	add.w	r1, r7, #8
 8005ccc:	2364      	movs	r3, #100	; 0x64
 8005cce:	22c8      	movs	r2, #200	; 0xc8
 8005cd0:	480d      	ldr	r0, [pc, #52]	; (8005d08 <Start_MAS_SEND_SLAVE+0x3b0>)
 8005cd2:	f010 f85d 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 8005cd6:	f000 bce9 	b.w	80066ac <Start_MAS_SEND_SLAVE+0xd54>
 8005cda:	bf00      	nop
 8005cdc:	20001e30 	.word	0x20001e30
 8005ce0:	200015e4 	.word	0x200015e4
 8005ce4:	20001718 	.word	0x20001718
 8005ce8:	20001a14 	.word	0x20001a14
 8005cec:	20001e20 	.word	0x20001e20
 8005cf0:	200015d4 	.word	0x200015d4
 8005cf4:	20001f54 	.word	0x20001f54
 8005cf8:	20001e93 	.word	0x20001e93
 8005cfc:	20001f5c 	.word	0x20001f5c
 8005d00:	200015c8 	.word	0x200015c8
 8005d04:	20001e1c 	.word	0x20001e1c
 8005d08:	20001bac 	.word	0x20001bac
					  }

				  }
				  else
				  {
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 8005d0c:	f107 0308 	add.w	r3, r7, #8
 8005d10:	22c8      	movs	r2, #200	; 0xc8
 8005d12:	21ff      	movs	r1, #255	; 0xff
 8005d14:	4618      	mov	r0, r3
 8005d16:	f015 fa7c 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_3SYS;
 8005d1a:	4bd5      	ldr	r3, [pc, #852]	; (8006070 <Start_MAS_SEND_SLAVE+0x718>)
 8005d1c:	2296      	movs	r2, #150	; 0x96
 8005d1e:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 8005d20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d24:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 8005d2c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d30:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d34:	2204      	movs	r2, #4
 8005d36:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 8005d38:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d3c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d40:	220a      	movs	r2, #10
 8005d42:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 8005d44:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d48:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 8005d50:	4bc8      	ldr	r3, [pc, #800]	; (8006074 <Start_MAS_SEND_SLAVE+0x71c>)
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d58:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d5c:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = ID_S_PRESENT[1];
 8005d5e:	4bc5      	ldr	r3, [pc, #788]	; (8006074 <Start_MAS_SEND_SLAVE+0x71c>)
 8005d60:	785a      	ldrb	r2, [r3, #1]
 8005d62:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d66:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d6a:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = DUMMY;
 8005d6c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d70:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d74:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8005d78:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_3SYS;
 8005d7a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d7e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d82:	2296      	movs	r2, #150	; 0x96
 8005d84:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	22c7      	movs	r2, #199	; 0xc7
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	48ba      	ldr	r0, [pc, #744]	; (8006078 <Start_MAS_SEND_SLAVE+0x720>)
 8005d90:	f00b f804 	bl	8010d9c <HAL_CRC_Calculate>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 8005d9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005d9e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005da2:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8005da6:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 8005daa:	4bb4      	ldr	r3, [pc, #720]	; (800607c <Start_MAS_SEND_SLAVE+0x724>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d003      	beq.n	8005dba <Start_MAS_SEND_SLAVE+0x462>
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d02e      	beq.n	8005e14 <Start_MAS_SEND_SLAVE+0x4bc>
 8005db6:	f000 bc79 	b.w	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 8005dba:	4bb1      	ldr	r3, [pc, #708]	; (8006080 <Start_MAS_SEND_SLAVE+0x728>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f011 fc57 	bl	8017672 <osPoolAlloc>
 8005dc4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005dce:	e013      	b.n	8005df8 <Start_MAS_SEND_SLAVE+0x4a0>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 8005dd0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005dd4:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8005dd8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005ddc:	4413      	add	r3, r2
 8005dde:	7819      	ldrb	r1, [r3, #0]
 8005de0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005de4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005de8:	4413      	add	r3, r2
 8005dea:	460a      	mov	r2, r1
 8005dec:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8005dee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005df2:	3301      	adds	r3, #1
 8005df4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005df8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005dfc:	2bc7      	cmp	r3, #199	; 0xc7
 8005dfe:	dde7      	ble.n	8005dd0 <Start_MAS_SEND_SLAVE+0x478>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 8005e00:	4ba0      	ldr	r3, [pc, #640]	; (8006084 <Start_MAS_SEND_SLAVE+0x72c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005e08:	2264      	movs	r2, #100	; 0x64
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f011 fcfe 	bl	801780c <osMessagePut>
						  break;
 8005e10:	f000 bc4c 	b.w	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 8005e14:	f107 0108 	add.w	r1, r7, #8
 8005e18:	2364      	movs	r3, #100	; 0x64
 8005e1a:	22c8      	movs	r2, #200	; 0xc8
 8005e1c:	489a      	ldr	r0, [pc, #616]	; (8006088 <Start_MAS_SEND_SLAVE+0x730>)
 8005e1e:	f00f ffb7 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 8005e22:	f000 bc43 	b.w	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  }
				  }
			  }
			  else
			  {
				  memset(DATA_FOR_SLAVE,0xFF,50);
 8005e26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005e2a:	2232      	movs	r2, #50	; 0x32
 8005e2c:	21ff      	movs	r1, #255	; 0xff
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f015 f9ef 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 8005e34:	2302      	movs	r3, #2
 8005e36:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
				  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[2];
 8005e3a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005e3e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
				  DATA_FOR_SLAVE[2] = ALL_OK;
 8005e42:	23a0      	movs	r3, #160	; 0xa0
 8005e44:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
				  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_SLAVE,49);
 8005e48:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005e4c:	2231      	movs	r2, #49	; 0x31
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4889      	ldr	r0, [pc, #548]	; (8006078 <Start_MAS_SEND_SLAVE+0x720>)
 8005e52:	f00a ffa3 	bl	8010d9c <HAL_CRC_Calculate>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 8005e5c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005e60:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8005e64:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005e68:	2364      	movs	r3, #100	; 0x64
 8005e6a:	2232      	movs	r2, #50	; 0x32
 8005e6c:	4887      	ldr	r0, [pc, #540]	; (800608c <Start_MAS_SEND_SLAVE+0x734>)
 8005e6e:	f00f ff8f 	bl	8015d90 <HAL_UART_Transmit>

				  notification_value = ulTaskNotifyTake(0,5000);
 8005e72:	f241 3188 	movw	r1, #5000	; 0x1388
 8005e76:	2000      	movs	r0, #0
 8005e78:	f013 fe8c 	bl	8019b94 <ulTaskNotifyTake>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				  if(notification_value >0)
 8005e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f340 8091 	ble.w	8005fae <Start_MAS_SEND_SLAVE+0x656>
				  {
					  notification_value=0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					  ID_S_PRESENT[1] = SLAVE_ID_RX[2];
 8005e92:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8005e96:	4b77      	ldr	r3, [pc, #476]	; (8006074 <Start_MAS_SEND_SLAVE+0x71c>)
 8005e98:	705a      	strb	r2, [r3, #1]
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	22c8      	movs	r2, #200	; 0xc8
 8005ea0:	21ff      	movs	r1, #255	; 0xff
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f015 f9b5 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_3SYS;
 8005ea8:	4b71      	ldr	r3, [pc, #452]	; (8006070 <Start_MAS_SEND_SLAVE+0x718>)
 8005eaa:	2296      	movs	r2, #150	; 0x96
 8005eac:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 8005eae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005eb2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 8005eba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005ebe:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 8005ec6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005eca:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005ece:	220a      	movs	r2, #10
 8005ed0:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 8005ed2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005ed6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005eda:	2204      	movs	r2, #4
 8005edc:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 8005ede:	4b65      	ldr	r3, [pc, #404]	; (8006074 <Start_MAS_SEND_SLAVE+0x71c>)
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005ee6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005eea:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = ID_S_PRESENT[1];
 8005eec:	4b61      	ldr	r3, [pc, #388]	; (8006074 <Start_MAS_SEND_SLAVE+0x71c>)
 8005eee:	785a      	ldrb	r2, [r3, #1]
 8005ef0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005ef4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005ef8:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = DUMMY;
 8005efa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005efe:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005f02:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8005f06:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_3SYS;
 8005f08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005f0c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005f10:	2296      	movs	r2, #150	; 0x96
 8005f12:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	22c7      	movs	r2, #199	; 0xc7
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4856      	ldr	r0, [pc, #344]	; (8006078 <Start_MAS_SEND_SLAVE+0x720>)
 8005f1e:	f00a ff3d 	bl	8010d9c <HAL_CRC_Calculate>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 8005f28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005f2c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005f30:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8005f34:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 8005f38:	4b50      	ldr	r3, [pc, #320]	; (800607c <Start_MAS_SEND_SLAVE+0x724>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d002      	beq.n	8005f46 <Start_MAS_SEND_SLAVE+0x5ee>
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d02c      	beq.n	8005f9e <Start_MAS_SEND_SLAVE+0x646>
 8005f44:	e3b2      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 8005f46:	4b4e      	ldr	r3, [pc, #312]	; (8006080 <Start_MAS_SEND_SLAVE+0x728>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f011 fb91 	bl	8017672 <osPoolAlloc>
 8005f50:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005f5a:	e013      	b.n	8005f84 <Start_MAS_SEND_SLAVE+0x62c>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 8005f5c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005f60:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8005f64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005f68:	4413      	add	r3, r2
 8005f6a:	7819      	ldrb	r1, [r3, #0]
 8005f6c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005f70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005f74:	4413      	add	r3, r2
 8005f76:	460a      	mov	r2, r1
 8005f78:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8005f7a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005f84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005f88:	2bc7      	cmp	r3, #199	; 0xc7
 8005f8a:	dde7      	ble.n	8005f5c <Start_MAS_SEND_SLAVE+0x604>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 8005f8c:	4b3d      	ldr	r3, [pc, #244]	; (8006084 <Start_MAS_SEND_SLAVE+0x72c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005f94:	2264      	movs	r2, #100	; 0x64
 8005f96:	4618      	mov	r0, r3
 8005f98:	f011 fc38 	bl	801780c <osMessagePut>
						  break;
 8005f9c:	e386      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 8005f9e:	f107 0108 	add.w	r1, r7, #8
 8005fa2:	2364      	movs	r3, #100	; 0x64
 8005fa4:	22c8      	movs	r2, #200	; 0xc8
 8005fa6:	4838      	ldr	r0, [pc, #224]	; (8006088 <Start_MAS_SEND_SLAVE+0x730>)
 8005fa8:	f00f fef2 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 8005fac:	e37e      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  }
				  }
				  else
				  {
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	22c8      	movs	r2, #200	; 0xc8
 8005fb4:	21ff      	movs	r1, #255	; 0xff
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f015 f92b 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_2SYS;
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <Start_MAS_SEND_SLAVE+0x718>)
 8005fbe:	2264      	movs	r2, #100	; 0x64
 8005fc0:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 8005fc2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005fc6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 8005fce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005fd2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 8005fda:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005fde:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005fe2:	220a      	movs	r2, #10
 8005fe4:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 8005fe6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005fea:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005fee:	2204      	movs	r2, #4
 8005ff0:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <Start_MAS_SEND_SLAVE+0x71c>)
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005ffa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005ffe:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = DUMMY;
 8006000:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006004:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006008:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800600c:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = DUMMY;
 800600e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006012:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006016:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800601a:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_2SYS;
 800601c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006020:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006024:	2264      	movs	r2, #100	; 0x64
 8006026:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	22c7      	movs	r2, #199	; 0xc7
 800602e:	4619      	mov	r1, r3
 8006030:	4811      	ldr	r0, [pc, #68]	; (8006078 <Start_MAS_SEND_SLAVE+0x720>)
 8006032:	f00a feb3 	bl	8010d9c <HAL_CRC_Calculate>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 800603c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006040:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006044:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8006048:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <Start_MAS_SEND_SLAVE+0x724>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d002      	beq.n	800605a <Start_MAS_SEND_SLAVE+0x702>
 8006054:	2b02      	cmp	r3, #2
 8006056:	d03c      	beq.n	80060d2 <Start_MAS_SEND_SLAVE+0x77a>
 8006058:	e328      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <Start_MAS_SEND_SLAVE+0x728>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f011 fb07 	bl	8017672 <osPoolAlloc>
 8006064:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800606e:	e023      	b.n	80060b8 <Start_MAS_SEND_SLAVE+0x760>
 8006070:	20001e93 	.word	0x20001e93
 8006074:	20001f54 	.word	0x20001f54
 8006078:	20001718 	.word	0x20001718
 800607c:	20001f5c 	.word	0x20001f5c
 8006080:	200015c8 	.word	0x200015c8
 8006084:	20001e1c 	.word	0x20001e1c
 8006088:	20001bac 	.word	0x20001bac
 800608c:	20001a14 	.word	0x20001a14
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 8006090:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006094:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8006098:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800609c:	4413      	add	r3, r2
 800609e:	7819      	ldrb	r1, [r3, #0]
 80060a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80060a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060a8:	4413      	add	r3, r2
 80060aa:	460a      	mov	r2, r1
 80060ac:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 80060ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060b2:	3301      	adds	r3, #1
 80060b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80060b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060bc:	2bc7      	cmp	r3, #199	; 0xc7
 80060be:	dde7      	ble.n	8006090 <Start_MAS_SEND_SLAVE+0x738>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 80060c0:	4bcc      	ldr	r3, [pc, #816]	; (80063f4 <Start_MAS_SEND_SLAVE+0xa9c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80060c8:	2264      	movs	r2, #100	; 0x64
 80060ca:	4618      	mov	r0, r3
 80060cc:	f011 fb9e 	bl	801780c <osMessagePut>
						  break;
 80060d0:	e2ec      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 80060d2:	f107 0108 	add.w	r1, r7, #8
 80060d6:	2364      	movs	r3, #100	; 0x64
 80060d8:	22c8      	movs	r2, #200	; 0xc8
 80060da:	48c7      	ldr	r0, [pc, #796]	; (80063f8 <Start_MAS_SEND_SLAVE+0xaa0>)
 80060dc:	f00f fe58 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 80060e0:	e2e4      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
				  }
			  }
		  }
		  else
		  {
			  memset(DATA_FOR_SLAVE,0xFF,50);
 80060e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80060e6:	2232      	movs	r2, #50	; 0x32
 80060e8:	21ff      	movs	r1, #255	; 0xff
 80060ea:	4618      	mov	r0, r3
 80060ec:	f015 f891 	bl	801b212 <memset>
			  DATA_FOR_SLAVE[0] = MASTER_BIT;
 80060f0:	2302      	movs	r3, #2
 80060f2:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
			  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[1];
 80060f6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80060fa:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			  DATA_FOR_SLAVE[2] = ALL_OK;
 80060fe:	23a0      	movs	r3, #160	; 0xa0
 8006100:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
			  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_SLAVE,49);
 8006104:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006108:	2231      	movs	r2, #49	; 0x31
 800610a:	4619      	mov	r1, r3
 800610c:	48bb      	ldr	r0, [pc, #748]	; (80063fc <Start_MAS_SEND_SLAVE+0xaa4>)
 800610e:	f00a fe45 	bl	8010d9c <HAL_CRC_Calculate>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
			  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 8006118:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800611c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
			  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8006120:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8006124:	2364      	movs	r3, #100	; 0x64
 8006126:	2232      	movs	r2, #50	; 0x32
 8006128:	48b5      	ldr	r0, [pc, #724]	; (8006400 <Start_MAS_SEND_SLAVE+0xaa8>)
 800612a:	f00f fe31 	bl	8015d90 <HAL_UART_Transmit>

			  notification_value = ulTaskNotifyTake(0,5000);
 800612e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006132:	2000      	movs	r0, #0
 8006134:	f013 fd2e 	bl	8019b94 <ulTaskNotifyTake>
 8006138:	4603      	mov	r3, r0
 800613a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			  if(notification_value >0)
 800613e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006142:	2b00      	cmp	r3, #0
 8006144:	f340 8166 	ble.w	8006414 <Start_MAS_SEND_SLAVE+0xabc>
			  {
				  notification_value=0;
 8006148:	2300      	movs	r3, #0
 800614a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				  ID_S_PRESENT[0] = SLAVE_ID_RX[1];
 800614e:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8006152:	4bac      	ldr	r3, [pc, #688]	; (8006404 <Start_MAS_SEND_SLAVE+0xaac>)
 8006154:	701a      	strb	r2, [r3, #0]
				  memset(DATA_FOR_SLAVE,0xFF,50);
 8006156:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800615a:	2232      	movs	r2, #50	; 0x32
 800615c:	21ff      	movs	r1, #255	; 0xff
 800615e:	4618      	mov	r0, r3
 8006160:	f015 f857 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 8006164:	2302      	movs	r3, #2
 8006166:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
				  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[2];
 800616a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800616e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
				  DATA_FOR_SLAVE[2] = ALL_OK;
 8006172:	23a0      	movs	r3, #160	; 0xa0
 8006174:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
				  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_SLAVE,49);
 8006178:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800617c:	2231      	movs	r2, #49	; 0x31
 800617e:	4619      	mov	r1, r3
 8006180:	489e      	ldr	r0, [pc, #632]	; (80063fc <Start_MAS_SEND_SLAVE+0xaa4>)
 8006182:	f00a fe0b 	bl	8010d9c <HAL_CRC_Calculate>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 800618c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8006190:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8006194:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8006198:	2364      	movs	r3, #100	; 0x64
 800619a:	2232      	movs	r2, #50	; 0x32
 800619c:	4898      	ldr	r0, [pc, #608]	; (8006400 <Start_MAS_SEND_SLAVE+0xaa8>)
 800619e:	f00f fdf7 	bl	8015d90 <HAL_UART_Transmit>
				  notification_value = ulTaskNotifyTake(0,5000);
 80061a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80061a6:	2000      	movs	r0, #0
 80061a8:	f013 fcf4 	bl	8019b94 <ulTaskNotifyTake>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				  if(notification_value >0)
 80061b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f340 8091 	ble.w	80062de <Start_MAS_SEND_SLAVE+0x986>
				  {
					  notification_value=0;
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					  ID_S_PRESENT[1] = SLAVE_ID_RX[2];
 80061c2:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80061c6:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <Start_MAS_SEND_SLAVE+0xaac>)
 80061c8:	705a      	strb	r2, [r3, #1]
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	22c8      	movs	r2, #200	; 0xc8
 80061d0:	21ff      	movs	r1, #255	; 0xff
 80061d2:	4618      	mov	r0, r3
 80061d4:	f015 f81d 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_3SYS;
 80061d8:	4b8b      	ldr	r3, [pc, #556]	; (8006408 <Start_MAS_SEND_SLAVE+0xab0>)
 80061da:	2296      	movs	r2, #150	; 0x96
 80061dc:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 80061de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80061e2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 80061ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80061ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80061f2:	2204      	movs	r2, #4
 80061f4:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 80061f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80061fa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80061fe:	220a      	movs	r2, #10
 8006200:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 8006202:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006206:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800620a:	2204      	movs	r2, #4
 800620c:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 800620e:	4b7d      	ldr	r3, [pc, #500]	; (8006404 <Start_MAS_SEND_SLAVE+0xaac>)
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006216:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800621a:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = ID_S_PRESENT[1];
 800621c:	4b79      	ldr	r3, [pc, #484]	; (8006404 <Start_MAS_SEND_SLAVE+0xaac>)
 800621e:	785a      	ldrb	r2, [r3, #1]
 8006220:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006224:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006228:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = DUMMY;
 800622a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800622e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006232:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8006236:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_3SYS;
 8006238:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800623c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006240:	2296      	movs	r2, #150	; 0x96
 8006242:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	22c7      	movs	r2, #199	; 0xc7
 800624a:	4619      	mov	r1, r3
 800624c:	486b      	ldr	r0, [pc, #428]	; (80063fc <Start_MAS_SEND_SLAVE+0xaa4>)
 800624e:	f00a fda5 	bl	8010d9c <HAL_CRC_Calculate>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 8006258:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800625c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006260:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8006264:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 8006268:	4b68      	ldr	r3, [pc, #416]	; (800640c <Start_MAS_SEND_SLAVE+0xab4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d002      	beq.n	8006276 <Start_MAS_SEND_SLAVE+0x91e>
 8006270:	2b02      	cmp	r3, #2
 8006272:	d02c      	beq.n	80062ce <Start_MAS_SEND_SLAVE+0x976>
 8006274:	e21a      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 8006276:	4b66      	ldr	r3, [pc, #408]	; (8006410 <Start_MAS_SEND_SLAVE+0xab8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f011 f9f9 	bl	8017672 <osPoolAlloc>
 8006280:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800628a:	e013      	b.n	80062b4 <Start_MAS_SEND_SLAVE+0x95c>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 800628c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006290:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8006294:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006298:	4413      	add	r3, r2
 800629a:	7819      	ldrb	r1, [r3, #0]
 800629c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80062a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80062a4:	4413      	add	r3, r2
 80062a6:	460a      	mov	r2, r1
 80062a8:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 80062aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80062ae:	3301      	adds	r3, #1
 80062b0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80062b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80062b8:	2bc7      	cmp	r3, #199	; 0xc7
 80062ba:	dde7      	ble.n	800628c <Start_MAS_SEND_SLAVE+0x934>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 80062bc:	4b4d      	ldr	r3, [pc, #308]	; (80063f4 <Start_MAS_SEND_SLAVE+0xa9c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80062c4:	2264      	movs	r2, #100	; 0x64
 80062c6:	4618      	mov	r0, r3
 80062c8:	f011 faa0 	bl	801780c <osMessagePut>
						  break;
 80062cc:	e1ee      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 80062ce:	f107 0108 	add.w	r1, r7, #8
 80062d2:	2364      	movs	r3, #100	; 0x64
 80062d4:	22c8      	movs	r2, #200	; 0xc8
 80062d6:	4848      	ldr	r0, [pc, #288]	; (80063f8 <Start_MAS_SEND_SLAVE+0xaa0>)
 80062d8:	f00f fd5a 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 80062dc:	e1e6      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  }
				  }
				  else
				  {
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	22c8      	movs	r2, #200	; 0xc8
 80062e4:	21ff      	movs	r1, #255	; 0xff
 80062e6:	4618      	mov	r0, r3
 80062e8:	f014 ff93 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_2SYS;
 80062ec:	4b46      	ldr	r3, [pc, #280]	; (8006408 <Start_MAS_SEND_SLAVE+0xab0>)
 80062ee:	2264      	movs	r2, #100	; 0x64
 80062f0:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 80062f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80062f6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 80062fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006302:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006306:	2204      	movs	r2, #4
 8006308:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 800630a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800630e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006312:	220a      	movs	r2, #10
 8006314:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 8006316:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800631a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800631e:	2204      	movs	r2, #4
 8006320:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 8006322:	4b38      	ldr	r3, [pc, #224]	; (8006404 <Start_MAS_SEND_SLAVE+0xaac>)
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800632a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800632e:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = DUMMY;
 8006330:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006334:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006338:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800633c:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = DUMMY;
 800633e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006342:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006346:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800634a:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_2SYS;
 800634c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006350:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006354:	2264      	movs	r2, #100	; 0x64
 8006356:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	22c7      	movs	r2, #199	; 0xc7
 800635e:	4619      	mov	r1, r3
 8006360:	4826      	ldr	r0, [pc, #152]	; (80063fc <Start_MAS_SEND_SLAVE+0xaa4>)
 8006362:	f00a fd1b 	bl	8010d9c <HAL_CRC_Calculate>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 800636c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006370:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006374:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8006378:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 800637c:	4b23      	ldr	r3, [pc, #140]	; (800640c <Start_MAS_SEND_SLAVE+0xab4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d002      	beq.n	800638a <Start_MAS_SEND_SLAVE+0xa32>
 8006384:	2b02      	cmp	r3, #2
 8006386:	d02c      	beq.n	80063e2 <Start_MAS_SEND_SLAVE+0xa8a>
 8006388:	e190      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800638a:	4b21      	ldr	r3, [pc, #132]	; (8006410 <Start_MAS_SEND_SLAVE+0xab8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f011 f96f 	bl	8017672 <osPoolAlloc>
 8006394:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006398:	2300      	movs	r3, #0
 800639a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800639e:	e013      	b.n	80063c8 <Start_MAS_SEND_SLAVE+0xa70>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 80063a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80063a4:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80063a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80063ac:	4413      	add	r3, r2
 80063ae:	7819      	ldrb	r1, [r3, #0]
 80063b0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80063b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80063b8:	4413      	add	r3, r2
 80063ba:	460a      	mov	r2, r1
 80063bc:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 80063be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80063c2:	3301      	adds	r3, #1
 80063c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80063c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80063cc:	2bc7      	cmp	r3, #199	; 0xc7
 80063ce:	dde7      	ble.n	80063a0 <Start_MAS_SEND_SLAVE+0xa48>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 80063d0:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <Start_MAS_SEND_SLAVE+0xa9c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80063d8:	2264      	movs	r2, #100	; 0x64
 80063da:	4618      	mov	r0, r3
 80063dc:	f011 fa16 	bl	801780c <osMessagePut>
						  break;
 80063e0:	e164      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 80063e2:	f107 0108 	add.w	r1, r7, #8
 80063e6:	2364      	movs	r3, #100	; 0x64
 80063e8:	22c8      	movs	r2, #200	; 0xc8
 80063ea:	4803      	ldr	r0, [pc, #12]	; (80063f8 <Start_MAS_SEND_SLAVE+0xaa0>)
 80063ec:	f00f fcd0 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 80063f0:	e15c      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
 80063f2:	bf00      	nop
 80063f4:	20001e1c 	.word	0x20001e1c
 80063f8:	20001bac 	.word	0x20001bac
 80063fc:	20001718 	.word	0x20001718
 8006400:	20001a14 	.word	0x20001a14
 8006404:	20001f54 	.word	0x20001f54
 8006408:	20001e93 	.word	0x20001e93
 800640c:	20001f5c 	.word	0x20001f5c
 8006410:	200015c8 	.word	0x200015c8
					  }
				  }
			  }
			  else
			  {
				  memset(DATA_FOR_SLAVE,0xFF,50);
 8006414:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006418:	2232      	movs	r2, #50	; 0x32
 800641a:	21ff      	movs	r1, #255	; 0xff
 800641c:	4618      	mov	r0, r3
 800641e:	f014 fef8 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 8006422:	2302      	movs	r3, #2
 8006424:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
				  DATA_FOR_SLAVE[1] = SLAVE_ID_RX[2];
 8006428:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800642c:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
				  DATA_FOR_SLAVE[2] = ALL_OK;
 8006430:	23a0      	movs	r3, #160	; 0xa0
 8006432:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
				  CRC_VALUE_OF_SLAVE_DATA = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_SLAVE,49);
 8006436:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800643a:	2231      	movs	r2, #49	; 0x31
 800643c:	4619      	mov	r1, r3
 800643e:	489e      	ldr	r0, [pc, #632]	; (80066b8 <Start_MAS_SEND_SLAVE+0xd60>)
 8006440:	f00a fcac 	bl	8010d9c <HAL_CRC_Calculate>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				  DATA_FOR_SLAVE[49] = CRC_VALUE_OF_SLAVE_DATA;
 800644a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800644e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				  HAL_UART_Transmit(&huart5, DATA_FOR_SLAVE, 50,100);
 8006452:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8006456:	2364      	movs	r3, #100	; 0x64
 8006458:	2232      	movs	r2, #50	; 0x32
 800645a:	4898      	ldr	r0, [pc, #608]	; (80066bc <Start_MAS_SEND_SLAVE+0xd64>)
 800645c:	f00f fc98 	bl	8015d90 <HAL_UART_Transmit>

				  notification_value = ulTaskNotifyTake(0,5000);
 8006460:	f241 3188 	movw	r1, #5000	; 0x1388
 8006464:	2000      	movs	r0, #0
 8006466:	f013 fb95 	bl	8019b94 <ulTaskNotifyTake>
 800646a:	4603      	mov	r3, r0
 800646c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				  if(notification_value >0)
 8006470:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006474:	2b00      	cmp	r3, #0
 8006476:	f340 8091 	ble.w	800659c <Start_MAS_SEND_SLAVE+0xc44>
				  {
					  notification_value=0;
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					  ID_S_PRESENT[0] = SLAVE_ID_RX[2];
 8006480:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8006484:	4b8e      	ldr	r3, [pc, #568]	; (80066c0 <Start_MAS_SEND_SLAVE+0xd68>)
 8006486:	701a      	strb	r2, [r3, #0]
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 8006488:	f107 0308 	add.w	r3, r7, #8
 800648c:	22c8      	movs	r2, #200	; 0xc8
 800648e:	21ff      	movs	r1, #255	; 0xff
 8006490:	4618      	mov	r0, r3
 8006492:	f014 febe 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_2SYS;
 8006496:	4b8b      	ldr	r3, [pc, #556]	; (80066c4 <Start_MAS_SEND_SLAVE+0xd6c>)
 8006498:	2264      	movs	r2, #100	; 0x64
 800649a:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 800649c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064a4:	2201      	movs	r2, #1
 80064a6:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 80064a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064ac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064b0:	2204      	movs	r2, #4
 80064b2:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 80064b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064b8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064bc:	220a      	movs	r2, #10
 80064be:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 80064c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064c4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064c8:	2204      	movs	r2, #4
 80064ca:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = ID_S_PRESENT[0];
 80064cc:	4b7c      	ldr	r3, [pc, #496]	; (80066c0 <Start_MAS_SEND_SLAVE+0xd68>)
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064d8:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = DUMMY;
 80064da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064de:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064e2:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 80064e6:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = DUMMY;
 80064e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064ec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064f0:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 80064f4:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_2SYS;
 80064f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064fa:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80064fe:	2264      	movs	r2, #100	; 0x64
 8006500:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8006502:	f107 0308 	add.w	r3, r7, #8
 8006506:	22c7      	movs	r2, #199	; 0xc7
 8006508:	4619      	mov	r1, r3
 800650a:	486b      	ldr	r0, [pc, #428]	; (80066b8 <Start_MAS_SEND_SLAVE+0xd60>)
 800650c:	f00a fc46 	bl	8010d9c <HAL_CRC_Calculate>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 8006516:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800651a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800651e:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8006522:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 8006526:	4b68      	ldr	r3, [pc, #416]	; (80066c8 <Start_MAS_SEND_SLAVE+0xd70>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d002      	beq.n	8006534 <Start_MAS_SEND_SLAVE+0xbdc>
 800652e:	2b02      	cmp	r3, #2
 8006530:	d02c      	beq.n	800658c <Start_MAS_SEND_SLAVE+0xc34>
 8006532:	e0bb      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 8006534:	4b65      	ldr	r3, [pc, #404]	; (80066cc <Start_MAS_SEND_SLAVE+0xd74>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f011 f89a 	bl	8017672 <osPoolAlloc>
 800653e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006542:	2300      	movs	r3, #0
 8006544:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006548:	e013      	b.n	8006572 <Start_MAS_SEND_SLAVE+0xc1a>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 800654a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800654e:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8006552:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006556:	4413      	add	r3, r2
 8006558:	7819      	ldrb	r1, [r3, #0]
 800655a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800655e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006562:	4413      	add	r3, r2
 8006564:	460a      	mov	r2, r1
 8006566:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006568:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800656c:	3301      	adds	r3, #1
 800656e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006572:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006576:	2bc7      	cmp	r3, #199	; 0xc7
 8006578:	dde7      	ble.n	800654a <Start_MAS_SEND_SLAVE+0xbf2>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 800657a:	4b55      	ldr	r3, [pc, #340]	; (80066d0 <Start_MAS_SEND_SLAVE+0xd78>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006582:	2264      	movs	r2, #100	; 0x64
 8006584:	4618      	mov	r0, r3
 8006586:	f011 f941 	bl	801780c <osMessagePut>
						  break;
 800658a:	e08f      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 800658c:	f107 0108 	add.w	r1, r7, #8
 8006590:	2364      	movs	r3, #100	; 0x64
 8006592:	22c8      	movs	r2, #200	; 0xc8
 8006594:	484f      	ldr	r0, [pc, #316]	; (80066d4 <Start_MAS_SEND_SLAVE+0xd7c>)
 8006596:	f00f fbfb 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 800659a:	e087      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  }
				  }
				  else
				  {
					  memset(DATA_FOR_RCU,0xFF,BUFFER_SIZE_ALL);
 800659c:	f107 0308 	add.w	r3, r7, #8
 80065a0:	22c8      	movs	r2, #200	; 0xc8
 80065a2:	21ff      	movs	r1, #255	; 0xff
 80065a4:	4618      	mov	r0, r3
 80065a6:	f014 fe34 	bl	801b212 <memset>
					  NUMBER_OF_SYSTEMS = DATA_SIZE_FOR_1SYS;
 80065aa:	4b46      	ldr	r3, [pc, #280]	; (80066c4 <Start_MAS_SEND_SLAVE+0xd6c>)
 80065ac:	2232      	movs	r2, #50	; 0x32
 80065ae:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[0] = LORA_BIT;
 80065b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065b4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_RCU[1] = MODEM_REPLY_BIT;
 80065bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065c0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80065c4:	2204      	movs	r2, #4
 80065c6:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_RCU[2] = SEARCH_IDs;
 80065c8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065cc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80065d0:	220a      	movs	r2, #10
 80065d2:	709a      	strb	r2, [r3, #2]
					  DATA_FOR_RCU[3] = MY_TCU_ID;
 80065d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065d8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80065dc:	2204      	movs	r2, #4
 80065de:	70da      	strb	r2, [r3, #3]
					  DATA_FOR_RCU[4] = 0x00;
 80065e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065e4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80065e8:	2200      	movs	r2, #0
 80065ea:	711a      	strb	r2, [r3, #4]
					  DATA_FOR_RCU[5] = 0x00;
 80065ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065f0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80065f4:	2200      	movs	r2, #0
 80065f6:	715a      	strb	r2, [r3, #5]
					  DATA_FOR_RCU[6] = 0x00;
 80065f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065fc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006600:	2200      	movs	r2, #0
 8006602:	719a      	strb	r2, [r3, #6]
					  DATA_FOR_RCU[7] = DATA_SIZE_FOR_1SYS;
 8006604:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006608:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800660c:	2232      	movs	r2, #50	; 0x32
 800660e:	71da      	strb	r2, [r3, #7]
					  CRC_VALUE_FOR_LORA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_RCU, (BUFFER_SIZE_ALL-1));
 8006610:	f107 0308 	add.w	r3, r7, #8
 8006614:	22c7      	movs	r2, #199	; 0xc7
 8006616:	4619      	mov	r1, r3
 8006618:	4827      	ldr	r0, [pc, #156]	; (80066b8 <Start_MAS_SEND_SLAVE+0xd60>)
 800661a:	f00a fbbf 	bl	8010d9c <HAL_CRC_Calculate>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
					  DATA_FOR_RCU[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_LORA;
 8006624:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006628:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800662c:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8006630:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 8006634:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <Start_MAS_SEND_SLAVE+0xd70>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d002      	beq.n	8006642 <Start_MAS_SEND_SLAVE+0xcea>
 800663c:	2b02      	cmp	r3, #2
 800663e:	d02c      	beq.n	800669a <Start_MAS_SEND_SLAVE+0xd42>
 8006640:	e034      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  {
					  case MODEM_SYSTEM:
						  lorasendmsg = osPoolAlloc(lorasendpool);
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <Start_MAS_SEND_SLAVE+0xd74>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f011 f813 	bl	8017672 <osPoolAlloc>
 800664c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006656:	e013      	b.n	8006680 <Start_MAS_SEND_SLAVE+0xd28>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_FOR_RCU[i];
 8006658:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800665c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8006660:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006664:	4413      	add	r3, r2
 8006666:	7819      	ldrb	r1, [r3, #0]
 8006668:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800666c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006670:	4413      	add	r3, r2
 8006672:	460a      	mov	r2, r1
 8006674:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 8006676:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800667a:	3301      	adds	r3, #1
 800667c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006680:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006684:	2bc7      	cmp	r3, #199	; 0xc7
 8006686:	dde7      	ble.n	8006658 <Start_MAS_SEND_SLAVE+0xd00>
						  }
						  osMessagePut(LORA_SEND_qHandle, (uint32_t)lorasendmsg,100);
 8006688:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <Start_MAS_SEND_SLAVE+0xd78>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006690:	2264      	movs	r2, #100	; 0x64
 8006692:	4618      	mov	r0, r3
 8006694:	f011 f8ba 	bl	801780c <osMessagePut>
						  break;
 8006698:	e008      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  case LOCAL_SYSTEM:
						  HAL_UART_Transmit(&huart6, DATA_FOR_RCU, 200,100);
 800669a:	f107 0108 	add.w	r1, r7, #8
 800669e:	2364      	movs	r3, #100	; 0x64
 80066a0:	22c8      	movs	r2, #200	; 0xc8
 80066a2:	480c      	ldr	r0, [pc, #48]	; (80066d4 <Start_MAS_SEND_SLAVE+0xd7c>)
 80066a4:	f00f fb74 	bl	8015d90 <HAL_UART_Transmit>
						  break;
 80066a8:	e000      	b.n	80066ac <Start_MAS_SEND_SLAVE+0xd54>
					  }
				  }
 80066aa:	bf00      	nop
			  }
		  }
	  }
    osDelay(1);
 80066ac:	2001      	movs	r0, #1
 80066ae:	f010 feba 	bl	8017426 <osDelay>
	  slaveevt = osMessageGet(SLAVE_SEND_qHandle, 0);
 80066b2:	f7ff b95c 	b.w	800596e <Start_MAS_SEND_SLAVE+0x16>
 80066b6:	bf00      	nop
 80066b8:	20001718 	.word	0x20001718
 80066bc:	20001a14 	.word	0x20001a14
 80066c0:	20001f54 	.word	0x20001f54
 80066c4:	20001e93 	.word	0x20001e93
 80066c8:	20001f5c 	.word	0x20001f5c
 80066cc:	200015c8 	.word	0x200015c8
 80066d0:	20001e1c 	.word	0x20001e1c
 80066d4:	20001bac 	.word	0x20001bac

080066d8 <Start_SLAVE_REC_MAS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SLAVE_REC_MAS */
void Start_SLAVE_REC_MAS(void const * argument)
{
 80066d8:	b5b0      	push	{r4, r5, r7, lr}
 80066da:	b0c2      	sub	sp, #264	; 0x108
 80066dc:	af00      	add	r7, sp, #0
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e6:	6018      	str	r0, [r3, #0]
	static int notification =0;
	static int z =0;
  /* Infinite loop */
  for(;;)
  {
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 80066e8:	f04f 31ff 	mov.w	r1, #4294967295
 80066ec:	2000      	movs	r0, #0
 80066ee:	f013 fa51 	bl	8019b94 <ulTaskNotifyTake>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	4ba6      	ldr	r3, [pc, #664]	; (8006990 <Start_SLAVE_REC_MAS+0x2b8>)
 80066f8:	601a      	str	r2, [r3, #0]
	  if( (notification>=0))
 80066fa:	4ba5      	ldr	r3, [pc, #660]	; (8006990 <Start_SLAVE_REC_MAS+0x2b8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f2c0 828c 	blt.w	8006c1c <Start_SLAVE_REC_MAS+0x544>
	  {
	  notification =0;
 8006704:	4ba2      	ldr	r3, [pc, #648]	; (8006990 <Start_SLAVE_REC_MAS+0x2b8>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
	  if(I_AM == I_AM_SLAVE)
 800670a:	4ba2      	ldr	r3, [pc, #648]	; (8006994 <Start_SLAVE_REC_MAS+0x2bc>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b0b      	cmp	r3, #11
 8006710:	f040 81bf 	bne.w	8006a92 <Start_SLAVE_REC_MAS+0x3ba>
	  {
	  memcpy(DATA_FROM_MASTER,DATA_FROM_MAS_SLAVE,sizeof(DATA_FROM_MASTER));
 8006714:	4ba0      	ldr	r3, [pc, #640]	; (8006998 <Start_SLAVE_REC_MAS+0x2c0>)
 8006716:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800671a:	461d      	mov	r5, r3
 800671c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800671e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	8023      	strh	r3, [r4, #0]
	  RECEIVED_CRC = DATA_FROM_MASTER[49];
 800672c:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8006730:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	  CALCULATED_CRC = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FROM_MASTER,49);
 8006734:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006738:	2231      	movs	r2, #49	; 0x31
 800673a:	4619      	mov	r1, r3
 800673c:	4897      	ldr	r0, [pc, #604]	; (800699c <Start_SLAVE_REC_MAS+0x2c4>)
 800673e:	f00a fb2d 	bl	8010d9c <HAL_CRC_Calculate>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	  if(RECEIVED_CRC == CALCULATED_CRC)
 8006748:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 800674c:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8006750:	429a      	cmp	r2, r3
 8006752:	f040 819e 	bne.w	8006a92 <Start_SLAVE_REC_MAS+0x3ba>
	  {
	  if(DATA_FROM_MASTER[0] == MASTER_BIT && DATA_FROM_MASTER[1] == MY_TCU_ID)
 8006756:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800675a:	2b02      	cmp	r3, #2
 800675c:	f040 8158 	bne.w	8006a10 <Start_SLAVE_REC_MAS+0x338>
 8006760:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8006764:	2b04      	cmp	r3, #4
 8006766:	f040 8153 	bne.w	8006a10 <Start_SLAVE_REC_MAS+0x338>
	  {
		  switch(DATA_FROM_MASTER[2])
 800676a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800676e:	2bed      	cmp	r3, #237	; 0xed
 8006770:	d06a      	beq.n	8006848 <Start_SLAVE_REC_MAS+0x170>
 8006772:	2bed      	cmp	r3, #237	; 0xed
 8006774:	f300 80e5 	bgt.w	8006942 <Start_SLAVE_REC_MAS+0x26a>
 8006778:	2bcb      	cmp	r3, #203	; 0xcb
 800677a:	d051      	beq.n	8006820 <Start_SLAVE_REC_MAS+0x148>
 800677c:	2bcb      	cmp	r3, #203	; 0xcb
 800677e:	f300 80e0 	bgt.w	8006942 <Start_SLAVE_REC_MAS+0x26a>
 8006782:	2bca      	cmp	r3, #202	; 0xca
 8006784:	d038      	beq.n	80067f8 <Start_SLAVE_REC_MAS+0x120>
 8006786:	2bca      	cmp	r3, #202	; 0xca
 8006788:	f300 80db 	bgt.w	8006942 <Start_SLAVE_REC_MAS+0x26a>
 800678c:	2bb9      	cmp	r3, #185	; 0xb9
 800678e:	d061      	beq.n	8006854 <Start_SLAVE_REC_MAS+0x17c>
 8006790:	2bb9      	cmp	r3, #185	; 0xb9
 8006792:	f300 80d6 	bgt.w	8006942 <Start_SLAVE_REC_MAS+0x26a>
 8006796:	2b55      	cmp	r3, #85	; 0x55
 8006798:	f000 809b 	beq.w	80068d2 <Start_SLAVE_REC_MAS+0x1fa>
 800679c:	2ba0      	cmp	r3, #160	; 0xa0
 800679e:	f040 80d0 	bne.w	8006942 <Start_SLAVE_REC_MAS+0x26a>
		  {
		  case ALL_OK:
			  osThreadSuspend(LORA_RECEIVEHandle);
 80067a2:	4b7f      	ldr	r3, [pc, #508]	; (80069a0 <Start_SLAVE_REC_MAS+0x2c8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f011 fa19 	bl	8017bde <osThreadSuspend>
			  memset(DATA_FOR_MASTER,0xFF,50);
 80067ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067b0:	2232      	movs	r2, #50	; 0x32
 80067b2:	21ff      	movs	r1, #255	; 0xff
 80067b4:	4618      	mov	r0, r3
 80067b6:	f014 fd2c 	bl	801b212 <memset>
			  DATA_FOR_MASTER[0] = SLAVE_BIT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			  DATA_FOR_MASTER[1] = MY_TCU_ID;
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			  DATA_FOR_MASTER[2] = YES_OK;
 80067c6:	23a1      	movs	r3, #161	; 0xa1
 80067c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			  CRC_VALUE_FOR_MAS_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_MASTER,49);
 80067cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067d0:	2231      	movs	r2, #49	; 0x31
 80067d2:	4619      	mov	r1, r3
 80067d4:	4871      	ldr	r0, [pc, #452]	; (800699c <Start_SLAVE_REC_MAS+0x2c4>)
 80067d6:	f00a fae1 	bl	8010d9c <HAL_CRC_Calculate>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  DATA_FOR_MASTER[49] = CRC_VALUE_FOR_MAS_DATA;
 80067e0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80067e4:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER,50,100);
 80067e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80067ec:	2364      	movs	r3, #100	; 0x64
 80067ee:	2232      	movs	r2, #50	; 0x32
 80067f0:	486c      	ldr	r0, [pc, #432]	; (80069a4 <Start_SLAVE_REC_MAS+0x2cc>)
 80067f2:	f00f facd 	bl	8015d90 <HAL_UART_Transmit>
			  break;
 80067f6:	e0a4      	b.n	8006942 <Start_SLAVE_REC_MAS+0x26a>
		  case GIVE_DATA:
			  givememsg = osPoolAlloc(givepool);
 80067f8:	4b6b      	ldr	r3, [pc, #428]	; (80069a8 <Start_SLAVE_REC_MAS+0x2d0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f010 ff38 	bl	8017672 <osPoolAlloc>
 8006802:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
			  givememsg->GIVE_ME_t = I_AM_FOR_MASTER;
 8006806:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800680a:	2207      	movs	r2, #7
 800680c:	701a      	strb	r2, [r3, #0]
			  osMessagePut(GIVE_ME_qHandle, (uint32_t)givememsg,100);
 800680e:	4b67      	ldr	r3, [pc, #412]	; (80069ac <Start_SLAVE_REC_MAS+0x2d4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006816:	2264      	movs	r2, #100	; 0x64
 8006818:	4618      	mov	r0, r3
 800681a:	f010 fff7 	bl	801780c <osMessagePut>
			  break;
 800681e:	e090      	b.n	8006942 <Start_SLAVE_REC_MAS+0x26a>
		  case GIVE_CURRENT:
			  dlmsg = osPoolAlloc(datalogpool);
 8006820:	4b63      	ldr	r3, [pc, #396]	; (80069b0 <Start_SLAVE_REC_MAS+0x2d8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f010 ff24 	bl	8017672 <osPoolAlloc>
 800682a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
			  dlmsg->NOTIFY = 0x01;
 800682e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
			  osMessagePut(DATA_LOG_qHandle,(uint32_t)dlmsg,100);
 8006836:	4b5f      	ldr	r3, [pc, #380]	; (80069b4 <Start_SLAVE_REC_MAS+0x2dc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800683e:	2264      	movs	r2, #100	; 0x64
 8006840:	4618      	mov	r0, r3
 8006842:	f010 ffe3 	bl	801780c <osMessagePut>
			  break;
 8006846:	e07c      	b.n	8006942 <Start_SLAVE_REC_MAS+0x26a>
		  case RESET_MAS_SLAVE:
			  osThreadResume(LORA_RECEIVEHandle);
 8006848:	4b55      	ldr	r3, [pc, #340]	; (80069a0 <Start_SLAVE_REC_MAS+0x2c8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f011 f9d3 	bl	8017bf8 <osThreadResume>
			  break;
 8006852:	e076      	b.n	8006942 <Start_SLAVE_REC_MAS+0x26a>
		  case FETCH_BIST:
			  memset(DATA_FOR_MASTER,0xFF,50);
 8006854:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006858:	2232      	movs	r2, #50	; 0x32
 800685a:	21ff      	movs	r1, #255	; 0xff
 800685c:	4618      	mov	r0, r3
 800685e:	f014 fcd8 	bl	801b212 <memset>
			  DATA_FOR_MASTER[0] = SLAVE_BIT;
 8006862:	2303      	movs	r3, #3
 8006864:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			  DATA_FOR_MASTER[1] = MY_TCU_ID;
 8006868:	2304      	movs	r3, #4
 800686a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			  DATA_FOR_MASTER[2] = FETCH_BIST;
 800686e:	23b9      	movs	r3, #185	; 0xb9
 8006870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			  DATA_FOR_MASTER[3] = RADIO_ERROR_DATA_t;
 8006874:	23b1      	movs	r3, #177	; 0xb1
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  DATA_FOR_MASTER[4] = LORA_ERROR_DATA;
 800687a:	4b4f      	ldr	r3, [pc, #316]	; (80069b8 <Start_SLAVE_REC_MAS+0x2e0>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			  DATA_FOR_MASTER[5] = TCU_ERROR_DATA_t;
 8006882:	23b2      	movs	r3, #178	; 0xb2
 8006884:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			  DATA_FOR_MASTER[6] = TCU_ERROR_DATA_FLASH;
 8006888:	4b4c      	ldr	r3, [pc, #304]	; (80069bc <Start_SLAVE_REC_MAS+0x2e4>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			  DATA_FOR_MASTER[7] = TCU_ERROR_DATA_PWM;
 8006890:	4b4b      	ldr	r3, [pc, #300]	; (80069c0 <Start_SLAVE_REC_MAS+0x2e8>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  DATA_FOR_MASTER[8] = SDA_ERROR_DATA_t;
 8006898:	23b3      	movs	r3, #179	; 0xb3
 800689a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			  DATA_FOR_MASTER[9] = SDA_ERROR_DATA;
 800689e:	4b49      	ldr	r3, [pc, #292]	; (80069c4 <Start_SLAVE_REC_MAS+0x2ec>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

			  CRC_VALUE_FOR_MAS_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FOR_MASTER,49);
 80068a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068aa:	2231      	movs	r2, #49	; 0x31
 80068ac:	4619      	mov	r1, r3
 80068ae:	483b      	ldr	r0, [pc, #236]	; (800699c <Start_SLAVE_REC_MAS+0x2c4>)
 80068b0:	f00a fa74 	bl	8010d9c <HAL_CRC_Calculate>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			  DATA_FOR_MASTER[49] = CRC_VALUE_FOR_MAS_DATA;
 80068ba:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80068be:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER,50,100);
 80068c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80068c6:	2364      	movs	r3, #100	; 0x64
 80068c8:	2232      	movs	r2, #50	; 0x32
 80068ca:	4836      	ldr	r0, [pc, #216]	; (80069a4 <Start_SLAVE_REC_MAS+0x2cc>)
 80068cc:	f00f fa60 	bl	8015d90 <HAL_UART_Transmit>
			  break;
 80068d0:	e037      	b.n	8006942 <Start_SLAVE_REC_MAS+0x26a>
		  case UPDATE_PROFILE:
			  	memcpy(DATA_OF_PROFILE,DATA_FROM_MASTER,50);
 80068d2:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80068d6:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80068da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e6:	682b      	ldr	r3, [r5, #0]
 80068e8:	8023      	strh	r3, [r4, #0]
				for(int i=0;i<50;i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068f0:	e016      	b.n	8006920 <Start_SLAVE_REC_MAS+0x248>
				{
					PROFILES[z][i] = DATA_OF_PROFILE[i];
 80068f2:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <Start_SLAVE_REC_MAS+0x2f0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80068fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80068fe:	440a      	add	r2, r1
 8006900:	7810      	ldrb	r0, [r2, #0]
 8006902:	4a32      	ldr	r2, [pc, #200]	; (80069cc <Start_SLAVE_REC_MAS+0x2f4>)
 8006904:	2132      	movs	r1, #50	; 0x32
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	441a      	add	r2, r3
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006910:	4413      	add	r3, r2
 8006912:	4602      	mov	r2, r0
 8006914:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<50;i++)
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691a:	3301      	adds	r3, #1
 800691c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006924:	2b31      	cmp	r3, #49	; 0x31
 8006926:	dde4      	ble.n	80068f2 <Start_SLAVE_REC_MAS+0x21a>
				}
				z = z+1;
 8006928:	4b27      	ldr	r3, [pc, #156]	; (80069c8 <Start_SLAVE_REC_MAS+0x2f0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <Start_SLAVE_REC_MAS+0x2f0>)
 8006930:	6013      	str	r3, [r2, #0]
				if(z==50)
 8006932:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <Start_SLAVE_REC_MAS+0x2f0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b32      	cmp	r3, #50	; 0x32
 8006938:	d102      	bne.n	8006940 <Start_SLAVE_REC_MAS+0x268>
				{
					z=0;
 800693a:	4b23      	ldr	r3, [pc, #140]	; (80069c8 <Start_SLAVE_REC_MAS+0x2f0>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]
				}
			  break;
 8006940:	bf00      	nop
		  }
		  if(((DATA_FROM_MASTER[2] == CLOSE_LOOP_START)||(DATA_FROM_MASTER[2] == UPADTE_TEMP_OR_POWER)||(DATA_FROM_MASTER[2] == OPEN_LOOP_START)||(DATA_FROM_MASTER[2] == SLEEP)||(DATA_FROM_MASTER[2] == KP_KI_KD_DATA)||(DATA_FROM_MASTER[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_MASTER[3]==CLOSE_LOOP_START_PROFILE)))
 8006942:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8006946:	2b07      	cmp	r3, #7
 8006948:	d017      	beq.n	800697a <Start_SLAVE_REC_MAS+0x2a2>
 800694a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800694e:	2b05      	cmp	r3, #5
 8006950:	d013      	beq.n	800697a <Start_SLAVE_REC_MAS+0x2a2>
 8006952:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8006956:	2b0d      	cmp	r3, #13
 8006958:	d00f      	beq.n	800697a <Start_SLAVE_REC_MAS+0x2a2>
 800695a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800695e:	2bf0      	cmp	r3, #240	; 0xf0
 8006960:	d00b      	beq.n	800697a <Start_SLAVE_REC_MAS+0x2a2>
 8006962:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8006966:	2b2c      	cmp	r3, #44	; 0x2c
 8006968:	d007      	beq.n	800697a <Start_SLAVE_REC_MAS+0x2a2>
 800696a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800696e:	2bdd      	cmp	r3, #221	; 0xdd
 8006970:	d003      	beq.n	800697a <Start_SLAVE_REC_MAS+0x2a2>
 8006972:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006976:	2b77      	cmp	r3, #119	; 0x77
 8006978:	d14a      	bne.n	8006a10 <Start_SLAVE_REC_MAS+0x338>
		  {

			  syspromsg = osPoolAlloc(syspropool);
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <Start_SLAVE_REC_MAS+0x2f8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f010 fe77 	bl	8017672 <osPoolAlloc>
 8006984:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
			  for(int i =0;i<50;i++)
 8006988:	2300      	movs	r3, #0
 800698a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800698e:	e033      	b.n	80069f8 <Start_SLAVE_REC_MAS+0x320>
 8006990:	20002a4c 	.word	0x20002a4c
 8006994:	20000009 	.word	0x20000009
 8006998:	20001e94 	.word	0x20001e94
 800699c:	20001718 	.word	0x20001718
 80069a0:	20001db8 	.word	0x20001db8
 80069a4:	20001a14 	.word	0x20001a14
 80069a8:	20001614 	.word	0x20001614
 80069ac:	20001e3c 	.word	0x20001e3c
 80069b0:	200015e8 	.word	0x200015e8
 80069b4:	20001e58 	.word	0x20001e58
 80069b8:	20000011 	.word	0x20000011
 80069bc:	20000012 	.word	0x20000012
 80069c0:	20000013 	.word	0x20000013
 80069c4:	20000010 	.word	0x20000010
 80069c8:	20002a50 	.word	0x20002a50
 80069cc:	20001fb4 	.word	0x20001fb4
 80069d0:	200015d8 	.word	0x200015d8
			  {
				  syspromsg->DATA_TO_PROCESS[i] = DATA_FROM_MASTER[i];
 80069d4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80069d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069dc:	4413      	add	r3, r2
 80069de:	7819      	ldrb	r1, [r3, #0]
 80069e0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069e8:	4413      	add	r3, r2
 80069ea:	460a      	mov	r2, r1
 80069ec:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<50;i++)
 80069ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069f2:	3301      	adds	r3, #1
 80069f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069fc:	2b31      	cmp	r3, #49	; 0x31
 80069fe:	dde9      	ble.n	80069d4 <Start_SLAVE_REC_MAS+0x2fc>
			  }
			  osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 8006a00:	4b88      	ldr	r3, [pc, #544]	; (8006c24 <Start_SLAVE_REC_MAS+0x54c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006a08:	2264      	movs	r2, #100	; 0x64
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f010 fefe 	bl	801780c <osMessagePut>
		  }
	  }
	  if((DATA_FROM_MASTER[0] == MASTER_BIT) && ((DATA_FROM_MASTER[2] == CLOSE_LOOP_START)||(DATA_FROM_MASTER[2] == OPEN_LOOP_START)||(DATA_FROM_MASTER[2] == SLEEP)||(DATA_FROM_MASTER[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_MASTER[3]==CLOSE_LOOP_START_PROFILE)))
 8006a10:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d13c      	bne.n	8006a92 <Start_SLAVE_REC_MAS+0x3ba>
 8006a18:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8006a1c:	2b07      	cmp	r3, #7
 8006a1e:	d00f      	beq.n	8006a40 <Start_SLAVE_REC_MAS+0x368>
 8006a20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8006a24:	2b0d      	cmp	r3, #13
 8006a26:	d00b      	beq.n	8006a40 <Start_SLAVE_REC_MAS+0x368>
 8006a28:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8006a2c:	2bf0      	cmp	r3, #240	; 0xf0
 8006a2e:	d007      	beq.n	8006a40 <Start_SLAVE_REC_MAS+0x368>
 8006a30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006a34:	2bdd      	cmp	r3, #221	; 0xdd
 8006a36:	d003      	beq.n	8006a40 <Start_SLAVE_REC_MAS+0x368>
 8006a38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006a3c:	2b77      	cmp	r3, #119	; 0x77
 8006a3e:	d128      	bne.n	8006a92 <Start_SLAVE_REC_MAS+0x3ba>
	  {

		  syspromsg = osPoolAlloc(syspropool);
 8006a40:	4b79      	ldr	r3, [pc, #484]	; (8006c28 <Start_SLAVE_REC_MAS+0x550>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f010 fe14 	bl	8017672 <osPoolAlloc>
 8006a4a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  for(int i =0;i<50;i++)
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a54:	e011      	b.n	8006a7a <Start_SLAVE_REC_MAS+0x3a2>
		  {
			  syspromsg->DATA_TO_PROCESS[i] = DATA_FROM_MASTER[i];
 8006a56:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	4413      	add	r3, r2
 8006a60:	7819      	ldrb	r1, [r3, #0]
 8006a62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6a:	4413      	add	r3, r2
 8006a6c:	460a      	mov	r2, r1
 8006a6e:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<50;i++)
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a74:	3301      	adds	r3, #1
 8006a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7e:	2b31      	cmp	r3, #49	; 0x31
 8006a80:	dde9      	ble.n	8006a56 <Start_SLAVE_REC_MAS+0x37e>
		  }
		  osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 8006a82:	4b68      	ldr	r3, [pc, #416]	; (8006c24 <Start_SLAVE_REC_MAS+0x54c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006a8a:	2264      	movs	r2, #100	; 0x64
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f010 febd 	bl	801780c <osMessagePut>
	  }
	  }
	  }
	  if(I_AM == I_AM_MASTER)
 8006a92:	4b66      	ldr	r3, [pc, #408]	; (8006c2c <Start_SLAVE_REC_MAS+0x554>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b0a      	cmp	r3, #10
 8006a98:	f040 80b3 	bne.w	8006c02 <Start_SLAVE_REC_MAS+0x52a>
	  {
		  memcpy(DATA_FROM_SLAVE,DATA_FROM_MAS_SLAVE,50);
 8006a9c:	4b64      	ldr	r3, [pc, #400]	; (8006c30 <Start_SLAVE_REC_MAS+0x558>)
 8006a9e:	f107 040c 	add.w	r4, r7, #12
 8006aa2:	461d      	mov	r5, r3
 8006aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	8023      	strh	r3, [r4, #0]
		  RECEIVED_CRC = DATA_FROM_SLAVE[49];
 8006ab4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006ab8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		  CALCULATED_CRC = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_FROM_SLAVE,49);
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	2231      	movs	r2, #49	; 0x31
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	485b      	ldr	r0, [pc, #364]	; (8006c34 <Start_SLAVE_REC_MAS+0x55c>)
 8006ac6:	f00a f969 	bl	8010d9c <HAL_CRC_Calculate>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		  if(RECEIVED_CRC == CALCULATED_CRC)
 8006ad0:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8006ad4:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f040 8092 	bne.w	8006c02 <Start_SLAVE_REC_MAS+0x52a>
		  {
		  if(DATA_FROM_SLAVE[0] == SLAVE_BIT)
 8006ade:	7b3b      	ldrb	r3, [r7, #12]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	f040 808e 	bne.w	8006c02 <Start_SLAVE_REC_MAS+0x52a>
		  {
			  switch(DATA_FROM_SLAVE[2])
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	2ba1      	cmp	r3, #161	; 0xa1
 8006aea:	d002      	beq.n	8006af2 <Start_SLAVE_REC_MAS+0x41a>
 8006aec:	2bb9      	cmp	r3, #185	; 0xb9
 8006aee:	d008      	beq.n	8006b02 <Start_SLAVE_REC_MAS+0x42a>
 8006af0:	e023      	b.n	8006b3a <Start_SLAVE_REC_MAS+0x462>
			  {
			  case YES_OK:
				  xTaskNotifyGive(MAS_SEND_SLAVEHandle);
 8006af2:	4b51      	ldr	r3, [pc, #324]	; (8006c38 <Start_SLAVE_REC_MAS+0x560>)
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	2300      	movs	r3, #0
 8006af8:	2202      	movs	r2, #2
 8006afa:	2100      	movs	r1, #0
 8006afc:	f013 f896 	bl	8019c2c <xTaskGenericNotify>
				  break;
 8006b00:	e01b      	b.n	8006b3a <Start_SLAVE_REC_MAS+0x462>
			  case FETCH_BIST:
				  BIST_DATA[0] = DATA_FROM_SLAVE[1];
 8006b02:	7b7a      	ldrb	r2, [r7, #13]
 8006b04:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b06:	701a      	strb	r2, [r3, #0]
				  BIST_DATA[1] = DATA_FROM_SLAVE[2];
 8006b08:	7bba      	ldrb	r2, [r7, #14]
 8006b0a:	4b4c      	ldr	r3, [pc, #304]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b0c:	705a      	strb	r2, [r3, #1]
				  BIST_DATA[2] = DATA_FROM_SLAVE[3];
 8006b0e:	7bfa      	ldrb	r2, [r7, #15]
 8006b10:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b12:	709a      	strb	r2, [r3, #2]
				  BIST_DATA[3] = DATA_FROM_SLAVE[4];
 8006b14:	7c3a      	ldrb	r2, [r7, #16]
 8006b16:	4b49      	ldr	r3, [pc, #292]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b18:	70da      	strb	r2, [r3, #3]
				  BIST_DATA[4] = DATA_FROM_SLAVE[5];
 8006b1a:	7c7a      	ldrb	r2, [r7, #17]
 8006b1c:	4b47      	ldr	r3, [pc, #284]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b1e:	711a      	strb	r2, [r3, #4]
				  BIST_DATA[5] = DATA_FROM_SLAVE[6];
 8006b20:	7cba      	ldrb	r2, [r7, #18]
 8006b22:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b24:	715a      	strb	r2, [r3, #5]
				  BIST_DATA[6] = DATA_FROM_SLAVE[7];
 8006b26:	7cfa      	ldrb	r2, [r7, #19]
 8006b28:	4b44      	ldr	r3, [pc, #272]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b2a:	719a      	strb	r2, [r3, #6]
				  BIST_DATA[7] = DATA_FROM_SLAVE[8];
 8006b2c:	7d3a      	ldrb	r2, [r7, #20]
 8006b2e:	4b43      	ldr	r3, [pc, #268]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b30:	71da      	strb	r2, [r3, #7]
				  BIST_DATA[8] = DATA_FROM_SLAVE[9];
 8006b32:	7d7a      	ldrb	r2, [r7, #21]
 8006b34:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <Start_SLAVE_REC_MAS+0x564>)
 8006b36:	721a      	strb	r2, [r3, #8]
				  break;
 8006b38:	bf00      	nop
			  }
			  if((DATA_FROM_SLAVE[2] == DATA_TYPE_CURRENT)&& ((LOOP_RUNNING == OPEN_LOOP)||(LOOP_RUNNING == CLOSE_LOOP)))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b0c      	cmp	r3, #12
 8006b3e:	d130      	bne.n	8006ba2 <Start_SLAVE_REC_MAS+0x4ca>
 8006b40:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <Start_SLAVE_REC_MAS+0x568>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d003      	beq.n	8006b50 <Start_SLAVE_REC_MAS+0x478>
 8006b48:	4b3d      	ldr	r3, [pc, #244]	; (8006c40 <Start_SLAVE_REC_MAS+0x568>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d128      	bne.n	8006ba2 <Start_SLAVE_REC_MAS+0x4ca>
			  {
				  dataofslavemsg = osPoolAlloc(dataofslavepool);
 8006b50:	4b3c      	ldr	r3, [pc, #240]	; (8006c44 <Start_SLAVE_REC_MAS+0x56c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f010 fd8c 	bl	8017672 <osPoolAlloc>
 8006b5a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
				  for(int i =0;i<50;i++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b64:	e011      	b.n	8006b8a <Start_SLAVE_REC_MAS+0x4b2>
				  {
					  dataofslavemsg->DATA_FROM_SLAVE_t[i] = DATA_FROM_SLAVE[i];
 8006b66:	f107 020c 	add.w	r2, r7, #12
 8006b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6e:	4413      	add	r3, r2
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b7a:	4413      	add	r3, r2
 8006b7c:	460a      	mov	r2, r1
 8006b7e:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<50;i++)
 8006b80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b84:	3301      	adds	r3, #1
 8006b86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b8e:	2b31      	cmp	r3, #49	; 0x31
 8006b90:	dde9      	ble.n	8006b66 <Start_SLAVE_REC_MAS+0x48e>
				  }
				  osMessagePut(DATA_OF_SLAVE_qHandle, (uint32_t)dataofslavemsg,100);
 8006b92:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <Start_SLAVE_REC_MAS+0x570>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006b9a:	2264      	movs	r2, #100	; 0x64
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f010 fe35 	bl	801780c <osMessagePut>
			  }
			  if((DATA_FROM_SLAVE[2] == SDA_TEMPERATURE)&& (LOOP_RUNNING == CLOSE_LOOP))
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2be1      	cmp	r3, #225	; 0xe1
 8006ba6:	d12c      	bne.n	8006c02 <Start_SLAVE_REC_MAS+0x52a>
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <Start_SLAVE_REC_MAS+0x568>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d128      	bne.n	8006c02 <Start_SLAVE_REC_MAS+0x52a>
			  {
				  dataofslavemsg = osPoolAlloc(dataofslavepool);
 8006bb0:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <Start_SLAVE_REC_MAS+0x56c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f010 fd5c 	bl	8017672 <osPoolAlloc>
 8006bba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
				  for(int i =0;i<50;i++)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bc4:	e011      	b.n	8006bea <Start_SLAVE_REC_MAS+0x512>
				  {
					  dataofslavemsg->DATA_FROM_SLAVE_t[i] = DATA_FROM_SLAVE[i];
 8006bc6:	f107 020c 	add.w	r2, r7, #12
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bce:	4413      	add	r3, r2
 8006bd0:	7819      	ldrb	r1, [r3, #0]
 8006bd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bda:	4413      	add	r3, r2
 8006bdc:	460a      	mov	r2, r1
 8006bde:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<50;i++)
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	3301      	adds	r3, #1
 8006be6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	2b31      	cmp	r3, #49	; 0x31
 8006bf0:	dde9      	ble.n	8006bc6 <Start_SLAVE_REC_MAS+0x4ee>
				  }
				  osMessagePut(DATA_OF_SLAVE_qHandle, (uint32_t)dataofslavemsg,100);
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <Start_SLAVE_REC_MAS+0x570>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006bfa:	2264      	movs	r2, #100	; 0x64
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f010 fe05 	bl	801780c <osMessagePut>
			  }
		  }
		  }
	  }
	  HAL_UART_Receive_DMA(&huart5, DATA_FROM_MAS_SLAVE, 50);
 8006c02:	2232      	movs	r2, #50	; 0x32
 8006c04:	490a      	ldr	r1, [pc, #40]	; (8006c30 <Start_SLAVE_REC_MAS+0x558>)
 8006c06:	4811      	ldr	r0, [pc, #68]	; (8006c4c <Start_SLAVE_REC_MAS+0x574>)
 8006c08:	f00f f945 	bl	8015e96 <HAL_UART_Receive_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart5_rx,DMA_IT_HT);
 8006c0c:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <Start_SLAVE_REC_MAS+0x578>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <Start_SLAVE_REC_MAS+0x578>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0208 	bic.w	r2, r2, #8
 8006c1a:	601a      	str	r2, [r3, #0]
	  }

    osDelay(1);
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	f010 fc02 	bl	8017426 <osDelay>
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8006c22:	e561      	b.n	80066e8 <Start_SLAVE_REC_MAS+0x10>
 8006c24:	20001e28 	.word	0x20001e28
 8006c28:	200015d8 	.word	0x200015d8
 8006c2c:	20000009 	.word	0x20000009
 8006c30:	20001e94 	.word	0x20001e94
 8006c34:	20001718 	.word	0x20001718
 8006c38:	20001dc0 	.word	0x20001dc0
 8006c3c:	20001fa8 	.word	0x20001fa8
 8006c40:	20001f58 	.word	0x20001f58
 8006c44:	200015dc 	.word	0x200015dc
 8006c48:	20001e48 	.word	0x20001e48
 8006c4c:	20001a14 	.word	0x20001a14
 8006c50:	20001c94 	.word	0x20001c94

08006c54 <Start_SDA_SEND>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SDA_SEND */
void Start_SDA_SEND(void const * argument)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SDA_SEND */
	SDA_SEND *sdasend_msg;
	uint8_t SDA_DATA[5] ={0};
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	2300      	movs	r3, #0
 8006c62:	773b      	strb	r3, [r7, #28]
	osEvent evt;
  /* Infinite loop */
  for(;;)
  {
	  evt = osMessageGet(SDA_SEND_qHandle, osWaitForever);
 8006c64:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <Start_SDA_SEND+0x74>)
 8006c66:	6819      	ldr	r1, [r3, #0]
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c70:	4618      	mov	r0, r3
 8006c72:	f010 fe0b 	bl	801788c <osMessageGet>
	  if(evt.status == osEventMessage)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d121      	bne.n	8006cc0 <Start_SDA_SEND+0x6c>
	  {
		  sdasend_msg = evt.value.p;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	623b      	str	r3, [r7, #32]
		  for(int i =0;i<5;i++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
 8006c84:	e00c      	b.n	8006ca0 <Start_SDA_SEND+0x4c>
		  {
			  SDA_DATA[i] = sdasend_msg->SDA_SEND_DATA[i];
 8006c86:	6a3a      	ldr	r2, [r7, #32]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	4413      	add	r3, r2
 8006c8c:	7819      	ldrb	r1, [r3, #0]
 8006c8e:	f107 0218 	add.w	r2, r7, #24
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	4413      	add	r3, r2
 8006c96:	460a      	mov	r2, r1
 8006c98:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<5;i++)
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	ddef      	ble.n	8006c86 <Start_SDA_SEND+0x32>
		  }
		  osPoolFree(sdasendpool, sdasend_msg);
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <Start_SDA_SEND+0x78>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a39      	ldr	r1, [r7, #32]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f010 fd44 	bl	801773a <osPoolFree>
		  HAL_UART_Transmit(&huart1, SDA_DATA,5,10);
 8006cb2:	f107 0118 	add.w	r1, r7, #24
 8006cb6:	230a      	movs	r3, #10
 8006cb8:	2205      	movs	r2, #5
 8006cba:	4805      	ldr	r0, [pc, #20]	; (8006cd0 <Start_SDA_SEND+0x7c>)
 8006cbc:	f00f f868 	bl	8015d90 <HAL_UART_Transmit>
	  }
    osDelay(1);
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	f010 fbb0 	bl	8017426 <osDelay>
	  evt = osMessageGet(SDA_SEND_qHandle, osWaitForever);
 8006cc6:	e7cd      	b.n	8006c64 <Start_SDA_SEND+0x10>
 8006cc8:	20001e24 	.word	0x20001e24
 8006ccc:	20001604 	.word	0x20001604
 8006cd0:	20001a9c 	.word	0x20001a9c

08006cd4 <Start_SDA_RECEIVE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SDA_RECEIVE */
void Start_SDA_RECEIVE(void const * argument)
{
 8006cd4:	b5b0      	push	{r4, r5, r7, lr}
 8006cd6:	b09a      	sub	sp, #104	; 0x68
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
	static int j =0;
	static int notification =0;
  /* Infinite loop */
  for(;;)
  {
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8006cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f012 ff57 	bl	8019b94 <ulTaskNotifyTake>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4b57      	ldr	r3, [pc, #348]	; (8006e48 <Start_SDA_RECEIVE+0x174>)
 8006cec:	601a      	str	r2, [r3, #0]
	  if( (notification>=0))
 8006cee:	4b56      	ldr	r3, [pc, #344]	; (8006e48 <Start_SDA_RECEIVE+0x174>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f2c0 80a4 	blt.w	8006e40 <Start_SDA_RECEIVE+0x16c>
	  {
	  notification =0;
 8006cf8:	4b53      	ldr	r3, [pc, #332]	; (8006e48 <Start_SDA_RECEIVE+0x174>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
	  SDA_ERROR_DATA=0;
 8006cfe:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <Start_SDA_RECEIVE+0x178>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
	  xTimerReset(TCU_SDA_TIMERHandle,1000);
 8006d04:	4b52      	ldr	r3, [pc, #328]	; (8006e50 <Start_SDA_RECEIVE+0x17c>)
 8006d06:	681c      	ldr	r4, [r3, #0]
 8006d08:	f012 fb52 	bl	80193b0 <xTaskGetTickCount>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	2102      	movs	r1, #2
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f013 fa35 	bl	801a188 <xTimerGenericCommand>
	  memcpy(DATA_FROM_SDA_t,DATA_FROM_SDA,34);
 8006d1e:	4b4d      	ldr	r3, [pc, #308]	; (8006e54 <Start_SDA_RECEIVE+0x180>)
 8006d20:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8006d24:	461d      	mov	r5, r3
 8006d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	8023      	strh	r3, [r4, #0]
	  RECEIVED_CRC = DATA_FROM_SDA_t[33];
 8006d32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  CALCULATED_CRC = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FROM_SDA_t,33);
 8006d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d3e:	2221      	movs	r2, #33	; 0x21
 8006d40:	4619      	mov	r1, r3
 8006d42:	4845      	ldr	r0, [pc, #276]	; (8006e58 <Start_SDA_RECEIVE+0x184>)
 8006d44:	f00a f82a 	bl	8010d9c <HAL_CRC_Calculate>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  if((DATA_FROM_SDA_t[32] == 0xDD)&&(RECEIVED_CRC==CALCULATED_CRC))
 8006d4e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006d52:	2bdd      	cmp	r3, #221	; 0xdd
 8006d54:	d167      	bne.n	8006e26 <Start_SDA_RECEIVE+0x152>
 8006d56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006d5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d161      	bne.n	8006e26 <Start_SDA_RECEIVE+0x152>
	  {
	  if(DATA_FROM_SDA_t[0]==0xFF)
 8006d62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d66:	2bff      	cmp	r3, #255	; 0xff
 8006d68:	d104      	bne.n	8006d74 <Start_SDA_RECEIVE+0xa0>
	  {
		  osTimerStop(TCU_SDA_TIMERHandle);
 8006d6a:	4b39      	ldr	r3, [pc, #228]	; (8006e50 <Start_SDA_RECEIVE+0x17c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f010 fbe6 	bl	8017540 <osTimerStop>
	  }
	  j=0;
 8006d74:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
	  for(int i =0;i<16;i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d7e:	e027      	b.n	8006dd0 <Start_SDA_RECEIVE+0xfc>
		  {
			  SDA_TEMP[i] = (((((uint16_t)DATA_FROM_SDA_t[j])<<8)&0xFF00)|(((uint16_t)DATA_FROM_SDA_t[j+1])&0x00FF));
 8006d80:	4b36      	ldr	r3, [pc, #216]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3360      	adds	r3, #96	; 0x60
 8006d86:	443b      	add	r3, r7
 8006d88:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	b21a      	sxth	r2, r3
 8006d90:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	3360      	adds	r3, #96	; 0x60
 8006d98:	443b      	add	r3, r7
 8006d9a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8006d9e:	b21b      	sxth	r3, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b21b      	sxth	r3, r3
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	3360      	adds	r3, #96	; 0x60
 8006dac:	443b      	add	r3, r7
 8006dae:	f823 2c54 	strh.w	r2, [r3, #-84]
			  j =j+2;
 8006db2:	4b2a      	ldr	r3, [pc, #168]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3302      	adds	r3, #2
 8006db8:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006dba:	6013      	str	r3, [r2, #0]
			  if(j ==32)
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d102      	bne.n	8006dca <Start_SDA_RECEIVE+0xf6>
			  {
				  j =0;
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <Start_SDA_RECEIVE+0x188>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
	  for(int i =0;i<16;i++)
 8006dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dcc:	3301      	adds	r3, #1
 8006dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	ddd4      	ble.n	8006d80 <Start_SDA_RECEIVE+0xac>
			  }
		  }
	  if(DATA_FROM_SDA_t[0]!=0xFF && LOOP_RUNNING == CLOSE_LOOP)
 8006dd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dda:	2bff      	cmp	r3, #255	; 0xff
 8006ddc:	d023      	beq.n	8006e26 <Start_SDA_RECEIVE+0x152>
 8006dde:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <Start_SDA_RECEIVE+0x18c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d11f      	bne.n	8006e26 <Start_SDA_RECEIVE+0x152>
	  {
		  datap_msg = osPoolAlloc(datappool);
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <Start_SDA_RECEIVE+0x190>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f010 fc41 	bl	8017672 <osPoolAlloc>
 8006df0:	6538      	str	r0, [r7, #80]	; 0x50
		  for(int i =0;i<16;i++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006df6:	e00c      	b.n	8006e12 <Start_SDA_RECEIVE+0x13e>
		  {
			  datap_msg->DATA_PROCESS_DATA[i]=SDA_TEMP[i];
 8006df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	3360      	adds	r3, #96	; 0x60
 8006dfe:	443b      	add	r3, r7
 8006e00:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 8006e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i =0;i<16;i++)
 8006e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e0e:	3301      	adds	r3, #1
 8006e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e14:	2b0f      	cmp	r3, #15
 8006e16:	ddef      	ble.n	8006df8 <Start_SDA_RECEIVE+0x124>
		  }
		  osMessagePut(DATA_PROCESS_qHandle, (uint32_t)datap_msg,100);
 8006e18:	4b13      	ldr	r3, [pc, #76]	; (8006e68 <Start_SDA_RECEIVE+0x194>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e1e:	2264      	movs	r2, #100	; 0x64
 8006e20:	4618      	mov	r0, r3
 8006e22:	f010 fcf3 	bl	801780c <osMessagePut>
	  }
	  }
	  HAL_UART_Receive_DMA(&huart1, (uint8_t*)DATA_FROM_SDA, 34);
 8006e26:	2222      	movs	r2, #34	; 0x22
 8006e28:	490a      	ldr	r1, [pc, #40]	; (8006e54 <Start_SDA_RECEIVE+0x180>)
 8006e2a:	4810      	ldr	r0, [pc, #64]	; (8006e6c <Start_SDA_RECEIVE+0x198>)
 8006e2c:	f00f f833 	bl	8015e96 <HAL_UART_Receive_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <Start_SDA_RECEIVE+0x19c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <Start_SDA_RECEIVE+0x19c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0208 	bic.w	r2, r2, #8
 8006e3e:	601a      	str	r2, [r3, #0]
	  }

    osDelay(1);
 8006e40:	2001      	movs	r0, #1
 8006e42:	f010 faf0 	bl	8017426 <osDelay>
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8006e46:	e749      	b.n	8006cdc <Start_SDA_RECEIVE+0x8>
 8006e48:	20002a54 	.word	0x20002a54
 8006e4c:	20000010 	.word	0x20000010
 8006e50:	20001e88 	.word	0x20001e88
 8006e54:	20001ec8 	.word	0x20001ec8
 8006e58:	20001718 	.word	0x20001718
 8006e5c:	20002a58 	.word	0x20002a58
 8006e60:	20001f58 	.word	0x20001f58
 8006e64:	20001624 	.word	0x20001624
 8006e68:	20001e2c 	.word	0x20001e2c
 8006e6c:	20001a9c 	.word	0x20001a9c
 8006e70:	20001cf4 	.word	0x20001cf4

08006e74 <Start_SYSTEM_PROCESS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SYSTEM_PROCESS */
void Start_SYSTEM_PROCESS(void const * argument)
{
 8006e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e76:	b0ab      	sub	sp, #172	; 0xac
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	uint16_t SETPOINT_t[16];
	static int j =4;
  /* Infinite loop */
  for(;;)
  {
	  sysproevt = osMessageGet(SYSTEM_PROCESS_qHandle, 0);
 8006e7c:	4bb3      	ldr	r3, [pc, #716]	; (800714c <Start_SYSTEM_PROCESS+0x2d8>)
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006e84:	2200      	movs	r2, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f010 fd00 	bl	801788c <osMessageGet>
	  if(sysproevt.status == osEventMessage)
 8006e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	f040 838e 	bne.w	80075b0 <Start_SYSTEM_PROCESS+0x73c>
	  {

		  syspromsg = sysproevt.value.p;
 8006e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  memcpy(DATA_FOR_PROCESSING_t,syspromsg->DATA_TO_PROCESS,50);
 8006e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	f107 0628 	add.w	r6, r7, #40	; 0x28
 8006ea4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8006ea8:	4635      	mov	r5, r6
 8006eaa:	4623      	mov	r3, r4
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb6:	3410      	adds	r4, #16
 8006eb8:	3610      	adds	r6, #16
 8006eba:	4564      	cmp	r4, ip
 8006ebc:	d1f4      	bne.n	8006ea8 <Start_SYSTEM_PROCESS+0x34>
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	8013      	strh	r3, [r2, #0]
		  osPoolFree(syspropool, syspromsg);
 8006ec6:	4ba2      	ldr	r3, [pc, #648]	; (8007150 <Start_SYSTEM_PROCESS+0x2dc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f010 fc33 	bl	801773a <osPoolFree>
		  switch(DATA_FOR_PROCESSING_t[2])
 8006ed4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006ed8:	2bf0      	cmp	r3, #240	; 0xf0
 8006eda:	f000 82f7 	beq.w	80074cc <Start_SYSTEM_PROCESS+0x658>
 8006ede:	2bf0      	cmp	r3, #240	; 0xf0
 8006ee0:	f300 8336 	bgt.w	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 8006ee4:	2bdd      	cmp	r3, #221	; 0xdd
 8006ee6:	f000 827d 	beq.w	80073e4 <Start_SYSTEM_PROCESS+0x570>
 8006eea:	2bdd      	cmp	r3, #221	; 0xdd
 8006eec:	f300 8330 	bgt.w	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 8006ef0:	2b77      	cmp	r3, #119	; 0x77
 8006ef2:	f000 820a 	beq.w	800730a <Start_SYSTEM_PROCESS+0x496>
 8006ef6:	2b77      	cmp	r3, #119	; 0x77
 8006ef8:	f300 832a 	bgt.w	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 8006efc:	2b2c      	cmp	r3, #44	; 0x2c
 8006efe:	f000 81dc 	beq.w	80072ba <Start_SYSTEM_PROCESS+0x446>
 8006f02:	2b2c      	cmp	r3, #44	; 0x2c
 8006f04:	f300 8324 	bgt.w	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 8006f08:	2b0d      	cmp	r3, #13
 8006f0a:	f000 8147 	beq.w	800719c <Start_SYSTEM_PROCESS+0x328>
 8006f0e:	2b0d      	cmp	r3, #13
 8006f10:	f300 831e 	bgt.w	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 8006f14:	2b05      	cmp	r3, #5
 8006f16:	f000 80b8 	beq.w	800708a <Start_SYSTEM_PROCESS+0x216>
 8006f1a:	2b07      	cmp	r3, #7
 8006f1c:	f040 8318 	bne.w	8007550 <Start_SYSTEM_PROCESS+0x6dc>
		  {
		  case CLOSE_LOOP_START:
			  Running_Status = RUNNING;
 8006f20:	4b8c      	ldr	r3, [pc, #560]	; (8007154 <Start_SYSTEM_PROCESS+0x2e0>)
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
			  LOOP_RUNNING = CLOSE_LOOP;
 8006f26:	4b8c      	ldr	r3, [pc, #560]	; (8007158 <Start_SYSTEM_PROCESS+0x2e4>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
			  connmsg = osPoolAlloc(sdaconnpool);
 8006f2c:	4b8b      	ldr	r3, [pc, #556]	; (800715c <Start_SYSTEM_PROCESS+0x2e8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f010 fb9e 	bl	8017672 <osPoolAlloc>
 8006f36:	6778      	str	r0, [r7, #116]	; 0x74
			  connmsg->SDA_CONN_DATA[0] = 0x01;
 8006f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
			  osMessagePut(SDA_CONN_qHandle,(uint32_t) connmsg,100);
 8006f3e:	4b88      	ldr	r3, [pc, #544]	; (8007160 <Start_SYSTEM_PROCESS+0x2ec>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006f44:	2264      	movs	r2, #100	; 0x64
 8006f46:	4618      	mov	r0, r3
 8006f48:	f010 fc60 	bl	801780c <osMessagePut>
			  osThreadResume(VOLTAGE_TASKHandle);
 8006f4c:	4b85      	ldr	r3, [pc, #532]	; (8007164 <Start_SYSTEM_PROCESS+0x2f0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f010 fe51 	bl	8017bf8 <osThreadResume>
			  osThreadResume(WHOLE_CURRENTHandle);
 8006f56:	4b84      	ldr	r3, [pc, #528]	; (8007168 <Start_SYSTEM_PROCESS+0x2f4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f010 fe4c 	bl	8017bf8 <osThreadResume>
			  osThreadResume(CURRENT_TASKHandle);
 8006f60:	4b82      	ldr	r3, [pc, #520]	; (800716c <Start_SYSTEM_PROCESS+0x2f8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f010 fe47 	bl	8017bf8 <osThreadResume>
			  osThreadResume(PID_TASKHandle);
 8006f6a:	4b81      	ldr	r3, [pc, #516]	; (8007170 <Start_SYSTEM_PROCESS+0x2fc>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f010 fe42 	bl	8017bf8 <osThreadResume>
			  osThreadResume(CURRENT_PROCESSHandle);
 8006f74:	4b7f      	ldr	r3, [pc, #508]	; (8007174 <Start_SYSTEM_PROCESS+0x300>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f010 fe3d 	bl	8017bf8 <osThreadResume>
			  osThreadResume(DATA_LOGGINGHandle);
 8006f7e:	4b7e      	ldr	r3, [pc, #504]	; (8007178 <Start_SYSTEM_PROCESS+0x304>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f010 fe38 	bl	8017bf8 <osThreadResume>
			  osThreadResume(WIFI_SENDHandle);
 8006f88:	4b7c      	ldr	r3, [pc, #496]	; (800717c <Start_SYSTEM_PROCESS+0x308>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f010 fe33 	bl	8017bf8 <osThreadResume>
			  sda_msg = osPoolAlloc(sdasendpool);
 8006f92:	4b7b      	ldr	r3, [pc, #492]	; (8007180 <Start_SYSTEM_PROCESS+0x30c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f010 fb6b 	bl	8017672 <osPoolAlloc>
 8006f9c:	6738      	str	r0, [r7, #112]	; 0x70
			  sda_msg->SDA_SEND_DATA[0]=0xFF;
 8006f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fa0:	22ff      	movs	r2, #255	; 0xff
 8006fa2:	701a      	strb	r2, [r3, #0]
			  sda_msg->SDA_SEND_DATA[1]=DATA_FOR_PROCESSING_t[3];
 8006fa4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006faa:	705a      	strb	r2, [r3, #1]
			  osMessagePut(SDA_SEND_qHandle, (uint32_t)sda_msg,10);
 8006fac:	4b75      	ldr	r3, [pc, #468]	; (8007184 <Start_SYSTEM_PROCESS+0x310>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006fb2:	220a      	movs	r2, #10
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f010 fc29 	bl	801780c <osMessagePut>
			  osDelay(1);
 8006fba:	2001      	movs	r0, #1
 8006fbc:	f010 fa33 	bl	8017426 <osDelay>
			  START_CONDITION = DATA_FOR_PROCESSING_t[2];
 8006fc0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006fc4:	4b70      	ldr	r3, [pc, #448]	; (8007188 <Start_SYSTEM_PROCESS+0x314>)
 8006fc6:	701a      	strb	r2, [r3, #0]
			  MODE_CONDITION = DATA_FOR_PROCESSING_t[3];
 8006fc8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006fcc:	4b6f      	ldr	r3, [pc, #444]	; (800718c <Start_SYSTEM_PROCESS+0x318>)
 8006fce:	701a      	strb	r2, [r3, #0]
			  j=4;
 8006fd0:	4b6f      	ldr	r3, [pc, #444]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	601a      	str	r2, [r3, #0]
				  for(int i =0;i<16;i++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fdc:	e02a      	b.n	8007034 <Start_SYSTEM_PROCESS+0x1c0>
				  {
					  SETPOINT_t[i] = (((((uint16_t)DATA_FOR_PROCESSING_t[j])<<8)&0xFF00)|((((uint16_t)DATA_FOR_PROCESSING_t[j+1]))&0x00FF));
 8006fde:	4b6c      	ldr	r3, [pc, #432]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	33a8      	adds	r3, #168	; 0xa8
 8006fe4:	443b      	add	r3, r7
 8006fe6:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	b21a      	sxth	r2, r3
 8006fee:	4b68      	ldr	r3, [pc, #416]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	33a8      	adds	r3, #168	; 0xa8
 8006ff6:	443b      	add	r3, r7
 8006ff8:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8006ffc:	b21b      	sxth	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	b21b      	sxth	r3, r3
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	33a8      	adds	r3, #168	; 0xa8
 800700c:	443b      	add	r3, r7
 800700e:	f823 2ca0 	strh.w	r2, [r3, #-160]
					  j =j+2;
 8007012:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3302      	adds	r3, #2
 8007018:	4a5d      	ldr	r2, [pc, #372]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 800701a:	6013      	str	r3, [r2, #0]
					  if(j ==36)
 800701c:	4b5c      	ldr	r3, [pc, #368]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b24      	cmp	r3, #36	; 0x24
 8007022:	d102      	bne.n	800702a <Start_SYSTEM_PROCESS+0x1b6>
					  {
						  j =4;
 8007024:	4b5a      	ldr	r3, [pc, #360]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 8007026:	2204      	movs	r2, #4
 8007028:	601a      	str	r2, [r3, #0]
				  for(int i =0;i<16;i++)
 800702a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800702e:	3301      	adds	r3, #1
 8007030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007038:	2b0f      	cmp	r3, #15
 800703a:	ddd0      	ble.n	8006fde <Start_SYSTEM_PROCESS+0x16a>
					  }
				  }
				  sp_msg = osPoolAlloc(sppool);
 800703c:	4b55      	ldr	r3, [pc, #340]	; (8007194 <Start_SYSTEM_PROCESS+0x320>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f010 fb16 	bl	8017672 <osPoolAlloc>
 8007046:	66b8      	str	r0, [r7, #104]	; 0x68
				  for(int i =0;i<16;i++)
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800704e:	e010      	b.n	8007072 <Start_SYSTEM_PROCESS+0x1fe>
				  {
					  sp_msg->SETPOINT_t[i] = SETPOINT_t[i];
 8007050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	33a8      	adds	r3, #168	; 0xa8
 8007058:	443b      	add	r3, r7
 800705a:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 800705e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007060:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007064:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  for(int i =0;i<16;i++)
 8007068:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800706c:	3301      	adds	r3, #1
 800706e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007076:	2b0f      	cmp	r3, #15
 8007078:	ddea      	ble.n	8007050 <Start_SYSTEM_PROCESS+0x1dc>
				  }
				  osMessagePut(SETPOINT_qHandle, (uint32_t)sp_msg,100);
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <Start_SYSTEM_PROCESS+0x324>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007080:	2264      	movs	r2, #100	; 0x64
 8007082:	4618      	mov	r0, r3
 8007084:	f010 fbc2 	bl	801780c <osMessagePut>


			  break;
 8007088:	e262      	b.n	8007550 <Start_SYSTEM_PROCESS+0x6dc>
		  case UPADTE_TEMP_OR_POWER:
			  Running_Status = RUNNING;
 800708a:	4b32      	ldr	r3, [pc, #200]	; (8007154 <Start_SYSTEM_PROCESS+0x2e0>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
			  j=4;
 8007090:	4b3f      	ldr	r3, [pc, #252]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 8007092:	2204      	movs	r2, #4
 8007094:	601a      	str	r2, [r3, #0]
				  for(int i =0;i<16;i++)
 8007096:	2300      	movs	r3, #0
 8007098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800709c:	e02a      	b.n	80070f4 <Start_SYSTEM_PROCESS+0x280>
				  {
					  SETPOINT_t[i] = (((((uint16_t)DATA_FOR_PROCESSING_t[j])<<8)&0xFF00)|((((uint16_t)DATA_FOR_PROCESSING_t[j+1]))&0x00FF));
 800709e:	4b3c      	ldr	r3, [pc, #240]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	33a8      	adds	r3, #168	; 0xa8
 80070a4:	443b      	add	r3, r7
 80070a6:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	b21a      	sxth	r2, r3
 80070ae:	4b38      	ldr	r3, [pc, #224]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	33a8      	adds	r3, #168	; 0xa8
 80070b6:	443b      	add	r3, r7
 80070b8:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80070bc:	b21b      	sxth	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	33a8      	adds	r3, #168	; 0xa8
 80070cc:	443b      	add	r3, r7
 80070ce:	f823 2ca0 	strh.w	r2, [r3, #-160]
					  j =j+2;
 80070d2:	4b2f      	ldr	r3, [pc, #188]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3302      	adds	r3, #2
 80070d8:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 80070da:	6013      	str	r3, [r2, #0]
					  if(j ==36)
 80070dc:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b24      	cmp	r3, #36	; 0x24
 80070e2:	d102      	bne.n	80070ea <Start_SYSTEM_PROCESS+0x276>
					  {
						  j =4;
 80070e4:	4b2a      	ldr	r3, [pc, #168]	; (8007190 <Start_SYSTEM_PROCESS+0x31c>)
 80070e6:	2204      	movs	r2, #4
 80070e8:	601a      	str	r2, [r3, #0]
				  for(int i =0;i<16;i++)
 80070ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ee:	3301      	adds	r3, #1
 80070f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f8:	2b0f      	cmp	r3, #15
 80070fa:	ddd0      	ble.n	800709e <Start_SYSTEM_PROCESS+0x22a>
					  }
				  }
				  sp_msg = osPoolAlloc(sppool);
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <Start_SYSTEM_PROCESS+0x320>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f010 fab6 	bl	8017672 <osPoolAlloc>
 8007106:	66b8      	str	r0, [r7, #104]	; 0x68
				  for(int i =0;i<16;i++)
 8007108:	2300      	movs	r3, #0
 800710a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800710e:	e010      	b.n	8007132 <Start_SYSTEM_PROCESS+0x2be>
				  {
					  sp_msg->SETPOINT_t[i] = SETPOINT_t[i];
 8007110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	33a8      	adds	r3, #168	; 0xa8
 8007118:	443b      	add	r3, r7
 800711a:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 800711e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007120:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007124:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  for(int i =0;i<16;i++)
 8007128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800712c:	3301      	adds	r3, #1
 800712e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007136:	2b0f      	cmp	r3, #15
 8007138:	ddea      	ble.n	8007110 <Start_SYSTEM_PROCESS+0x29c>
				  }
				  osMessagePut(SETPOINT_qHandle, (uint32_t)sp_msg,100);
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <Start_SYSTEM_PROCESS+0x324>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007140:	2264      	movs	r2, #100	; 0x64
 8007142:	4618      	mov	r0, r3
 8007144:	f010 fb62 	bl	801780c <osMessagePut>




		  	  break;
 8007148:	e202      	b.n	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 800714a:	bf00      	nop
 800714c:	20001e28 	.word	0x20001e28
 8007150:	200015d8 	.word	0x200015d8
 8007154:	20001fa4 	.word	0x20001fa4
 8007158:	20001f58 	.word	0x20001f58
 800715c:	20001610 	.word	0x20001610
 8007160:	20001e84 	.word	0x20001e84
 8007164:	20001de8 	.word	0x20001de8
 8007168:	20001dec 	.word	0x20001dec
 800716c:	20001de0 	.word	0x20001de0
 8007170:	20001de4 	.word	0x20001de4
 8007174:	20001e04 	.word	0x20001e04
 8007178:	20001e00 	.word	0x20001e00
 800717c:	20001e14 	.word	0x20001e14
 8007180:	20001604 	.word	0x20001604
 8007184:	20001e24 	.word	0x20001e24
 8007188:	20001e91 	.word	0x20001e91
 800718c:	20001e92 	.word	0x20001e92
 8007190:	20000020 	.word	0x20000020
 8007194:	20001630 	.word	0x20001630
 8007198:	20001e34 	.word	0x20001e34
		  case OPEN_LOOP_START:
			  Running_Status = RUNNING;
 800719c:	4bb5      	ldr	r3, [pc, #724]	; (8007474 <Start_SYSTEM_PROCESS+0x600>)
 800719e:	2201      	movs	r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
			  LOOP_RUNNING = OPEN_LOOP;
 80071a2:	4bb5      	ldr	r3, [pc, #724]	; (8007478 <Start_SYSTEM_PROCESS+0x604>)
 80071a4:	2202      	movs	r2, #2
 80071a6:	601a      	str	r2, [r3, #0]
			  connmsg = osPoolAlloc(sdaconnpool);
 80071a8:	4bb4      	ldr	r3, [pc, #720]	; (800747c <Start_SYSTEM_PROCESS+0x608>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f010 fa60 	bl	8017672 <osPoolAlloc>
 80071b2:	6778      	str	r0, [r7, #116]	; 0x74
			  connmsg->SDA_CONN_DATA[0] = 0x01;
 80071b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b6:	2201      	movs	r2, #1
 80071b8:	701a      	strb	r2, [r3, #0]
			  osMessagePut(SDA_CONN_qHandle,(uint32_t) connmsg,100);
 80071ba:	4bb1      	ldr	r3, [pc, #708]	; (8007480 <Start_SYSTEM_PROCESS+0x60c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80071c0:	2264      	movs	r2, #100	; 0x64
 80071c2:	4618      	mov	r0, r3
 80071c4:	f010 fb22 	bl	801780c <osMessagePut>
			  osThreadResume(PID_TASKHandle);
 80071c8:	4bae      	ldr	r3, [pc, #696]	; (8007484 <Start_SYSTEM_PROCESS+0x610>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f010 fd13 	bl	8017bf8 <osThreadResume>
			  osThreadResume(CURRENT_TASKHandle);
 80071d2:	4bad      	ldr	r3, [pc, #692]	; (8007488 <Start_SYSTEM_PROCESS+0x614>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f010 fd0e 	bl	8017bf8 <osThreadResume>
			  osThreadResume(CURRENT_PROCESSHandle);
 80071dc:	4bab      	ldr	r3, [pc, #684]	; (800748c <Start_SYSTEM_PROCESS+0x618>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f010 fd09 	bl	8017bf8 <osThreadResume>
			  osThreadResume(DATA_LOGGINGHandle);
 80071e6:	4baa      	ldr	r3, [pc, #680]	; (8007490 <Start_SYSTEM_PROCESS+0x61c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f010 fd04 	bl	8017bf8 <osThreadResume>
			  START_CONDITION = DATA_FOR_PROCESSING_t[2];
 80071f0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80071f4:	4ba7      	ldr	r3, [pc, #668]	; (8007494 <Start_SYSTEM_PROCESS+0x620>)
 80071f6:	701a      	strb	r2, [r3, #0]
			  MODE_CONDITION = DATA_FOR_PROCESSING_t[3];
 80071f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80071fc:	4ba6      	ldr	r3, [pc, #664]	; (8007498 <Start_SYSTEM_PROCESS+0x624>)
 80071fe:	701a      	strb	r2, [r3, #0]
			  j=4;
 8007200:	4ba6      	ldr	r3, [pc, #664]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 8007202:	2204      	movs	r2, #4
 8007204:	601a      	str	r2, [r3, #0]
				  for(int i =0;i<16;i++)
 8007206:	2300      	movs	r3, #0
 8007208:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800720c:	e02a      	b.n	8007264 <Start_SYSTEM_PROCESS+0x3f0>
				  {
					  SETPOINT_t[i] = (((((uint16_t)DATA_FOR_PROCESSING_t[j])<<8)&0xFF00)|((((uint16_t)DATA_FOR_PROCESSING_t[j+1]))&0x00FF));
 800720e:	4ba3      	ldr	r3, [pc, #652]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	33a8      	adds	r3, #168	; 0xa8
 8007214:	443b      	add	r3, r7
 8007216:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	b21a      	sxth	r2, r3
 800721e:	4b9f      	ldr	r3, [pc, #636]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	33a8      	adds	r3, #168	; 0xa8
 8007226:	443b      	add	r3, r7
 8007228:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800722c:	b21b      	sxth	r3, r3
 800722e:	4313      	orrs	r3, r2
 8007230:	b21b      	sxth	r3, r3
 8007232:	b29a      	uxth	r2, r3
 8007234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	33a8      	adds	r3, #168	; 0xa8
 800723c:	443b      	add	r3, r7
 800723e:	f823 2ca0 	strh.w	r2, [r3, #-160]
					  j =j+2;
 8007242:	4b96      	ldr	r3, [pc, #600]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3302      	adds	r3, #2
 8007248:	4a94      	ldr	r2, [pc, #592]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 800724a:	6013      	str	r3, [r2, #0]
					  if(j ==36)
 800724c:	4b93      	ldr	r3, [pc, #588]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b24      	cmp	r3, #36	; 0x24
 8007252:	d102      	bne.n	800725a <Start_SYSTEM_PROCESS+0x3e6>
					  {
						  j =4;
 8007254:	4b91      	ldr	r3, [pc, #580]	; (800749c <Start_SYSTEM_PROCESS+0x628>)
 8007256:	2204      	movs	r2, #4
 8007258:	601a      	str	r2, [r3, #0]
				  for(int i =0;i<16;i++)
 800725a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800725e:	3301      	adds	r3, #1
 8007260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007268:	2b0f      	cmp	r3, #15
 800726a:	ddd0      	ble.n	800720e <Start_SYSTEM_PROCESS+0x39a>
					  }
				  }
				  sp_msg = osPoolAlloc(sppool);
 800726c:	4b8c      	ldr	r3, [pc, #560]	; (80074a0 <Start_SYSTEM_PROCESS+0x62c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f010 f9fe 	bl	8017672 <osPoolAlloc>
 8007276:	66b8      	str	r0, [r7, #104]	; 0x68
				  for(int i =0;i<16;i++)
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800727e:	e010      	b.n	80072a2 <Start_SYSTEM_PROCESS+0x42e>
				  {
					  sp_msg->SETPOINT_t[i] = SETPOINT_t[i];
 8007280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	33a8      	adds	r3, #168	; 0xa8
 8007288:	443b      	add	r3, r7
 800728a:	f833 1ca0 	ldrh.w	r1, [r3, #-160]
 800728e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007290:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007294:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				  for(int i =0;i<16;i++)
 8007298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800729c:	3301      	adds	r3, #1
 800729e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	ddea      	ble.n	8007280 <Start_SYSTEM_PROCESS+0x40c>
				  }
				  osMessagePut(SETPOINT_qHandle, (uint32_t)sp_msg,100);
 80072aa:	4b7e      	ldr	r3, [pc, #504]	; (80074a4 <Start_SYSTEM_PROCESS+0x630>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072b0:	2264      	movs	r2, #100	; 0x64
 80072b2:	4618      	mov	r0, r3
 80072b4:	f010 faaa 	bl	801780c <osMessagePut>
			  break;
 80072b8:	e14a      	b.n	8007550 <Start_SYSTEM_PROCESS+0x6dc>

		  case KP_KI_KD_DATA:
			  	  	  	 kpkikd_msg = osPoolAlloc(kpkikdpool);
 80072ba:	4b7b      	ldr	r3, [pc, #492]	; (80074a8 <Start_SYSTEM_PROCESS+0x634>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f010 f9d7 	bl	8017672 <osPoolAlloc>
 80072c4:	66f8      	str	r0, [r7, #108]	; 0x6c
			  	  	  	 for(int i =0;i<4;i++)
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072cc:	e011      	b.n	80072f2 <Start_SYSTEM_PROCESS+0x47e>
			  	  	  	 {
			  	  	  	 kpkikd_msg->KP_KI_KD_t[i] = DATA_FOR_PROCESSING_t[i+3];
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d2:	3303      	adds	r3, #3
 80072d4:	33a8      	adds	r3, #168	; 0xa8
 80072d6:	443b      	add	r3, r7
 80072d8:	f813 1c80 	ldrb.w	r1, [r3, #-128]
 80072dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072e2:	4413      	add	r3, r2
 80072e4:	460a      	mov	r2, r1
 80072e6:	701a      	strb	r2, [r3, #0]
			  	  	  	 for(int i =0;i<4;i++)
 80072e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ec:	3301      	adds	r3, #1
 80072ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	dde9      	ble.n	80072ce <Start_SYSTEM_PROCESS+0x45a>
			  	  	  	 }
			  	  	  	 osMessagePut(KP_KI_KD_qHandle, (uint32_t)kpkikd_msg,100);
 80072fa:	4b6c      	ldr	r3, [pc, #432]	; (80074ac <Start_SYSTEM_PROCESS+0x638>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007300:	2264      	movs	r2, #100	; 0x64
 8007302:	4618      	mov	r0, r3
 8007304:	f010 fa82 	bl	801780c <osMessagePut>
			  break;
 8007308:	e122      	b.n	8007550 <Start_SYSTEM_PROCESS+0x6dc>

		  case CLOSE_LOOP_START_PROFILE:
			  Running_Status = RUNNING;
 800730a:	4b5a      	ldr	r3, [pc, #360]	; (8007474 <Start_SYSTEM_PROCESS+0x600>)
 800730c:	2201      	movs	r2, #1
 800730e:	601a      	str	r2, [r3, #0]
				flashmsg = osPoolAlloc(flashpool);
 8007310:	4b67      	ldr	r3, [pc, #412]	; (80074b0 <Start_SYSTEM_PROCESS+0x63c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f010 f9ac 	bl	8017672 <osPoolAlloc>
 800731a:	67b8      	str	r0, [r7, #120]	; 0x78
				flashmsg->FLASH_DATA_t[0] = UPDATE_PROFILE;
 800731c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800731e:	2255      	movs	r2, #85	; 0x55
 8007320:	701a      	strb	r2, [r3, #0]
				osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 8007322:	4b64      	ldr	r3, [pc, #400]	; (80074b4 <Start_SYSTEM_PROCESS+0x640>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007328:	2264      	movs	r2, #100	; 0x64
 800732a:	4618      	mov	r0, r3
 800732c:	f010 fa6e 	bl	801780c <osMessagePut>
				osDelay(3000);
 8007330:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007334:	f010 f877 	bl	8017426 <osDelay>
				LOOP_RUNNING = CLOSE_LOOP;
 8007338:	4b4f      	ldr	r3, [pc, #316]	; (8007478 <Start_SYSTEM_PROCESS+0x604>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
				  connmsg = osPoolAlloc(sdaconnpool);
 800733e:	4b4f      	ldr	r3, [pc, #316]	; (800747c <Start_SYSTEM_PROCESS+0x608>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f010 f995 	bl	8017672 <osPoolAlloc>
 8007348:	6778      	str	r0, [r7, #116]	; 0x74
				  connmsg->SDA_CONN_DATA[0] = 0x01;
 800734a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
				  osMessagePut(SDA_CONN_qHandle,(uint32_t) connmsg,100);
 8007350:	4b4b      	ldr	r3, [pc, #300]	; (8007480 <Start_SYSTEM_PROCESS+0x60c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007356:	2264      	movs	r2, #100	; 0x64
 8007358:	4618      	mov	r0, r3
 800735a:	f010 fa57 	bl	801780c <osMessagePut>
				  osThreadResume(VOLTAGE_TASKHandle);
 800735e:	4b56      	ldr	r3, [pc, #344]	; (80074b8 <Start_SYSTEM_PROCESS+0x644>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f010 fc48 	bl	8017bf8 <osThreadResume>
				  osThreadResume(WHOLE_CURRENTHandle);
 8007368:	4b54      	ldr	r3, [pc, #336]	; (80074bc <Start_SYSTEM_PROCESS+0x648>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f010 fc43 	bl	8017bf8 <osThreadResume>
				  osThreadResume(CURRENT_TASKHandle);
 8007372:	4b45      	ldr	r3, [pc, #276]	; (8007488 <Start_SYSTEM_PROCESS+0x614>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f010 fc3e 	bl	8017bf8 <osThreadResume>
				  osThreadResume(PID_TASKHandle);
 800737c:	4b41      	ldr	r3, [pc, #260]	; (8007484 <Start_SYSTEM_PROCESS+0x610>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f010 fc39 	bl	8017bf8 <osThreadResume>
				  osThreadResume(CURRENT_PROCESSHandle);
 8007386:	4b41      	ldr	r3, [pc, #260]	; (800748c <Start_SYSTEM_PROCESS+0x618>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f010 fc34 	bl	8017bf8 <osThreadResume>
				  osThreadResume(DATA_LOGGINGHandle);
 8007390:	4b3f      	ldr	r3, [pc, #252]	; (8007490 <Start_SYSTEM_PROCESS+0x61c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f010 fc2f 	bl	8017bf8 <osThreadResume>
				  osThreadResume(WIFI_SENDHandle);
 800739a:	4b49      	ldr	r3, [pc, #292]	; (80074c0 <Start_SYSTEM_PROCESS+0x64c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f010 fc2a 	bl	8017bf8 <osThreadResume>
				  sda_msg = osPoolAlloc(sdasendpool);
 80073a4:	4b47      	ldr	r3, [pc, #284]	; (80074c4 <Start_SYSTEM_PROCESS+0x650>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f010 f962 	bl	8017672 <osPoolAlloc>
 80073ae:	6738      	str	r0, [r7, #112]	; 0x70
				  sda_msg->SDA_SEND_DATA[0]=0xFF;
 80073b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b2:	22ff      	movs	r2, #255	; 0xff
 80073b4:	701a      	strb	r2, [r3, #0]
				  sda_msg->SDA_SEND_DATA[1]=DATA_FOR_PROCESSING_t[3];
 80073b6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80073ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073bc:	705a      	strb	r2, [r3, #1]
				  osMessagePut(SDA_SEND_qHandle, (uint32_t)sda_msg,10);
 80073be:	4b42      	ldr	r3, [pc, #264]	; (80074c8 <Start_SYSTEM_PROCESS+0x654>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80073c4:	220a      	movs	r2, #10
 80073c6:	4618      	mov	r0, r3
 80073c8:	f010 fa20 	bl	801780c <osMessagePut>
				  osDelay(1);
 80073cc:	2001      	movs	r0, #1
 80073ce:	f010 f82a 	bl	8017426 <osDelay>
				  START_CONDITION = DATA_FOR_PROCESSING_t[2];
 80073d2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80073d6:	4b2f      	ldr	r3, [pc, #188]	; (8007494 <Start_SYSTEM_PROCESS+0x620>)
 80073d8:	701a      	strb	r2, [r3, #0]
				  MODE_CONDITION = DATA_FOR_PROCESSING_t[3];
 80073da:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80073de:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <Start_SYSTEM_PROCESS+0x624>)
 80073e0:	701a      	strb	r2, [r3, #0]
			  break;
 80073e2:	e0b5      	b.n	8007550 <Start_SYSTEM_PROCESS+0x6dc>
		  case OPEN_LOOP_START_PROFILE:
			  Running_Status = RUNNING;
 80073e4:	4b23      	ldr	r3, [pc, #140]	; (8007474 <Start_SYSTEM_PROCESS+0x600>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
				flashmsg = osPoolAlloc(flashpool);
 80073ea:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <Start_SYSTEM_PROCESS+0x63c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f010 f93f 	bl	8017672 <osPoolAlloc>
 80073f4:	67b8      	str	r0, [r7, #120]	; 0x78
				flashmsg->FLASH_DATA_t[0] = UPDATE_PROFILE;
 80073f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f8:	2255      	movs	r2, #85	; 0x55
 80073fa:	701a      	strb	r2, [r3, #0]
				osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 80073fc:	4b2d      	ldr	r3, [pc, #180]	; (80074b4 <Start_SYSTEM_PROCESS+0x640>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007402:	2264      	movs	r2, #100	; 0x64
 8007404:	4618      	mov	r0, r3
 8007406:	f010 fa01 	bl	801780c <osMessagePut>
				osDelay(3000);
 800740a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800740e:	f010 f80a 	bl	8017426 <osDelay>
				  LOOP_RUNNING = OPEN_LOOP;
 8007412:	4b19      	ldr	r3, [pc, #100]	; (8007478 <Start_SYSTEM_PROCESS+0x604>)
 8007414:	2202      	movs	r2, #2
 8007416:	601a      	str	r2, [r3, #0]
				  connmsg = osPoolAlloc(sdaconnpool);
 8007418:	4b18      	ldr	r3, [pc, #96]	; (800747c <Start_SYSTEM_PROCESS+0x608>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f010 f928 	bl	8017672 <osPoolAlloc>
 8007422:	6778      	str	r0, [r7, #116]	; 0x74
				  connmsg->SDA_CONN_DATA[0] = 0x01;
 8007424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
				  osMessagePut(SDA_CONN_qHandle,(uint32_t) connmsg,100);
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <Start_SYSTEM_PROCESS+0x60c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007430:	2264      	movs	r2, #100	; 0x64
 8007432:	4618      	mov	r0, r3
 8007434:	f010 f9ea 	bl	801780c <osMessagePut>
				  osThreadResume(PID_TASKHandle);
 8007438:	4b12      	ldr	r3, [pc, #72]	; (8007484 <Start_SYSTEM_PROCESS+0x610>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f010 fbdb 	bl	8017bf8 <osThreadResume>
				  osThreadResume(CURRENT_TASKHandle);
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <Start_SYSTEM_PROCESS+0x614>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4618      	mov	r0, r3
 8007448:	f010 fbd6 	bl	8017bf8 <osThreadResume>
				  osThreadResume(CURRENT_PROCESSHandle);
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <Start_SYSTEM_PROCESS+0x618>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f010 fbd1 	bl	8017bf8 <osThreadResume>
				  osThreadResume(DATA_LOGGINGHandle);
 8007456:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <Start_SYSTEM_PROCESS+0x61c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f010 fbcc 	bl	8017bf8 <osThreadResume>
				  START_CONDITION = DATA_FOR_PROCESSING_t[2];
 8007460:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <Start_SYSTEM_PROCESS+0x620>)
 8007466:	701a      	strb	r2, [r3, #0]
				  MODE_CONDITION = DATA_FOR_PROCESSING_t[3];
 8007468:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <Start_SYSTEM_PROCESS+0x624>)
 800746e:	701a      	strb	r2, [r3, #0]
			  break;
 8007470:	e06e      	b.n	8007550 <Start_SYSTEM_PROCESS+0x6dc>
 8007472:	bf00      	nop
 8007474:	20001fa4 	.word	0x20001fa4
 8007478:	20001f58 	.word	0x20001f58
 800747c:	20001610 	.word	0x20001610
 8007480:	20001e84 	.word	0x20001e84
 8007484:	20001de4 	.word	0x20001de4
 8007488:	20001de0 	.word	0x20001de0
 800748c:	20001e04 	.word	0x20001e04
 8007490:	20001e00 	.word	0x20001e00
 8007494:	20001e91 	.word	0x20001e91
 8007498:	20001e92 	.word	0x20001e92
 800749c:	20000020 	.word	0x20000020
 80074a0:	20001630 	.word	0x20001630
 80074a4:	20001e34 	.word	0x20001e34
 80074a8:	2000163c 	.word	0x2000163c
 80074ac:	20001e38 	.word	0x20001e38
 80074b0:	200015cc 	.word	0x200015cc
 80074b4:	20001e70 	.word	0x20001e70
 80074b8:	20001de8 	.word	0x20001de8
 80074bc:	20001dec 	.word	0x20001dec
 80074c0:	20001e14 	.word	0x20001e14
 80074c4:	20001604 	.word	0x20001604
 80074c8:	20001e24 	.word	0x20001e24
		  case SLEEP:
			  Running_Status = RUNNING;
 80074cc:	4b3a      	ldr	r3, [pc, #232]	; (80075b8 <Start_SYSTEM_PROCESS+0x744>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
			  	  	osThreadSuspend(PID_TASKHandle);
 80074d2:	4b3a      	ldr	r3, [pc, #232]	; (80075bc <Start_SYSTEM_PROCESS+0x748>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f010 fb81 	bl	8017bde <osThreadSuspend>
			  	    osThreadSuspend(CURRENT_TASKHandle);
 80074dc:	4b38      	ldr	r3, [pc, #224]	; (80075c0 <Start_SYSTEM_PROCESS+0x74c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f010 fb7c 	bl	8017bde <osThreadSuspend>
			  	    osThreadSuspend(CURRENT_PROCESSHandle);
 80074e6:	4b37      	ldr	r3, [pc, #220]	; (80075c4 <Start_SYSTEM_PROCESS+0x750>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f010 fb77 	bl	8017bde <osThreadSuspend>
			  	    osThreadSuspend(DATA_LOGGINGHandle);
 80074f0:	4b35      	ldr	r3, [pc, #212]	; (80075c8 <Start_SYSTEM_PROCESS+0x754>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f010 fb72 	bl	8017bde <osThreadSuspend>
			  	    osThreadSuspend(WIFI_SENDHandle);
 80074fa:	4b34      	ldr	r3, [pc, #208]	; (80075cc <Start_SYSTEM_PROCESS+0x758>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f010 fb6d 	bl	8017bde <osThreadSuspend>
			  	    pidmsg = osPoolAlloc(pidpool);
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <Start_SYSTEM_PROCESS+0x75c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f010 f8b2 	bl	8017672 <osPoolAlloc>
 800750e:	67f8      	str	r0, [r7, #124]	; 0x7c
			  	    for(int i =0;i<16;i++)
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007516:	e00a      	b.n	800752e <Start_SYSTEM_PROCESS+0x6ba>
			  	    {
			  	    pidmsg->PID_DATA_t[i] = 0;
 8007518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800751a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800751e:	2100      	movs	r1, #0
 8007520:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  	    for(int i =0;i<16;i++)
 8007524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007528:	3301      	adds	r3, #1
 800752a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800752e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007532:	2b0f      	cmp	r3, #15
 8007534:	ddf0      	ble.n	8007518 <Start_SYSTEM_PROCESS+0x6a4>
			  	    }
			  	    osMessagePut(PID_DATA_qHandle, (uint32_t)pidmsg, 100);
 8007536:	4b27      	ldr	r3, [pc, #156]	; (80075d4 <Start_SYSTEM_PROCESS+0x760>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800753c:	2264      	movs	r2, #100	; 0x64
 800753e:	4618      	mov	r0, r3
 8007540:	f010 f964 	bl	801780c <osMessagePut>

			  	  	PCA9685_SleepMode(1);
 8007544:	2001      	movs	r0, #1
 8007546:	f7fa fb2d 	bl	8001ba4 <PCA9685_SleepMode>
			  	  	SEND_ACK();
 800754a:	f7fa fde3 	bl	8002114 <SEND_ACK>
			  break;
 800754e:	bf00      	nop
		  }
			flashmsg = osPoolAlloc(flashpool);
 8007550:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <Start_SYSTEM_PROCESS+0x764>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f010 f88c 	bl	8017672 <osPoolAlloc>
 800755a:	67b8      	str	r0, [r7, #120]	; 0x78
			flashmsg->FLASH_DATA_t[0] = SYSTEM_STATE;
 800755c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800755e:	22c6      	movs	r2, #198	; 0xc6
 8007560:	701a      	strb	r2, [r3, #0]
			flashmsg->FLASH_DATA_t[1] = START_CONDITION;
 8007562:	4b1e      	ldr	r3, [pc, #120]	; (80075dc <Start_SYSTEM_PROCESS+0x768>)
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007568:	705a      	strb	r2, [r3, #1]
			flashmsg->FLASH_DATA_t[2] = MODE_CONDITION;
 800756a:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <Start_SYSTEM_PROCESS+0x76c>)
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007570:	709a      	strb	r2, [r3, #2]
			  for(int i =0;i<50;i++)
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007578:	e00f      	b.n	800759a <Start_SYSTEM_PROCESS+0x726>
			  {
				  flashmsg->FLASH_DATA_t[i+3]=DATA_FOR_PROCESSING_t[i];
 800757a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800757e:	3303      	adds	r3, #3
 8007580:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007584:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007588:	440a      	add	r2, r1
 800758a:	7811      	ldrb	r1, [r2, #0]
 800758c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800758e:	54d1      	strb	r1, [r2, r3]
			  for(int i =0;i<50;i++)
 8007590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007594:	3301      	adds	r3, #1
 8007596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800759a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800759e:	2b31      	cmp	r3, #49	; 0x31
 80075a0:	ddeb      	ble.n	800757a <Start_SYSTEM_PROCESS+0x706>
			  }
			osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 80075a2:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <Start_SYSTEM_PROCESS+0x770>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80075a8:	2264      	movs	r2, #100	; 0x64
 80075aa:	4618      	mov	r0, r3
 80075ac:	f010 f92e 	bl	801780c <osMessagePut>
	  }
    osDelay(1);
 80075b0:	2001      	movs	r0, #1
 80075b2:	f00f ff38 	bl	8017426 <osDelay>
	  sysproevt = osMessageGet(SYSTEM_PROCESS_qHandle, 0);
 80075b6:	e461      	b.n	8006e7c <Start_SYSTEM_PROCESS+0x8>
 80075b8:	20001fa4 	.word	0x20001fa4
 80075bc:	20001de4 	.word	0x20001de4
 80075c0:	20001de0 	.word	0x20001de0
 80075c4:	20001e04 	.word	0x20001e04
 80075c8:	20001e00 	.word	0x20001e00
 80075cc:	20001e14 	.word	0x20001e14
 80075d0:	20001628 	.word	0x20001628
 80075d4:	20001e68 	.word	0x20001e68
 80075d8:	200015cc 	.word	0x200015cc
 80075dc:	20001e91 	.word	0x20001e91
 80075e0:	20001e92 	.word	0x20001e92
 80075e4:	20001e70 	.word	0x20001e70

080075e8 <Start_DATA_PROCESS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DATA_PROCESS */
void Start_DATA_PROCESS(void const * argument)
{
 80075e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ea:	b0cf      	sub	sp, #316	; 0x13c
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80075f6:	6018      	str	r0, [r3, #0]
	uint8_t DATA_FOR_MASTER[50];
	uint8_t CRC_VALUE_FOR_MASTER;
	uint8_t DATA_IS_FOR;
	uint8_t SDA_TEMP_8BIT[32];
	uint8_t CURRENT_8BIT[32];
	uint16_t DATA_TO_PROCESS[16] = {0};
 80075f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007600:	4618      	mov	r0, r3
 8007602:	2320      	movs	r3, #32
 8007604:	461a      	mov	r2, r3
 8007606:	2100      	movs	r1, #0
 8007608:	f013 fe03 	bl	801b212 <memset>
	static uint8_t RSSI_tt;
	static uint8_t ERROR_tt;
  /* Infinite loop */
  for(;;)
  {
	  dataprocessevt = osMessageGet(DATA_PROCESS_qHandle, 0);
 800760c:	4bad      	ldr	r3, [pc, #692]	; (80078c4 <Start_DATA_PROCESS+0x2dc>)
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007614:	2200      	movs	r2, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f010 f938 	bl	801788c <osMessageGet>
	  if(dataprocessevt.status == osEventMessage)
 800761c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007620:	2b10      	cmp	r3, #16
 8007622:	d125      	bne.n	8007670 <Start_DATA_PROCESS+0x88>
	  {
		  datap_msg = dataprocessevt.value.p;
 8007624:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  for(int i =0;i<16;i++)
 800762c:	2300      	movs	r3, #0
 800762e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007632:	e012      	b.n	800765a <Start_DATA_PROCESS+0x72>
		  {
			  DATA_TO_PROCESS[i] = datap_msg->DATA_PROCESS_DATA[i];
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800763c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8007640:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007644:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007648:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800764c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i =0;i<16;i++)
 8007650:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007654:	3301      	adds	r3, #1
 8007656:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800765a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800765e:	2b0f      	cmp	r3, #15
 8007660:	dde8      	ble.n	8007634 <Start_DATA_PROCESS+0x4c>
		  }
		  osPoolFree(datappool, datap_msg);
 8007662:	4b99      	ldr	r3, [pc, #612]	; (80078c8 <Start_DATA_PROCESS+0x2e0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800766a:	4618      	mov	r0, r3
 800766c:	f010 f865 	bl	801773a <osPoolFree>
	  }

	  dataaccuevt = osMessageGet(DATA_ACCU_qHandle, 0);
 8007670:	4b96      	ldr	r3, [pc, #600]	; (80078cc <Start_DATA_PROCESS+0x2e4>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007678:	2200      	movs	r2, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f010 f906 	bl	801788c <osMessageGet>
	  if(dataaccuevt.status == osEventMessage)
 8007680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007684:	2b10      	cmp	r3, #16
 8007686:	d132      	bne.n	80076ee <Start_DATA_PROCESS+0x106>
	  {
		  dataaccumsg = dataaccuevt.value.p;
 8007688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800768c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		  SYSTEM_VOLTAGE_tt = dataaccumsg->SYSTEM_VOLTAGE_t;
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	4b8e      	ldr	r3, [pc, #568]	; (80078d0 <Start_DATA_PROCESS+0x2e8>)
 8007698:	701a      	strb	r2, [r3, #0]
		  SYSTEM_CURRENT_tt = dataaccumsg->SYSTEM_CURRENT_t;
 800769a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769e:	785a      	ldrb	r2, [r3, #1]
 80076a0:	4b8c      	ldr	r3, [pc, #560]	; (80078d4 <Start_DATA_PROCESS+0x2ec>)
 80076a2:	701a      	strb	r2, [r3, #0]
		  AMBIENT_TEMPERATURE_tt = dataaccumsg->AMBIENT_TEMPERATURE_t;
 80076a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a8:	789a      	ldrb	r2, [r3, #2]
 80076aa:	4b8b      	ldr	r3, [pc, #556]	; (80078d8 <Start_DATA_PROCESS+0x2f0>)
 80076ac:	701a      	strb	r2, [r3, #0]
		  IR_TEMPERATURE_tt = dataaccumsg->IR_TEMPERATURE_t;
 80076ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b2:	78da      	ldrb	r2, [r3, #3]
 80076b4:	4b89      	ldr	r3, [pc, #548]	; (80078dc <Start_DATA_PROCESS+0x2f4>)
 80076b6:	701a      	strb	r2, [r3, #0]
		  LEFT_HS_TEMPERATURE_tt = dataaccumsg->LEFT_HS_TEMPERATURE_t;
 80076b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076bc:	791a      	ldrb	r2, [r3, #4]
 80076be:	4b88      	ldr	r3, [pc, #544]	; (80078e0 <Start_DATA_PROCESS+0x2f8>)
 80076c0:	701a      	strb	r2, [r3, #0]
		  RIGHT_HS_TEMPERATURE_tt = dataaccumsg->RIGHT_HS_TEMPERATURE_t;
 80076c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c6:	795a      	ldrb	r2, [r3, #5]
 80076c8:	4b86      	ldr	r3, [pc, #536]	; (80078e4 <Start_DATA_PROCESS+0x2fc>)
 80076ca:	701a      	strb	r2, [r3, #0]
		  RSSI_tt = dataaccumsg->RSSI_t;
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d0:	799a      	ldrb	r2, [r3, #6]
 80076d2:	4b85      	ldr	r3, [pc, #532]	; (80078e8 <Start_DATA_PROCESS+0x300>)
 80076d4:	701a      	strb	r2, [r3, #0]
		  ERROR_tt = dataaccumsg->ERROR_t;
 80076d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076da:	79da      	ldrb	r2, [r3, #7]
 80076dc:	4b83      	ldr	r3, [pc, #524]	; (80078ec <Start_DATA_PROCESS+0x304>)
 80076de:	701a      	strb	r2, [r3, #0]
		  osPoolFree(dataaccupool, dataaccumsg);
 80076e0:	4b83      	ldr	r3, [pc, #524]	; (80078f0 <Start_DATA_PROCESS+0x308>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f010 f826 	bl	801773a <osPoolFree>
	  }

	  givemeevt = osMessageGet(GIVE_ME_qHandle, 0);
 80076ee:	4b81      	ldr	r3, [pc, #516]	; (80078f4 <Start_DATA_PROCESS+0x30c>)
 80076f0:	6819      	ldr	r1, [r3, #0]
 80076f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80076f6:	2200      	movs	r2, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f010 f8c7 	bl	801788c <osMessageGet>
	  if(givemeevt.status == osEventMessage)
 80076fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007702:	2b10      	cmp	r3, #16
 8007704:	f040 87ee 	bne.w	80086e4 <Start_DATA_PROCESS+0x10fc>
	  {
		  givememsg = givemeevt.value.p;
 8007708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800770c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		  DATA_IS_FOR = givememsg->GIVE_ME_t;
 8007710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		  osPoolFree(givepool, givememsg);
 800771a:	4b77      	ldr	r3, [pc, #476]	; (80078f8 <Start_DATA_PROCESS+0x310>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007722:	4618      	mov	r0, r3
 8007724:	f010 f809 	bl	801773a <osPoolFree>
		  if(LOOP_RUNNING == OPEN_LOOP)
 8007728:	4b74      	ldr	r3, [pc, #464]	; (80078fc <Start_DATA_PROCESS+0x314>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b02      	cmp	r3, #2
 800772e:	f040 83d3 	bne.w	8007ed8 <Start_DATA_PROCESS+0x8f0>
		  {
		  switch(DATA_IS_FOR)
 8007732:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8007736:	2b99      	cmp	r3, #153	; 0x99
 8007738:	d009      	beq.n	800774e <Start_DATA_PROCESS+0x166>
 800773a:	2b99      	cmp	r3, #153	; 0x99
 800773c:	f300 83cd 	bgt.w	8007eda <Start_DATA_PROCESS+0x8f2>
 8007740:	2b06      	cmp	r3, #6
 8007742:	f000 8158 	beq.w	80079f6 <Start_DATA_PROCESS+0x40e>
 8007746:	2b07      	cmp	r3, #7
 8007748:	f000 829f 	beq.w	8007c8a <Start_DATA_PROCESS+0x6a2>
 800774c:	e3c5      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
		  {
		  	  case	I_AM_WIFI:
			  	  	k=0;
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <Start_DATA_PROCESS+0x318>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800775a:	e033      	b.n	80077c4 <Start_DATA_PROCESS+0x1dc>
					{
					CURRENT_8BIT[k] = (uint8_t)((DATA_TO_PROCESS[i]>>8)&0x00FF);
 800775c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007764:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007768:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	b29a      	uxth	r2, r3
 8007770:	4b63      	ldr	r3, [pc, #396]	; (8007900 <Start_DATA_PROCESS+0x318>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	b2d1      	uxtb	r1, r2
 8007776:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800777a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800777e:	54d1      	strb	r1, [r2, r3]
					CURRENT_8BIT[k+1] = (uint8_t)(DATA_TO_PROCESS[i]&0x00FF);
 8007780:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007788:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800778c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007790:	4b5b      	ldr	r3, [pc, #364]	; (8007900 <Start_DATA_PROCESS+0x318>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	b2d1      	uxtb	r1, r2
 8007798:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800779c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80077a0:	54d1      	strb	r1, [r2, r3]
					k = k+2;
 80077a2:	4b57      	ldr	r3, [pc, #348]	; (8007900 <Start_DATA_PROCESS+0x318>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3302      	adds	r3, #2
 80077a8:	4a55      	ldr	r2, [pc, #340]	; (8007900 <Start_DATA_PROCESS+0x318>)
 80077aa:	6013      	str	r3, [r2, #0]
					if(k==32)
 80077ac:	4b54      	ldr	r3, [pc, #336]	; (8007900 <Start_DATA_PROCESS+0x318>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d102      	bne.n	80077ba <Start_DATA_PROCESS+0x1d2>
					{
					k=0;
 80077b4:	4b52      	ldr	r3, [pc, #328]	; (8007900 <Start_DATA_PROCESS+0x318>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 80077ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077be:	3301      	adds	r3, #1
 80077c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80077c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077c8:	2b0f      	cmp	r3, #15
 80077ca:	ddc7      	ble.n	800775c <Start_DATA_PROCESS+0x174>
					}
					}
					switch(state)
 80077cc:	4b4d      	ldr	r3, [pc, #308]	; (8007904 <Start_DATA_PROCESS+0x31c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <Start_DATA_PROCESS+0x1f4>
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	f000 809f 	beq.w	8007918 <Start_DATA_PROCESS+0x330>
						wificurrmsg = osMailAlloc(wificurrmail,100);
						memcpy(wificurrmsg->CURR_DATA_FOR_WIFI,DATA_FOR_DATA_LOGG,50);
						osMailPut(wificurrmail, wificurrmsg);
						break;
					}
			  break;
 80077da:	e37e      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
						state =1;
 80077dc:	4b49      	ldr	r3, [pc, #292]	; (8007904 <Start_DATA_PROCESS+0x31c>)
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 80077e2:	4b49      	ldr	r3, [pc, #292]	; (8007908 <Start_DATA_PROCESS+0x320>)
 80077e4:	2204      	movs	r2, #4
 80077e6:	701a      	strb	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[1] = DATA_TYPE_CURRENT;
 80077e8:	4b47      	ldr	r3, [pc, #284]	; (8007908 <Start_DATA_PROCESS+0x320>)
 80077ea:	220c      	movs	r2, #12
 80077ec:	705a      	strb	r2, [r3, #1]
						memcpy(&DATA_FOR_DATA_LOGG[2],CURRENT_8BIT,32);
 80077ee:	4a46      	ldr	r2, [pc, #280]	; (8007908 <Start_DATA_PROCESS+0x320>)
 80077f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077f8:	1c94      	adds	r4, r2, #2
 80077fa:	461d      	mov	r5, r3
 80077fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077fe:	6020      	str	r0, [r4, #0]
 8007800:	6061      	str	r1, [r4, #4]
 8007802:	60a2      	str	r2, [r4, #8]
 8007804:	60e3      	str	r3, [r4, #12]
 8007806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007808:	6120      	str	r0, [r4, #16]
 800780a:	6161      	str	r1, [r4, #20]
 800780c:	61a2      	str	r2, [r4, #24]
 800780e:	61e3      	str	r3, [r4, #28]
						DATA_FOR_DATA_LOGG[34] = SYS_VOLTAGE;
 8007810:	4b3d      	ldr	r3, [pc, #244]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007812:	222b      	movs	r2, #43	; 0x2b
 8007814:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						DATA_FOR_DATA_LOGG[35] = SYSTEM_VOLTAGE_tt;
 8007818:	4b2d      	ldr	r3, [pc, #180]	; (80078d0 <Start_DATA_PROCESS+0x2e8>)
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	4b3a      	ldr	r3, [pc, #232]	; (8007908 <Start_DATA_PROCESS+0x320>)
 800781e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						DATA_FOR_DATA_LOGG[36] = WHOLE_CURRENT;
 8007822:	4b39      	ldr	r3, [pc, #228]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007824:	222a      	movs	r2, #42	; 0x2a
 8007826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						DATA_FOR_DATA_LOGG[37] = SYSTEM_CURRENT_tt;
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <Start_DATA_PROCESS+0x2ec>)
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	4b36      	ldr	r3, [pc, #216]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						DATA_FOR_DATA_LOGG[38] = RSSI;
 8007834:	4b34      	ldr	r3, [pc, #208]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007836:	2231      	movs	r2, #49	; 0x31
 8007838:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						DATA_FOR_DATA_LOGG[39] = RSSI_tt;
 800783c:	4b2a      	ldr	r3, [pc, #168]	; (80078e8 <Start_DATA_PROCESS+0x300>)
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	4b31      	ldr	r3, [pc, #196]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						DATA_FOR_DATA_LOGG[40] = ERRORS;
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007848:	2232      	movs	r2, #50	; 0x32
 800784a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						DATA_FOR_DATA_LOGG[41] = ERROR_tt;
 800784e:	4b27      	ldr	r3, [pc, #156]	; (80078ec <Start_DATA_PROCESS+0x304>)
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007854:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
						DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 8007858:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <Start_DATA_PROCESS+0x320>)
 800785a:	229a      	movs	r2, #154	; 0x9a
 800785c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 8007860:	4b2a      	ldr	r3, [pc, #168]	; (800790c <Start_DATA_PROCESS+0x324>)
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	4b28      	ldr	r3, [pc, #160]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007866:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						DATA_FOR_DATA_LOGG[44] = MODE_CONDITION;
 800786a:	4b29      	ldr	r3, [pc, #164]	; (8007910 <Start_DATA_PROCESS+0x328>)
 800786c:	781a      	ldrb	r2, [r3, #0]
 800786e:	4b26      	ldr	r3, [pc, #152]	; (8007908 <Start_DATA_PROCESS+0x320>)
 8007870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						wificurrmsg = osMailAlloc(wificurrmail,100);
 8007874:	4b27      	ldr	r3, [pc, #156]	; (8007914 <Start_DATA_PROCESS+0x32c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2164      	movs	r1, #100	; 0x64
 800787a:	4618      	mov	r0, r3
 800787c:	f010 f8d2 	bl	8017a24 <osMailAlloc>
 8007880:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
						memcpy(wificurrmsg->CURR_DATA_FOR_WIFI,DATA_FOR_DATA_LOGG,50);
 8007884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007888:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <Start_DATA_PROCESS+0x320>)
 800788a:	4614      	mov	r4, r2
 800788c:	469c      	mov	ip, r3
 800788e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007892:	4665      	mov	r5, ip
 8007894:	4626      	mov	r6, r4
 8007896:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007898:	6028      	str	r0, [r5, #0]
 800789a:	6069      	str	r1, [r5, #4]
 800789c:	60aa      	str	r2, [r5, #8]
 800789e:	60eb      	str	r3, [r5, #12]
 80078a0:	3410      	adds	r4, #16
 80078a2:	f10c 0c10 	add.w	ip, ip, #16
 80078a6:	4574      	cmp	r4, lr
 80078a8:	d1f3      	bne.n	8007892 <Start_DATA_PROCESS+0x2aa>
 80078aa:	4662      	mov	r2, ip
 80078ac:	4623      	mov	r3, r4
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	8013      	strh	r3, [r2, #0]
						osMailPut(wificurrmail, wificurrmsg);
 80078b2:	4b18      	ldr	r3, [pc, #96]	; (8007914 <Start_DATA_PROCESS+0x32c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f010 f8c8 	bl	8017a50 <osMailPut>
						break;
 80078c0:	e098      	b.n	80079f4 <Start_DATA_PROCESS+0x40c>
 80078c2:	bf00      	nop
 80078c4:	20001e2c 	.word	0x20001e2c
 80078c8:	20001624 	.word	0x20001624
 80078cc:	20001e50 	.word	0x20001e50
 80078d0:	20002a5c 	.word	0x20002a5c
 80078d4:	20002a5d 	.word	0x20002a5d
 80078d8:	20002a5e 	.word	0x20002a5e
 80078dc:	20002a5f 	.word	0x20002a5f
 80078e0:	20002a60 	.word	0x20002a60
 80078e4:	20002a61 	.word	0x20002a61
 80078e8:	20002a62 	.word	0x20002a62
 80078ec:	20002a63 	.word	0x20002a63
 80078f0:	200015e0 	.word	0x200015e0
 80078f4:	20001e3c 	.word	0x20001e3c
 80078f8:	20001614 	.word	0x20001614
 80078fc:	20001f58 	.word	0x20001f58
 8007900:	20002a64 	.word	0x20002a64
 8007904:	20002a68 	.word	0x20002a68
 8007908:	20002a6c 	.word	0x20002a6c
 800790c:	20001e91 	.word	0x20001e91
 8007910:	20001e92 	.word	0x20001e92
 8007914:	20001600 	.word	0x20001600
						state =0;
 8007918:	4b94      	ldr	r3, [pc, #592]	; (8007b6c <Start_DATA_PROCESS+0x584>)
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 800791e:	4b94      	ldr	r3, [pc, #592]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007920:	2204      	movs	r2, #4
 8007922:	701a      	strb	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[1] = DATA_TYPE_CURRENT;
 8007924:	4b92      	ldr	r3, [pc, #584]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007926:	220c      	movs	r2, #12
 8007928:	705a      	strb	r2, [r3, #1]
						memcpy(&DATA_FOR_DATA_LOGG[2],CURRENT_8BIT,32);
 800792a:	4a91      	ldr	r2, [pc, #580]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 800792c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007934:	1c94      	adds	r4, r2, #2
 8007936:	461d      	mov	r5, r3
 8007938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800793a:	6020      	str	r0, [r4, #0]
 800793c:	6061      	str	r1, [r4, #4]
 800793e:	60a2      	str	r2, [r4, #8]
 8007940:	60e3      	str	r3, [r4, #12]
 8007942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007944:	6120      	str	r0, [r4, #16]
 8007946:	6161      	str	r1, [r4, #20]
 8007948:	61a2      	str	r2, [r4, #24]
 800794a:	61e3      	str	r3, [r4, #28]
						DATA_FOR_DATA_LOGG[34] = AMB_TEMP_t;
 800794c:	4b88      	ldr	r3, [pc, #544]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 800794e:	22fa      	movs	r2, #250	; 0xfa
 8007950:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						DATA_FOR_DATA_LOGG[35] = AMBIENT_TEMPERATURE_tt;
 8007954:	4b87      	ldr	r3, [pc, #540]	; (8007b74 <Start_DATA_PROCESS+0x58c>)
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	4b85      	ldr	r3, [pc, #532]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 800795a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						DATA_FOR_DATA_LOGG[36] = IR_TEMP_t;
 800795e:	4b84      	ldr	r3, [pc, #528]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007960:	22fb      	movs	r2, #251	; 0xfb
 8007962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						DATA_FOR_DATA_LOGG[37] = IR_TEMPERATURE_tt;
 8007966:	4b84      	ldr	r3, [pc, #528]	; (8007b78 <Start_DATA_PROCESS+0x590>)
 8007968:	781a      	ldrb	r2, [r3, #0]
 800796a:	4b81      	ldr	r3, [pc, #516]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 800796c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						DATA_FOR_DATA_LOGG[38] = HS_LEFT_t;
 8007970:	4b7f      	ldr	r3, [pc, #508]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007972:	22fc      	movs	r2, #252	; 0xfc
 8007974:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						DATA_FOR_DATA_LOGG[39] = LEFT_HS_TEMPERATURE_tt;
 8007978:	4b80      	ldr	r3, [pc, #512]	; (8007b7c <Start_DATA_PROCESS+0x594>)
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	4b7c      	ldr	r3, [pc, #496]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 800797e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						DATA_FOR_DATA_LOGG[40] = HS_RIGHT_t;
 8007982:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007984:	22fd      	movs	r2, #253	; 0xfd
 8007986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						DATA_FOR_DATA_LOGG[41] = RIGHT_HS_TEMPERATURE_tt;
 800798a:	4b7d      	ldr	r3, [pc, #500]	; (8007b80 <Start_DATA_PROCESS+0x598>)
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	4b78      	ldr	r3, [pc, #480]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007990:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
						DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 8007994:	4b76      	ldr	r3, [pc, #472]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007996:	229a      	movs	r2, #154	; 0x9a
 8007998:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 800799c:	4b79      	ldr	r3, [pc, #484]	; (8007b84 <Start_DATA_PROCESS+0x59c>)
 800799e:	781a      	ldrb	r2, [r3, #0]
 80079a0:	4b73      	ldr	r3, [pc, #460]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 80079a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						wificurrmsg = osMailAlloc(wificurrmail,100);
 80079a6:	4b78      	ldr	r3, [pc, #480]	; (8007b88 <Start_DATA_PROCESS+0x5a0>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2164      	movs	r1, #100	; 0x64
 80079ac:	4618      	mov	r0, r3
 80079ae:	f010 f839 	bl	8017a24 <osMailAlloc>
 80079b2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
						memcpy(wificurrmsg->CURR_DATA_FOR_WIFI,DATA_FOR_DATA_LOGG,50);
 80079b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ba:	4a6d      	ldr	r2, [pc, #436]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 80079bc:	4614      	mov	r4, r2
 80079be:	469c      	mov	ip, r3
 80079c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80079c4:	4665      	mov	r5, ip
 80079c6:	4626      	mov	r6, r4
 80079c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80079ca:	6028      	str	r0, [r5, #0]
 80079cc:	6069      	str	r1, [r5, #4]
 80079ce:	60aa      	str	r2, [r5, #8]
 80079d0:	60eb      	str	r3, [r5, #12]
 80079d2:	3410      	adds	r4, #16
 80079d4:	f10c 0c10 	add.w	ip, ip, #16
 80079d8:	4574      	cmp	r4, lr
 80079da:	d1f3      	bne.n	80079c4 <Start_DATA_PROCESS+0x3dc>
 80079dc:	4662      	mov	r2, ip
 80079de:	4623      	mov	r3, r4
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	8013      	strh	r3, [r2, #0]
						osMailPut(wificurrmail, wificurrmsg);
 80079e4:	4b68      	ldr	r3, [pc, #416]	; (8007b88 <Start_DATA_PROCESS+0x5a0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f010 f82f 	bl	8017a50 <osMailPut>
						break;
 80079f2:	bf00      	nop
			  break;
 80079f4:	e271      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
		  	  case	I_AM_DATA_LOGG:
			  	  	k=0;
 80079f6:	4b65      	ldr	r3, [pc, #404]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a02:	e033      	b.n	8007a6c <Start_DATA_PROCESS+0x484>
					{
					CURRENT_8BIT[k] = (uint8_t)((DATA_TO_PROCESS[i]>>8)&0x00FF);
 8007a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	4b5c      	ldr	r3, [pc, #368]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	b2d1      	uxtb	r1, r2
 8007a1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a22:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007a26:	54d1      	strb	r1, [r2, r3]
					CURRENT_8BIT[k+1] = (uint8_t)(DATA_TO_PROCESS[i]&0x00FF);
 8007a28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a30:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007a34:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007a38:	4b54      	ldr	r3, [pc, #336]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	b2d1      	uxtb	r1, r2
 8007a40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a44:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007a48:	54d1      	strb	r1, [r2, r3]
					k = k+2;
 8007a4a:	4b50      	ldr	r3, [pc, #320]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3302      	adds	r3, #2
 8007a50:	4a4e      	ldr	r2, [pc, #312]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 8007a52:	6013      	str	r3, [r2, #0]
					if(k==32)
 8007a54:	4b4d      	ldr	r3, [pc, #308]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d102      	bne.n	8007a62 <Start_DATA_PROCESS+0x47a>
					{
					k=0;
 8007a5c:	4b4b      	ldr	r3, [pc, #300]	; (8007b8c <Start_DATA_PROCESS+0x5a4>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 8007a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a70:	2b0f      	cmp	r3, #15
 8007a72:	ddc7      	ble.n	8007a04 <Start_DATA_PROCESS+0x41c>
					}
					}
					switch(state)
 8007a74:	4b3d      	ldr	r3, [pc, #244]	; (8007b6c <Start_DATA_PROCESS+0x584>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <Start_DATA_PROCESS+0x49c>
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	f000 8095 	beq.w	8007bac <Start_DATA_PROCESS+0x5c4>
						memcpy(datalogmsg->DATA_LOGGING_DATA,DATA_FOR_DATA_LOGG,50);
						osMessagePut(DATA_LOGGING_qHandle, (uint32_t)datalogmsg, 100);

						break;
					}
		  	      break;
 8007a82:	e22a      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
						state =1;
 8007a84:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <Start_DATA_PROCESS+0x584>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 8007a8a:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	701a      	strb	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[1] = DATA_TYPE_CURRENT;
 8007a90:	4b37      	ldr	r3, [pc, #220]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007a92:	220c      	movs	r2, #12
 8007a94:	705a      	strb	r2, [r3, #1]
						memcpy(&DATA_FOR_DATA_LOGG[2],CURRENT_8BIT,32);
 8007a96:	4a36      	ldr	r2, [pc, #216]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007a98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007aa0:	1c94      	adds	r4, r2, #2
 8007aa2:	461d      	mov	r5, r3
 8007aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	6061      	str	r1, [r4, #4]
 8007aaa:	60a2      	str	r2, [r4, #8]
 8007aac:	60e3      	str	r3, [r4, #12]
 8007aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ab0:	6120      	str	r0, [r4, #16]
 8007ab2:	6161      	str	r1, [r4, #20]
 8007ab4:	61a2      	str	r2, [r4, #24]
 8007ab6:	61e3      	str	r3, [r4, #28]
						DATA_FOR_DATA_LOGG[34] = SYS_VOLTAGE;
 8007ab8:	4b2d      	ldr	r3, [pc, #180]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007aba:	222b      	movs	r2, #43	; 0x2b
 8007abc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						DATA_FOR_DATA_LOGG[35] = SYSTEM_VOLTAGE_tt;
 8007ac0:	4b33      	ldr	r3, [pc, #204]	; (8007b90 <Start_DATA_PROCESS+0x5a8>)
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	4b2a      	ldr	r3, [pc, #168]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007ac6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						DATA_FOR_DATA_LOGG[36] = WHOLE_CURRENT;
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007acc:	222a      	movs	r2, #42	; 0x2a
 8007ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						DATA_FOR_DATA_LOGG[37] = SYSTEM_CURRENT_tt;
 8007ad2:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <Start_DATA_PROCESS+0x5ac>)
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						DATA_FOR_DATA_LOGG[38] = RSSI;
 8007adc:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007ade:	2231      	movs	r2, #49	; 0x31
 8007ae0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						DATA_FOR_DATA_LOGG[39] = RSSI_tt;
 8007ae4:	4b2c      	ldr	r3, [pc, #176]	; (8007b98 <Start_DATA_PROCESS+0x5b0>)
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007aea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						DATA_FOR_DATA_LOGG[40] = ERRORS;
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007af0:	2232      	movs	r2, #50	; 0x32
 8007af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						DATA_FOR_DATA_LOGG[41] = ERROR_tt;
 8007af6:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <Start_DATA_PROCESS+0x5b4>)
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007afc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
						DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 8007b00:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007b02:	229a      	movs	r2, #154	; 0x9a
 8007b04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 8007b08:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <Start_DATA_PROCESS+0x59c>)
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007b0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						DATA_FOR_DATA_LOGG[44] = MODE_CONDITION;
 8007b12:	4b23      	ldr	r3, [pc, #140]	; (8007ba0 <Start_DATA_PROCESS+0x5b8>)
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						datalogmsg = osPoolAlloc(datalogpool);
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <Start_DATA_PROCESS+0x5bc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f00f fda6 	bl	8017672 <osPoolAlloc>
 8007b26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						memcpy(datalogmsg->DATA_LOGGING_DATA,DATA_FOR_DATA_LOGG,50);
 8007b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b2e:	4a10      	ldr	r2, [pc, #64]	; (8007b70 <Start_DATA_PROCESS+0x588>)
 8007b30:	4614      	mov	r4, r2
 8007b32:	469c      	mov	ip, r3
 8007b34:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007b38:	4665      	mov	r5, ip
 8007b3a:	4626      	mov	r6, r4
 8007b3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007b3e:	6028      	str	r0, [r5, #0]
 8007b40:	6069      	str	r1, [r5, #4]
 8007b42:	60aa      	str	r2, [r5, #8]
 8007b44:	60eb      	str	r3, [r5, #12]
 8007b46:	3410      	adds	r4, #16
 8007b48:	f10c 0c10 	add.w	ip, ip, #16
 8007b4c:	4574      	cmp	r4, lr
 8007b4e:	d1f3      	bne.n	8007b38 <Start_DATA_PROCESS+0x550>
 8007b50:	4662      	mov	r2, ip
 8007b52:	4623      	mov	r3, r4
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	8013      	strh	r3, [r2, #0]
						osMessagePut(DATA_LOGGING_qHandle, (uint32_t)datalogmsg, 100);
 8007b58:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <Start_DATA_PROCESS+0x5c0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007b60:	2264      	movs	r2, #100	; 0x64
 8007b62:	4618      	mov	r0, r3
 8007b64:	f00f fe52 	bl	801780c <osMessagePut>
						break;
 8007b68:	e08e      	b.n	8007c88 <Start_DATA_PROCESS+0x6a0>
 8007b6a:	bf00      	nop
 8007b6c:	20002a68 	.word	0x20002a68
 8007b70:	20002a6c 	.word	0x20002a6c
 8007b74:	20002a5e 	.word	0x20002a5e
 8007b78:	20002a5f 	.word	0x20002a5f
 8007b7c:	20002a60 	.word	0x20002a60
 8007b80:	20002a61 	.word	0x20002a61
 8007b84:	20001e91 	.word	0x20001e91
 8007b88:	20001600 	.word	0x20001600
 8007b8c:	20002a64 	.word	0x20002a64
 8007b90:	20002a5c 	.word	0x20002a5c
 8007b94:	20002a5d 	.word	0x20002a5d
 8007b98:	20002a62 	.word	0x20002a62
 8007b9c:	20002a63 	.word	0x20002a63
 8007ba0:	20001e92 	.word	0x20001e92
 8007ba4:	200015e8 	.word	0x200015e8
 8007ba8:	20001e44 	.word	0x20001e44
						state =0;
 8007bac:	4bb9      	ldr	r3, [pc, #740]	; (8007e94 <Start_DATA_PROCESS+0x8ac>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 8007bb2:	4bb9      	ldr	r3, [pc, #740]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	701a      	strb	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[1] = DATA_TYPE_CURRENT;
 8007bb8:	4bb7      	ldr	r3, [pc, #732]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007bba:	220c      	movs	r2, #12
 8007bbc:	705a      	strb	r2, [r3, #1]
						memcpy(&DATA_FOR_DATA_LOGG[2],CURRENT_8BIT,32);
 8007bbe:	4ab6      	ldr	r2, [pc, #728]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007bc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007bc8:	1c94      	adds	r4, r2, #2
 8007bca:	461d      	mov	r5, r3
 8007bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bce:	6020      	str	r0, [r4, #0]
 8007bd0:	6061      	str	r1, [r4, #4]
 8007bd2:	60a2      	str	r2, [r4, #8]
 8007bd4:	60e3      	str	r3, [r4, #12]
 8007bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bd8:	6120      	str	r0, [r4, #16]
 8007bda:	6161      	str	r1, [r4, #20]
 8007bdc:	61a2      	str	r2, [r4, #24]
 8007bde:	61e3      	str	r3, [r4, #28]
						DATA_FOR_DATA_LOGG[34] = AMB_TEMP_t;
 8007be0:	4bad      	ldr	r3, [pc, #692]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007be2:	22fa      	movs	r2, #250	; 0xfa
 8007be4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						DATA_FOR_DATA_LOGG[35] = AMBIENT_TEMPERATURE_tt;
 8007be8:	4bac      	ldr	r3, [pc, #688]	; (8007e9c <Start_DATA_PROCESS+0x8b4>)
 8007bea:	781a      	ldrb	r2, [r3, #0]
 8007bec:	4baa      	ldr	r3, [pc, #680]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007bee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						DATA_FOR_DATA_LOGG[36] = IR_TEMP_t;
 8007bf2:	4ba9      	ldr	r3, [pc, #676]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007bf4:	22fb      	movs	r2, #251	; 0xfb
 8007bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						DATA_FOR_DATA_LOGG[37] = IR_TEMPERATURE_tt;
 8007bfa:	4ba9      	ldr	r3, [pc, #676]	; (8007ea0 <Start_DATA_PROCESS+0x8b8>)
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	4ba6      	ldr	r3, [pc, #664]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						DATA_FOR_DATA_LOGG[38] = HS_LEFT_t;
 8007c04:	4ba4      	ldr	r3, [pc, #656]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c06:	22fc      	movs	r2, #252	; 0xfc
 8007c08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						DATA_FOR_DATA_LOGG[39] = LEFT_HS_TEMPERATURE_tt;
 8007c0c:	4ba5      	ldr	r3, [pc, #660]	; (8007ea4 <Start_DATA_PROCESS+0x8bc>)
 8007c0e:	781a      	ldrb	r2, [r3, #0]
 8007c10:	4ba1      	ldr	r3, [pc, #644]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						DATA_FOR_DATA_LOGG[40] = HS_RIGHT_t;
 8007c16:	4ba0      	ldr	r3, [pc, #640]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c18:	22fd      	movs	r2, #253	; 0xfd
 8007c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						DATA_FOR_DATA_LOGG[41] = RIGHT_HS_TEMPERATURE_tt;
 8007c1e:	4ba2      	ldr	r3, [pc, #648]	; (8007ea8 <Start_DATA_PROCESS+0x8c0>)
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	4b9d      	ldr	r3, [pc, #628]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
						DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 8007c28:	4b9b      	ldr	r3, [pc, #620]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c2a:	229a      	movs	r2, #154	; 0x9a
 8007c2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 8007c30:	4b9e      	ldr	r3, [pc, #632]	; (8007eac <Start_DATA_PROCESS+0x8c4>)
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	4b98      	ldr	r3, [pc, #608]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						datalogmsg = osPoolAlloc(datalogpool);
 8007c3a:	4b9d      	ldr	r3, [pc, #628]	; (8007eb0 <Start_DATA_PROCESS+0x8c8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f00f fd17 	bl	8017672 <osPoolAlloc>
 8007c44:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						memcpy(datalogmsg->DATA_LOGGING_DATA,DATA_FOR_DATA_LOGG,50);
 8007c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c4c:	4a92      	ldr	r2, [pc, #584]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007c4e:	4614      	mov	r4, r2
 8007c50:	469c      	mov	ip, r3
 8007c52:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007c56:	4665      	mov	r5, ip
 8007c58:	4626      	mov	r6, r4
 8007c5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007c5c:	6028      	str	r0, [r5, #0]
 8007c5e:	6069      	str	r1, [r5, #4]
 8007c60:	60aa      	str	r2, [r5, #8]
 8007c62:	60eb      	str	r3, [r5, #12]
 8007c64:	3410      	adds	r4, #16
 8007c66:	f10c 0c10 	add.w	ip, ip, #16
 8007c6a:	4574      	cmp	r4, lr
 8007c6c:	d1f3      	bne.n	8007c56 <Start_DATA_PROCESS+0x66e>
 8007c6e:	4662      	mov	r2, ip
 8007c70:	4623      	mov	r3, r4
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	8013      	strh	r3, [r2, #0]
						osMessagePut(DATA_LOGGING_qHandle, (uint32_t)datalogmsg, 100);
 8007c76:	4b8f      	ldr	r3, [pc, #572]	; (8007eb4 <Start_DATA_PROCESS+0x8cc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007c7e:	2264      	movs	r2, #100	; 0x64
 8007c80:	4618      	mov	r0, r3
 8007c82:	f00f fdc3 	bl	801780c <osMessagePut>
						break;
 8007c86:	bf00      	nop
		  	      break;
 8007c88:	e127      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
		  	  case I_AM_FOR_MASTER:
			  	  	k=0;
 8007c8a:	4b8b      	ldr	r3, [pc, #556]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007c96:	e033      	b.n	8007d00 <Start_DATA_PROCESS+0x718>
					{
					CURRENT_8BIT[k] = (uint8_t)((DATA_TO_PROCESS[i]>>8)&0x00FF);
 8007c98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007ca4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ca8:	0a1b      	lsrs	r3, r3, #8
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	4b82      	ldr	r3, [pc, #520]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	b2d1      	uxtb	r1, r2
 8007cb2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007cb6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007cba:	54d1      	strb	r1, [r2, r3]
					CURRENT_8BIT[k+1] = (uint8_t)(DATA_TO_PROCESS[i]&0x00FF);
 8007cbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007cc8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007ccc:	4b7a      	ldr	r3, [pc, #488]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	b2d1      	uxtb	r1, r2
 8007cd4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007cd8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007cdc:	54d1      	strb	r1, [r2, r3]
					k = k+2;
 8007cde:	4b76      	ldr	r3, [pc, #472]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	4a74      	ldr	r2, [pc, #464]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007ce6:	6013      	str	r3, [r2, #0]
					if(k==32)
 8007ce8:	4b73      	ldr	r3, [pc, #460]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d102      	bne.n	8007cf6 <Start_DATA_PROCESS+0x70e>
					{
					k=0;
 8007cf0:	4b71      	ldr	r3, [pc, #452]	; (8007eb8 <Start_DATA_PROCESS+0x8d0>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 8007cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d04:	2b0f      	cmp	r3, #15
 8007d06:	ddc7      	ble.n	8007c98 <Start_DATA_PROCESS+0x6b0>
					}
					}
					switch(mstate)
 8007d08:	4b6c      	ldr	r3, [pc, #432]	; (8007ebc <Start_DATA_PROCESS+0x8d4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <Start_DATA_PROCESS+0x72e>
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d05b      	beq.n	8007dcc <Start_DATA_PROCESS+0x7e4>
						  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);

						break;
					}

		  		  break;
 8007d14:	e0e1      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
						mstate =1;
 8007d16:	4b69      	ldr	r3, [pc, #420]	; (8007ebc <Start_DATA_PROCESS+0x8d4>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
						  DATA_FOR_MASTER[0] = SLAVE_BIT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						  DATA_FOR_MASTER[1] = MY_TCU_ID;
 8007d22:	2304      	movs	r3, #4
 8007d24:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
						  DATA_FOR_MASTER[2] = DATA_TYPE_CURRENT;
 8007d28:	230c      	movs	r3, #12
 8007d2a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
							for(int i =0;i<32;i++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d34:	e014      	b.n	8007d60 <Start_DATA_PROCESS+0x778>
								DATA_FOR_MASTER[i+3] = CURRENT_8BIT[i];
 8007d36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d3a:	3303      	adds	r3, #3
 8007d3c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007d40:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8007d44:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007d48:	440a      	add	r2, r1
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007d50:	443b      	add	r3, r7
 8007d52:	f803 2ccc 	strb.w	r2, [r3, #-204]
							for(int i =0;i<32;i++)
 8007d56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d64:	2b1f      	cmp	r3, #31
 8007d66:	dde6      	ble.n	8007d36 <Start_DATA_PROCESS+0x74e>
							DATA_FOR_MASTER[35] = AMB_TEMP_t;
 8007d68:	23fa      	movs	r3, #250	; 0xfa
 8007d6a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							DATA_FOR_MASTER[36] = AMBIENT_TEMPERATURE_tt;
 8007d6e:	4b4b      	ldr	r3, [pc, #300]	; (8007e9c <Start_DATA_PROCESS+0x8b4>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
							DATA_FOR_MASTER[37] = IR_TEMP_t;
 8007d76:	23fb      	movs	r3, #251	; 0xfb
 8007d78:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
							DATA_FOR_MASTER[38] = IR_TEMPERATURE_tt;
 8007d7c:	4b48      	ldr	r3, [pc, #288]	; (8007ea0 <Start_DATA_PROCESS+0x8b8>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
							DATA_FOR_MASTER[39] = HS_LEFT_t;
 8007d84:	23fc      	movs	r3, #252	; 0xfc
 8007d86:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
							DATA_FOR_MASTER[40] = LEFT_HS_TEMPERATURE_tt;
 8007d8a:	4b46      	ldr	r3, [pc, #280]	; (8007ea4 <Start_DATA_PROCESS+0x8bc>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							DATA_FOR_MASTER[41] = HS_RIGHT_t;
 8007d92:	23fd      	movs	r3, #253	; 0xfd
 8007d94:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
							DATA_FOR_MASTER[42] = RIGHT_HS_TEMPERATURE_tt;
 8007d98:	4b43      	ldr	r3, [pc, #268]	; (8007ea8 <Start_DATA_PROCESS+0x8c0>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						  CRC_VALUE_FOR_MASTER = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_MASTER,49);
 8007da0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007da4:	2231      	movs	r2, #49	; 0x31
 8007da6:	4619      	mov	r1, r3
 8007da8:	4845      	ldr	r0, [pc, #276]	; (8007ec0 <Start_DATA_PROCESS+0x8d8>)
 8007daa:	f008 fff7 	bl	8010d9c <HAL_CRC_Calculate>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
						  DATA_FOR_MASTER[49] = CRC_VALUE_FOR_MASTER;
 8007db4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007db8:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);
 8007dbc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007dc0:	2364      	movs	r3, #100	; 0x64
 8007dc2:	2232      	movs	r2, #50	; 0x32
 8007dc4:	483f      	ldr	r0, [pc, #252]	; (8007ec4 <Start_DATA_PROCESS+0x8dc>)
 8007dc6:	f00d ffe3 	bl	8015d90 <HAL_UART_Transmit>
						break;
 8007dca:	e062      	b.n	8007e92 <Start_DATA_PROCESS+0x8aa>
						mstate =0;
 8007dcc:	4b3b      	ldr	r3, [pc, #236]	; (8007ebc <Start_DATA_PROCESS+0x8d4>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]
						  DATA_FOR_MASTER[0] = SLAVE_BIT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						  DATA_FOR_MASTER[1] = MY_TCU_ID;
 8007dd8:	2304      	movs	r3, #4
 8007dda:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
						  DATA_FOR_MASTER[2] = DATA_TYPE_CURRENT;
 8007dde:	230c      	movs	r3, #12
 8007de0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
							for(int i =0;i<32;i++)
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007dea:	e014      	b.n	8007e16 <Start_DATA_PROCESS+0x82e>
								DATA_FOR_MASTER[i+3] = CURRENT_8BIT[i];
 8007dec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007df0:	3303      	adds	r3, #3
 8007df2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007df6:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8007dfa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007dfe:	440a      	add	r2, r1
 8007e00:	7812      	ldrb	r2, [r2, #0]
 8007e02:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e06:	443b      	add	r3, r7
 8007e08:	f803 2ccc 	strb.w	r2, [r3, #-204]
							for(int i =0;i<32;i++)
 8007e0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e10:	3301      	adds	r3, #1
 8007e12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e1a:	2b1f      	cmp	r3, #31
 8007e1c:	dde6      	ble.n	8007dec <Start_DATA_PROCESS+0x804>
							DATA_FOR_DATA_LOGG[35] = SYS_VOLTAGE;
 8007e1e:	4b1e      	ldr	r3, [pc, #120]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e20:	222b      	movs	r2, #43	; 0x2b
 8007e22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							DATA_FOR_DATA_LOGG[36] = SYSTEM_VOLTAGE_tt;
 8007e26:	4b28      	ldr	r3, [pc, #160]	; (8007ec8 <Start_DATA_PROCESS+0x8e0>)
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							DATA_FOR_DATA_LOGG[37] = WHOLE_CURRENT;
 8007e30:	4b19      	ldr	r3, [pc, #100]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e32:	222a      	movs	r2, #42	; 0x2a
 8007e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							DATA_FOR_DATA_LOGG[38] = SYSTEM_CURRENT_tt;
 8007e38:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <Start_DATA_PROCESS+0x8e4>)
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	4b16      	ldr	r3, [pc, #88]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							DATA_FOR_DATA_LOGG[39] = RSSI;
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e44:	2231      	movs	r2, #49	; 0x31
 8007e46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							DATA_FOR_DATA_LOGG[40] = RSSI_tt;
 8007e4a:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <Start_DATA_PROCESS+0x8e8>)
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							DATA_FOR_DATA_LOGG[41] = ERRORS;
 8007e54:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e56:	2232      	movs	r2, #50	; 0x32
 8007e58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							DATA_FOR_DATA_LOGG[42] = ERROR_tt;
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <Start_DATA_PROCESS+0x8ec>)
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <Start_DATA_PROCESS+0x8b0>)
 8007e62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						  CRC_VALUE_FOR_MASTER = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_MASTER,49);
 8007e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e6a:	2231      	movs	r2, #49	; 0x31
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4814      	ldr	r0, [pc, #80]	; (8007ec0 <Start_DATA_PROCESS+0x8d8>)
 8007e70:	f008 ff94 	bl	8010d9c <HAL_CRC_Calculate>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
						  DATA_FOR_MASTER[49] = CRC_VALUE_FOR_MASTER;
 8007e7a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007e7e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);
 8007e82:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007e86:	2364      	movs	r3, #100	; 0x64
 8007e88:	2232      	movs	r2, #50	; 0x32
 8007e8a:	480e      	ldr	r0, [pc, #56]	; (8007ec4 <Start_DATA_PROCESS+0x8dc>)
 8007e8c:	f00d ff80 	bl	8015d90 <HAL_UART_Transmit>
						break;
 8007e90:	bf00      	nop
		  		  break;
 8007e92:	e022      	b.n	8007eda <Start_DATA_PROCESS+0x8f2>
 8007e94:	20002a68 	.word	0x20002a68
 8007e98:	20002a6c 	.word	0x20002a6c
 8007e9c:	20002a5e 	.word	0x20002a5e
 8007ea0:	20002a5f 	.word	0x20002a5f
 8007ea4:	20002a60 	.word	0x20002a60
 8007ea8:	20002a61 	.word	0x20002a61
 8007eac:	20001e91 	.word	0x20001e91
 8007eb0:	200015e8 	.word	0x200015e8
 8007eb4:	20001e44 	.word	0x20001e44
 8007eb8:	20002a64 	.word	0x20002a64
 8007ebc:	20002aa0 	.word	0x20002aa0
 8007ec0:	20001718 	.word	0x20001718
 8007ec4:	20001a14 	.word	0x20001a14
 8007ec8:	20002a5c 	.word	0x20002a5c
 8007ecc:	20002a5d 	.word	0x20002a5d
 8007ed0:	20002a62 	.word	0x20002a62
 8007ed4:	20002a63 	.word	0x20002a63
		  }
		  }
 8007ed8:	bf00      	nop
		  if(LOOP_RUNNING == CLOSE_LOOP)
 8007eda:	4bb2      	ldr	r3, [pc, #712]	; (80081a4 <Start_DATA_PROCESS+0xbbc>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	f040 8400 	bne.w	80086e4 <Start_DATA_PROCESS+0x10fc>
		  {
		  switch(DATA_IS_FOR)
 8007ee4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8007ee8:	2b99      	cmp	r3, #153	; 0x99
 8007eea:	d039      	beq.n	8007f60 <Start_DATA_PROCESS+0x978>
 8007eec:	2b99      	cmp	r3, #153	; 0x99
 8007eee:	f300 83fa 	bgt.w	80086e6 <Start_DATA_PROCESS+0x10fe>
 8007ef2:	2b07      	cmp	r3, #7
 8007ef4:	f000 82dc 	beq.w	80084b0 <Start_DATA_PROCESS+0xec8>
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	f300 83f4 	bgt.w	80086e6 <Start_DATA_PROCESS+0x10fe>
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d003      	beq.n	8007f0a <Start_DATA_PROCESS+0x922>
 8007f02:	2b06      	cmp	r3, #6
 8007f04:	f000 818e 	beq.w	8008224 <Start_DATA_PROCESS+0xc3c>
 8007f08:	e3ed      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
		  {
		  	  case	I_AM_PID:
		  		  feedbackmsg = osPoolAlloc(fbpool);
 8007f0a:	4ba7      	ldr	r3, [pc, #668]	; (80081a8 <Start_DATA_PROCESS+0xbc0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f00f fbaf 	bl	8017672 <osPoolAlloc>
 8007f14:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		  		  for(int i =0;i<16;i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007f1e:	e012      	b.n	8007f46 <Start_DATA_PROCESS+0x95e>
		  		  {
		  			  feedbackmsg->FEEDBACK_t[i] = DATA_TO_PROCESS[i];
 8007f20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f28:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007f2c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8007f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f34:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007f38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  		  for(int i =0;i<16;i++)
 8007f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f40:	3301      	adds	r3, #1
 8007f42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f4a:	2b0f      	cmp	r3, #15
 8007f4c:	dde8      	ble.n	8007f20 <Start_DATA_PROCESS+0x938>
		  		  }
		  		  osMessagePut(FEEDBACK_qHandle,(uint32_t) feedbackmsg,100);
 8007f4e:	4b97      	ldr	r3, [pc, #604]	; (80081ac <Start_DATA_PROCESS+0xbc4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007f56:	2264      	movs	r2, #100	; 0x64
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f00f fc57 	bl	801780c <osMessagePut>
			  break;
 8007f5e:	e3c2      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
		  	  case	I_AM_WIFI:
		  		k=0;
 8007f60:	4b93      	ldr	r3, [pc, #588]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
		  						for(int i =0;i<16;i++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007f6c:	e033      	b.n	8007fd6 <Start_DATA_PROCESS+0x9ee>
		  						{
		  						SDA_TEMP_8BIT[k] = (uint8_t)((DATA_TO_PROCESS[i]>>8)&0x00FF);
 8007f6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f76:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007f7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f7e:	0a1b      	lsrs	r3, r3, #8
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	4b8b      	ldr	r3, [pc, #556]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007f8c:	443b      	add	r3, r7
 8007f8e:	f803 2cec 	strb.w	r2, [r3, #-236]
		  						SDA_TEMP_8BIT[k+1] = (uint8_t)(DATA_TO_PROCESS[i]&0x00FF);
 8007f92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007f9e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007fa2:	4b83      	ldr	r3, [pc, #524]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007fae:	443b      	add	r3, r7
 8007fb0:	f803 2cec 	strb.w	r2, [r3, #-236]
		  						k = k+2;
 8007fb4:	4b7e      	ldr	r3, [pc, #504]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3302      	adds	r3, #2
 8007fba:	4a7d      	ldr	r2, [pc, #500]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007fbc:	6013      	str	r3, [r2, #0]
		  						if(k==32)
 8007fbe:	4b7c      	ldr	r3, [pc, #496]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d102      	bne.n	8007fcc <Start_DATA_PROCESS+0x9e4>
		  						{
		  						k=0;
 8007fc6:	4b7a      	ldr	r3, [pc, #488]	; (80081b0 <Start_DATA_PROCESS+0xbc8>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
		  						for(int i =0;i<16;i++)
 8007fcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007fd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	ddc7      	ble.n	8007f6e <Start_DATA_PROCESS+0x986>
		  						}
		  						}
		  						switch(state)
 8007fde:	4b75      	ldr	r3, [pc, #468]	; (80081b4 <Start_DATA_PROCESS+0xbcc>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <Start_DATA_PROCESS+0xa04>
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d07c      	beq.n	80080e4 <Start_DATA_PROCESS+0xafc>

		  							osMailPut(wifitempmail, wifitempmsg);

		  							break;
		  						}
		  		  break;
 8007fea:	e37c      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
		  							state =1;
 8007fec:	4b71      	ldr	r3, [pc, #452]	; (80081b4 <Start_DATA_PROCESS+0xbcc>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
		  							DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 8007ff2:	4b71      	ldr	r3, [pc, #452]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	701a      	strb	r2, [r3, #0]
		  							DATA_FOR_DATA_LOGG[1] = SDA_TEMPERATURE;
 8007ff8:	4b6f      	ldr	r3, [pc, #444]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8007ffa:	22e1      	movs	r2, #225	; 0xe1
 8007ffc:	705a      	strb	r2, [r3, #1]
		  							for(int i =0;i<32;i++)
 8007ffe:	2300      	movs	r3, #0
 8008000:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008004:	e00f      	b.n	8008026 <Start_DATA_PROCESS+0xa3e>
		  								DATA_FOR_DATA_LOGG[i+2] = SDA_TEMP_8BIT[i];
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800a:	3302      	adds	r3, #2
 800800c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008010:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008014:	440a      	add	r2, r1
 8008016:	7811      	ldrb	r1, [r2, #0]
 8008018:	4a67      	ldr	r2, [pc, #412]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800801a:	54d1      	strb	r1, [r2, r3]
		  							for(int i =0;i<32;i++)
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008020:	3301      	adds	r3, #1
 8008022:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802a:	2b1f      	cmp	r3, #31
 800802c:	ddeb      	ble.n	8008006 <Start_DATA_PROCESS+0xa1e>
		  							DATA_FOR_DATA_LOGG[34] = SYS_VOLTAGE;
 800802e:	4b62      	ldr	r3, [pc, #392]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008030:	222b      	movs	r2, #43	; 0x2b
 8008032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  							DATA_FOR_DATA_LOGG[35] = SYSTEM_VOLTAGE_tt;
 8008036:	4b61      	ldr	r3, [pc, #388]	; (80081bc <Start_DATA_PROCESS+0xbd4>)
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	4b5f      	ldr	r3, [pc, #380]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800803c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		  							DATA_FOR_DATA_LOGG[36] = WHOLE_CURRENT;
 8008040:	4b5d      	ldr	r3, [pc, #372]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008042:	222a      	movs	r2, #42	; 0x2a
 8008044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  							DATA_FOR_DATA_LOGG[37] = SYSTEM_CURRENT_tt;
 8008048:	4b5d      	ldr	r3, [pc, #372]	; (80081c0 <Start_DATA_PROCESS+0xbd8>)
 800804a:	781a      	ldrb	r2, [r3, #0]
 800804c:	4b5a      	ldr	r3, [pc, #360]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800804e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		  							DATA_FOR_DATA_LOGG[38] = RSSI;
 8008052:	4b59      	ldr	r3, [pc, #356]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008054:	2231      	movs	r2, #49	; 0x31
 8008056:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		  							DATA_FOR_DATA_LOGG[39] = RSSI_tt;
 800805a:	4b5a      	ldr	r3, [pc, #360]	; (80081c4 <Start_DATA_PROCESS+0xbdc>)
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	4b56      	ldr	r3, [pc, #344]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008060:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		  							DATA_FOR_DATA_LOGG[40] = ERRORS;
 8008064:	4b54      	ldr	r3, [pc, #336]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008066:	2232      	movs	r2, #50	; 0x32
 8008068:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		  							DATA_FOR_DATA_LOGG[41] = ERROR_tt;
 800806c:	4b56      	ldr	r3, [pc, #344]	; (80081c8 <Start_DATA_PROCESS+0xbe0>)
 800806e:	781a      	ldrb	r2, [r3, #0]
 8008070:	4b51      	ldr	r3, [pc, #324]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008072:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  							DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 8008076:	4b50      	ldr	r3, [pc, #320]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008078:	229a      	movs	r2, #154	; 0x9a
 800807a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		  							DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 800807e:	4b53      	ldr	r3, [pc, #332]	; (80081cc <Start_DATA_PROCESS+0xbe4>)
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	4b4d      	ldr	r3, [pc, #308]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008084:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		  							DATA_FOR_DATA_LOGG[44] = MODE_CONDITION;
 8008088:	4b51      	ldr	r3, [pc, #324]	; (80081d0 <Start_DATA_PROCESS+0xbe8>)
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	4b4a      	ldr	r3, [pc, #296]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800808e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		  							wifitempmsg = osMailAlloc(wifitempmail,100);
 8008092:	4b50      	ldr	r3, [pc, #320]	; (80081d4 <Start_DATA_PROCESS+0xbec>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2164      	movs	r1, #100	; 0x64
 8008098:	4618      	mov	r0, r3
 800809a:	f00f fcc3 	bl	8017a24 <osMailAlloc>
 800809e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
		  							for(int i=0;i<50;i++)
 80080a2:	2300      	movs	r3, #0
 80080a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080a8:	e010      	b.n	80080cc <Start_DATA_PROCESS+0xae4>
		  								wifitempmsg->TEMP_DATA_FOR_WIFI[i] = DATA_FOR_DATA_LOGG[i];
 80080aa:	4a43      	ldr	r2, [pc, #268]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 80080ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080b0:	4413      	add	r3, r2
 80080b2:	7819      	ldrb	r1, [r3, #0]
 80080b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080bc:	4413      	add	r3, r2
 80080be:	460a      	mov	r2, r1
 80080c0:	701a      	strb	r2, [r3, #0]
		  							for(int i=0;i<50;i++)
 80080c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080c6:	3301      	adds	r3, #1
 80080c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080d0:	2b31      	cmp	r3, #49	; 0x31
 80080d2:	ddea      	ble.n	80080aa <Start_DATA_PROCESS+0xac2>
		  							osMailPut(wifitempmail, wifitempmsg);
 80080d4:	4b3f      	ldr	r3, [pc, #252]	; (80081d4 <Start_DATA_PROCESS+0xbec>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80080dc:	4618      	mov	r0, r3
 80080de:	f00f fcb7 	bl	8017a50 <osMailPut>
		  							break;
 80080e2:	e09e      	b.n	8008222 <Start_DATA_PROCESS+0xc3a>
		  							state =0;
 80080e4:	4b33      	ldr	r3, [pc, #204]	; (80081b4 <Start_DATA_PROCESS+0xbcc>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
		  							DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 80080ea:	4b33      	ldr	r3, [pc, #204]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 80080ec:	2204      	movs	r2, #4
 80080ee:	701a      	strb	r2, [r3, #0]
		  							DATA_FOR_DATA_LOGG[1] = SDA_TEMPERATURE;
 80080f0:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 80080f2:	22e1      	movs	r2, #225	; 0xe1
 80080f4:	705a      	strb	r2, [r3, #1]
		  							for(int i =0;i<32;i++)
 80080f6:	2300      	movs	r3, #0
 80080f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080fc:	e00f      	b.n	800811e <Start_DATA_PROCESS+0xb36>
		  								DATA_FOR_DATA_LOGG[i+2] = SDA_TEMP_8BIT[i];
 80080fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008102:	3302      	adds	r3, #2
 8008104:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008108:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800810c:	440a      	add	r2, r1
 800810e:	7811      	ldrb	r1, [r2, #0]
 8008110:	4a29      	ldr	r2, [pc, #164]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008112:	54d1      	strb	r1, [r2, r3]
		  							for(int i =0;i<32;i++)
 8008114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008118:	3301      	adds	r3, #1
 800811a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008122:	2b1f      	cmp	r3, #31
 8008124:	ddeb      	ble.n	80080fe <Start_DATA_PROCESS+0xb16>
		  							DATA_FOR_DATA_LOGG[34] = AMB_TEMP_t;
 8008126:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008128:	22fa      	movs	r2, #250	; 0xfa
 800812a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  							DATA_FOR_DATA_LOGG[35] = AMBIENT_TEMPERATURE_tt;
 800812e:	4b2a      	ldr	r3, [pc, #168]	; (80081d8 <Start_DATA_PROCESS+0xbf0>)
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008134:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		  							DATA_FOR_DATA_LOGG[36] = IR_TEMP_t;
 8008138:	4b1f      	ldr	r3, [pc, #124]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800813a:	22fb      	movs	r2, #251	; 0xfb
 800813c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  							DATA_FOR_DATA_LOGG[37] = IR_TEMPERATURE_tt;
 8008140:	4b26      	ldr	r3, [pc, #152]	; (80081dc <Start_DATA_PROCESS+0xbf4>)
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		  							DATA_FOR_DATA_LOGG[38] = HS_LEFT_t;
 800814a:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800814c:	22fc      	movs	r2, #252	; 0xfc
 800814e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		  							DATA_FOR_DATA_LOGG[39] = LEFT_HS_TEMPERATURE_tt;
 8008152:	4b23      	ldr	r3, [pc, #140]	; (80081e0 <Start_DATA_PROCESS+0xbf8>)
 8008154:	781a      	ldrb	r2, [r3, #0]
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008158:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		  							DATA_FOR_DATA_LOGG[40] = HS_RIGHT_t;
 800815c:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800815e:	22fd      	movs	r2, #253	; 0xfd
 8008160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		  							DATA_FOR_DATA_LOGG[41] = RIGHT_HS_TEMPERATURE_tt;
 8008164:	4b1f      	ldr	r3, [pc, #124]	; (80081e4 <Start_DATA_PROCESS+0xbfc>)
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800816a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  							DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008170:	229a      	movs	r2, #154	; 0x9a
 8008172:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		  							DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 8008176:	4b15      	ldr	r3, [pc, #84]	; (80081cc <Start_DATA_PROCESS+0xbe4>)
 8008178:	781a      	ldrb	r2, [r3, #0]
 800817a:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 800817c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		  							DATA_FOR_DATA_LOGG[44] = MODE_CONDITION;
 8008180:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <Start_DATA_PROCESS+0xbe8>)
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <Start_DATA_PROCESS+0xbd0>)
 8008186:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		  							wifitempmsg = osMailAlloc(wifitempmail,100);
 800818a:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <Start_DATA_PROCESS+0xbec>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2164      	movs	r1, #100	; 0x64
 8008190:	4618      	mov	r0, r3
 8008192:	f00f fc47 	bl	8017a24 <osMailAlloc>
 8008196:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
		  							for(int i=0;i<50;i++)
 800819a:	2300      	movs	r3, #0
 800819c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80081a0:	e033      	b.n	800820a <Start_DATA_PROCESS+0xc22>
 80081a2:	bf00      	nop
 80081a4:	20001f58 	.word	0x20001f58
 80081a8:	20001638 	.word	0x20001638
 80081ac:	20001e40 	.word	0x20001e40
 80081b0:	20002a64 	.word	0x20002a64
 80081b4:	20002a68 	.word	0x20002a68
 80081b8:	20002a6c 	.word	0x20002a6c
 80081bc:	20002a5c 	.word	0x20002a5c
 80081c0:	20002a5d 	.word	0x20002a5d
 80081c4:	20002a62 	.word	0x20002a62
 80081c8:	20002a63 	.word	0x20002a63
 80081cc:	20001e91 	.word	0x20001e91
 80081d0:	20001e92 	.word	0x20001e92
 80081d4:	200015f8 	.word	0x200015f8
 80081d8:	20002a5e 	.word	0x20002a5e
 80081dc:	20002a5f 	.word	0x20002a5f
 80081e0:	20002a60 	.word	0x20002a60
 80081e4:	20002a61 	.word	0x20002a61
		  								wifitempmsg->TEMP_DATA_FOR_WIFI[i] = DATA_FOR_DATA_LOGG[i];
 80081e8:	4ab5      	ldr	r2, [pc, #724]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80081ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ee:	4413      	add	r3, r2
 80081f0:	7819      	ldrb	r1, [r3, #0]
 80081f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081fa:	4413      	add	r3, r2
 80081fc:	460a      	mov	r2, r1
 80081fe:	701a      	strb	r2, [r3, #0]
		  							for(int i=0;i<50;i++)
 8008200:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008204:	3301      	adds	r3, #1
 8008206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800820a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800820e:	2b31      	cmp	r3, #49	; 0x31
 8008210:	ddea      	ble.n	80081e8 <Start_DATA_PROCESS+0xc00>
		  							osMailPut(wifitempmail, wifitempmsg);
 8008212:	4bac      	ldr	r3, [pc, #688]	; (80084c4 <Start_DATA_PROCESS+0xedc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800821a:	4618      	mov	r0, r3
 800821c:	f00f fc18 	bl	8017a50 <osMailPut>
		  							break;
 8008220:	bf00      	nop
		  		  break;
 8008222:	e260      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
		  	  case	I_AM_DATA_LOGG:
			  	  	k=0;
 8008224:	4ba8      	ldr	r3, [pc, #672]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 800822a:	2300      	movs	r3, #0
 800822c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008230:	e033      	b.n	800829a <Start_DATA_PROCESS+0xcb2>
					{
					SDA_TEMP_8BIT[k] = (uint8_t)((DATA_TO_PROCESS[i]>>8)&0x00FF);
 8008232:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800823a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800823e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b29a      	uxth	r2, r3
 8008246:	4ba0      	ldr	r3, [pc, #640]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008250:	443b      	add	r3, r7
 8008252:	f803 2cec 	strb.w	r2, [r3, #-236]
					SDA_TEMP_8BIT[k+1] = (uint8_t)(DATA_TO_PROCESS[i]&0x00FF);
 8008256:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800825a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008262:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008266:	4b98      	ldr	r3, [pc, #608]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3301      	adds	r3, #1
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008272:	443b      	add	r3, r7
 8008274:	f803 2cec 	strb.w	r2, [r3, #-236]
					k = k+2;
 8008278:	4b93      	ldr	r3, [pc, #588]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3302      	adds	r3, #2
 800827e:	4a92      	ldr	r2, [pc, #584]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 8008280:	6013      	str	r3, [r2, #0]
					if(k==32)
 8008282:	4b91      	ldr	r3, [pc, #580]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b20      	cmp	r3, #32
 8008288:	d102      	bne.n	8008290 <Start_DATA_PROCESS+0xca8>
					{
					k=0;
 800828a:	4b8f      	ldr	r3, [pc, #572]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008294:	3301      	adds	r3, #1
 8008296:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	2b0f      	cmp	r3, #15
 80082a0:	ddc7      	ble.n	8008232 <Start_DATA_PROCESS+0xc4a>
					}
					}
					switch(state)
 80082a2:	4b8a      	ldr	r3, [pc, #552]	; (80084cc <Start_DATA_PROCESS+0xee4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <Start_DATA_PROCESS+0xcc8>
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d07c      	beq.n	80083a8 <Start_DATA_PROCESS+0xdc0>
						osMessagePut(DATA_LOGGING_qHandle, (uint32_t)datalogmsg, 100);


						break;
					}
		  	  break;
 80082ae:	e21a      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
						state =1;
 80082b0:	4b86      	ldr	r3, [pc, #536]	; (80084cc <Start_DATA_PROCESS+0xee4>)
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 80082b6:	4b82      	ldr	r3, [pc, #520]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80082b8:	2204      	movs	r2, #4
 80082ba:	701a      	strb	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[1] = SDA_TEMPERATURE;
 80082bc:	4b80      	ldr	r3, [pc, #512]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80082be:	22e1      	movs	r2, #225	; 0xe1
 80082c0:	705a      	strb	r2, [r3, #1]
						for(int i =0;i<32;i++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082c8:	e00f      	b.n	80082ea <Start_DATA_PROCESS+0xd02>
							DATA_FOR_DATA_LOGG[i+2] = SDA_TEMP_8BIT[i];
 80082ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082ce:	3302      	adds	r3, #2
 80082d0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80082d4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80082d8:	440a      	add	r2, r1
 80082da:	7811      	ldrb	r1, [r2, #0]
 80082dc:	4a78      	ldr	r2, [pc, #480]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80082de:	54d1      	strb	r1, [r2, r3]
						for(int i =0;i<32;i++)
 80082e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082e4:	3301      	adds	r3, #1
 80082e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082ee:	2b1f      	cmp	r3, #31
 80082f0:	ddeb      	ble.n	80082ca <Start_DATA_PROCESS+0xce2>
						DATA_FOR_DATA_LOGG[34] = SYS_VOLTAGE;
 80082f2:	4b73      	ldr	r3, [pc, #460]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80082f4:	222b      	movs	r2, #43	; 0x2b
 80082f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						DATA_FOR_DATA_LOGG[35] = SYSTEM_VOLTAGE_tt;
 80082fa:	4b75      	ldr	r3, [pc, #468]	; (80084d0 <Start_DATA_PROCESS+0xee8>)
 80082fc:	781a      	ldrb	r2, [r3, #0]
 80082fe:	4b70      	ldr	r3, [pc, #448]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008300:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						DATA_FOR_DATA_LOGG[36] = WHOLE_CURRENT;
 8008304:	4b6e      	ldr	r3, [pc, #440]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008306:	222a      	movs	r2, #42	; 0x2a
 8008308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						DATA_FOR_DATA_LOGG[37] = SYSTEM_CURRENT_tt;
 800830c:	4b71      	ldr	r3, [pc, #452]	; (80084d4 <Start_DATA_PROCESS+0xeec>)
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	4b6b      	ldr	r3, [pc, #428]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						DATA_FOR_DATA_LOGG[38] = RSSI;
 8008316:	4b6a      	ldr	r3, [pc, #424]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008318:	2231      	movs	r2, #49	; 0x31
 800831a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						DATA_FOR_DATA_LOGG[39] = RSSI_tt;
 800831e:	4b6e      	ldr	r3, [pc, #440]	; (80084d8 <Start_DATA_PROCESS+0xef0>)
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	4b67      	ldr	r3, [pc, #412]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008324:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						DATA_FOR_DATA_LOGG[40] = ERRORS;
 8008328:	4b65      	ldr	r3, [pc, #404]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800832a:	2232      	movs	r2, #50	; 0x32
 800832c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						DATA_FOR_DATA_LOGG[41] = ERROR_tt;
 8008330:	4b6a      	ldr	r3, [pc, #424]	; (80084dc <Start_DATA_PROCESS+0xef4>)
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	4b62      	ldr	r3, [pc, #392]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008336:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
						DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 800833a:	4b61      	ldr	r3, [pc, #388]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800833c:	229a      	movs	r2, #154	; 0x9a
 800833e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 8008342:	4b67      	ldr	r3, [pc, #412]	; (80084e0 <Start_DATA_PROCESS+0xef8>)
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	4b5e      	ldr	r3, [pc, #376]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008348:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						DATA_FOR_DATA_LOGG[44] = MODE_CONDITION;
 800834c:	4b65      	ldr	r3, [pc, #404]	; (80084e4 <Start_DATA_PROCESS+0xefc>)
 800834e:	781a      	ldrb	r2, [r3, #0]
 8008350:	4b5b      	ldr	r3, [pc, #364]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008352:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						datalogmsg = osPoolAlloc(datalogpool);
 8008356:	4b64      	ldr	r3, [pc, #400]	; (80084e8 <Start_DATA_PROCESS+0xf00>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f00f f989 	bl	8017672 <osPoolAlloc>
 8008360:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						for(int i=0;i<50;i++)
 8008364:	2300      	movs	r3, #0
 8008366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800836a:	e010      	b.n	800838e <Start_DATA_PROCESS+0xda6>
							datalogmsg->DATA_LOGGING_DATA[i] = DATA_FOR_DATA_LOGG[i];
 800836c:	4a54      	ldr	r2, [pc, #336]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800836e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008372:	4413      	add	r3, r2
 8008374:	7819      	ldrb	r1, [r3, #0]
 8008376:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800837a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837e:	4413      	add	r3, r2
 8008380:	460a      	mov	r2, r1
 8008382:	701a      	strb	r2, [r3, #0]
						for(int i=0;i<50;i++)
 8008384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008388:	3301      	adds	r3, #1
 800838a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800838e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008392:	2b31      	cmp	r3, #49	; 0x31
 8008394:	ddea      	ble.n	800836c <Start_DATA_PROCESS+0xd84>
						osMessagePut(DATA_LOGGING_qHandle, (uint32_t)datalogmsg, 100);
 8008396:	4b55      	ldr	r3, [pc, #340]	; (80084ec <Start_DATA_PROCESS+0xf04>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800839e:	2264      	movs	r2, #100	; 0x64
 80083a0:	4618      	mov	r0, r3
 80083a2:	f00f fa33 	bl	801780c <osMessagePut>
						break;
 80083a6:	e082      	b.n	80084ae <Start_DATA_PROCESS+0xec6>
						state =0;
 80083a8:	4b48      	ldr	r3, [pc, #288]	; (80084cc <Start_DATA_PROCESS+0xee4>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[0] = MY_TCU_ID;
 80083ae:	4b44      	ldr	r3, [pc, #272]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80083b0:	2204      	movs	r2, #4
 80083b2:	701a      	strb	r2, [r3, #0]
						DATA_FOR_DATA_LOGG[1] = SDA_TEMPERATURE;
 80083b4:	4b42      	ldr	r3, [pc, #264]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80083b6:	22e1      	movs	r2, #225	; 0xe1
 80083b8:	705a      	strb	r2, [r3, #1]
						for(int i =0;i<32;i++)
 80083ba:	2300      	movs	r3, #0
 80083bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083c0:	e00f      	b.n	80083e2 <Start_DATA_PROCESS+0xdfa>
							DATA_FOR_DATA_LOGG[i+2] = SDA_TEMP_8BIT[i];
 80083c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083c6:	3302      	adds	r3, #2
 80083c8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80083cc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80083d0:	440a      	add	r2, r1
 80083d2:	7811      	ldrb	r1, [r2, #0]
 80083d4:	4a3a      	ldr	r2, [pc, #232]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80083d6:	54d1      	strb	r1, [r2, r3]
						for(int i =0;i<32;i++)
 80083d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083dc:	3301      	adds	r3, #1
 80083de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083e6:	2b1f      	cmp	r3, #31
 80083e8:	ddeb      	ble.n	80083c2 <Start_DATA_PROCESS+0xdda>
						DATA_FOR_DATA_LOGG[34] = AMB_TEMP_t;
 80083ea:	4b35      	ldr	r3, [pc, #212]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80083ec:	22fa      	movs	r2, #250	; 0xfa
 80083ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						DATA_FOR_DATA_LOGG[35] = AMBIENT_TEMPERATURE_tt;
 80083f2:	4b3f      	ldr	r3, [pc, #252]	; (80084f0 <Start_DATA_PROCESS+0xf08>)
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	4b32      	ldr	r3, [pc, #200]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80083f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						DATA_FOR_DATA_LOGG[36] = IR_TEMP_t;
 80083fc:	4b30      	ldr	r3, [pc, #192]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 80083fe:	22fb      	movs	r2, #251	; 0xfb
 8008400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						DATA_FOR_DATA_LOGG[37] = IR_TEMPERATURE_tt;
 8008404:	4b3b      	ldr	r3, [pc, #236]	; (80084f4 <Start_DATA_PROCESS+0xf0c>)
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	4b2d      	ldr	r3, [pc, #180]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800840a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						DATA_FOR_DATA_LOGG[38] = HS_LEFT_t;
 800840e:	4b2c      	ldr	r3, [pc, #176]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008410:	22fc      	movs	r2, #252	; 0xfc
 8008412:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						DATA_FOR_DATA_LOGG[39] = LEFT_HS_TEMPERATURE_tt;
 8008416:	4b38      	ldr	r3, [pc, #224]	; (80084f8 <Start_DATA_PROCESS+0xf10>)
 8008418:	781a      	ldrb	r2, [r3, #0]
 800841a:	4b29      	ldr	r3, [pc, #164]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800841c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						DATA_FOR_DATA_LOGG[40] = HS_RIGHT_t;
 8008420:	4b27      	ldr	r3, [pc, #156]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008422:	22fd      	movs	r2, #253	; 0xfd
 8008424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						DATA_FOR_DATA_LOGG[41] = RIGHT_HS_TEMPERATURE_tt;
 8008428:	4b34      	ldr	r3, [pc, #208]	; (80084fc <Start_DATA_PROCESS+0xf14>)
 800842a:	781a      	ldrb	r2, [r3, #0]
 800842c:	4b24      	ldr	r3, [pc, #144]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800842e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
						DATA_FOR_DATA_LOGG[42] = START_STOP_STATE;
 8008432:	4b23      	ldr	r3, [pc, #140]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008434:	229a      	movs	r2, #154	; 0x9a
 8008436:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						DATA_FOR_DATA_LOGG[43] = START_CONDITION;
 800843a:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <Start_DATA_PROCESS+0xef8>)
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	4b20      	ldr	r3, [pc, #128]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008440:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						DATA_FOR_DATA_LOGG[44] = MODE_CONDITION;
 8008444:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <Start_DATA_PROCESS+0xefc>)
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 800844a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						datalogmsg = osPoolAlloc(datalogpool);
 800844e:	4b26      	ldr	r3, [pc, #152]	; (80084e8 <Start_DATA_PROCESS+0xf00>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f00f f90d 	bl	8017672 <osPoolAlloc>
 8008458:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						datalogmsg = osPoolAlloc(datalogpool);
 800845c:	4b22      	ldr	r3, [pc, #136]	; (80084e8 <Start_DATA_PROCESS+0xf00>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f00f f906 	bl	8017672 <osPoolAlloc>
 8008466:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						for(int i=0;i<50;i++)
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008470:	e010      	b.n	8008494 <Start_DATA_PROCESS+0xeac>
							datalogmsg->DATA_LOGGING_DATA[i] = DATA_FOR_DATA_LOGG[i];
 8008472:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <Start_DATA_PROCESS+0xed8>)
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	4413      	add	r3, r2
 800847a:	7819      	ldrb	r1, [r3, #0]
 800847c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	4413      	add	r3, r2
 8008486:	460a      	mov	r2, r1
 8008488:	701a      	strb	r2, [r3, #0]
						for(int i=0;i<50;i++)
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848e:	3301      	adds	r3, #1
 8008490:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	2b31      	cmp	r3, #49	; 0x31
 800849a:	ddea      	ble.n	8008472 <Start_DATA_PROCESS+0xe8a>
						osMessagePut(DATA_LOGGING_qHandle, (uint32_t)datalogmsg, 100);
 800849c:	4b13      	ldr	r3, [pc, #76]	; (80084ec <Start_DATA_PROCESS+0xf04>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80084a4:	2264      	movs	r2, #100	; 0x64
 80084a6:	4618      	mov	r0, r3
 80084a8:	f00f f9b0 	bl	801780c <osMessagePut>
						break;
 80084ac:	bf00      	nop
		  	  break;
 80084ae:	e11a      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
		  	  case I_AM_FOR_MASTER:
			  	  	k=0;
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <Start_DATA_PROCESS+0xee0>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 80084b6:	2300      	movs	r3, #0
 80084b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80084bc:	e054      	b.n	8008568 <Start_DATA_PROCESS+0xf80>
 80084be:	bf00      	nop
 80084c0:	20002a6c 	.word	0x20002a6c
 80084c4:	200015f8 	.word	0x200015f8
 80084c8:	20002a64 	.word	0x20002a64
 80084cc:	20002a68 	.word	0x20002a68
 80084d0:	20002a5c 	.word	0x20002a5c
 80084d4:	20002a5d 	.word	0x20002a5d
 80084d8:	20002a62 	.word	0x20002a62
 80084dc:	20002a63 	.word	0x20002a63
 80084e0:	20001e91 	.word	0x20001e91
 80084e4:	20001e92 	.word	0x20001e92
 80084e8:	200015e8 	.word	0x200015e8
 80084ec:	20001e44 	.word	0x20001e44
 80084f0:	20002a5e 	.word	0x20002a5e
 80084f4:	20002a5f 	.word	0x20002a5f
 80084f8:	20002a60 	.word	0x20002a60
 80084fc:	20002a61 	.word	0x20002a61
					{
					SDA_TEMP_8BIT[k] = (uint8_t)((DATA_TO_PROCESS[i]>>8)&0x00FF);
 8008500:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008508:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800850c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	b29a      	uxth	r2, r3
 8008514:	4b76      	ldr	r3, [pc, #472]	; (80086f0 <Start_DATA_PROCESS+0x1108>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	b2d2      	uxtb	r2, r2
 800851a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800851e:	443b      	add	r3, r7
 8008520:	f803 2cec 	strb.w	r2, [r3, #-236]
					SDA_TEMP_8BIT[k+1] = (uint8_t)(DATA_TO_PROCESS[i]&0x00FF);
 8008524:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800852c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008530:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008534:	4b6e      	ldr	r3, [pc, #440]	; (80086f0 <Start_DATA_PROCESS+0x1108>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	b2d2      	uxtb	r2, r2
 800853c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008540:	443b      	add	r3, r7
 8008542:	f803 2cec 	strb.w	r2, [r3, #-236]
					k = k+2;
 8008546:	4b6a      	ldr	r3, [pc, #424]	; (80086f0 <Start_DATA_PROCESS+0x1108>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3302      	adds	r3, #2
 800854c:	4a68      	ldr	r2, [pc, #416]	; (80086f0 <Start_DATA_PROCESS+0x1108>)
 800854e:	6013      	str	r3, [r2, #0]
					if(k==32)
 8008550:	4b67      	ldr	r3, [pc, #412]	; (80086f0 <Start_DATA_PROCESS+0x1108>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b20      	cmp	r3, #32
 8008556:	d102      	bne.n	800855e <Start_DATA_PROCESS+0xf76>
					{
					k=0;
 8008558:	4b65      	ldr	r3, [pc, #404]	; (80086f0 <Start_DATA_PROCESS+0x1108>)
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
					for(int i =0;i<16;i++)
 800855e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008562:	3301      	adds	r3, #1
 8008564:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008568:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800856c:	2b0f      	cmp	r3, #15
 800856e:	ddc7      	ble.n	8008500 <Start_DATA_PROCESS+0xf18>
					}
					}
					switch(mstate)
 8008570:	4b60      	ldr	r3, [pc, #384]	; (80086f4 <Start_DATA_PROCESS+0x110c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <Start_DATA_PROCESS+0xf96>
 8008578:	2b01      	cmp	r3, #1
 800857a:	d059      	beq.n	8008630 <Start_DATA_PROCESS+0x1048>
						  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);

						break;
					}
		  		 // HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);
		  		  break;
 800857c:	e0b3      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
						mstate =1;
 800857e:	4b5d      	ldr	r3, [pc, #372]	; (80086f4 <Start_DATA_PROCESS+0x110c>)
 8008580:	2201      	movs	r2, #1
 8008582:	601a      	str	r2, [r3, #0]
						  DATA_FOR_MASTER[0] = SLAVE_BIT;
 8008584:	2303      	movs	r3, #3
 8008586:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						  DATA_FOR_MASTER[1] = MY_TCU_ID;
 800858a:	2304      	movs	r3, #4
 800858c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
						  DATA_FOR_MASTER[2] = SDA_TEMPERATURE;
 8008590:	23e1      	movs	r3, #225	; 0xe1
 8008592:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
							for(int i =0;i<32;i++)
 8008596:	2300      	movs	r3, #0
 8008598:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800859c:	e012      	b.n	80085c4 <Start_DATA_PROCESS+0xfdc>
								DATA_FOR_MASTER[i+3] = SDA_TEMP_8BIT[i];
 800859e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085a2:	3303      	adds	r3, #3
 80085a4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80085a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80085ac:	440a      	add	r2, r1
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80085b4:	443b      	add	r3, r7
 80085b6:	f803 2ccc 	strb.w	r2, [r3, #-204]
							for(int i =0;i<32;i++)
 80085ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085be:	3301      	adds	r3, #1
 80085c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085c8:	2b1f      	cmp	r3, #31
 80085ca:	dde8      	ble.n	800859e <Start_DATA_PROCESS+0xfb6>
							DATA_FOR_MASTER[35] = AMB_TEMP_t;
 80085cc:	23fa      	movs	r3, #250	; 0xfa
 80085ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							DATA_FOR_MASTER[36] = AMBIENT_TEMPERATURE_tt;
 80085d2:	4b49      	ldr	r3, [pc, #292]	; (80086f8 <Start_DATA_PROCESS+0x1110>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
							DATA_FOR_MASTER[37] = IR_TEMP_t;
 80085da:	23fb      	movs	r3, #251	; 0xfb
 80085dc:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
							DATA_FOR_MASTER[38] = IR_TEMPERATURE_tt;
 80085e0:	4b46      	ldr	r3, [pc, #280]	; (80086fc <Start_DATA_PROCESS+0x1114>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
							DATA_FOR_MASTER[39] = HS_LEFT_t;
 80085e8:	23fc      	movs	r3, #252	; 0xfc
 80085ea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
							DATA_FOR_MASTER[40] = LEFT_HS_TEMPERATURE_tt;
 80085ee:	4b44      	ldr	r3, [pc, #272]	; (8008700 <Start_DATA_PROCESS+0x1118>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							DATA_FOR_MASTER[41] = HS_RIGHT_t;
 80085f6:	23fd      	movs	r3, #253	; 0xfd
 80085f8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
							DATA_FOR_MASTER[42] = RIGHT_HS_TEMPERATURE_tt;
 80085fc:	4b41      	ldr	r3, [pc, #260]	; (8008704 <Start_DATA_PROCESS+0x111c>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						  CRC_VALUE_FOR_MASTER = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_MASTER,49);
 8008604:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008608:	2231      	movs	r2, #49	; 0x31
 800860a:	4619      	mov	r1, r3
 800860c:	483e      	ldr	r0, [pc, #248]	; (8008708 <Start_DATA_PROCESS+0x1120>)
 800860e:	f008 fbc5 	bl	8010d9c <HAL_CRC_Calculate>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
						  DATA_FOR_MASTER[49] = CRC_VALUE_FOR_MASTER;
 8008618:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800861c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);
 8008620:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008624:	2364      	movs	r3, #100	; 0x64
 8008626:	2232      	movs	r2, #50	; 0x32
 8008628:	4838      	ldr	r0, [pc, #224]	; (800870c <Start_DATA_PROCESS+0x1124>)
 800862a:	f00d fbb1 	bl	8015d90 <HAL_UART_Transmit>
						break;
 800862e:	e058      	b.n	80086e2 <Start_DATA_PROCESS+0x10fa>
						mstate =0;
 8008630:	4b30      	ldr	r3, [pc, #192]	; (80086f4 <Start_DATA_PROCESS+0x110c>)
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
						  DATA_FOR_MASTER[0] = SLAVE_BIT;
 8008636:	2303      	movs	r3, #3
 8008638:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						  DATA_FOR_MASTER[1] = MY_TCU_ID;
 800863c:	2304      	movs	r3, #4
 800863e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
						  DATA_FOR_MASTER[2] = SDA_TEMPERATURE;
 8008642:	23e1      	movs	r3, #225	; 0xe1
 8008644:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
							for(int i =0;i<32;i++)
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800864e:	e012      	b.n	8008676 <Start_DATA_PROCESS+0x108e>
								DATA_FOR_MASTER[i+3] = SDA_TEMP_8BIT[i];
 8008650:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008654:	3303      	adds	r3, #3
 8008656:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800865a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800865e:	440a      	add	r2, r1
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008666:	443b      	add	r3, r7
 8008668:	f803 2ccc 	strb.w	r2, [r3, #-204]
							for(int i =0;i<32;i++)
 800866c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008670:	3301      	adds	r3, #1
 8008672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800867a:	2b1f      	cmp	r3, #31
 800867c:	dde8      	ble.n	8008650 <Start_DATA_PROCESS+0x1068>
							DATA_FOR_MASTER[35] = SYS_VOLTAGE;
 800867e:	232b      	movs	r3, #43	; 0x2b
 8008680:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							DATA_FOR_MASTER[36] = SYSTEM_VOLTAGE_tt;
 8008684:	4b22      	ldr	r3, [pc, #136]	; (8008710 <Start_DATA_PROCESS+0x1128>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
							DATA_FOR_MASTER[37] = WHOLE_CURRENT;
 800868c:	232a      	movs	r3, #42	; 0x2a
 800868e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
							DATA_FOR_MASTER[38] = SYSTEM_CURRENT_tt;
 8008692:	4b20      	ldr	r3, [pc, #128]	; (8008714 <Start_DATA_PROCESS+0x112c>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
							DATA_FOR_MASTER[39] = RSSI;
 800869a:	2331      	movs	r3, #49	; 0x31
 800869c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
							DATA_FOR_MASTER[40] = RSSI_tt;
 80086a0:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <Start_DATA_PROCESS+0x1130>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							DATA_FOR_MASTER[41] = ERRORS;
 80086a8:	2332      	movs	r3, #50	; 0x32
 80086aa:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
							DATA_FOR_MASTER[42] = ERROR_tt;
 80086ae:	4b1b      	ldr	r3, [pc, #108]	; (800871c <Start_DATA_PROCESS+0x1134>)
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						  CRC_VALUE_FOR_MASTER = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FOR_MASTER,49);
 80086b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80086ba:	2231      	movs	r2, #49	; 0x31
 80086bc:	4619      	mov	r1, r3
 80086be:	4812      	ldr	r0, [pc, #72]	; (8008708 <Start_DATA_PROCESS+0x1120>)
 80086c0:	f008 fb6c 	bl	8010d9c <HAL_CRC_Calculate>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
						  DATA_FOR_MASTER[49] = CRC_VALUE_FOR_MASTER;
 80086ca:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80086ce:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						  HAL_UART_Transmit(&huart5, DATA_FOR_MASTER, 50,100);
 80086d2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80086d6:	2364      	movs	r3, #100	; 0x64
 80086d8:	2232      	movs	r2, #50	; 0x32
 80086da:	480c      	ldr	r0, [pc, #48]	; (800870c <Start_DATA_PROCESS+0x1124>)
 80086dc:	f00d fb58 	bl	8015d90 <HAL_UART_Transmit>
						break;
 80086e0:	bf00      	nop
		  		  break;
 80086e2:	e000      	b.n	80086e6 <Start_DATA_PROCESS+0x10fe>
		  }
		  }
 80086e4:	bf00      	nop
	  }
    osDelay(1);
 80086e6:	2001      	movs	r0, #1
 80086e8:	f00e fe9d 	bl	8017426 <osDelay>
	  dataprocessevt = osMessageGet(DATA_PROCESS_qHandle, 0);
 80086ec:	f7fe bf8e 	b.w	800760c <Start_DATA_PROCESS+0x24>
 80086f0:	20002a64 	.word	0x20002a64
 80086f4:	20002aa0 	.word	0x20002aa0
 80086f8:	20002a5e 	.word	0x20002a5e
 80086fc:	20002a5f 	.word	0x20002a5f
 8008700:	20002a60 	.word	0x20002a60
 8008704:	20002a61 	.word	0x20002a61
 8008708:	20001718 	.word	0x20001718
 800870c:	20001a14 	.word	0x20001a14
 8008710:	20002a5c 	.word	0x20002a5c
 8008714:	20002a5d 	.word	0x20002a5d
 8008718:	20002a62 	.word	0x20002a62
 800871c:	20002a63 	.word	0x20002a63

08008720 <Start_RCU_RECEIVE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RCU_RECEIVE */
void Start_RCU_RECEIVE(void const * argument)
{
 8008720:	b5b0      	push	{r4, r5, r7, lr}
 8008722:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 8008726:	af02      	add	r7, sp, #8
 8008728:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800872c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8008730:	6018      	str	r0, [r3, #0]
	uint8_t Sperading_Factor;
    uint8_t CR;
	uint16_t Band_Width;
	uint32_t frequency_t;
	uint32_t offset_t;
    int pos =0;
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
    static int notification =0;
    static int z=0;
  /* Infinite loop */
  for(;;)
  {
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8008738:	f04f 31ff 	mov.w	r1, #4294967295
 800873c:	2000      	movs	r0, #0
 800873e:	f011 fa29 	bl	8019b94 <ulTaskNotifyTake>
 8008742:	4603      	mov	r3, r0
 8008744:	461a      	mov	r2, r3
 8008746:	4bc2      	ldr	r3, [pc, #776]	; (8008a50 <Start_RCU_RECEIVE+0x330>)
 8008748:	601a      	str	r2, [r3, #0]
	  if( (notification>=0))
 800874a:	4bc1      	ldr	r3, [pc, #772]	; (8008a50 <Start_RCU_RECEIVE+0x330>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	f2c1 8221 	blt.w	8009b96 <Start_RCU_RECEIVE+0x1476>
	  {
	  notification =0;
 8008754:	4bbe      	ldr	r3, [pc, #760]	; (8008a50 <Start_RCU_RECEIVE+0x330>)
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800875a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800875e:	48bd      	ldr	r0, [pc, #756]	; (8008a54 <Start_RCU_RECEIVE+0x334>)
 8008760:	f009 fa9d 	bl	8011c9e <HAL_GPIO_TogglePin>
	  memcpy(DATA_FROM_LOCAL_t,DATA_FROM_LOCAL,50);
 8008764:	4bbc      	ldr	r3, [pc, #752]	; (8008a58 <Start_RCU_RECEIVE+0x338>)
 8008766:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800876a:	461d      	mov	r5, r3
 800876c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800876e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	8023      	strh	r3, [r4, #0]
	  if(DATA_FROM_LOCAL_t[1] == MODEM_BIT)
 800877c:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 8008780:	2b01      	cmp	r3, #1
 8008782:	f041 81fb 	bne.w	8009b7c <Start_RCU_RECEIVE+0x145c>
	  {
		  RECEIVED_CRC = DATA_FROM_LOCAL_t[LORA_RX_BUFF_SIZE-1];
 8008786:	4bb5      	ldr	r3, [pc, #724]	; (8008a5c <Start_RCU_RECEIVE+0x33c>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	3b01      	subs	r3, #1
 800878c:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8008790:	443b      	add	r3, r7
 8008792:	f813 3cd0 	ldrb.w	r3, [r3, #-208]
 8008796:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		  CALCULATED_CRC = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FROM_LOCAL_t,(LORA_RX_BUFF_SIZE-1));
 800879a:	4bb0      	ldr	r3, [pc, #704]	; (8008a5c <Start_RCU_RECEIVE+0x33c>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	3b01      	subs	r3, #1
 80087a0:	461a      	mov	r2, r3
 80087a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087a6:	4619      	mov	r1, r3
 80087a8:	48ad      	ldr	r0, [pc, #692]	; (8008a60 <Start_RCU_RECEIVE+0x340>)
 80087aa:	f008 faf7 	bl	8010d9c <HAL_CRC_Calculate>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
		  if(RECEIVED_CRC == CALCULATED_CRC)
 80087b4:	f897 227f 	ldrb.w	r2, [r7, #639]	; 0x27f
 80087b8:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80087bc:	429a      	cmp	r2, r3
 80087be:	f041 81dd 	bne.w	8009b7c <Start_RCU_RECEIVE+0x145c>
		  {
			  if((DATA_FROM_LOCAL_t[3] == SEARCHING_DEVICES) &&(DATA_FROM_LOCAL_t[4]!=MY_TCU_ID)&&(DATA_FROM_LOCAL_t[5]!=MY_TCU_ID)&&(DATA_FROM_LOCAL_t[6]!=MY_TCU_ID)&&(DATA_FROM_LOCAL_t[7]!=MY_TCU_ID))
 80087c2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d141      	bne.n	800884e <Start_RCU_RECEIVE+0x12e>
 80087ca:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d03d      	beq.n	800884e <Start_RCU_RECEIVE+0x12e>
 80087d2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d039      	beq.n	800884e <Start_RCU_RECEIVE+0x12e>
 80087da:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d035      	beq.n	800884e <Start_RCU_RECEIVE+0x12e>
 80087e2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d031      	beq.n	800884e <Start_RCU_RECEIVE+0x12e>
			  {
				  WHOM_TO_GIVE_DATA = LOCAL_SYSTEM;
 80087ea:	4b9e      	ldr	r3, [pc, #632]	; (8008a64 <Start_RCU_RECEIVE+0x344>)
 80087ec:	2202      	movs	r2, #2
 80087ee:	601a      	str	r2, [r3, #0]
				  state = SEARCHING_DEVICES;
 80087f0:	4b9d      	ldr	r3, [pc, #628]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 80087f2:	2209      	movs	r2, #9
 80087f4:	601a      	str	r2, [r3, #0]
				  sDate.Date = DATA_FROM_LOCAL_t[10];
 80087f6:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 80087fa:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
				  sDate.Month = DATA_FROM_LOCAL_t[11];
 80087fe:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8008802:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
				  sDate.Year = DATA_FROM_LOCAL_t[12];
 8008806:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 800880a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
				  sTime.Hours = DATA_FROM_LOCAL_t[13];
 800880e:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8008812:	f887 3240 	strb.w	r3, [r7, #576]	; 0x240
				  sTime.Minutes = DATA_FROM_LOCAL_t[14];
 8008816:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800881a:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
				  sTime.Seconds = DATA_FROM_LOCAL_t[15];
 800881e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008822:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
				  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8008826:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800882a:	2201      	movs	r2, #1
 800882c:	4619      	mov	r1, r3
 800882e:	488f      	ldr	r0, [pc, #572]	; (8008a6c <Start_RCU_RECEIVE+0x34c>)
 8008830:	f00b fc0c 	bl	801404c <HAL_RTC_SetDate>
				  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8008834:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8008838:	2201      	movs	r2, #1
 800883a:	4619      	mov	r1, r3
 800883c:	488b      	ldr	r0, [pc, #556]	; (8008a6c <Start_RCU_RECEIVE+0x34c>)
 800883e:	f00b fb0d 	bl	8013e5c <HAL_RTC_SetTime>
				  osThreadSuspend(LORA_RECEIVEHandle);
 8008842:	4b8b      	ldr	r3, [pc, #556]	; (8008a70 <Start_RCU_RECEIVE+0x350>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f00f f9c9 	bl	8017bde <osThreadSuspend>
 800884c:	e044      	b.n	80088d8 <Start_RCU_RECEIVE+0x1b8>
			  }
				else if(((DATA_FROM_LOCAL_t[3] == CLOSE_LOOP_START)||(DATA_FROM_LOCAL_t[3] == UPADTE_TEMP_OR_POWER)||(DATA_FROM_LOCAL_t[3] == OPEN_LOOP_START)||(DATA_FROM_LOCAL_t[3] == SLEEP)||(DATA_FROM_LOCAL_t[3]==SDA_CALLIBRATION)||(DATA_FROM_LOCAL_t[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_LOCAL_t[3]==CLOSE_LOOP_START_PROFILE)) && (DATA_FROM_LOCAL_t[2]==MY_TCU_ID))
 800884e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008852:	2b07      	cmp	r3, #7
 8008854:	d017      	beq.n	8008886 <Start_RCU_RECEIVE+0x166>
 8008856:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800885a:	2b05      	cmp	r3, #5
 800885c:	d013      	beq.n	8008886 <Start_RCU_RECEIVE+0x166>
 800885e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008862:	2b0d      	cmp	r3, #13
 8008864:	d00f      	beq.n	8008886 <Start_RCU_RECEIVE+0x166>
 8008866:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800886a:	2bf0      	cmp	r3, #240	; 0xf0
 800886c:	d00b      	beq.n	8008886 <Start_RCU_RECEIVE+0x166>
 800886e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008872:	2bce      	cmp	r3, #206	; 0xce
 8008874:	d007      	beq.n	8008886 <Start_RCU_RECEIVE+0x166>
 8008876:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800887a:	2bdd      	cmp	r3, #221	; 0xdd
 800887c:	d003      	beq.n	8008886 <Start_RCU_RECEIVE+0x166>
 800887e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008882:	2b77      	cmp	r3, #119	; 0x77
 8008884:	d107      	bne.n	8008896 <Start_RCU_RECEIVE+0x176>
 8008886:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 800888a:	2b04      	cmp	r3, #4
 800888c:	d103      	bne.n	8008896 <Start_RCU_RECEIVE+0x176>
				{
				state = PROCESS_DATA;
 800888e:	4b76      	ldr	r3, [pc, #472]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008890:	2211      	movs	r2, #17
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e020      	b.n	80088d8 <Start_RCU_RECEIVE+0x1b8>
				}
				else if(((DATA_FROM_LOCAL_t[3] == UPADTE_TEMP_OR_POWER)||(DATA_FROM_LOCAL_t[3]==OPEN_LOOP_START_PROFILE)||(DATA_FROM_LOCAL_t[3]==CLOSE_LOOP_START_PROFILE)) && ((DATA_FROM_LOCAL_t[2]==ID_S_PRESENT[0])||(DATA_FROM_LOCAL_t[2]==ID_S_PRESENT[1])||(DATA_FROM_LOCAL_t[2]==ID_S_PRESENT[2])))
 8008896:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800889a:	2b05      	cmp	r3, #5
 800889c:	d007      	beq.n	80088ae <Start_RCU_RECEIVE+0x18e>
 800889e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80088a2:	2bdd      	cmp	r3, #221	; 0xdd
 80088a4:	d003      	beq.n	80088ae <Start_RCU_RECEIVE+0x18e>
 80088a6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80088aa:	2b77      	cmp	r3, #119	; 0x77
 80088ac:	d114      	bne.n	80088d8 <Start_RCU_RECEIVE+0x1b8>
 80088ae:	f897 220a 	ldrb.w	r2, [r7, #522]	; 0x20a
 80088b2:	4b70      	ldr	r3, [pc, #448]	; (8008a74 <Start_RCU_RECEIVE+0x354>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d00b      	beq.n	80088d2 <Start_RCU_RECEIVE+0x1b2>
 80088ba:	f897 220a 	ldrb.w	r2, [r7, #522]	; 0x20a
 80088be:	4b6d      	ldr	r3, [pc, #436]	; (8008a74 <Start_RCU_RECEIVE+0x354>)
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d005      	beq.n	80088d2 <Start_RCU_RECEIVE+0x1b2>
 80088c6:	f897 220a 	ldrb.w	r2, [r7, #522]	; 0x20a
 80088ca:	4b6a      	ldr	r3, [pc, #424]	; (8008a74 <Start_RCU_RECEIVE+0x354>)
 80088cc:	789b      	ldrb	r3, [r3, #2]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d102      	bne.n	80088d8 <Start_RCU_RECEIVE+0x1b8>
				{
				state = SEND_DATA_TO_SLAVE;
 80088d2:	4b65      	ldr	r3, [pc, #404]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 80088d4:	2210      	movs	r2, #16
 80088d6:	601a      	str	r2, [r3, #0]
				}
				switch(DATA_FROM_LOCAL_t[3])
 80088d8:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80088dc:	2bed      	cmp	r3, #237	; 0xed
 80088de:	f300 80d7 	bgt.w	8008a90 <Start_RCU_RECEIVE+0x370>
 80088e2:	2bb4      	cmp	r3, #180	; 0xb4
 80088e4:	da0c      	bge.n	8008900 <Start_RCU_RECEIVE+0x1e0>
 80088e6:	2b55      	cmp	r3, #85	; 0x55
 80088e8:	f000 80c6 	beq.w	8008a78 <Start_RCU_RECEIVE+0x358>
 80088ec:	2b55      	cmp	r3, #85	; 0x55
 80088ee:	f300 80cf 	bgt.w	8008a90 <Start_RCU_RECEIVE+0x370>
 80088f2:	2b2c      	cmp	r3, #44	; 0x2c
 80088f4:	f000 80a6 	beq.w	8008a44 <Start_RCU_RECEIVE+0x324>
 80088f8:	2b4b      	cmp	r3, #75	; 0x4b
 80088fa:	f000 8097 	beq.w	8008a2c <Start_RCU_RECEIVE+0x30c>
 80088fe:	e0c7      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
 8008900:	3bb4      	subs	r3, #180	; 0xb4
 8008902:	2b39      	cmp	r3, #57	; 0x39
 8008904:	f200 80c4 	bhi.w	8008a90 <Start_RCU_RECEIVE+0x370>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <Start_RCU_RECEIVE+0x1f0>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008a25 	.word	0x08008a25
 8008914:	08008a91 	.word	0x08008a91
 8008918:	08008a91 	.word	0x08008a91
 800891c:	08008a91 	.word	0x08008a91
 8008920:	08008a91 	.word	0x08008a91
 8008924:	080089f9 	.word	0x080089f9
 8008928:	08008a19 	.word	0x08008a19
 800892c:	08008a81 	.word	0x08008a81
 8008930:	08008a91 	.word	0x08008a91
 8008934:	08008a91 	.word	0x08008a91
 8008938:	08008a91 	.word	0x08008a91
 800893c:	08008a0d 	.word	0x08008a0d
 8008940:	08008a91 	.word	0x08008a91
 8008944:	08008a91 	.word	0x08008a91
 8008948:	08008a91 	.word	0x08008a91
 800894c:	08008a91 	.word	0x08008a91
 8008950:	08008a91 	.word	0x08008a91
 8008954:	08008a91 	.word	0x08008a91
 8008958:	08008a91 	.word	0x08008a91
 800895c:	08008a91 	.word	0x08008a91
 8008960:	08008a91 	.word	0x08008a91
 8008964:	08008a91 	.word	0x08008a91
 8008968:	08008a91 	.word	0x08008a91
 800896c:	08008a91 	.word	0x08008a91
 8008970:	08008a91 	.word	0x08008a91
 8008974:	08008a91 	.word	0x08008a91
 8008978:	08008a39 	.word	0x08008a39
 800897c:	08008a01 	.word	0x08008a01
 8008980:	08008a91 	.word	0x08008a91
 8008984:	08008a91 	.word	0x08008a91
 8008988:	08008a91 	.word	0x08008a91
 800898c:	08008a91 	.word	0x08008a91
 8008990:	08008a91 	.word	0x08008a91
 8008994:	08008a91 	.word	0x08008a91
 8008998:	08008a91 	.word	0x08008a91
 800899c:	08008a91 	.word	0x08008a91
 80089a0:	08008a91 	.word	0x08008a91
 80089a4:	08008a91 	.word	0x08008a91
 80089a8:	08008a91 	.word	0x08008a91
 80089ac:	08008a91 	.word	0x08008a91
 80089b0:	08008a91 	.word	0x08008a91
 80089b4:	08008a91 	.word	0x08008a91
 80089b8:	08008a91 	.word	0x08008a91
 80089bc:	08008a91 	.word	0x08008a91
 80089c0:	08008a91 	.word	0x08008a91
 80089c4:	08008a91 	.word	0x08008a91
 80089c8:	08008a91 	.word	0x08008a91
 80089cc:	08008a91 	.word	0x08008a91
 80089d0:	08008a91 	.word	0x08008a91
 80089d4:	08008a91 	.word	0x08008a91
 80089d8:	08008a91 	.word	0x08008a91
 80089dc:	08008a91 	.word	0x08008a91
 80089e0:	08008a91 	.word	0x08008a91
 80089e4:	08008a91 	.word	0x08008a91
 80089e8:	08008a91 	.word	0x08008a91
 80089ec:	08008a91 	.word	0x08008a91
 80089f0:	08008a91 	.word	0x08008a91
 80089f4:	08008a89 	.word	0x08008a89
				{
				case FETCH_BIST:
					state = FETCH_BIST;
 80089f8:	4b1b      	ldr	r3, [pc, #108]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 80089fa:	22b9      	movs	r2, #185	; 0xb9
 80089fc:	601a      	str	r2, [r3, #0]
					break;
 80089fe:	e047      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case CURRENT_LIMIT:
					SEND_ACK();
 8008a00:	f7f9 fb88 	bl	8002114 <SEND_ACK>
					state = CURRENT_LIMIT;
 8008a04:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a06:	22cf      	movs	r2, #207	; 0xcf
 8008a08:	601a      	str	r2, [r3, #0]
					break;
 8008a0a:	e041      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case LOGGING_INTERVAL:
					SEND_ACK();
 8008a0c:	f7f9 fb82 	bl	8002114 <SEND_ACK>
					state = LOGGING_INTERVAL;
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a12:	22bf      	movs	r2, #191	; 0xbf
 8008a14:	601a      	str	r2, [r3, #0]
					break;
 8008a16:	e03b      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case LORA_PARAMETERS:
					SEND_ACK();
 8008a18:	f7f9 fb7c 	bl	8002114 <SEND_ACK>
					state = LORA_PARAMETERS;
 8008a1c:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a1e:	22ba      	movs	r2, #186	; 0xba
 8008a20:	601a      	str	r2, [r3, #0]
					break;
 8008a22:	e035      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case FETCH_DATA:
					state = FETCH_DATA;
 8008a24:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a26:	22b4      	movs	r2, #180	; 0xb4
 8008a28:	601a      	str	r2, [r3, #0]
					break;
 8008a2a:	e031      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case CLEAR_FLASH:
					SEND_ACK();
 8008a2c:	f7f9 fb72 	bl	8002114 <SEND_ACK>
					state = CLEAR_FLASH;
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a32:	224b      	movs	r2, #75	; 0x4b
 8008a34:	601a      	str	r2, [r3, #0]
					break;
 8008a36:	e02b      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case SDA_CALLIBRATION:
					SEND_ACK();
 8008a38:	f7f9 fb6c 	bl	8002114 <SEND_ACK>
					state = SDA_CALLIBRATION;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a3e:	22ce      	movs	r2, #206	; 0xce
 8008a40:	601a      	str	r2, [r3, #0]
					break;
 8008a42:	e025      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case KP_KI_KD_DATA:
					SEND_ACK();
 8008a44:	f7f9 fb66 	bl	8002114 <SEND_ACK>
					state = KP_KI_KD_DATA;
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <Start_RCU_RECEIVE+0x348>)
 8008a4a:	222c      	movs	r2, #44	; 0x2c
 8008a4c:	601a      	str	r2, [r3, #0]
					break;
 8008a4e:	e01f      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
 8008a50:	20002aa4 	.word	0x20002aa4
 8008a54:	40021000 	.word	0x40021000
 8008a58:	20001f20 	.word	0x20001f20
 8008a5c:	2000000a 	.word	0x2000000a
 8008a60:	20001718 	.word	0x20001718
 8008a64:	20001f5c 	.word	0x20001f5c
 8008a68:	20002aa8 	.word	0x20002aa8
 8008a6c:	200017f4 	.word	0x200017f4
 8008a70:	20001db8 	.word	0x20001db8
 8008a74:	20001f54 	.word	0x20001f54
				case UPDATE_PROFILE:

					state = UPDATE_PROFILE;
 8008a78:	4bb6      	ldr	r3, [pc, #728]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008a7a:	2255      	movs	r2, #85	; 0x55
 8008a7c:	601a      	str	r2, [r3, #0]
					break;
 8008a7e:	e007      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case MASTER_SLAVE_CONFIG:
					state = MASTER_SLAVE_CONFIG;
 8008a80:	4bb4      	ldr	r3, [pc, #720]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008a82:	22bb      	movs	r2, #187	; 0xbb
 8008a84:	601a      	str	r2, [r3, #0]
					break;
 8008a86:	e003      	b.n	8008a90 <Start_RCU_RECEIVE+0x370>
				case RESET_MAS_SLAVE:
					state = RESET_MAS_SLAVE;
 8008a88:	4bb2      	ldr	r3, [pc, #712]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008a8a:	22ed      	movs	r2, #237	; 0xed
 8008a8c:	601a      	str	r2, [r3, #0]
					break;
 8008a8e:	bf00      	nop
				}
				switch(state)
 8008a90:	4bb0      	ldr	r3, [pc, #704]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2bed      	cmp	r3, #237	; 0xed
 8008a96:	f301 8062 	bgt.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008a9a:	2bb4      	cmp	r3, #180	; 0xb4
 8008a9c:	da1f      	bge.n	8008ade <Start_RCU_RECEIVE+0x3be>
 8008a9e:	2b55      	cmp	r3, #85	; 0x55
 8008aa0:	f000 86f7 	beq.w	8009892 <Start_RCU_RECEIVE+0x1172>
 8008aa4:	2b55      	cmp	r3, #85	; 0x55
 8008aa6:	f301 805a 	bgt.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008aaa:	2b4b      	cmp	r3, #75	; 0x4b
 8008aac:	f000 8148 	beq.w	8008d40 <Start_RCU_RECEIVE+0x620>
 8008ab0:	2b4b      	cmp	r3, #75	; 0x4b
 8008ab2:	f301 8054 	bgt.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008ab6:	2b2c      	cmp	r3, #44	; 0x2c
 8008ab8:	f000 81fe 	beq.w	8008eb8 <Start_RCU_RECEIVE+0x798>
 8008abc:	2b2c      	cmp	r3, #44	; 0x2c
 8008abe:	f301 804e 	bgt.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008ac2:	2b11      	cmp	r3, #17
 8008ac4:	f000 8629 	beq.w	800971a <Start_RCU_RECEIVE+0xffa>
 8008ac8:	2b11      	cmp	r3, #17
 8008aca:	f301 8048 	bgt.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	f000 83f8 	beq.w	80092c4 <Start_RCU_RECEIVE+0xba4>
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	f000 8786 	beq.w	80099e6 <Start_RCU_RECEIVE+0x12c6>
 8008ada:	f001 b840 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008ade:	3bb4      	subs	r3, #180	; 0xb4
 8008ae0:	2b39      	cmp	r3, #57	; 0x39
 8008ae2:	f201 803c 	bhi.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <Start_RCU_RECEIVE+0x3cc>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008cdd 	.word	0x08008cdd
 8008af0:	08009b5f 	.word	0x08009b5f
 8008af4:	08009b5f 	.word	0x08009b5f
 8008af8:	08009b5f 	.word	0x08009b5f
 8008afc:	08009b5f 	.word	0x08009b5f
 8008b00:	08008d0f 	.word	0x08008d0f
 8008b04:	08009011 	.word	0x08009011
 8008b08:	0800940d 	.word	0x0800940d
 8008b0c:	08009b5f 	.word	0x08009b5f
 8008b10:	08009b5f 	.word	0x08009b5f
 8008b14:	08009b5f 	.word	0x08009b5f
 8008b18:	08008e65 	.word	0x08008e65
 8008b1c:	08009b5f 	.word	0x08009b5f
 8008b20:	08009b5f 	.word	0x08009b5f
 8008b24:	08009b5f 	.word	0x08009b5f
 8008b28:	08009b5f 	.word	0x08009b5f
 8008b2c:	08009b5f 	.word	0x08009b5f
 8008b30:	08009b5f 	.word	0x08009b5f
 8008b34:	08009b5f 	.word	0x08009b5f
 8008b38:	08009b5f 	.word	0x08009b5f
 8008b3c:	08009b5f 	.word	0x08009b5f
 8008b40:	08009b5f 	.word	0x08009b5f
 8008b44:	08009b5f 	.word	0x08009b5f
 8008b48:	08009b5f 	.word	0x08009b5f
 8008b4c:	08009b5f 	.word	0x08009b5f
 8008b50:	08009b5f 	.word	0x08009b5f
 8008b54:	08008bd5 	.word	0x08008bd5
 8008b58:	08008c7b 	.word	0x08008c7b
 8008b5c:	08009b5f 	.word	0x08009b5f
 8008b60:	08009b5f 	.word	0x08009b5f
 8008b64:	08009b5f 	.word	0x08009b5f
 8008b68:	08009b5f 	.word	0x08009b5f
 8008b6c:	08009b5f 	.word	0x08009b5f
 8008b70:	08009b5f 	.word	0x08009b5f
 8008b74:	08009b5f 	.word	0x08009b5f
 8008b78:	08009b5f 	.word	0x08009b5f
 8008b7c:	08009b5f 	.word	0x08009b5f
 8008b80:	08009b5f 	.word	0x08009b5f
 8008b84:	08009b5f 	.word	0x08009b5f
 8008b88:	08009b5f 	.word	0x08009b5f
 8008b8c:	08009b5f 	.word	0x08009b5f
 8008b90:	08009b5f 	.word	0x08009b5f
 8008b94:	08009b5f 	.word	0x08009b5f
 8008b98:	08009b5f 	.word	0x08009b5f
 8008b9c:	08009b5f 	.word	0x08009b5f
 8008ba0:	08009b5f 	.word	0x08009b5f
 8008ba4:	08009b5f 	.word	0x08009b5f
 8008ba8:	08009b5f 	.word	0x08009b5f
 8008bac:	08009b5f 	.word	0x08009b5f
 8008bb0:	08009b5f 	.word	0x08009b5f
 8008bb4:	08009b5f 	.word	0x08009b5f
 8008bb8:	08009b5f 	.word	0x08009b5f
 8008bbc:	08009b5f 	.word	0x08009b5f
 8008bc0:	08009b5f 	.word	0x08009b5f
 8008bc4:	08009b5f 	.word	0x08009b5f
 8008bc8:	08009b5f 	.word	0x08009b5f
 8008bcc:	08009b5f 	.word	0x08009b5f
 8008bd0:	08008d7d 	.word	0x08008d7d
				{
				case	SDA_CALLIBRATION:
					sda_msg = osPoolAlloc(sdasendpool);
 8008bd4:	4b60      	ldr	r3, [pc, #384]	; (8008d58 <Start_RCU_RECEIVE+0x638>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f00e fd4a 	bl	8017672 <osPoolAlloc>
 8008bde:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
					sda_msg->SDA_SEND_DATA[0] = SDA_CALLIBRATION_FACTOR;
 8008be2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008be6:	22b8      	movs	r2, #184	; 0xb8
 8008be8:	701a      	strb	r2, [r3, #0]
					sda_msg->SDA_SEND_DATA[1] = DATA_FROM_LOCAL_t[4];
 8008bea:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8008bee:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008bf2:	705a      	strb	r2, [r3, #1]
					sda_msg->SDA_SEND_DATA[2] = DATA_FROM_LOCAL_t[5];
 8008bf4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008bf8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008bfc:	709a      	strb	r2, [r3, #2]
					sda_msg->SDA_SEND_DATA[3] = DATA_FROM_LOCAL_t[6];
 8008bfe:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008c02:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c06:	70da      	strb	r2, [r3, #3]
					sda_msg->SDA_SEND_DATA[4] = DATA_FROM_LOCAL_t[7];
 8008c08:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008c0c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c10:	711a      	strb	r2, [r3, #4]
					osMessagePut(SDA_SEND_qHandle, (uint32_t)sda_msg,100);
 8008c12:	4b52      	ldr	r3, [pc, #328]	; (8008d5c <Start_RCU_RECEIVE+0x63c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 8008c1a:	2264      	movs	r2, #100	; 0x64
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f00e fdf5 	bl	801780c <osMessagePut>
					flashmsg = osPoolAlloc(flashpool);
 8008c22:	4b4f      	ldr	r3, [pc, #316]	; (8008d60 <Start_RCU_RECEIVE+0x640>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f00e fd23 	bl	8017672 <osPoolAlloc>
 8008c2c:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					flashmsg->FLASH_DATA_t[0] = SDA_CALLIBRATION_FACTOR;
 8008c30:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008c34:	22b8      	movs	r2, #184	; 0xb8
 8008c36:	701a      	strb	r2, [r3, #0]
					flashmsg->FLASH_DATA_t[1] = DATA_FROM_LOCAL_t[4];
 8008c38:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8008c3c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008c40:	705a      	strb	r2, [r3, #1]
					flashmsg->FLASH_DATA_t[2] = DATA_FROM_LOCAL_t[5];
 8008c42:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008c46:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008c4a:	709a      	strb	r2, [r3, #2]
					flashmsg->FLASH_DATA_t[3] = DATA_FROM_LOCAL_t[6];
 8008c4c:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008c50:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008c54:	70da      	strb	r2, [r3, #3]
					flashmsg->FLASH_DATA_t[4] = DATA_FROM_LOCAL_t[7];
 8008c56:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008c5a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008c5e:	711a      	strb	r2, [r3, #4]
					osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 8008c60:	4b40      	ldr	r3, [pc, #256]	; (8008d64 <Start_RCU_RECEIVE+0x644>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8008c68:	2264      	movs	r2, #100	; 0x64
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00e fdce 	bl	801780c <osMessagePut>
					state = 0;
 8008c70:	4b38      	ldr	r3, [pc, #224]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
				break;
 8008c76:	f000 bf72 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case CURRENT_LIMIT:
					currlimitmsg = osPoolAlloc(currlimitpool);
 8008c7a:	4b3b      	ldr	r3, [pc, #236]	; (8008d68 <Start_RCU_RECEIVE+0x648>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f00e fcf7 	bl	8017672 <osPoolAlloc>
 8008c84:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
					currlimitmsg->CURRENT_LIMIT_DATA = DATA_FROM_LOCAL_t[4];
 8008c88:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8008c8c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008c90:	701a      	strb	r2, [r3, #0]
					osMessagePut(CURRENT_LIMIT_Q_qHandle, (uint32_t)currlimitmsg, 10);
 8008c92:	4b36      	ldr	r3, [pc, #216]	; (8008d6c <Start_RCU_RECEIVE+0x64c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8008c9a:	220a      	movs	r2, #10
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f00e fdb5 	bl	801780c <osMessagePut>
					flashmsg = osPoolAlloc(flashpool);
 8008ca2:	4b2f      	ldr	r3, [pc, #188]	; (8008d60 <Start_RCU_RECEIVE+0x640>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f00e fce3 	bl	8017672 <osPoolAlloc>
 8008cac:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					flashmsg->FLASH_DATA_t[0] = CURRENT_LIMIT;
 8008cb0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008cb4:	22cf      	movs	r2, #207	; 0xcf
 8008cb6:	701a      	strb	r2, [r3, #0]
					flashmsg->FLASH_DATA_t[1] = DATA_FROM_LOCAL_t[4];
 8008cb8:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8008cbc:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008cc0:	705a      	strb	r2, [r3, #1]
					osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 8008cc2:	4b28      	ldr	r3, [pc, #160]	; (8008d64 <Start_RCU_RECEIVE+0x644>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8008cca:	2264      	movs	r2, #100	; 0x64
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f00e fd9d 	bl	801780c <osMessagePut>
					state = 0;
 8008cd2:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
				break;
 8008cd8:	f000 bf41 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case FETCH_DATA:
					flashreadmsg = osPoolAlloc(flashreadpool);
 8008cdc:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <Start_RCU_RECEIVE+0x650>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f00e fcc6 	bl	8017672 <osPoolAlloc>
 8008ce6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					flashreadmsg->FLASH_READ_DATA[0] = DATA_FROM_LOCAL_t[4];
 8008cea:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8008cee:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008cf2:	701a      	strb	r2, [r3, #0]
					osMessagePut(FLASH_READ_qHandle,(uint32_t) flashreadmsg,10);
 8008cf4:	4b1f      	ldr	r3, [pc, #124]	; (8008d74 <Start_RCU_RECEIVE+0x654>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008cfc:	220a      	movs	r2, #10
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f00e fd84 	bl	801780c <osMessagePut>
					state = 0;
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
				break;
 8008d0a:	f000 bf28 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case FETCH_BIST:
					flashreadmsg = osPoolAlloc(flashreadpool);
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <Start_RCU_RECEIVE+0x650>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f00e fcad 	bl	8017672 <osPoolAlloc>
 8008d18:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					flashreadmsg->FLASH_READ_DATA[0] = DATA_FROM_LOCAL_t[3];
 8008d1c:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8008d20:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d24:	701a      	strb	r2, [r3, #0]
					osMessagePut(FLASH_READ_qHandle,(uint32_t) flashreadmsg,10);
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <Start_RCU_RECEIVE+0x654>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008d2e:	220a      	movs	r2, #10
 8008d30:	4618      	mov	r0, r3
 8008d32:	f00e fd6b 	bl	801780c <osMessagePut>
					state = 0;
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]
				break;
 8008d3c:	f000 bf0f 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case CLEAR_FLASH:
					SLAVE_Erase_4K(clear_address);
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <Start_RCU_RECEIVE+0x658>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f7 ff17 	bl	8000b78 <SLAVE_Erase_4K>
					state = 0;
 8008d4a:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <Start_RCU_RECEIVE+0x634>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
				break;
 8008d50:	f000 bf05 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008d54:	20002aa8 	.word	0x20002aa8
 8008d58:	20001604 	.word	0x20001604
 8008d5c:	20001e24 	.word	0x20001e24
 8008d60:	200015cc 	.word	0x200015cc
 8008d64:	20001e70 	.word	0x20001e70
 8008d68:	20001618 	.word	0x20001618
 8008d6c:	20001e6c 	.word	0x20001e6c
 8008d70:	20001608 	.word	0x20001608
 8008d74:	20001e78 	.word	0x20001e78
 8008d78:	20000024 	.word	0x20000024

				case RESET_MAS_SLAVE:
					  memset(slavemsg->SLAVE_DATA,0,50);
 8008d7c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008d80:	2232      	movs	r2, #50	; 0x32
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f012 fa44 	bl	801b212 <memset>
					  slavemsg = osPoolAlloc(slavesendpool);
 8008d8a:	4b97      	ldr	r3, [pc, #604]	; (8008fe8 <Start_RCU_RECEIVE+0x8c8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f00e fc6f 	bl	8017672 <osPoolAlloc>
 8008d94:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
					  slavemsg->SLAVE_DATA[0] = MASTER_BIT;
 8008d98:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	701a      	strb	r2, [r3, #0]
					  slavemsg->SLAVE_DATA[1] = ID_S_PRESENT[0];
 8008da0:	4b92      	ldr	r3, [pc, #584]	; (8008fec <Start_RCU_RECEIVE+0x8cc>)
 8008da2:	781a      	ldrb	r2, [r3, #0]
 8008da4:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008da8:	705a      	strb	r2, [r3, #1]
					  slavemsg->SLAVE_DATA[2] = RESET_MAS_SLAVE;
 8008daa:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008dae:	22ed      	movs	r2, #237	; 0xed
 8008db0:	709a      	strb	r2, [r3, #2]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 8008db2:	4b8f      	ldr	r3, [pc, #572]	; (8008ff0 <Start_RCU_RECEIVE+0x8d0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8008dba:	2264      	movs	r2, #100	; 0x64
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f00e fd25 	bl	801780c <osMessagePut>
					  osDelay(100);
 8008dc2:	2064      	movs	r0, #100	; 0x64
 8008dc4:	f00e fb2f 	bl	8017426 <osDelay>
					  memset(slavemsg->SLAVE_DATA,0,50);
 8008dc8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008dcc:	2232      	movs	r2, #50	; 0x32
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f012 fa1e 	bl	801b212 <memset>
					  slavemsg = osPoolAlloc(slavesendpool);
 8008dd6:	4b84      	ldr	r3, [pc, #528]	; (8008fe8 <Start_RCU_RECEIVE+0x8c8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f00e fc49 	bl	8017672 <osPoolAlloc>
 8008de0:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
					  slavemsg->SLAVE_DATA[0] = MASTER_BIT;
 8008de4:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008de8:	2202      	movs	r2, #2
 8008dea:	701a      	strb	r2, [r3, #0]
					  slavemsg->SLAVE_DATA[1] = ID_S_PRESENT[1];
 8008dec:	4b7f      	ldr	r3, [pc, #508]	; (8008fec <Start_RCU_RECEIVE+0x8cc>)
 8008dee:	785a      	ldrb	r2, [r3, #1]
 8008df0:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008df4:	705a      	strb	r2, [r3, #1]
					  slavemsg->SLAVE_DATA[2] = RESET_MAS_SLAVE;
 8008df6:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008dfa:	22ed      	movs	r2, #237	; 0xed
 8008dfc:	709a      	strb	r2, [r3, #2]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 8008dfe:	4b7c      	ldr	r3, [pc, #496]	; (8008ff0 <Start_RCU_RECEIVE+0x8d0>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8008e06:	2264      	movs	r2, #100	; 0x64
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f00e fcff 	bl	801780c <osMessagePut>
					  osDelay(100);
 8008e0e:	2064      	movs	r0, #100	; 0x64
 8008e10:	f00e fb09 	bl	8017426 <osDelay>
					  memset(slavemsg->SLAVE_DATA,0,50);
 8008e14:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008e18:	2232      	movs	r2, #50	; 0x32
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f012 f9f8 	bl	801b212 <memset>
					  slavemsg = osPoolAlloc(slavesendpool);
 8008e22:	4b71      	ldr	r3, [pc, #452]	; (8008fe8 <Start_RCU_RECEIVE+0x8c8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f00e fc23 	bl	8017672 <osPoolAlloc>
 8008e2c:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
					  slavemsg->SLAVE_DATA[0] = MASTER_BIT;
 8008e30:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008e34:	2202      	movs	r2, #2
 8008e36:	701a      	strb	r2, [r3, #0]
					  slavemsg->SLAVE_DATA[1] = ID_S_PRESENT[2];
 8008e38:	4b6c      	ldr	r3, [pc, #432]	; (8008fec <Start_RCU_RECEIVE+0x8cc>)
 8008e3a:	789a      	ldrb	r2, [r3, #2]
 8008e3c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008e40:	705a      	strb	r2, [r3, #1]
					  slavemsg->SLAVE_DATA[2] = RESET_MAS_SLAVE;
 8008e42:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8008e46:	22ed      	movs	r2, #237	; 0xed
 8008e48:	709a      	strb	r2, [r3, #2]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 8008e4a:	4b69      	ldr	r3, [pc, #420]	; (8008ff0 <Start_RCU_RECEIVE+0x8d0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8008e52:	2264      	movs	r2, #100	; 0x64
 8008e54:	4618      	mov	r0, r3
 8008e56:	f00e fcd9 	bl	801780c <osMessagePut>
					  osDelay(100);
 8008e5a:	2064      	movs	r0, #100	; 0x64
 8008e5c:	f00e fae3 	bl	8017426 <osDelay>
				break;
 8008e60:	f000 be7d 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case LOGGING_INTERVAL:
					log_interval = ((uint16_t)DATA_FROM_LOCAL_t[4]<<8)|(uint16_t)DATA_FROM_LOCAL_t[5];
 8008e64:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	4a60      	ldr	r2, [pc, #384]	; (8008ff4 <Start_RCU_RECEIVE+0x8d4>)
 8008e72:	6013      	str	r3, [r2, #0]
					flashmsg = osPoolAlloc(flashpool);
 8008e74:	4b60      	ldr	r3, [pc, #384]	; (8008ff8 <Start_RCU_RECEIVE+0x8d8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f00e fbfa 	bl	8017672 <osPoolAlloc>
 8008e7e:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					flashmsg->FLASH_DATA_t[0] = LOGGING_INTERVAL;
 8008e82:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008e86:	22bf      	movs	r2, #191	; 0xbf
 8008e88:	701a      	strb	r2, [r3, #0]
					flashmsg->FLASH_DATA_t[1] = DATA_FROM_LOCAL_t[4];
 8008e8a:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8008e8e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008e92:	705a      	strb	r2, [r3, #1]
					flashmsg->FLASH_DATA_t[2] = DATA_FROM_LOCAL_t[5];
 8008e94:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008e98:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008e9c:	709a      	strb	r2, [r3, #2]
					osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,10);
 8008e9e:	4b57      	ldr	r3, [pc, #348]	; (8008ffc <Start_RCU_RECEIVE+0x8dc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8008ea6:	220a      	movs	r2, #10
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f00e fcaf 	bl	801780c <osMessagePut>
					state = 0;
 8008eae:	4b54      	ldr	r3, [pc, #336]	; (8009000 <Start_RCU_RECEIVE+0x8e0>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]
				break;
 8008eb4:	f000 be53 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case KP_KI_KD_DATA:
					 pos =0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
		 	  	  	 kpkikd_msg = osPoolAlloc(kpkikdpool);
 8008ebe:	4b51      	ldr	r3, [pc, #324]	; (8009004 <Start_RCU_RECEIVE+0x8e4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f00e fbd5 	bl	8017672 <osPoolAlloc>
 8008ec8:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		 	  	  	 for(int i =0;i<4;i++)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8008ed2:	e013      	b.n	8008efc <Start_RCU_RECEIVE+0x7dc>
		 	  	  	 {
		 	  	  	 kpkikd_msg->KP_KI_KD_t[i] = DATA_FROM_LOCAL_t[i+4];
 8008ed4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8008ed8:	3304      	adds	r3, #4
 8008eda:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8008ede:	443b      	add	r3, r7
 8008ee0:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 8008ee4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008ee8:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8008eec:	4413      	add	r3, r2
 8008eee:	460a      	mov	r2, r1
 8008ef0:	701a      	strb	r2, [r3, #0]
		 	  	  	 for(int i =0;i<4;i++)
 8008ef2:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8008efc:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	dde7      	ble.n	8008ed4 <Start_RCU_RECEIVE+0x7b4>
		 	  	  	 }
		 	  	  	 osMessagePut(KP_KI_KD_qHandle, (uint32_t)kpkikd_msg,100);
 8008f04:	4b40      	ldr	r3, [pc, #256]	; (8009008 <Start_RCU_RECEIVE+0x8e8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8008f0c:	2264      	movs	r2, #100	; 0x64
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f00e fc7c 	bl	801780c <osMessagePut>
		 	  	  	 SLAVE_Read_Data(STARTING_ADD_OF_ENGG_MODE,DATA_FROM_FLASH,200);
 8008f14:	f107 030c 	add.w	r3, r7, #12
 8008f18:	22c8      	movs	r2, #200	; 0xc8
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008f20:	f7f7 fea1 	bl	8000c66 <SLAVE_Read_Data>
		 	  	  	 for(int i =0;i<200;i++)
 8008f24:	2300      	movs	r3, #0
 8008f26:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8008f2a:	e013      	b.n	8008f54 <Start_RCU_RECEIVE+0x834>
		 	  	  	 {
		 	  	  		 flashmsg->FLASH_DATA_t[i] = DATA_FROM_FLASH[i];
 8008f2c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8008f30:	f5a3 7233 	sub.w	r2, r3, #716	; 0x2cc
 8008f34:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008f38:	4413      	add	r3, r2
 8008f3a:	7819      	ldrb	r1, [r3, #0]
 8008f3c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8008f40:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008f44:	4413      	add	r3, r2
 8008f46:	460a      	mov	r2, r1
 8008f48:	701a      	strb	r2, [r3, #0]
		 	  	  	 for(int i =0;i<200;i++)
 8008f4a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8008f54:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008f58:	2bc7      	cmp	r3, #199	; 0xc7
 8008f5a:	dde7      	ble.n	8008f2c <Start_RCU_RECEIVE+0x80c>
		 	  	  	 }
		 	  	  	 pos = (DATA_FROM_LOCAL_t[4])/10;
 8008f5c:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8008f60:	4a2a      	ldr	r2, [pc, #168]	; (800900c <Start_RCU_RECEIVE+0x8ec>)
 8008f62:	fba2 2303 	umull	r2, r3, r2, r3
 8008f66:	08db      	lsrs	r3, r3, #3
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
		 	  	  	 pos = (pos*4)+37;
 8008f6e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	3325      	adds	r3, #37	; 0x25
 8008f76:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
			  	  	 	flashmsg->FLASH_DATA_t[0] = KP_KI_KD_DATA;
 8008f7a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008f7e:	222c      	movs	r2, #44	; 0x2c
 8008f80:	701a      	strb	r2, [r3, #0]
		 	  	  	 	flashmsg->FLASH_DATA_t[36] = KP_KI_KD_DATA;
 8008f82:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8008f86:	222c      	movs	r2, #44	; 0x2c
 8008f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						flashmsg->FLASH_DATA_t[pos] = DATA_FROM_LOCAL_t[4];
 8008f8c:	f897 120c 	ldrb.w	r1, [r7, #524]	; 0x20c
 8008f90:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8008f94:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8008f98:	4413      	add	r3, r2
 8008f9a:	460a      	mov	r2, r1
 8008f9c:	701a      	strb	r2, [r3, #0]
						flashmsg->FLASH_DATA_t[pos+1] = DATA_FROM_LOCAL_t[5];
 8008f9e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8008fa8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8008fac:	54d1      	strb	r1, [r2, r3]
						flashmsg->FLASH_DATA_t[pos+2] = DATA_FROM_LOCAL_t[6];
 8008fae:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8008fb2:	3302      	adds	r3, #2
 8008fb4:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8008fb8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8008fbc:	54d1      	strb	r1, [r2, r3]
						flashmsg->FLASH_DATA_t[pos+3] = DATA_FROM_LOCAL_t[7];
 8008fbe:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8008fc2:	3303      	adds	r3, #3
 8008fc4:	f897 120f 	ldrb.w	r1, [r7, #527]	; 0x20f
 8008fc8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8008fcc:	54d1      	strb	r1, [r2, r3]

		 	  	  	 osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <Start_RCU_RECEIVE+0x8dc>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8008fd6:	2264      	movs	r2, #100	; 0x64
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f00e fc17 	bl	801780c <osMessagePut>
		 			state = 0;
 8008fde:	4b08      	ldr	r3, [pc, #32]	; (8009000 <Start_RCU_RECEIVE+0x8e0>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
				break;
 8008fe4:	f000 bdbb 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>
 8008fe8:	200015e4 	.word	0x200015e4
 8008fec:	20001f54 	.word	0x20001f54
 8008ff0:	20001e30 	.word	0x20001e30
 8008ff4:	2000000c 	.word	0x2000000c
 8008ff8:	200015cc 	.word	0x200015cc
 8008ffc:	20001e70 	.word	0x20001e70
 8009000:	20002aa8 	.word	0x20002aa8
 8009004:	2000163c 	.word	0x2000163c
 8009008:	20001e38 	.word	0x20001e38
 800900c:	cccccccd 	.word	0xcccccccd

				case LORA_PARAMETERS:
					frequency_t = (((uint32_t)DATA_FROM_LOCAL_t[4])<<24)|(((uint32_t)DATA_FROM_LOCAL_t[5])<<16)|(((uint32_t)DATA_FROM_LOCAL_t[6])<<8)|((uint32_t)DATA_FROM_LOCAL_t[7]);
 8009010:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8009014:	061a      	lsls	r2, r3, #24
 8009016:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800901a:	041b      	lsls	r3, r3, #16
 800901c:	431a      	orrs	r2, r3
 800901e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	4313      	orrs	r3, r2
 8009026:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800902a:	4313      	orrs	r3, r2
 800902c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
					offset_t = (((uint32_t)DATA_FROM_LOCAL_t[8])<<24)|(((uint32_t)DATA_FROM_LOCAL_t[9])<<16)|(((uint32_t)DATA_FROM_LOCAL_t[10])<<8)|((uint32_t)DATA_FROM_LOCAL_t[11]);
 8009030:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8009034:	061a      	lsls	r2, r3, #24
 8009036:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	431a      	orrs	r2, r3
 800903e:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	4313      	orrs	r3, r2
 8009046:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800904a:	4313      	orrs	r3, r2
 800904c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
					Sperading_Factor = DATA_FROM_LOCAL_t[12];
 8009050:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8009054:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					Band_Width = (((uint16_t)DATA_FROM_LOCAL_t[13])<<8)|((uint16_t)DATA_FROM_LOCAL_t[14]);
 8009058:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	b21a      	sxth	r2, r3
 8009060:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8009064:	b21b      	sxth	r3, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	b21b      	sxth	r3, r3
 800906a:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
					switch(Band_Width)
 800906e:	f8b7 32cc 	ldrh.w	r3, [r7, #716]	; 0x2cc
 8009072:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009076:	f000 808a 	beq.w	800918e <Start_RCU_RECEIVE+0xa6e>
 800907a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800907e:	f300 80ae 	bgt.w	80091de <Start_RCU_RECEIVE+0xabe>
 8009082:	2bfa      	cmp	r3, #250	; 0xfa
 8009084:	f000 8087 	beq.w	8009196 <Start_RCU_RECEIVE+0xa76>
 8009088:	2bfa      	cmp	r3, #250	; 0xfa
 800908a:	f300 80a8 	bgt.w	80091de <Start_RCU_RECEIVE+0xabe>
 800908e:	2b3e      	cmp	r3, #62	; 0x3e
 8009090:	dc7a      	bgt.n	8009188 <Start_RCU_RECEIVE+0xa68>
 8009092:	2b07      	cmp	r3, #7
 8009094:	f2c0 80a3 	blt.w	80091de <Start_RCU_RECEIVE+0xabe>
 8009098:	3b07      	subs	r3, #7
 800909a:	2b37      	cmp	r3, #55	; 0x37
 800909c:	f200 809f 	bhi.w	80091de <Start_RCU_RECEIVE+0xabe>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <Start_RCU_RECEIVE+0x988>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080091d7 	.word	0x080091d7
 80090ac:	080091df 	.word	0x080091df
 80090b0:	080091df 	.word	0x080091df
 80090b4:	080091cf 	.word	0x080091cf
 80090b8:	080091df 	.word	0x080091df
 80090bc:	080091df 	.word	0x080091df
 80090c0:	080091df 	.word	0x080091df
 80090c4:	080091df 	.word	0x080091df
 80090c8:	080091c7 	.word	0x080091c7
 80090cc:	080091df 	.word	0x080091df
 80090d0:	080091df 	.word	0x080091df
 80090d4:	080091df 	.word	0x080091df
 80090d8:	080091df 	.word	0x080091df
 80090dc:	080091bf 	.word	0x080091bf
 80090e0:	080091df 	.word	0x080091df
 80090e4:	080091df 	.word	0x080091df
 80090e8:	080091df 	.word	0x080091df
 80090ec:	080091df 	.word	0x080091df
 80090f0:	080091df 	.word	0x080091df
 80090f4:	080091df 	.word	0x080091df
 80090f8:	080091df 	.word	0x080091df
 80090fc:	080091df 	.word	0x080091df
 8009100:	080091df 	.word	0x080091df
 8009104:	080091df 	.word	0x080091df
 8009108:	080091b7 	.word	0x080091b7
 800910c:	080091df 	.word	0x080091df
 8009110:	080091df 	.word	0x080091df
 8009114:	080091df 	.word	0x080091df
 8009118:	080091df 	.word	0x080091df
 800911c:	080091df 	.word	0x080091df
 8009120:	080091df 	.word	0x080091df
 8009124:	080091df 	.word	0x080091df
 8009128:	080091df 	.word	0x080091df
 800912c:	080091df 	.word	0x080091df
 8009130:	080091af 	.word	0x080091af
 8009134:	080091df 	.word	0x080091df
 8009138:	080091df 	.word	0x080091df
 800913c:	080091df 	.word	0x080091df
 8009140:	080091df 	.word	0x080091df
 8009144:	080091df 	.word	0x080091df
 8009148:	080091df 	.word	0x080091df
 800914c:	080091df 	.word	0x080091df
 8009150:	080091df 	.word	0x080091df
 8009154:	080091df 	.word	0x080091df
 8009158:	080091df 	.word	0x080091df
 800915c:	080091df 	.word	0x080091df
 8009160:	080091df 	.word	0x080091df
 8009164:	080091df 	.word	0x080091df
 8009168:	080091df 	.word	0x080091df
 800916c:	080091df 	.word	0x080091df
 8009170:	080091df 	.word	0x080091df
 8009174:	080091df 	.word	0x080091df
 8009178:	080091df 	.word	0x080091df
 800917c:	080091df 	.word	0x080091df
 8009180:	080091df 	.word	0x080091df
 8009184:	080091a7 	.word	0x080091a7
 8009188:	2b7d      	cmp	r3, #125	; 0x7d
 800918a:	d008      	beq.n	800919e <Start_RCU_RECEIVE+0xa7e>
 800918c:	e027      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					{
					case 500:
						Band_Width = 6;
 800918e:	2306      	movs	r3, #6
 8009190:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 8009194:	e023      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 250:
						Band_Width = 5;
 8009196:	2305      	movs	r3, #5
 8009198:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 800919c:	e01f      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 125:
						Band_Width = 4;
 800919e:	2304      	movs	r3, #4
 80091a0:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091a4:	e01b      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 62:
						Band_Width = 3;
 80091a6:	2303      	movs	r3, #3
 80091a8:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091ac:	e017      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 41:
						Band_Width = 10;
 80091ae:	230a      	movs	r3, #10
 80091b0:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091b4:	e013      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 31:
						Band_Width = 2;
 80091b6:	2302      	movs	r3, #2
 80091b8:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091bc:	e00f      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 20:
						Band_Width = 9;
 80091be:	2309      	movs	r3, #9
 80091c0:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091c4:	e00b      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 15:
						Band_Width = 1;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091cc:	e007      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 10:
						Band_Width = 8;
 80091ce:	2308      	movs	r3, #8
 80091d0:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091d4:	e003      	b.n	80091de <Start_RCU_RECEIVE+0xabe>
					case 7:
						Band_Width = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	f8a7 32cc 	strh.w	r3, [r7, #716]	; 0x2cc
						break;
 80091dc:	bf00      	nop
					}
					CR = DATA_FROM_LOCAL_t[15];
 80091de:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80091e2:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
					switch(CR)
 80091e6:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80091ea:	3b2d      	subs	r3, #45	; 0x2d
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d81b      	bhi.n	8009228 <Start_RCU_RECEIVE+0xb08>
 80091f0:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <Start_RCU_RECEIVE+0xad8>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	08009209 	.word	0x08009209
 80091fc:	08009211 	.word	0x08009211
 8009200:	08009219 	.word	0x08009219
 8009204:	08009221 	.word	0x08009221
					{
					case 45:
						CR =1 ;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
						break;
 800920e:	e00b      	b.n	8009228 <Start_RCU_RECEIVE+0xb08>
					case 46:
						CR =2 ;
 8009210:	2302      	movs	r3, #2
 8009212:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
						break;
 8009216:	e007      	b.n	8009228 <Start_RCU_RECEIVE+0xb08>
					case 47:
						CR =3 ;
 8009218:	2303      	movs	r3, #3
 800921a:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
						break;
 800921e:	e003      	b.n	8009228 <Start_RCU_RECEIVE+0xb08>
					case 48:
						CR =4 ;
 8009220:	2304      	movs	r3, #4
 8009222:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
						break;
 8009226:	bf00      	nop
					}
					RADIO_RESET();
 8009228:	f7f7 fe5e 	bl	8000ee8 <RADIO_RESET>
					RADIO_START(LORA_DEVICE);
 800922c:	2000      	movs	r0, #0
 800922e:	f7f7 fe9b 	bl	8000f68 <RADIO_START>
					osDelay(1000);
 8009232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009236:	f00e f8f6 	bl	8017426 <osDelay>
					RADIO_SETUP_LORA(frequency_t, offset_t, Sperading_Factor, Band_Width, CR, LDRO_OFF);
 800923a:	f8d7 1268 	ldr.w	r1, [r7, #616]	; 0x268
 800923e:	f8b7 32cc 	ldrh.w	r3, [r7, #716]	; 0x2cc
 8009242:	b2d8      	uxtb	r0, r3
 8009244:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8009248:	2300      	movs	r3, #0
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	4603      	mov	r3, r0
 8009254:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 8009258:	f7f7 fe99 	bl	8000f8e <RADIO_SETUP_LORA>
					flashmsg = osPoolAlloc(flashpool);
 800925c:	4bc3      	ldr	r3, [pc, #780]	; (800956c <Start_RCU_RECEIVE+0xe4c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f00e fa06 	bl	8017672 <osPoolAlloc>
 8009266:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					flashmsg->FLASH_DATA_t[0] = LORA_PARAMETERS;
 800926a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800926e:	22ba      	movs	r2, #186	; 0xba
 8009270:	701a      	strb	r2, [r3, #0]
					for(int i =1;i<13;i++)
 8009272:	2301      	movs	r3, #1
 8009274:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8009278:	e013      	b.n	80092a2 <Start_RCU_RECEIVE+0xb82>
					{
						flashmsg->FLASH_DATA_t[i] = DATA_FROM_LOCAL_t[i+3];
 800927a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800927e:	3303      	adds	r3, #3
 8009280:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8009284:	443b      	add	r3, r7
 8009286:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 800928a:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800928e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8009292:	4413      	add	r3, r2
 8009294:	460a      	mov	r2, r1
 8009296:	701a      	strb	r2, [r3, #0]
					for(int i =1;i<13;i++)
 8009298:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800929c:	3301      	adds	r3, #1
 800929e:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 80092a2:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80092a6:	2b0c      	cmp	r3, #12
 80092a8:	dde7      	ble.n	800927a <Start_RCU_RECEIVE+0xb5a>
					}
					osMessagePut(FLASH_DATAHandle, (uint32_t)flashmsg,100);
 80092aa:	4bb1      	ldr	r3, [pc, #708]	; (8009570 <Start_RCU_RECEIVE+0xe50>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 80092b2:	2264      	movs	r2, #100	; 0x64
 80092b4:	4618      	mov	r0, r3
 80092b6:	f00e faa9 	bl	801780c <osMessagePut>
					state = 0;
 80092ba:	4bae      	ldr	r3, [pc, #696]	; (8009574 <Start_RCU_RECEIVE+0xe54>)
 80092bc:	2200      	movs	r2, #0
 80092be:	601a      	str	r2, [r3, #0]
				break;
 80092c0:	f000 bc4d 	b.w	8009b5e <Start_RCU_RECEIVE+0x143e>

				case SEARCHING_DEVICES:
					memset(DATA_FROM_LOCAL_t,0xFF,BUFFER_SIZE_ALL);
 80092c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092c8:	22c8      	movs	r2, #200	; 0xc8
 80092ca:	21ff      	movs	r1, #255	; 0xff
 80092cc:	4618      	mov	r0, r3
 80092ce:	f011 ffa0 	bl	801b212 <memset>
					switch(Running_Status)
 80092d2:	4ba9      	ldr	r3, [pc, #676]	; (8009578 <Start_RCU_RECEIVE+0xe58>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <Start_RCU_RECEIVE+0xbc0>
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d033      	beq.n	8009346 <Start_RCU_RECEIVE+0xc26>
 80092de:	e091      	b.n	8009404 <Start_RCU_RECEIVE+0xce4>
					{
					case FIRST_TIME:
						DATA_SENDING_TO_RCU_t[0]=LORA_BIT;
 80092e0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80092e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80092e8:	2201      	movs	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
						DATA_SENDING_TO_RCU_t[1]=MODEM_REPLY_BIT;
 80092ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80092f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80092f4:	2204      	movs	r2, #4
 80092f6:	705a      	strb	r2, [r3, #1]
						DATA_SENDING_TO_RCU_t[3]=SEARCH_IDs;
 80092f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80092fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009300:	220a      	movs	r2, #10
 8009302:	70da      	strb	r2, [r3, #3]
						DATA_SENDING_TO_RCU_t[4]=MY_TCU_ID;
 8009304:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009308:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800930c:	2204      	movs	r2, #4
 800930e:	711a      	strb	r2, [r3, #4]
						CRC_VALUE_OF_DATA_FOR_RCU_t  = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_SENDING_TO_RCU_t,(BUFFER_SIZE_ALL-1));
 8009310:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009314:	22c7      	movs	r2, #199	; 0xc7
 8009316:	4619      	mov	r1, r3
 8009318:	4898      	ldr	r0, [pc, #608]	; (800957c <Start_RCU_RECEIVE+0xe5c>)
 800931a:	f007 fd3f 	bl	8010d9c <HAL_CRC_Calculate>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
						DATA_SENDING_TO_RCU_t[(BUFFER_SIZE_ALL-1)]=CRC_VALUE_OF_DATA_FOR_RCU_t ;
 8009324:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009328:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800932c:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 8009330:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
						HAL_UART_Transmit(&huart6, DATA_SENDING_TO_RCU_t, 200,1000);
 8009334:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800933c:	22c8      	movs	r2, #200	; 0xc8
 800933e:	4890      	ldr	r0, [pc, #576]	; (8009580 <Start_RCU_RECEIVE+0xe60>)
 8009340:	f00c fd26 	bl	8015d90 <HAL_UART_Transmit>

					break;
 8009344:	e05e      	b.n	8009404 <Start_RCU_RECEIVE+0xce4>

					case RUNNING:
						DATA_SENDING_TO_RCU_t[0]=LORA_BIT;
 8009346:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800934a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]
						DATA_SENDING_TO_RCU_t[1]=MODEM_REPLY_BIT;
 8009352:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009356:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800935a:	2204      	movs	r2, #4
 800935c:	705a      	strb	r2, [r3, #1]
						DATA_SENDING_TO_RCU_t[3]=RUNNING_SEARCH;
 800935e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009362:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009366:	22aa      	movs	r2, #170	; 0xaa
 8009368:	70da      	strb	r2, [r3, #3]
						DATA_SENDING_TO_RCU_t[4]=MY_TCU_ID;
 800936a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800936e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009372:	2204      	movs	r2, #4
 8009374:	711a      	strb	r2, [r3, #4]
						DATA_SENDING_TO_RCU_t[5] = ID_S_PRESENT[0];
 8009376:	4b83      	ldr	r3, [pc, #524]	; (8009584 <Start_RCU_RECEIVE+0xe64>)
 8009378:	781a      	ldrb	r2, [r3, #0]
 800937a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800937e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009382:	715a      	strb	r2, [r3, #5]
						DATA_SENDING_TO_RCU_t[6] = ID_S_PRESENT[1];
 8009384:	4b7f      	ldr	r3, [pc, #508]	; (8009584 <Start_RCU_RECEIVE+0xe64>)
 8009386:	785a      	ldrb	r2, [r3, #1]
 8009388:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800938c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009390:	719a      	strb	r2, [r3, #6]
						DATA_SENDING_TO_RCU_t[7] = ID_S_PRESENT[2];
 8009392:	4b7c      	ldr	r3, [pc, #496]	; (8009584 <Start_RCU_RECEIVE+0xe64>)
 8009394:	789a      	ldrb	r2, [r3, #2]
 8009396:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800939a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800939e:	71da      	strb	r2, [r3, #7]
						DATA_SENDING_TO_RCU_t[8] = START_STOP_STATE;
 80093a0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80093a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80093a8:	229a      	movs	r2, #154	; 0x9a
 80093aa:	721a      	strb	r2, [r3, #8]
						DATA_SENDING_TO_RCU_t[9] = START_CONDITION;
 80093ac:	4b76      	ldr	r3, [pc, #472]	; (8009588 <Start_RCU_RECEIVE+0xe68>)
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80093b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80093b8:	725a      	strb	r2, [r3, #9]
						DATA_SENDING_TO_RCU_t[10] = MODE_CONDITION;
 80093ba:	4b74      	ldr	r3, [pc, #464]	; (800958c <Start_RCU_RECEIVE+0xe6c>)
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80093c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80093c6:	729a      	strb	r2, [r3, #10]
						CRC_VALUE_OF_DATA_FOR_RCU_t  = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_SENDING_TO_RCU_t,(BUFFER_SIZE_ALL-1));
 80093c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093cc:	22c7      	movs	r2, #199	; 0xc7
 80093ce:	4619      	mov	r1, r3
 80093d0:	486a      	ldr	r0, [pc, #424]	; (800957c <Start_RCU_RECEIVE+0xe5c>)
 80093d2:	f007 fce3 	bl	8010d9c <HAL_CRC_Calculate>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
						DATA_SENDING_TO_RCU_t[(BUFFER_SIZE_ALL-1)]=CRC_VALUE_OF_DATA_FOR_RCU_t ;
 80093dc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80093e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80093e4:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 80093e8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
						HAL_UART_Transmit(&huart6, DATA_SENDING_TO_RCU_t, 200,1000);
 80093ec:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80093f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093f4:	22c8      	movs	r2, #200	; 0xc8
 80093f6:	4862      	ldr	r0, [pc, #392]	; (8009580 <Start_RCU_RECEIVE+0xe60>)
 80093f8:	f00c fcca 	bl	8015d90 <HAL_UART_Transmit>
						Running_Status = RUNNING;
 80093fc:	4b5e      	ldr	r3, [pc, #376]	; (8009578 <Start_RCU_RECEIVE+0xe58>)
 80093fe:	2201      	movs	r2, #1
 8009400:	601a      	str	r2, [r3, #0]
					break;
 8009402:	bf00      	nop
					}
					state = 0;
 8009404:	4b5b      	ldr	r3, [pc, #364]	; (8009574 <Start_RCU_RECEIVE+0xe54>)
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
				break;
 800940a:	e3a8      	b.n	8009b5e <Start_RCU_RECEIVE+0x143e>
				case MASTER_SLAVE_CONFIG:
				if((DATA_FROM_LOCAL_t[4]==MY_TCU_ID)||(DATA_FROM_LOCAL_t[6]==MY_TCU_ID)||(DATA_FROM_LOCAL_t[8]==MY_TCU_ID)||(DATA_FROM_LOCAL_t[10]==MY_TCU_ID))
 800940c:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8009410:	2b04      	cmp	r3, #4
 8009412:	d00c      	beq.n	800942e <Start_RCU_RECEIVE+0xd0e>
 8009414:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8009418:	2b04      	cmp	r3, #4
 800941a:	d008      	beq.n	800942e <Start_RCU_RECEIVE+0xd0e>
 800941c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8009420:	2b04      	cmp	r3, #4
 8009422:	d004      	beq.n	800942e <Start_RCU_RECEIVE+0xd0e>
 8009424:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8009428:	2b04      	cmp	r3, #4
 800942a:	f040 8172 	bne.w	8009712 <Start_RCU_RECEIVE+0xff2>
				{
				if(DATA_FROM_LOCAL_t[4]==MY_TCU_ID)
 800942e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8009432:	2b04      	cmp	r3, #4
 8009434:	d14e      	bne.n	80094d4 <Start_RCU_RECEIVE+0xdb4>
				{
				if(DATA_FROM_LOCAL_t[5]==I_AM_MASTER)
 8009436:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800943a:	2b0a      	cmp	r3, #10
 800943c:	d143      	bne.n	80094c6 <Start_RCU_RECEIVE+0xda6>
				{
					I_AM = I_AM_MASTER;
 800943e:	4b54      	ldr	r3, [pc, #336]	; (8009590 <Start_RCU_RECEIVE+0xe70>)
 8009440:	220a      	movs	r2, #10
 8009442:	701a      	strb	r2, [r3, #0]
					ID_S[0]=DATA_FROM_LOCAL_t[6];
 8009444:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8009448:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800944c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009450:	701a      	strb	r2, [r3, #0]
					ID_S[1]=DATA_FROM_LOCAL_t[8];
 8009452:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8009456:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800945a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800945e:	705a      	strb	r2, [r3, #1]
					ID_S[2]=DATA_FROM_LOCAL_t[10];
 8009460:	f897 2212 	ldrb.w	r2, [r7, #530]	; 0x212
 8009464:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009468:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800946c:	709a      	strb	r2, [r3, #2]
					idmsg = osPoolAlloc(slaveidpool);
 800946e:	4b49      	ldr	r3, [pc, #292]	; (8009594 <Start_RCU_RECEIVE+0xe74>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f00e f8fd 	bl	8017672 <osPoolAlloc>
 8009478:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
					for(int i =0;i<3;i++)
 800947c:	2300      	movs	r3, #0
 800947e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8009482:	e013      	b.n	80094ac <Start_RCU_RECEIVE+0xd8c>
					{
					  idmsg->SLAVE_ID[i] = ID_S[i];
 8009484:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009488:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 800948c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8009490:	4413      	add	r3, r2
 8009492:	7819      	ldrb	r1, [r3, #0]
 8009494:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8009498:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800949c:	4413      	add	r3, r2
 800949e:	460a      	mov	r2, r1
 80094a0:	701a      	strb	r2, [r3, #0]
					for(int i =0;i<3;i++)
 80094a2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80094a6:	3301      	adds	r3, #1
 80094a8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80094ac:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	dde7      	ble.n	8009484 <Start_RCU_RECEIVE+0xd64>
					}
					osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 80094b4:	4b38      	ldr	r3, [pc, #224]	; (8009598 <Start_RCU_RECEIVE+0xe78>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 80094bc:	2264      	movs	r2, #100	; 0x64
 80094be:	4618      	mov	r0, r3
 80094c0:	f00e f9a4 	bl	801780c <osMessagePut>
 80094c4:	e006      	b.n	80094d4 <Start_RCU_RECEIVE+0xdb4>
				}
				else if(DATA_FROM_LOCAL_t[5]==I_AM_SLAVE)
 80094c6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80094ca:	2b0b      	cmp	r3, #11
 80094cc:	d102      	bne.n	80094d4 <Start_RCU_RECEIVE+0xdb4>
				{
					  I_AM = I_AM_SLAVE;
 80094ce:	4b30      	ldr	r3, [pc, #192]	; (8009590 <Start_RCU_RECEIVE+0xe70>)
 80094d0:	220b      	movs	r2, #11
 80094d2:	701a      	strb	r2, [r3, #0]
				}
				}
				if(DATA_FROM_LOCAL_t[8]==MY_TCU_ID)
 80094d4:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d166      	bne.n	80095aa <Start_RCU_RECEIVE+0xe8a>
				{
				if(DATA_FROM_LOCAL_t[9]==I_AM_MASTER)
 80094dc:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80094e0:	2b0a      	cmp	r3, #10
 80094e2:	d15b      	bne.n	800959c <Start_RCU_RECEIVE+0xe7c>
				{
					  I_AM = I_AM_MASTER;
 80094e4:	4b2a      	ldr	r3, [pc, #168]	; (8009590 <Start_RCU_RECEIVE+0xe70>)
 80094e6:	220a      	movs	r2, #10
 80094e8:	701a      	strb	r2, [r3, #0]
					  ID_S[0]=DATA_FROM_LOCAL_t[4];
 80094ea:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80094ee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80094f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80094f6:	701a      	strb	r2, [r3, #0]
					  ID_S[1]=DATA_FROM_LOCAL_t[6];
 80094f8:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80094fc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009500:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009504:	705a      	strb	r2, [r3, #1]
					  ID_S[2]=DATA_FROM_LOCAL_t[10];
 8009506:	f897 2212 	ldrb.w	r2, [r7, #530]	; 0x212
 800950a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800950e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009512:	709a      	strb	r2, [r3, #2]
					  idmsg = osPoolAlloc(slaveidpool);
 8009514:	4b1f      	ldr	r3, [pc, #124]	; (8009594 <Start_RCU_RECEIVE+0xe74>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f00e f8aa 	bl	8017672 <osPoolAlloc>
 800951e:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
					  for(int i =0;i<3;i++)
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8009528:	e013      	b.n	8009552 <Start_RCU_RECEIVE+0xe32>
					  {
						  idmsg->SLAVE_ID[i] = ID_S[i];
 800952a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800952e:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8009532:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009536:	4413      	add	r3, r2
 8009538:	7819      	ldrb	r1, [r3, #0]
 800953a:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 800953e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009542:	4413      	add	r3, r2
 8009544:	460a      	mov	r2, r1
 8009546:	701a      	strb	r2, [r3, #0]
					  for(int i =0;i<3;i++)
 8009548:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800954c:	3301      	adds	r3, #1
 800954e:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8009552:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009556:	2b02      	cmp	r3, #2
 8009558:	dde7      	ble.n	800952a <Start_RCU_RECEIVE+0xe0a>
					  }
					  osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 800955a:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <Start_RCU_RECEIVE+0xe78>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 8009562:	2264      	movs	r2, #100	; 0x64
 8009564:	4618      	mov	r0, r3
 8009566:	f00e f951 	bl	801780c <osMessagePut>
 800956a:	e01e      	b.n	80095aa <Start_RCU_RECEIVE+0xe8a>
 800956c:	200015cc 	.word	0x200015cc
 8009570:	20001e70 	.word	0x20001e70
 8009574:	20002aa8 	.word	0x20002aa8
 8009578:	20001fa4 	.word	0x20001fa4
 800957c:	20001718 	.word	0x20001718
 8009580:	20001bac 	.word	0x20001bac
 8009584:	20001f54 	.word	0x20001f54
 8009588:	20001e91 	.word	0x20001e91
 800958c:	20001e92 	.word	0x20001e92
 8009590:	20000009 	.word	0x20000009
 8009594:	200015d4 	.word	0x200015d4
 8009598:	20001e20 	.word	0x20001e20
				 }
				 else if(DATA_FROM_LOCAL_t[9]==I_AM_SLAVE)
 800959c:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 80095a0:	2b0b      	cmp	r3, #11
 80095a2:	d102      	bne.n	80095aa <Start_RCU_RECEIVE+0xe8a>
				 {
					  I_AM = I_AM_SLAVE;
 80095a4:	4bd0      	ldr	r3, [pc, #832]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 80095a6:	220b      	movs	r2, #11
 80095a8:	701a      	strb	r2, [r3, #0]
				 }
				}
				if(DATA_FROM_LOCAL_t[6]==MY_TCU_ID)
 80095aa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d14e      	bne.n	8009650 <Start_RCU_RECEIVE+0xf30>
				{
				if(DATA_FROM_LOCAL_t[7]==I_AM_MASTER)
 80095b2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80095b6:	2b0a      	cmp	r3, #10
 80095b8:	d143      	bne.n	8009642 <Start_RCU_RECEIVE+0xf22>
				{
					  I_AM = I_AM_MASTER;
 80095ba:	4bcb      	ldr	r3, [pc, #812]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 80095bc:	220a      	movs	r2, #10
 80095be:	701a      	strb	r2, [r3, #0]
					  ID_S[0]=DATA_FROM_LOCAL_t[4];
 80095c0:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 80095c4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80095c8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80095cc:	701a      	strb	r2, [r3, #0]
					  ID_S[1]=DATA_FROM_LOCAL_t[8];
 80095ce:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 80095d2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80095d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80095da:	705a      	strb	r2, [r3, #1]
					  ID_S[2]=DATA_FROM_LOCAL_t[10];
 80095dc:	f897 2212 	ldrb.w	r2, [r7, #530]	; 0x212
 80095e0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80095e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80095e8:	709a      	strb	r2, [r3, #2]
					  idmsg = osPoolAlloc(slaveidpool);
 80095ea:	4bc0      	ldr	r3, [pc, #768]	; (80098ec <Start_RCU_RECEIVE+0x11cc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f00e f83f 	bl	8017672 <osPoolAlloc>
 80095f4:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
					  for(int i =0;i<3;i++)
 80095f8:	2300      	movs	r3, #0
 80095fa:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80095fe:	e013      	b.n	8009628 <Start_RCU_RECEIVE+0xf08>
					  {
						  idmsg->SLAVE_ID[i] = ID_S[i];
 8009600:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009604:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8009608:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800960c:	4413      	add	r3, r2
 800960e:	7819      	ldrb	r1, [r3, #0]
 8009610:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8009614:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8009618:	4413      	add	r3, r2
 800961a:	460a      	mov	r2, r1
 800961c:	701a      	strb	r2, [r3, #0]
					  for(int i =0;i<3;i++)
 800961e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8009622:	3301      	adds	r3, #1
 8009624:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8009628:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800962c:	2b02      	cmp	r3, #2
 800962e:	dde7      	ble.n	8009600 <Start_RCU_RECEIVE+0xee0>
					  }
					  osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 8009630:	4baf      	ldr	r3, [pc, #700]	; (80098f0 <Start_RCU_RECEIVE+0x11d0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 8009638:	2264      	movs	r2, #100	; 0x64
 800963a:	4618      	mov	r0, r3
 800963c:	f00e f8e6 	bl	801780c <osMessagePut>
 8009640:	e006      	b.n	8009650 <Start_RCU_RECEIVE+0xf30>
				 }
				 else if(DATA_FROM_LOCAL_t[7]==I_AM_SLAVE)
 8009642:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8009646:	2b0b      	cmp	r3, #11
 8009648:	d102      	bne.n	8009650 <Start_RCU_RECEIVE+0xf30>
				 {
					  I_AM = I_AM_SLAVE;
 800964a:	4ba7      	ldr	r3, [pc, #668]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 800964c:	220b      	movs	r2, #11
 800964e:	701a      	strb	r2, [r3, #0]
				 }
				}
				if(DATA_FROM_LOCAL_t[10]==MY_TCU_ID)
 8009650:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8009654:	2b04      	cmp	r3, #4
 8009656:	d14e      	bne.n	80096f6 <Start_RCU_RECEIVE+0xfd6>
				{
				if(DATA_FROM_LOCAL_t[11]==I_AM_MASTER)
 8009658:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 800965c:	2b0a      	cmp	r3, #10
 800965e:	d143      	bne.n	80096e8 <Start_RCU_RECEIVE+0xfc8>
				{
					  I_AM = I_AM_MASTER;
 8009660:	4ba1      	ldr	r3, [pc, #644]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 8009662:	220a      	movs	r2, #10
 8009664:	701a      	strb	r2, [r3, #0]
					  ID_S[0]=DATA_FROM_LOCAL_t[6];
 8009666:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800966a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800966e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009672:	701a      	strb	r2, [r3, #0]
					  ID_S[1]=DATA_FROM_LOCAL_t[8];
 8009674:	f897 2210 	ldrb.w	r2, [r7, #528]	; 0x210
 8009678:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800967c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009680:	705a      	strb	r2, [r3, #1]
					  ID_S[2]=DATA_FROM_LOCAL_t[4];
 8009682:	f897 220c 	ldrb.w	r2, [r7, #524]	; 0x20c
 8009686:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800968a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800968e:	709a      	strb	r2, [r3, #2]
					  idmsg = osPoolAlloc(slaveidpool);
 8009690:	4b96      	ldr	r3, [pc, #600]	; (80098ec <Start_RCU_RECEIVE+0x11cc>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f00d ffec 	bl	8017672 <osPoolAlloc>
 800969a:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
					  for(int i =0;i<3;i++)
 800969e:	2300      	movs	r3, #0
 80096a0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80096a4:	e013      	b.n	80096ce <Start_RCU_RECEIVE+0xfae>
					  {
						  idmsg->SLAVE_ID[i] = ID_S[i];
 80096a6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80096aa:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 80096ae:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80096b2:	4413      	add	r3, r2
 80096b4:	7819      	ldrb	r1, [r3, #0]
 80096b6:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80096ba:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80096be:	4413      	add	r3, r2
 80096c0:	460a      	mov	r2, r1
 80096c2:	701a      	strb	r2, [r3, #0]
					  for(int i =0;i<3;i++)
 80096c4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80096c8:	3301      	adds	r3, #1
 80096ca:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80096ce:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	dde7      	ble.n	80096a6 <Start_RCU_RECEIVE+0xf86>
					  }
					  osMessagePut(SLAVE_ID_qHandle, (uint32_t)idmsg,100);
 80096d6:	4b86      	ldr	r3, [pc, #536]	; (80098f0 <Start_RCU_RECEIVE+0x11d0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 80096de:	2264      	movs	r2, #100	; 0x64
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00e f893 	bl	801780c <osMessagePut>
 80096e6:	e006      	b.n	80096f6 <Start_RCU_RECEIVE+0xfd6>
				 }
				 else if(DATA_FROM_LOCAL_t[11]==I_AM_SLAVE)
 80096e8:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 80096ec:	2b0b      	cmp	r3, #11
 80096ee:	d102      	bne.n	80096f6 <Start_RCU_RECEIVE+0xfd6>
				 {
					  I_AM = I_AM_SLAVE;
 80096f0:	4b7d      	ldr	r3, [pc, #500]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 80096f2:	220b      	movs	r2, #11
 80096f4:	701a      	strb	r2, [r3, #0]
				 }
				}
				if(I_AM == I_AM_MASTER)
 80096f6:	4b7c      	ldr	r3, [pc, #496]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b0a      	cmp	r3, #10
 80096fc:	d102      	bne.n	8009704 <Start_RCU_RECEIVE+0xfe4>
				{
				  WHOM_TO_GIVE_DATA = LOCAL_SYSTEM;
 80096fe:	4b7d      	ldr	r3, [pc, #500]	; (80098f4 <Start_RCU_RECEIVE+0x11d4>)
 8009700:	2202      	movs	r2, #2
 8009702:	601a      	str	r2, [r3, #0]
				}
				if(I_AM == I_AM_SLAVE)
 8009704:	4b78      	ldr	r3, [pc, #480]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b0b      	cmp	r3, #11
 800970a:	d102      	bne.n	8009712 <Start_RCU_RECEIVE+0xff2>
				{
				  WHOM_TO_GIVE_DATA = MAS_SLAVE_SYSTEM;
 800970c:	4b79      	ldr	r3, [pc, #484]	; (80098f4 <Start_RCU_RECEIVE+0x11d4>)
 800970e:	2204      	movs	r2, #4
 8009710:	601a      	str	r2, [r3, #0]
				}
				}
				state = 0;
 8009712:	4b79      	ldr	r3, [pc, #484]	; (80098f8 <Start_RCU_RECEIVE+0x11d8>)
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]
				break;
 8009718:	e221      	b.n	8009b5e <Start_RCU_RECEIVE+0x143e>

				case PROCESS_DATA:
				for(int i =0;i<49;i++)
 800971a:	2300      	movs	r3, #0
 800971c:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8009720:	e015      	b.n	800974e <Start_RCU_RECEIVE+0x102e>
				{
				DATA_FOR_PROCESSING[i] = DATA_FROM_LOCAL_t[i+1];
 8009722:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009726:	3301      	adds	r3, #1
 8009728:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800972c:	443b      	add	r3, r7
 800972e:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 8009732:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009736:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 800973a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800973e:	4413      	add	r3, r2
 8009740:	460a      	mov	r2, r1
 8009742:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<49;i++)
 8009744:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009748:	3301      	adds	r3, #1
 800974a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800974e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009752:	2b30      	cmp	r3, #48	; 0x30
 8009754:	dde5      	ble.n	8009722 <Start_RCU_RECEIVE+0x1002>
				}
				DATA_FOR_PROCESSING[0] = MASTER_BIT;
 8009756:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800975a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800975e:	2202      	movs	r2, #2
 8009760:	701a      	strb	r2, [r3, #0]
				DATA_FOR_PROCESSING[49] = 0x00;
 8009762:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009766:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				syspromsg = osPoolAlloc(syspropool);
 8009770:	4b62      	ldr	r3, [pc, #392]	; (80098fc <Start_RCU_RECEIVE+0x11dc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4618      	mov	r0, r3
 8009776:	f00d ff7c 	bl	8017672 <osPoolAlloc>
 800977a:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
				for(int i =0;i<50;i++)
 800977e:	2300      	movs	r3, #0
 8009780:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8009784:	e013      	b.n	80097ae <Start_RCU_RECEIVE+0x108e>
				{
				syspromsg->DATA_TO_PROCESS[i] = DATA_FOR_PROCESSING[i];
 8009786:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800978a:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 800978e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8009792:	4413      	add	r3, r2
 8009794:	7819      	ldrb	r1, [r3, #0]
 8009796:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800979a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800979e:	4413      	add	r3, r2
 80097a0:	460a      	mov	r2, r1
 80097a2:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<50;i++)
 80097a4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80097a8:	3301      	adds	r3, #1
 80097aa:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80097ae:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80097b2:	2b31      	cmp	r3, #49	; 0x31
 80097b4:	dde7      	ble.n	8009786 <Start_RCU_RECEIVE+0x1066>
				}
				osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 80097b6:	4b52      	ldr	r3, [pc, #328]	; (8009900 <Start_RCU_RECEIVE+0x11e0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80097be:	2264      	movs	r2, #100	; 0x64
 80097c0:	4618      	mov	r0, r3
 80097c2:	f00e f823 	bl	801780c <osMessagePut>
				if((DATA_FROM_LOCAL_t[3] == CLOSE_LOOP_START)||(DATA_FROM_LOCAL_t[3] == OPEN_LOOP_START)||(DATA_FROM_LOCAL_t[3] == SLEEP))
 80097c6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80097ca:	2b07      	cmp	r3, #7
 80097cc:	d007      	beq.n	80097de <Start_RCU_RECEIVE+0x10be>
 80097ce:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80097d2:	2b0d      	cmp	r3, #13
 80097d4:	d003      	beq.n	80097de <Start_RCU_RECEIVE+0x10be>
 80097d6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80097da:	2bf0      	cmp	r3, #240	; 0xf0
 80097dc:	d155      	bne.n	800988a <Start_RCU_RECEIVE+0x116a>
				{
				  for(int i =0;i<49;i++)
 80097de:	2300      	movs	r3, #0
 80097e0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80097e4:	e015      	b.n	8009812 <Start_RCU_RECEIVE+0x10f2>
				  {
					  DATA_FOR_PROCESSING[i] = DATA_FROM_LOCAL_t[i+1];
 80097e6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80097ea:	3301      	adds	r3, #1
 80097ec:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80097f0:	443b      	add	r3, r7
 80097f2:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 80097f6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80097fa:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 80097fe:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009802:	4413      	add	r3, r2
 8009804:	460a      	mov	r2, r1
 8009806:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<49;i++)
 8009808:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800980c:	3301      	adds	r3, #1
 800980e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8009812:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009816:	2b30      	cmp	r3, #48	; 0x30
 8009818:	dde5      	ble.n	80097e6 <Start_RCU_RECEIVE+0x10c6>
				  }
				  DATA_FOR_PROCESSING[0] = MASTER_BIT;
 800981a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800981e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009822:	2202      	movs	r2, #2
 8009824:	701a      	strb	r2, [r3, #0]
				  DATA_FOR_PROCESSING[49] = 0x00;
 8009826:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800982a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				  slavemsg = osPoolAlloc(slavesendpool);
 8009834:	4b33      	ldr	r3, [pc, #204]	; (8009904 <Start_RCU_RECEIVE+0x11e4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f00d ff1a 	bl	8017672 <osPoolAlloc>
 800983e:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
				  for(int i =0;i<50;i++)
 8009842:	2300      	movs	r3, #0
 8009844:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8009848:	e013      	b.n	8009872 <Start_RCU_RECEIVE+0x1152>
				  {
					  slavemsg->SLAVE_DATA[i] = DATA_FOR_PROCESSING[i];
 800984a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800984e:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8009852:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8009856:	4413      	add	r3, r2
 8009858:	7819      	ldrb	r1, [r3, #0]
 800985a:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 800985e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8009862:	4413      	add	r3, r2
 8009864:	460a      	mov	r2, r1
 8009866:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<50;i++)
 8009868:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800986c:	3301      	adds	r3, #1
 800986e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8009872:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8009876:	2b31      	cmp	r3, #49	; 0x31
 8009878:	dde7      	ble.n	800984a <Start_RCU_RECEIVE+0x112a>
				  }
				  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800987a:	4b23      	ldr	r3, [pc, #140]	; (8009908 <Start_RCU_RECEIVE+0x11e8>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8009882:	2264      	movs	r2, #100	; 0x64
 8009884:	4618      	mov	r0, r3
 8009886:	f00d ffc1 	bl	801780c <osMessagePut>
				}
				state = 0;
 800988a:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <Start_RCU_RECEIVE+0x11d8>)
 800988c:	2200      	movs	r2, #0
 800988e:	601a      	str	r2, [r3, #0]
				break;
 8009890:	e165      	b.n	8009b5e <Start_RCU_RECEIVE+0x143e>

				case UPDATE_PROFILE:
				for(int i =0;i<49;i++)
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009898:	e015      	b.n	80098c6 <Start_RCU_RECEIVE+0x11a6>
				{
				DATA_OF_PROFILE[i] = DATA_FROM_LOCAL_t[i+1];
 800989a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800989e:	3301      	adds	r3, #1
 80098a0:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80098a4:	443b      	add	r3, r7
 80098a6:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 80098aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80098ae:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80098b2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80098b6:	4413      	add	r3, r2
 80098b8:	460a      	mov	r2, r1
 80098ba:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<49;i++)
 80098bc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80098c0:	3301      	adds	r3, #1
 80098c2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80098c6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80098ca:	2b30      	cmp	r3, #48	; 0x30
 80098cc:	dde5      	ble.n	800989a <Start_RCU_RECEIVE+0x117a>
				}

				if((I_AM==I_AM_MASTER)&&(DATA_FROM_LOCAL_t[2]==MY_TCU_ID))
 80098ce:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <Start_RCU_RECEIVE+0x11c8>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b0a      	cmp	r3, #10
 80098d4:	d148      	bne.n	8009968 <Start_RCU_RECEIVE+0x1248>
 80098d6:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 80098da:	2b04      	cmp	r3, #4
 80098dc:	d144      	bne.n	8009968 <Start_RCU_RECEIVE+0x1248>
				{
					for(int i=0;i<50;i++)
 80098de:	2300      	movs	r3, #0
 80098e0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80098e4:	e02b      	b.n	800993e <Start_RCU_RECEIVE+0x121e>
 80098e6:	bf00      	nop
 80098e8:	20000009 	.word	0x20000009
 80098ec:	200015d4 	.word	0x200015d4
 80098f0:	20001e20 	.word	0x20001e20
 80098f4:	20001f5c 	.word	0x20001f5c
 80098f8:	20002aa8 	.word	0x20002aa8
 80098fc:	200015d8 	.word	0x200015d8
 8009900:	20001e28 	.word	0x20001e28
 8009904:	200015e4 	.word	0x200015e4
 8009908:	20001e30 	.word	0x20001e30
					{
						PROFILES[z][i] = DATA_OF_PROFILE[i];
 800990c:	4ba4      	ldr	r3, [pc, #656]	; (8009ba0 <Start_RCU_RECEIVE+0x1480>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009914:	f5a2 7101 	sub.w	r1, r2, #516	; 0x204
 8009918:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800991c:	440a      	add	r2, r1
 800991e:	7810      	ldrb	r0, [r2, #0]
 8009920:	4aa0      	ldr	r2, [pc, #640]	; (8009ba4 <Start_RCU_RECEIVE+0x1484>)
 8009922:	2132      	movs	r1, #50	; 0x32
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	441a      	add	r2, r3
 800992a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800992e:	4413      	add	r3, r2
 8009930:	4602      	mov	r2, r0
 8009932:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<50;i++)
 8009934:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009938:	3301      	adds	r3, #1
 800993a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800993e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009942:	2b31      	cmp	r3, #49	; 0x31
 8009944:	dde2      	ble.n	800990c <Start_RCU_RECEIVE+0x11ec>
					}
					PROFILE_COUNT=z;
 8009946:	4b96      	ldr	r3, [pc, #600]	; (8009ba0 <Start_RCU_RECEIVE+0x1480>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	b2da      	uxtb	r2, r3
 800994c:	4b96      	ldr	r3, [pc, #600]	; (8009ba8 <Start_RCU_RECEIVE+0x1488>)
 800994e:	701a      	strb	r2, [r3, #0]
					z = z+1;
 8009950:	4b93      	ldr	r3, [pc, #588]	; (8009ba0 <Start_RCU_RECEIVE+0x1480>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	4a92      	ldr	r2, [pc, #584]	; (8009ba0 <Start_RCU_RECEIVE+0x1480>)
 8009958:	6013      	str	r3, [r2, #0]
					if(z==50)
 800995a:	4b91      	ldr	r3, [pc, #580]	; (8009ba0 <Start_RCU_RECEIVE+0x1480>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b32      	cmp	r3, #50	; 0x32
 8009960:	d102      	bne.n	8009968 <Start_RCU_RECEIVE+0x1248>
					{
						z=0;
 8009962:	4b8f      	ldr	r3, [pc, #572]	; (8009ba0 <Start_RCU_RECEIVE+0x1480>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
					}
				}
				if((I_AM==I_AM_MASTER)&&(DATA_FROM_LOCAL_t[2]!=MY_TCU_ID))
 8009968:	4b90      	ldr	r3, [pc, #576]	; (8009bac <Start_RCU_RECEIVE+0x148c>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b0a      	cmp	r3, #10
 800996e:	d134      	bne.n	80099da <Start_RCU_RECEIVE+0x12ba>
 8009970:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8009974:	2b04      	cmp	r3, #4
 8009976:	d030      	beq.n	80099da <Start_RCU_RECEIVE+0x12ba>
				{
					DATA_OF_PROFILE[0] = MASTER_BIT;
 8009978:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800997c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009980:	2202      	movs	r2, #2
 8009982:	701a      	strb	r2, [r3, #0]
					  slavemsg = osPoolAlloc(slavesendpool);
 8009984:	4b8a      	ldr	r3, [pc, #552]	; (8009bb0 <Start_RCU_RECEIVE+0x1490>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f00d fe72 	bl	8017672 <osPoolAlloc>
 800998e:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
					  for(int i =0;i<50;i++)
 8009992:	2300      	movs	r3, #0
 8009994:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009998:	e013      	b.n	80099c2 <Start_RCU_RECEIVE+0x12a2>
					  {
						  slavemsg->SLAVE_DATA[i] = DATA_OF_PROFILE[i];
 800999a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800999e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80099a2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80099a6:	4413      	add	r3, r2
 80099a8:	7819      	ldrb	r1, [r3, #0]
 80099aa:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80099ae:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80099b2:	4413      	add	r3, r2
 80099b4:	460a      	mov	r2, r1
 80099b6:	701a      	strb	r2, [r3, #0]
					  for(int i =0;i<50;i++)
 80099b8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80099bc:	3301      	adds	r3, #1
 80099be:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80099c2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80099c6:	2b31      	cmp	r3, #49	; 0x31
 80099c8:	dde7      	ble.n	800999a <Start_RCU_RECEIVE+0x127a>
					  }
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 80099ca:	4b7a      	ldr	r3, [pc, #488]	; (8009bb4 <Start_RCU_RECEIVE+0x1494>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 80099d2:	2264      	movs	r2, #100	; 0x64
 80099d4:	4618      	mov	r0, r3
 80099d6:	f00d ff19 	bl	801780c <osMessagePut>
				}
				state = 0;
 80099da:	4b77      	ldr	r3, [pc, #476]	; (8009bb8 <Start_RCU_RECEIVE+0x1498>)
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
				SEND_ACK();
 80099e0:	f7f8 fb98 	bl	8002114 <SEND_ACK>
				break;
 80099e4:	e0bb      	b.n	8009b5e <Start_RCU_RECEIVE+0x143e>


				case SEND_DATA_TO_SLAVE:
				for(int i =0;i<49;i++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80099ec:	e015      	b.n	8009a1a <Start_RCU_RECEIVE+0x12fa>
				{
				DATA_FOR_PROCESSING[i] = DATA_FROM_LOCAL_t[i+1];
 80099ee:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80099f2:	3301      	adds	r3, #1
 80099f4:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80099f8:	443b      	add	r3, r7
 80099fa:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 80099fe:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009a02:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8009a06:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009a0a:	4413      	add	r3, r2
 8009a0c:	460a      	mov	r2, r1
 8009a0e:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<49;i++)
 8009a10:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009a14:	3301      	adds	r3, #1
 8009a16:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009a1a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009a1e:	2b30      	cmp	r3, #48	; 0x30
 8009a20:	dde5      	ble.n	80099ee <Start_RCU_RECEIVE+0x12ce>
				}
				DATA_FOR_PROCESSING[0] = MASTER_BIT;
 8009a22:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009a26:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	701a      	strb	r2, [r3, #0]
				DATA_FOR_PROCESSING[49] = 0x00;
 8009a2e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009a32:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				slavemsg = osPoolAlloc(slavesendpool);
 8009a3c:	4b5c      	ldr	r3, [pc, #368]	; (8009bb0 <Start_RCU_RECEIVE+0x1490>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f00d fe16 	bl	8017672 <osPoolAlloc>
 8009a46:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
				for(int i =0;i<50;i++)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009a50:	e013      	b.n	8009a7a <Start_RCU_RECEIVE+0x135a>
				{
				slavemsg->SLAVE_DATA[i] = DATA_FOR_PROCESSING[i];
 8009a52:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009a56:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8009a5a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a5e:	4413      	add	r3, r2
 8009a60:	7819      	ldrb	r1, [r3, #0]
 8009a62:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8009a66:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a6a:	4413      	add	r3, r2
 8009a6c:	460a      	mov	r2, r1
 8009a6e:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<50;i++)
 8009a70:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a74:	3301      	adds	r3, #1
 8009a76:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009a7a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a7e:	2b31      	cmp	r3, #49	; 0x31
 8009a80:	dde7      	ble.n	8009a52 <Start_RCU_RECEIVE+0x1332>
				}
				osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 8009a82:	4b4c      	ldr	r3, [pc, #304]	; (8009bb4 <Start_RCU_RECEIVE+0x1494>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 8009a8a:	2264      	movs	r2, #100	; 0x64
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f00d febd 	bl	801780c <osMessagePut>
				if((DATA_FROM_LOCAL_t[3] == CLOSE_LOOP_START)||(DATA_FROM_LOCAL_t[3] == OPEN_LOOP_START)||(DATA_FROM_LOCAL_t[3] == SLEEP))
 8009a92:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8009a96:	2b07      	cmp	r3, #7
 8009a98:	d007      	beq.n	8009aaa <Start_RCU_RECEIVE+0x138a>
 8009a9a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8009a9e:	2b0d      	cmp	r3, #13
 8009aa0:	d003      	beq.n	8009aaa <Start_RCU_RECEIVE+0x138a>
 8009aa2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8009aa6:	2bf0      	cmp	r3, #240	; 0xf0
 8009aa8:	d155      	bne.n	8009b56 <Start_RCU_RECEIVE+0x1436>
				{
				  for(int i =0;i<49;i++)
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8009ab0:	e015      	b.n	8009ade <Start_RCU_RECEIVE+0x13be>
				  {
					  DATA_FOR_PROCESSING[i] = DATA_FROM_LOCAL_t[i+1];
 8009ab2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8009abc:	443b      	add	r3, r7
 8009abe:	f813 1cd0 	ldrb.w	r1, [r3, #-208]
 8009ac2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009ac6:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8009aca:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8009ace:	4413      	add	r3, r2
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<49;i++)
 8009ad4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8009ad8:	3301      	adds	r3, #1
 8009ada:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8009ade:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8009ae2:	2b30      	cmp	r3, #48	; 0x30
 8009ae4:	dde5      	ble.n	8009ab2 <Start_RCU_RECEIVE+0x1392>
				  }
				  DATA_FOR_PROCESSING[0] = MASTER_BIT;
 8009ae6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009aea:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009aee:	2202      	movs	r2, #2
 8009af0:	701a      	strb	r2, [r3, #0]
				  DATA_FOR_PROCESSING[49] = 0x00;
 8009af2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009af6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				  syspromsg = osPoolAlloc(syspropool);
 8009b00:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <Start_RCU_RECEIVE+0x149c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f00d fdb4 	bl	8017672 <osPoolAlloc>
 8009b0a:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
				  for(int i =0;i<50;i++)
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009b14:	e013      	b.n	8009b3e <Start_RCU_RECEIVE+0x141e>
				  {
					  syspromsg->DATA_TO_PROCESS[i] = DATA_FOR_PROCESSING[i];
 8009b16:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8009b1a:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8009b1e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009b22:	4413      	add	r3, r2
 8009b24:	7819      	ldrb	r1, [r3, #0]
 8009b26:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8009b2a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009b2e:	4413      	add	r3, r2
 8009b30:	460a      	mov	r2, r1
 8009b32:	701a      	strb	r2, [r3, #0]
				  for(int i =0;i<50;i++)
 8009b34:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009b38:	3301      	adds	r3, #1
 8009b3a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009b3e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009b42:	2b31      	cmp	r3, #49	; 0x31
 8009b44:	dde7      	ble.n	8009b16 <Start_RCU_RECEIVE+0x13f6>
				  }
				  osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 8009b46:	4b1e      	ldr	r3, [pc, #120]	; (8009bc0 <Start_RCU_RECEIVE+0x14a0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8009b4e:	2264      	movs	r2, #100	; 0x64
 8009b50:	4618      	mov	r0, r3
 8009b52:	f00d fe5b 	bl	801780c <osMessagePut>
				}
				state = 0;
 8009b56:	4b18      	ldr	r3, [pc, #96]	; (8009bb8 <Start_RCU_RECEIVE+0x1498>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
				break;
 8009b5c:	bf00      	nop
				}


				if(DATA_FROM_LOCAL_t[40]==ACK_NACK_DATA)
 8009b5e:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8009b62:	2b9a      	cmp	r3, #154	; 0x9a
 8009b64:	d10a      	bne.n	8009b7c <Start_RCU_RECEIVE+0x145c>
				{
					  if(DATA_FROM_LOCAL_t[41]==ACK)
 8009b66:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 8009b6a:	2b61      	cmp	r3, #97	; 0x61
 8009b6c:	d106      	bne.n	8009b7c <Start_RCU_RECEIVE+0x145c>
					  {
					  xTaskNotifyGive(DATA_LOGGINGHandle);
 8009b6e:	4b15      	ldr	r3, [pc, #84]	; (8009bc4 <Start_RCU_RECEIVE+0x14a4>)
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	2300      	movs	r3, #0
 8009b74:	2202      	movs	r2, #2
 8009b76:	2100      	movs	r1, #0
 8009b78:	f010 f858 	bl	8019c2c <xTaskGenericNotify>
				}

      }

	  }
	  HAL_UART_Receive_DMA(&huart6, DATA_FROM_LOCAL, 50);
 8009b7c:	2232      	movs	r2, #50	; 0x32
 8009b7e:	4912      	ldr	r1, [pc, #72]	; (8009bc8 <Start_RCU_RECEIVE+0x14a8>)
 8009b80:	4812      	ldr	r0, [pc, #72]	; (8009bcc <Start_RCU_RECEIVE+0x14ac>)
 8009b82:	f00c f988 	bl	8015e96 <HAL_UART_Receive_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8009b86:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <Start_RCU_RECEIVE+0x14b0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <Start_RCU_RECEIVE+0x14b0>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 0208 	bic.w	r2, r2, #8
 8009b94:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8009b96:	2001      	movs	r0, #1
 8009b98:	f00d fc45 	bl	8017426 <osDelay>
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8009b9c:	f7fe bdcc 	b.w	8008738 <Start_RCU_RECEIVE+0x18>
 8009ba0:	20002aac 	.word	0x20002aac
 8009ba4:	20001fb4 	.word	0x20001fb4
 8009ba8:	20002978 	.word	0x20002978
 8009bac:	20000009 	.word	0x20000009
 8009bb0:	200015e4 	.word	0x200015e4
 8009bb4:	20001e30 	.word	0x20001e30
 8009bb8:	20002aa8 	.word	0x20002aa8
 8009bbc:	200015d8 	.word	0x200015d8
 8009bc0:	20001e28 	.word	0x20001e28
 8009bc4:	20001e00 	.word	0x20001e00
 8009bc8:	20001f20 	.word	0x20001f20
 8009bcc:	20001bac 	.word	0x20001bac
 8009bd0:	20001d54 	.word	0x20001d54

08009bd4 <Start_WIFI_RECEIVE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_WIFI_RECEIVE */
void Start_WIFI_RECEIVE(void const * argument)
{
 8009bd4:	b5b0      	push	{r4, r5, r7, lr}
 8009bd6:	b0a0      	sub	sp, #128	; 0x80
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]

	static int notification =0;
  /* Infinite loop */
  for(;;)
  {
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8009bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8009be0:	2000      	movs	r0, #0
 8009be2:	f00f ffd7 	bl	8019b94 <ulTaskNotifyTake>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	4b3e      	ldr	r3, [pc, #248]	; (8009ce4 <Start_WIFI_RECEIVE+0x110>)
 8009bec:	601a      	str	r2, [r3, #0]
	  if( (notification>=0))
 8009bee:	4b3d      	ldr	r3, [pc, #244]	; (8009ce4 <Start_WIFI_RECEIVE+0x110>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	db72      	blt.n	8009cdc <Start_WIFI_RECEIVE+0x108>
	  {
	  notification =0;
 8009bf6:	4b3b      	ldr	r3, [pc, #236]	; (8009ce4 <Start_WIFI_RECEIVE+0x110>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]
	  memcpy(DATA_FROM_WIFI_t,DATA_FROM_WIFI,50);
 8009bfc:	4b3a      	ldr	r3, [pc, #232]	; (8009ce8 <Start_WIFI_RECEIVE+0x114>)
 8009bfe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8009c02:	461d      	mov	r5, r3
 8009c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	8023      	strh	r3, [r4, #0]
	  if(DATA_FROM_WIFI_t[1] == MODEM_BIT)
 8009c14:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d152      	bne.n	8009cc2 <Start_WIFI_RECEIVE+0xee>
	  {
			  if(((DATA_FROM_WIFI_t[3] == CLOSE_LOOP_START)||(DATA_FROM_WIFI_t[3] == UPADTE_TEMP_OR_POWER)||(DATA_FROM_WIFI_t[3] == OPEN_LOOP_START)||(DATA_FROM_WIFI_t[3] == SLEEP)||(DATA_FROM_WIFI_t[3] == KP_KI_KD_DATA)) )
 8009c1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	d00f      	beq.n	8009c44 <Start_WIFI_RECEIVE+0x70>
 8009c24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c28:	2b05      	cmp	r3, #5
 8009c2a:	d00b      	beq.n	8009c44 <Start_WIFI_RECEIVE+0x70>
 8009c2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c30:	2b0d      	cmp	r3, #13
 8009c32:	d007      	beq.n	8009c44 <Start_WIFI_RECEIVE+0x70>
 8009c34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c38:	2bf0      	cmp	r3, #240	; 0xf0
 8009c3a:	d003      	beq.n	8009c44 <Start_WIFI_RECEIVE+0x70>
 8009c3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c40:	2b2c      	cmp	r3, #44	; 0x2c
 8009c42:	d13e      	bne.n	8009cc2 <Start_WIFI_RECEIVE+0xee>
			  {
					osThreadResume(DATA_LOGGINGHandle);
 8009c44:	4b29      	ldr	r3, [pc, #164]	; (8009cec <Start_WIFI_RECEIVE+0x118>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f00d ffd5 	bl	8017bf8 <osThreadResume>
					for(int i =0;i<49;i++)
 8009c4e:	2300      	movs	r3, #0
 8009c50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c52:	e00e      	b.n	8009c72 <Start_WIFI_RECEIVE+0x9e>
					{
					DATA_FOR_PROCESSING[i] = DATA_FROM_WIFI_t[i+1];
 8009c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c56:	3301      	adds	r3, #1
 8009c58:	3380      	adds	r3, #128	; 0x80
 8009c5a:	443b      	add	r3, r7
 8009c5c:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 8009c60:	f107 020c 	add.w	r2, r7, #12
 8009c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c66:	4413      	add	r3, r2
 8009c68:	460a      	mov	r2, r1
 8009c6a:	701a      	strb	r2, [r3, #0]
					for(int i =0;i<49;i++)
 8009c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c6e:	3301      	adds	r3, #1
 8009c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c74:	2b30      	cmp	r3, #48	; 0x30
 8009c76:	dded      	ble.n	8009c54 <Start_WIFI_RECEIVE+0x80>
					}
					DATA_FOR_PROCESSING[0] = MASTER_BIT;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	733b      	strb	r3, [r7, #12]
					DATA_FOR_PROCESSING[49] = 0x00;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					syspromsg = osPoolAlloc(syspropool);
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <Start_WIFI_RECEIVE+0x11c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f00d fcf3 	bl	8017672 <osPoolAlloc>
 8009c8c:	6778      	str	r0, [r7, #116]	; 0x74
					for(int i =0;i<50;i++)
 8009c8e:	2300      	movs	r3, #0
 8009c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c92:	e00c      	b.n	8009cae <Start_WIFI_RECEIVE+0xda>
					{
					syspromsg->DATA_TO_PROCESS[i] = DATA_FOR_PROCESSING[i];
 8009c94:	f107 020c 	add.w	r2, r7, #12
 8009c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c9a:	4413      	add	r3, r2
 8009c9c:	7819      	ldrb	r1, [r3, #0]
 8009c9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca2:	4413      	add	r3, r2
 8009ca4:	460a      	mov	r2, r1
 8009ca6:	701a      	strb	r2, [r3, #0]
					for(int i =0;i<50;i++)
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009caa:	3301      	adds	r3, #1
 8009cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8009cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb0:	2b31      	cmp	r3, #49	; 0x31
 8009cb2:	ddef      	ble.n	8009c94 <Start_WIFI_RECEIVE+0xc0>
					}
					osMessagePut(SYSTEM_PROCESS_qHandle, (uint32_t)syspromsg,100);
 8009cb4:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <Start_WIFI_RECEIVE+0x120>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009cba:	2264      	movs	r2, #100	; 0x64
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f00d fda5 	bl	801780c <osMessagePut>
			  }
	  }
	  HAL_UART_Receive_DMA(&huart4, DATA_FROM_WIFI, 50);
 8009cc2:	2232      	movs	r2, #50	; 0x32
 8009cc4:	4908      	ldr	r1, [pc, #32]	; (8009ce8 <Start_WIFI_RECEIVE+0x114>)
 8009cc6:	480c      	ldr	r0, [pc, #48]	; (8009cf8 <Start_WIFI_RECEIVE+0x124>)
 8009cc8:	f00c f8e5 	bl	8015e96 <HAL_UART_Receive_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx,DMA_IT_HT);
 8009ccc:	4b0b      	ldr	r3, [pc, #44]	; (8009cfc <Start_WIFI_RECEIVE+0x128>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <Start_WIFI_RECEIVE+0x128>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0208 	bic.w	r2, r2, #8
 8009cda:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8009cdc:	2001      	movs	r0, #1
 8009cde:	f00d fba2 	bl	8017426 <osDelay>
	  notification = ulTaskNotifyTake(0,portMAX_DELAY);
 8009ce2:	e77b      	b.n	8009bdc <Start_WIFI_RECEIVE+0x8>
 8009ce4:	20002ab0 	.word	0x20002ab0
 8009ce8:	20001eec 	.word	0x20001eec
 8009cec:	20001e00 	.word	0x20001e00
 8009cf0:	200015d8 	.word	0x200015d8
 8009cf4:	20001e28 	.word	0x20001e28
 8009cf8:	2000198c 	.word	0x2000198c
 8009cfc:	20001c34 	.word	0x20001c34

08009d00 <Start_CURRENT_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CURRENT_TASK */
void Start_CURRENT_TASK(void const * argument)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b09c      	sub	sp, #112	; 0x70
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	6078      	str	r0, [r7, #4]
	CURRENT_P *currmsgp;

	uint8_t ADC_Receive[4];
	uint8_t ADC_MODE_CTRL[2];
	uint8_t b[40];
	uint8_t ADC_CONFIG[2] = {0x82,0x04};
 8009d08:	f240 4382 	movw	r3, #1154	; 0x482
 8009d0c:	83bb      	strh	r3, [r7, #28]
	uint8_t ADC_RST[] = {0b00001000,0b11000000};
 8009d0e:	f24c 0308 	movw	r3, #49160	; 0xc008
 8009d12:	833b      	strh	r3, [r7, #24]
	uint8_t ADC_RSTBUFF[] = {0b00001000,0b10100000};
 8009d14:	f24a 0308 	movw	r3, #40968	; 0xa008
 8009d18:	82bb      	strh	r3, [r7, #20]
	uint8_t ADC_CNFG[] = {0b10000010,0b00000100};
 8009d1a:	f240 4382 	movw	r3, #1154	; 0x482
 8009d1e:	823b      	strh	r3, [r7, #16]
	uint8_t ADC_MODE[] = {0b00011111,0b10000110};
 8009d20:	f248 631f 	movw	r3, #34335	; 0x861f
 8009d24:	81bb      	strh	r3, [r7, #12]
	uint8_t ADC_getdata[] = {0b00011111,0b10000100};
 8009d26:	f248 431f 	movw	r3, #33823	; 0x841f
 8009d2a:	813b      	strh	r3, [r7, #8]
	uint16_t ADC_MODE_t;

	HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d2c:	2110      	movs	r1, #16
 8009d2e:	4830      	ldr	r0, [pc, #192]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d30:	f007 ffb5 	bl	8011c9e <HAL_GPIO_TogglePin>
	HAL_SPI_TransmitReceive(&hspi4, ADC_RST, b, 2, 100);
 8009d34:	f107 0220 	add.w	r2, r7, #32
 8009d38:	f107 0118 	add.w	r1, r7, #24
 8009d3c:	2364      	movs	r3, #100	; 0x64
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	2302      	movs	r3, #2
 8009d42:	482c      	ldr	r0, [pc, #176]	; (8009df4 <Start_CURRENT_TASK+0xf4>)
 8009d44:	f00a fe5f 	bl	8014a06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d48:	2110      	movs	r1, #16
 8009d4a:	4829      	ldr	r0, [pc, #164]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d4c:	f007 ffa7 	bl	8011c9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d50:	2110      	movs	r1, #16
 8009d52:	4827      	ldr	r0, [pc, #156]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d54:	f007 ffa3 	bl	8011c9e <HAL_GPIO_TogglePin>
	HAL_SPI_TransmitReceive(&hspi4, ADC_CNFG, b, 2, 100);
 8009d58:	f107 0220 	add.w	r2, r7, #32
 8009d5c:	f107 0110 	add.w	r1, r7, #16
 8009d60:	2364      	movs	r3, #100	; 0x64
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	2302      	movs	r3, #2
 8009d66:	4823      	ldr	r0, [pc, #140]	; (8009df4 <Start_CURRENT_TASK+0xf4>)
 8009d68:	f00a fe4d 	bl	8014a06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d6c:	2110      	movs	r1, #16
 8009d6e:	4820      	ldr	r0, [pc, #128]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d70:	f007 ff95 	bl	8011c9e <HAL_GPIO_TogglePin>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d74:	2110      	movs	r1, #16
 8009d76:	481e      	ldr	r0, [pc, #120]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d78:	f007 ff91 	bl	8011c9e <HAL_GPIO_TogglePin>
	  HAL_SPI_TransmitReceive(&hspi4, ADC_CNFG, b, 2, 100);
 8009d7c:	f107 0220 	add.w	r2, r7, #32
 8009d80:	f107 0110 	add.w	r1, r7, #16
 8009d84:	2364      	movs	r3, #100	; 0x64
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	2302      	movs	r3, #2
 8009d8a:	481a      	ldr	r0, [pc, #104]	; (8009df4 <Start_CURRENT_TASK+0xf4>)
 8009d8c:	f00a fe3b 	bl	8014a06 <HAL_SPI_TransmitReceive>
      HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d90:	2110      	movs	r1, #16
 8009d92:	4817      	ldr	r0, [pc, #92]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d94:	f007 ff83 	bl	8011c9e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009d98:	2110      	movs	r1, #16
 8009d9a:	4815      	ldr	r0, [pc, #84]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009d9c:	f007 ff7f 	bl	8011c9e <HAL_GPIO_TogglePin>
	  HAL_SPI_TransmitReceive(&hspi4, ADC_RSTBUFF, b, 2, 100);
 8009da0:	f107 0220 	add.w	r2, r7, #32
 8009da4:	f107 0114 	add.w	r1, r7, #20
 8009da8:	2364      	movs	r3, #100	; 0x64
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2302      	movs	r3, #2
 8009dae:	4811      	ldr	r0, [pc, #68]	; (8009df4 <Start_CURRENT_TASK+0xf4>)
 8009db0:	f00a fe29 	bl	8014a06 <HAL_SPI_TransmitReceive>
      HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009db4:	2110      	movs	r1, #16
 8009db6:	480e      	ldr	r0, [pc, #56]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009db8:	f007 ff71 	bl	8011c9e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009dbc:	2110      	movs	r1, #16
 8009dbe:	480c      	ldr	r0, [pc, #48]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009dc0:	f007 ff6d 	bl	8011c9e <HAL_GPIO_TogglePin>
	  HAL_SPI_TransmitReceive(&hspi4, ADC_MODE, b, 3, 100);
 8009dc4:	f107 0220 	add.w	r2, r7, #32
 8009dc8:	f107 010c 	add.w	r1, r7, #12
 8009dcc:	2364      	movs	r3, #100	; 0x64
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	4808      	ldr	r0, [pc, #32]	; (8009df4 <Start_CURRENT_TASK+0xf4>)
 8009dd4:	f00a fe17 	bl	8014a06 <HAL_SPI_TransmitReceive>
      HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009dd8:	2110      	movs	r1, #16
 8009dda:	4805      	ldr	r0, [pc, #20]	; (8009df0 <Start_CURRENT_TASK+0xf0>)
 8009ddc:	f007 ff5f 	bl	8011c9e <HAL_GPIO_TogglePin>
	  osDelay(1);
 8009de0:	2001      	movs	r0, #1
 8009de2:	f00d fb20 	bl	8017426 <osDelay>

	  for (uint8_t i=0; i<15;)
 8009de6:	2300      	movs	r3, #0
 8009de8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009dec:	e038      	b.n	8009e60 <Start_CURRENT_TASK+0x160>
 8009dee:	bf00      	nop
 8009df0:	40021000 	.word	0x40021000
 8009df4:	200018dc 	.word	0x200018dc
	  {
		    HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009df8:	2110      	movs	r1, #16
 8009dfa:	48bc      	ldr	r0, [pc, #752]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009dfc:	f007 ff4f 	bl	8011c9e <HAL_GPIO_TogglePin>
			HAL_StatusTypeDef spists =   HAL_SPI_TransmitReceive(&hspi4, ADC_getdata, &b[2*i], 2, 100);
 8009e00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	f107 0220 	add.w	r2, r7, #32
 8009e0a:	441a      	add	r2, r3
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	2364      	movs	r3, #100	; 0x64
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	2302      	movs	r3, #2
 8009e16:	48b6      	ldr	r0, [pc, #728]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 8009e18:	f00a fdf5 	bl	8014a06 <HAL_SPI_TransmitReceive>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			HAL_GPIO_TogglePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin);
 8009e22:	2110      	movs	r1, #16
 8009e24:	48b1      	ldr	r0, [pc, #708]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009e26:	f007 ff3a 	bl	8011c9e <HAL_GPIO_TogglePin>
			if(spists == HAL_OK)
 8009e2a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10b      	bne.n	8009e4a <Start_CURRENT_TASK+0x14a>
			{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8009e32:	2180      	movs	r1, #128	; 0x80
 8009e34:	48af      	ldr	r0, [pc, #700]	; (800a0f4 <Start_CURRENT_TASK+0x3f4>)
 8009e36:	f007 ff32 	bl	8011c9e <HAL_GPIO_TogglePin>
			i++;
 8009e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e3e:	3301      	adds	r3, #1
 8009e40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			b[0] = ADC_12_CH_DATA;
 8009e44:	23c0      	movs	r3, #192	; 0xc0
 8009e46:	f887 3020 	strb.w	r3, [r7, #32]
			}
			if(spists != HAL_OK)
 8009e4a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d006      	beq.n	8009e60 <Start_CURRENT_TASK+0x160>
	        {
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	48a7      	ldr	r0, [pc, #668]	; (800a0f4 <Start_CURRENT_TASK+0x3f4>)
 8009e56:	f007 ff22 	bl	8011c9e <HAL_GPIO_TogglePin>
			b[0] = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f887 3020 	strb.w	r3, [r7, #32]
	  for (uint8_t i=0; i<15;)
 8009e60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e64:	2b0e      	cmp	r3, #14
 8009e66:	d9c7      	bls.n	8009df8 <Start_CURRENT_TASK+0xf8>
	        }
      }

		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2110      	movs	r1, #16
 8009e6c:	489f      	ldr	r0, [pc, #636]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009e6e:	f007 fefd 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4, ADC_CONFIG, sizeof(ADC_CONFIG), 500);
 8009e72:	f107 011c 	add.w	r1, r7, #28
 8009e76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	489c      	ldr	r0, [pc, #624]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 8009e7e:	f00a fb24 	bl	80144ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 8009e82:	2201      	movs	r2, #1
 8009e84:	2110      	movs	r1, #16
 8009e86:	4899      	ldr	r0, [pc, #612]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009e88:	f007 fef0 	bl	8011c6c <HAL_GPIO_WritePin>

		ADC_MODE_t = 0x16A2;
 8009e8c:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8009e90:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		ADC_MODE_CTRL[0] = (ADC_MODE_t&(0XFF00))>>8;
 8009e94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009e98:	0a1b      	lsrs	r3, r3, #8
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ADC_MODE_CTRL[1] = (ADC_MODE_t&(0X00FF));
 8009ea2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 8009eac:	2200      	movs	r2, #0
 8009eae:	2110      	movs	r1, #16
 8009eb0:	488e      	ldr	r0, [pc, #568]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009eb2:	f007 fedb 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4, ADC_MODE_CTRL, sizeof(ADC_MODE_CTRL), 500);
 8009eb6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009eba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	488b      	ldr	r0, [pc, #556]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 8009ec2:	f00a fb02 	bl	80144ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	2110      	movs	r1, #16
 8009eca:	4888      	ldr	r0, [pc, #544]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009ecc:	f007 fece 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2110      	movs	r1, #16
 8009ed4:	4885      	ldr	r0, [pc, #532]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009ed6:	f007 fec9 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_StatusTypeDef spists13 =HAL_SPI_Receive(&hspi4, &b[30], 2,0xFFFF);
 8009eda:	f107 0320 	add.w	r3, r7, #32
 8009ede:	f103 011e 	add.w	r1, r3, #30
 8009ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	4881      	ldr	r0, [pc, #516]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 8009eea:	f00a fc5c 	bl	80147a6 <HAL_SPI_Receive>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	2110      	movs	r1, #16
 8009ef8:	487c      	ldr	r0, [pc, #496]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009efa:	f007 feb7 	bl	8011c6c <HAL_GPIO_WritePin>
		if(spists13!=HAL_OK)
 8009efe:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <Start_CURRENT_TASK+0x20c>
		{
		b[36] = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		}
		if(spists13 == HAL_OK)
 8009f0c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <Start_CURRENT_TASK+0x21a>
		{
		b[36] = ADC_13_CH_DATA;
 8009f14:	23d0      	movs	r3, #208	; 0xd0
 8009f16:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		}
		ADC_MODE_t =0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		memset(ADC_MODE_CTRL,0,sizeof(ADC_MODE_CTRL));
 8009f20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f24:	2202      	movs	r2, #2
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f011 f972 	bl	801b212 <memset>
		memset(ADC_Receive,0,sizeof(ADC_Receive));
 8009f2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009f32:	2204      	movs	r2, #4
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f011 f96b 	bl	801b212 <memset>

		ADC_MODE_t = 0x1722;
 8009f3c:	f241 7322 	movw	r3, #5922	; 0x1722
 8009f40:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		ADC_MODE_CTRL[0] = (ADC_MODE_t&(0XFF00))>>8;
 8009f44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ADC_MODE_CTRL[1] = (ADC_MODE_t&(0X00FF));
 8009f52:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2110      	movs	r1, #16
 8009f60:	4862      	ldr	r0, [pc, #392]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009f62:	f007 fe83 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4, ADC_MODE_CTRL, sizeof(ADC_MODE_CTRL), 500);
 8009f66:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009f6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009f6e:	2202      	movs	r2, #2
 8009f70:	485f      	ldr	r0, [pc, #380]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 8009f72:	f00a faaa 	bl	80144ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 8009f76:	2201      	movs	r2, #1
 8009f78:	2110      	movs	r1, #16
 8009f7a:	485c      	ldr	r0, [pc, #368]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009f7c:	f007 fe76 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 8009f80:	2200      	movs	r2, #0
 8009f82:	2110      	movs	r1, #16
 8009f84:	4859      	ldr	r0, [pc, #356]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009f86:	f007 fe71 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_StatusTypeDef spists14 = HAL_SPI_Receive(&hspi4, &b[32], 2,0xFFFF);
 8009f8a:	f107 0320 	add.w	r3, r7, #32
 8009f8e:	f103 0120 	add.w	r1, r3, #32
 8009f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f96:	2202      	movs	r2, #2
 8009f98:	4855      	ldr	r0, [pc, #340]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 8009f9a:	f00a fc04 	bl	80147a6 <HAL_SPI_Receive>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	2110      	movs	r1, #16
 8009fa8:	4850      	ldr	r0, [pc, #320]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 8009faa:	f007 fe5f 	bl	8011c6c <HAL_GPIO_WritePin>
		if(spists14!=HAL_OK)
 8009fae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <Start_CURRENT_TASK+0x2bc>
		{
		b[37] = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		}
		if(spists14 == HAL_OK)
 8009fbc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <Start_CURRENT_TASK+0x2ca>
		{
		b[37] = ADC_14_CH_DATA;
 8009fc4:	23e0      	movs	r3, #224	; 0xe0
 8009fc6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		}
		ADC_MODE_t =0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		memset(ADC_MODE_CTRL,0,sizeof(ADC_MODE_CTRL));
 8009fd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f011 f91a 	bl	801b212 <memset>
		memset(ADC_Receive,0,sizeof(ADC_Receive));
 8009fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f011 f913 	bl	801b212 <memset>


		ADC_MODE_t = 0x17A2;
 8009fec:	f241 73a2 	movw	r3, #6050	; 0x17a2
 8009ff0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		ADC_MODE_CTRL[0] = (ADC_MODE_t&(0XFF00))>>8;
 8009ff4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009ff8:	0a1b      	lsrs	r3, r3, #8
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ADC_MODE_CTRL[1] = (ADC_MODE_t&(0X00FF));
 800a002:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 800a00c:	2200      	movs	r2, #0
 800a00e:	2110      	movs	r1, #16
 800a010:	4836      	ldr	r0, [pc, #216]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 800a012:	f007 fe2b 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4, ADC_MODE_CTRL, sizeof(ADC_MODE_CTRL), 500);
 800a016:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a01a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a01e:	2202      	movs	r2, #2
 800a020:	4833      	ldr	r0, [pc, #204]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 800a022:	f00a fa52 	bl	80144ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 800a026:	2201      	movs	r2, #1
 800a028:	2110      	movs	r1, #16
 800a02a:	4830      	ldr	r0, [pc, #192]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 800a02c:	f007 fe1e 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, RESET);
 800a030:	2200      	movs	r2, #0
 800a032:	2110      	movs	r1, #16
 800a034:	482d      	ldr	r0, [pc, #180]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 800a036:	f007 fe19 	bl	8011c6c <HAL_GPIO_WritePin>
		HAL_StatusTypeDef spists15 = HAL_SPI_Receive(&hspi4, &b[34], 2,0xFFFF);
 800a03a:	f107 0320 	add.w	r3, r7, #32
 800a03e:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800a042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a046:	2202      	movs	r2, #2
 800a048:	4829      	ldr	r0, [pc, #164]	; (800a0f0 <Start_CURRENT_TASK+0x3f0>)
 800a04a:	f00a fbac 	bl	80147a6 <HAL_SPI_Receive>
 800a04e:	4603      	mov	r3, r0
 800a050:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, SET);
 800a054:	2201      	movs	r2, #1
 800a056:	2110      	movs	r1, #16
 800a058:	4824      	ldr	r0, [pc, #144]	; (800a0ec <Start_CURRENT_TASK+0x3ec>)
 800a05a:	f007 fe07 	bl	8011c6c <HAL_GPIO_WritePin>
		if(spists15!=HAL_OK)
 800a05e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <Start_CURRENT_TASK+0x36c>
		{
		b[38] = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		}
		if(spists15 == HAL_OK)
 800a06c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <Start_CURRENT_TASK+0x37a>
		{
		b[38] = ADC_15_CH_DATA;
 800a074:	23f0      	movs	r3, #240	; 0xf0
 800a076:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		}
		ADC_MODE_t =0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		memset(ADC_MODE_CTRL,0,sizeof(ADC_MODE_CTRL));
 800a080:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a084:	2202      	movs	r2, #2
 800a086:	2100      	movs	r1, #0
 800a088:	4618      	mov	r0, r3
 800a08a:	f011 f8c2 	bl	801b212 <memset>
		memset(ADC_Receive,0,sizeof(ADC_Receive));
 800a08e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a092:	2204      	movs	r2, #4
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f011 f8bb 	bl	801b212 <memset>

		currmsgp = osPoolAlloc(currppool);
 800a09c:	4b16      	ldr	r3, [pc, #88]	; (800a0f8 <Start_CURRENT_TASK+0x3f8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f00d fae6 	bl	8017672 <osPoolAlloc>
 800a0a6:	6578      	str	r0, [r7, #84]	; 0x54
		for(int i =0;i<40;i++)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	663b      	str	r3, [r7, #96]	; 0x60
 800a0ac:	e00c      	b.n	800a0c8 <Start_CURRENT_TASK+0x3c8>
		{
		currmsgp->CURRENT_P_DATA[i] = b[i];
 800a0ae:	f107 0220 	add.w	r2, r7, #32
 800a0b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0b4:	4413      	add	r3, r2
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	b299      	uxth	r1, r3
 800a0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i =0;i<40;i++)
 800a0c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a0c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ca:	2b27      	cmp	r3, #39	; 0x27
 800a0cc:	ddef      	ble.n	800a0ae <Start_CURRENT_TASK+0x3ae>
		}
		osMessagePut(CURRENT_P_qHandle, (uint32_t)currmsgp,100);
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <Start_CURRENT_TASK+0x3fc>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0d4:	2264      	movs	r2, #100	; 0x64
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f00d fb98 	bl	801780c <osMessagePut>
		memset(b,0,sizeof(b));
 800a0dc:	f107 0320 	add.w	r3, r7, #32
 800a0e0:	2228      	movs	r2, #40	; 0x28
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f011 f894 	bl	801b212 <memset>
  {
 800a0ea:	e643      	b.n	8009d74 <Start_CURRENT_TASK+0x74>
 800a0ec:	40021000 	.word	0x40021000
 800a0f0:	200018dc 	.word	0x200018dc
 800a0f4:	40020400 	.word	0x40020400
 800a0f8:	2000162c 	.word	0x2000162c
 800a0fc:	20001e64 	.word	0x20001e64

0800a100 <Start_PID_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_PID_TASK */
void Start_PID_TASK(void const * argument)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b0fa      	sub	sp, #488	; 0x1e8
 800a104:	af00      	add	r7, sp, #0
 800a106:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a10a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800a10e:	6018      	str	r0, [r3, #0]

	uint16_t FEEDBACK[16];

	static float PID_OUTPUT[16] ={0};
	float CURRENT_COUNT,COUNT_DIFFERENCE,PREVIOUS_COUNT;
	float PROPORTIONAL[16],CURRENT_ERROR[16],INTEGRAL[16],PREVIOUS_ERROR[16],DERIVATIVE[16] ={0};
 800a110:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a114:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a118:	4618      	mov	r0, r3
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	461a      	mov	r2, r3
 800a11e:	2100      	movs	r1, #0
 800a120:	f011 f877 	bl	801b212 <memset>


  /* Infinite loop */
  for(;;)
  {
	  givememsg = osPoolAlloc(givepool);
 800a124:	4bbe      	ldr	r3, [pc, #760]	; (800a420 <Start_PID_TASK+0x320>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f00d faa2 	bl	8017672 <osPoolAlloc>
 800a12e:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
	  givememsg->GIVE_ME_t = I_AM_PID;
 800a132:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800a136:	2205      	movs	r2, #5
 800a138:	701a      	strb	r2, [r3, #0]
	  osMessagePut(GIVE_ME_qHandle, (uint32_t)givememsg, 100);
 800a13a:	4bba      	ldr	r3, [pc, #744]	; (800a424 <Start_PID_TASK+0x324>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800a142:	2264      	movs	r2, #100	; 0x64
 800a144:	4618      	mov	r0, r3
 800a146:	f00d fb61 	bl	801780c <osMessagePut>

	  kpkikdevt = osMessageGet(KP_KI_KD_qHandle, 0);
 800a14a:	4bb7      	ldr	r3, [pc, #732]	; (800a428 <Start_PID_TASK+0x328>)
 800a14c:	6819      	ldr	r1, [r3, #0]
 800a14e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a152:	2200      	movs	r2, #0
 800a154:	4618      	mov	r0, r3
 800a156:	f00d fb99 	bl	801788c <osMessageGet>
	  if(kpkikdevt.status == osEventMessage)
 800a15a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a15e:	2b10      	cmp	r3, #16
 800a160:	d170      	bne.n	800a244 <Start_PID_TASK+0x144>
	  {
		  kpkikdmsg = kpkikdevt.value.p;
 800a162:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800a166:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		  for(int i =0;i<4;i++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800a170:	e030      	b.n	800a1d4 <Start_PID_TASK+0xd4>
		  {
			  KPKIKD_DATA_t[i]=kpkikdmsg->KP_KI_KD_t[i];
 800a172:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800a176:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a17a:	4413      	add	r3, r2
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a186:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a18a:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800a18e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	edc3 7a00 	vstr	s15, [r3]
			  KPKIKD_DATA_t[i] = KPKIKD_DATA_t[i]/10;
 800a19a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a19e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800a1a2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	ed93 7a00 	vldr	s14, [r3]
 800a1ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a1b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1b6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a1ba:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800a1be:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	edc3 7a00 	vstr	s15, [r3]
		  for(int i =0;i<4;i++)
 800a1ca:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800a1d4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	ddca      	ble.n	800a172 <Start_PID_TASK+0x72>
		  }
		  osPoolFree(kpkikdpool, kpkikdmsg);
 800a1dc:	4b93      	ldr	r3, [pc, #588]	; (800a42c <Start_PID_TASK+0x32c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f00d faa8 	bl	801773a <osPoolFree>
		  pos = (int)KPKIKD_DATA_t[0];
 800a1ea:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a1ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a1f2:	edd3 7a00 	vldr	s15, [r3]
 800a1f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1fa:	ee17 3a90 	vmov	r3, s15
 800a1fe:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		  KP[pos] = KPKIKD_DATA_t[1];
 800a202:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a206:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4988      	ldr	r1, [pc, #544]	; (800a430 <Start_PID_TASK+0x330>)
 800a20e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	601a      	str	r2, [r3, #0]
		  KI[pos] = KPKIKD_DATA_t[2];
 800a218:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a21c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	4984      	ldr	r1, [pc, #528]	; (800a434 <Start_PID_TASK+0x334>)
 800a224:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	601a      	str	r2, [r3, #0]
		  KD[pos] = KPKIKD_DATA_t[3];
 800a22e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a232:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	497f      	ldr	r1, [pc, #508]	; (800a438 <Start_PID_TASK+0x338>)
 800a23a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	601a      	str	r2, [r3, #0]
	  }

	  spevt = osMessageGet(SETPOINT_qHandle, 0);
 800a244:	4b7d      	ldr	r3, [pc, #500]	; (800a43c <Start_PID_TASK+0x33c>)
 800a246:	6819      	ldr	r1, [r3, #0]
 800a248:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800a24c:	2200      	movs	r2, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f00d fb1c 	bl	801788c <osMessageGet>
	  if(spevt.status == osEventMessage)
 800a254:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a258:	2b10      	cmp	r3, #16
 800a25a:	d125      	bne.n	800a2a8 <Start_PID_TASK+0x1a8>
	  {
		  setpointmsg = spevt.value.p;
 800a25c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a260:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
		  for(int i =0;i<16;i++)
 800a264:	2300      	movs	r3, #0
 800a266:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a26a:	e00f      	b.n	800a28c <Start_PID_TASK+0x18c>
		  {
			  SETPOINT[i] = setpointmsg->SETPOINT_t[i];
 800a26c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a270:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800a274:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800a278:	4a71      	ldr	r2, [pc, #452]	; (800a440 <Start_PID_TASK+0x340>)
 800a27a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a27e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i =0;i<16;i++)
 800a282:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a286:	3301      	adds	r3, #1
 800a288:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a28c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a290:	2b0f      	cmp	r3, #15
 800a292:	ddeb      	ble.n	800a26c <Start_PID_TASK+0x16c>
		  }
		  osPoolFree(sppool, setpointmsg);
 800a294:	4b6b      	ldr	r3, [pc, #428]	; (800a444 <Start_PID_TASK+0x344>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 800a29c:	4618      	mov	r0, r3
 800a29e:	f00d fa4c 	bl	801773a <osPoolFree>
		  sp=1;
 800a2a2:	4b69      	ldr	r3, [pc, #420]	; (800a448 <Start_PID_TASK+0x348>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
	  }

	  fbevt = osMessageGet(FEEDBACK_qHandle, 0);
 800a2a8:	4b68      	ldr	r3, [pc, #416]	; (800a44c <Start_PID_TASK+0x34c>)
 800a2aa:	6819      	ldr	r1, [r3, #0]
 800a2ac:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f00d faea 	bl	801788c <osMessageGet>
	  if(fbevt.status == osEventMessage)
 800a2b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800a2bc:	2b10      	cmp	r3, #16
 800a2be:	d13b      	bne.n	800a338 <Start_PID_TASK+0x238>
	  {
		  feedbackmsg = fbevt.value.p;
 800a2c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a2c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
		  for(int i =0;i<16;i++)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a2ce:	e025      	b.n	800a31c <Start_PID_TASK+0x21c>
		  {
			  FEEDBACK[i] = feedbackmsg->FEEDBACK_t[i];
 800a2d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a2d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800a2d8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a2dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a2e6:	443b      	add	r3, r7
 800a2e8:	f823 2c90 	strh.w	r2, [r3, #-144]
			  FEEDBACK[i] = (FEEDBACK[i]&0x0FFF);
 800a2ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a2f6:	443b      	add	r3, r7
 800a2f8:	f833 3c90 	ldrh.w	r3, [r3, #-144]
 800a2fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a300:	b29a      	uxth	r2, r3
 800a302:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a30c:	443b      	add	r3, r7
 800a30e:	f823 2c90 	strh.w	r2, [r3, #-144]
		  for(int i =0;i<16;i++)
 800a312:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a316:	3301      	adds	r3, #1
 800a318:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a31c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a320:	2b0f      	cmp	r3, #15
 800a322:	ddd5      	ble.n	800a2d0 <Start_PID_TASK+0x1d0>
		  }
		  osPoolFree(fbpool, feedbackmsg);
 800a324:	4b4a      	ldr	r3, [pc, #296]	; (800a450 <Start_PID_TASK+0x350>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800a32c:	4618      	mov	r0, r3
 800a32e:	f00d fa04 	bl	801773a <osPoolFree>
		  fb=1;
 800a332:	4b48      	ldr	r3, [pc, #288]	; (800a454 <Start_PID_TASK+0x354>)
 800a334:	2201      	movs	r2, #1
 800a336:	601a      	str	r2, [r3, #0]
	  }

	  if(LOOP_RUNNING == OPEN_LOOP)
 800a338:	4b47      	ldr	r3, [pc, #284]	; (800a458 <Start_PID_TASK+0x358>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d162      	bne.n	800a406 <Start_PID_TASK+0x306>
	  {
		  pidmsg = osPoolAlloc(pidpool);
 800a340:	4b46      	ldr	r3, [pc, #280]	; (800a45c <Start_PID_TASK+0x35c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f00d f994 	bl	8017672 <osPoolAlloc>
 800a34a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
		  dutymsg = osPoolAlloc(dutypool);
 800a34e:	4b44      	ldr	r3, [pc, #272]	; (800a460 <Start_PID_TASK+0x360>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f00d f98d 	bl	8017672 <osPoolAlloc>
 800a358:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
		  for(int i =0;i<16;i++)
 800a35c:	2300      	movs	r3, #0
 800a35e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800a362:	e03c      	b.n	800a3de <Start_PID_TASK+0x2de>
		  {
	  			setpoint = (((float)SETPOINT[i])/10000);
 800a364:	4a36      	ldr	r2, [pc, #216]	; (800a440 <Start_PID_TASK+0x340>)
 800a366:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a36a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a36e:	ee07 3a90 	vmov	s15, r3
 800a372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a376:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a464 <Start_PID_TASK+0x364>
 800a37a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a37e:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
	  			DUTY[i]=setpoint;
 800a382:	4a39      	ldr	r2, [pc, #228]	; (800a468 <Start_PID_TASK+0x368>)
 800a384:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800a390:	601a      	str	r2, [r3, #0]
         		pidmsg->PID_DATA_t[i] = (int)(DUTY[i]*1000);
 800a392:	4a35      	ldr	r2, [pc, #212]	; (800a468 <Start_PID_TASK+0x368>)
 800a394:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	edd3 7a00 	vldr	s15, [r3]
 800a3a0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a46c <Start_PID_TASK+0x36c>
 800a3a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3ac:	ee17 3a90 	vmov	r3, s15
 800a3b0:	b299      	uxth	r1, r3
 800a3b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a3b6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a3ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  		 	dutymsg->DUTY_t[i] = SETPOINT[i];
 800a3be:	4a20      	ldr	r2, [pc, #128]	; (800a440 <Start_PID_TASK+0x340>)
 800a3c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a3c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800a3c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a3cc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a3d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i =0;i<16;i++)
 800a3d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a3d8:	3301      	adds	r3, #1
 800a3da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800a3de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800a3e2:	2b0f      	cmp	r3, #15
 800a3e4:	ddbe      	ble.n	800a364 <Start_PID_TASK+0x264>
		  }
		  osMessagePut(PID_DATA_qHandle, (uint32_t)pidmsg,100);
 800a3e6:	4b22      	ldr	r3, [pc, #136]	; (800a470 <Start_PID_TASK+0x370>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800a3ee:	2264      	movs	r2, #100	; 0x64
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f00d fa0b 	bl	801780c <osMessagePut>
		  osMessagePut(DUTY_Q_qHandle, (uint32_t)dutymsg,100);
 800a3f6:	4b1f      	ldr	r3, [pc, #124]	; (800a474 <Start_PID_TASK+0x374>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800a3fe:	2264      	movs	r2, #100	; 0x64
 800a400:	4618      	mov	r0, r3
 800a402:	f00d fa03 	bl	801780c <osMessagePut>
	  }
	  if(LOOP_RUNNING == CLOSE_LOOP)
 800a406:	4b14      	ldr	r3, [pc, #80]	; (800a458 <Start_PID_TASK+0x358>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	f040 823e 	bne.w	800a88c <Start_PID_TASK+0x78c>
	  {
	  if(NO_DUTY == 1)
 800a410:	4b19      	ldr	r3, [pc, #100]	; (800a478 <Start_PID_TASK+0x378>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d151      	bne.n	800a4bc <Start_PID_TASK+0x3bc>
	  {
		  for(int i =0;i<16;i++)
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800a41e:	e049      	b.n	800a4b4 <Start_PID_TASK+0x3b4>
 800a420:	20001614 	.word	0x20001614
 800a424:	20001e3c 	.word	0x20001e3c
 800a428:	20001e38 	.word	0x20001e38
 800a42c:	2000163c 	.word	0x2000163c
 800a430:	2000297c 	.word	0x2000297c
 800a434:	200029bc 	.word	0x200029bc
 800a438:	200029fc 	.word	0x200029fc
 800a43c:	20001e34 	.word	0x20001e34
 800a440:	20002ab4 	.word	0x20002ab4
 800a444:	20001630 	.word	0x20001630
 800a448:	20002ad4 	.word	0x20002ad4
 800a44c:	20001e40 	.word	0x20001e40
 800a450:	20001638 	.word	0x20001638
 800a454:	20002ad8 	.word	0x20002ad8
 800a458:	20001f58 	.word	0x20001f58
 800a45c:	20001628 	.word	0x20001628
 800a460:	20001634 	.word	0x20001634
 800a464:	461c4000 	.word	0x461c4000
 800a468:	20001f64 	.word	0x20001f64
 800a46c:	447a0000 	.word	0x447a0000
 800a470:	20001e68 	.word	0x20001e68
 800a474:	20001e60 	.word	0x20001e60
 800a478:	20001f60 	.word	0x20001f60
		  {
			  DUTY[i]=0;
 800a47c:	4adb      	ldr	r2, [pc, #876]	; (800a7ec <Start_PID_TASK+0x6ec>)
 800a47e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	f04f 0200 	mov.w	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
			  PCA9685_SetDuty(i, DUTY[i]);
 800a48c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a490:	b2da      	uxtb	r2, r3
 800a492:	49d6      	ldr	r1, [pc, #856]	; (800a7ec <Start_PID_TASK+0x6ec>)
 800a494:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	440b      	add	r3, r1
 800a49c:	edd3 7a00 	vldr	s15, [r3]
 800a4a0:	eeb0 0a67 	vmov.f32	s0, s15
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7f7 fcab 	bl	8001e00 <PCA9685_SetDuty>
		  for(int i =0;i<16;i++)
 800a4aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800a4b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a4b8:	2b0f      	cmp	r3, #15
 800a4ba:	dddf      	ble.n	800a47c <Start_PID_TASK+0x37c>
		  }

	  }
	  if(sp==1 && fb ==1 )
 800a4bc:	4bcc      	ldr	r3, [pc, #816]	; (800a7f0 <Start_PID_TASK+0x6f0>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	f040 81e3 	bne.w	800a88c <Start_PID_TASK+0x78c>
 800a4c6:	4bcb      	ldr	r3, [pc, #812]	; (800a7f4 <Start_PID_TASK+0x6f4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	f040 81de 	bne.w	800a88c <Start_PID_TASK+0x78c>
	  {
		  fb=0;
 800a4d0:	4bc8      	ldr	r3, [pc, #800]	; (800a7f4 <Start_PID_TASK+0x6f4>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
  		  HAL_TIM_Base_Stop(&htim4);
 800a4d6:	48c8      	ldr	r0, [pc, #800]	; (800a7f8 <Start_PID_TASK+0x6f8>)
 800a4d8:	f00a ff74 	bl	80153c4 <HAL_TIM_Base_Stop>
		  CURRENT_COUNT =(__HAL_TIM_GET_COUNTER(&htim4))/(float)30000;
 800a4dc:	4bc6      	ldr	r3, [pc, #792]	; (800a7f8 <Start_PID_TASK+0x6f8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4ea:	eddf 6ac4 	vldr	s13, [pc, #784]	; 800a7fc <Start_PID_TASK+0x6fc>
 800a4ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a4f2:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
		  COUNT_DIFFERENCE = (CURRENT_COUNT-PREVIOUS_COUNT);
 800a4f6:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 800a4fa:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 800a4fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a502:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
		  if(COUNT_DIFFERENCE == 0)
 800a506:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 800a50a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a512:	d103      	bne.n	800a51c <Start_PID_TASK+0x41c>
		  {
			  COUNT_DIFFERENCE =1;
 800a514:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a518:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  }
			for(int i =0;i<16;i++)
 800a51c:	2300      	movs	r3, #0
 800a51e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a522:	e153      	b.n	800a7cc <Start_PID_TASK+0x6cc>
			{
			setpoint =0;
 800a524:	f04f 0300 	mov.w	r3, #0
 800a528:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		    feedback=0;
 800a52c:	f04f 0300 	mov.w	r3, #0
 800a530:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
			setpoint = (((float)SETPOINT[i])/100);
 800a534:	4ab2      	ldr	r2, [pc, #712]	; (800a800 <Start_PID_TASK+0x700>)
 800a536:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a53a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a546:	eddf 6aaf 	vldr	s13, [pc, #700]	; 800a804 <Start_PID_TASK+0x704>
 800a54a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a54e:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
			feedback = (((float)FEEDBACK[i])/(float)10);
 800a552:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a55c:	443b      	add	r3, r7
 800a55e:	f833 3c90 	ldrh.w	r3, [r3, #-144]
 800a562:	ee07 3a90 	vmov	s15, r3
 800a566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a56a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a56e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a572:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
			CURRENT_ERROR[i] = setpoint - (feedback);
 800a576:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800a57a:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 800a57e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a582:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a586:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a58a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	edc3 7a00 	vstr	s15, [r3]
			PROPORTIONAL[i] = CURRENT_ERROR[i];
 800a596:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a59a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a59e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a5b2:	443b      	add	r3, r7
 800a5b4:	3bd0      	subs	r3, #208	; 0xd0
 800a5b6:	601a      	str	r2, [r3, #0]
			INTEGRAL[i] =  (KI[i]/KP[i])*((CURRENT_ERROR[i])-(PREVIOUS_ERROR[i])/2)*COUNT_DIFFERENCE;
 800a5b8:	4a93      	ldr	r2, [pc, #588]	; (800a808 <Start_PID_TASK+0x708>)
 800a5ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	edd3 6a00 	vldr	s13, [r3]
 800a5c6:	4a91      	ldr	r2, [pc, #580]	; (800a80c <Start_PID_TASK+0x70c>)
 800a5c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	edd3 7a00 	vldr	s15, [r3]
 800a5d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a5dc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a5e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	edd3 6a00 	vldr	s13, [r3]
 800a5ec:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a5f0:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800a5f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	ed93 6a00 	vldr	s12, [r3]
 800a600:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a608:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a60c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a610:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 800a614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a618:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a61c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800a620:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	edc3 7a00 	vstr	s15, [r3]
			if(INTEGRAL[i]<0)
 800a62c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a630:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800a634:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	edd3 7a00 	vldr	s15, [r3]
 800a640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a648:	d50a      	bpl.n	800a660 <Start_PID_TASK+0x560>
			{
			INTEGRAL[i] =0;
 800a64a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a64e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800a652:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	f04f 0200 	mov.w	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
			}
			DERIVATIVE[i] = (KD[i]/KP[i])*((CURRENT_ERROR[i])-(PREVIOUS_ERROR[i]));
 800a660:	4a6b      	ldr	r2, [pc, #428]	; (800a810 <Start_PID_TASK+0x710>)
 800a662:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	edd3 6a00 	vldr	s13, [r3]
 800a66e:	4a67      	ldr	r2, [pc, #412]	; (800a80c <Start_PID_TASK+0x70c>)
 800a670:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	edd3 7a00 	vldr	s15, [r3]
 800a67c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a680:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a684:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a688:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	edd3 6a00 	vldr	s13, [r3]
 800a694:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a698:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800a69c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	edd3 7a00 	vldr	s15, [r3]
 800a6a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a6ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a6b4:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 800a6b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	edc3 7a00 	vstr	s15, [r3]
			PID_OUTPUT[i] = KP[i]*(PROPORTIONAL[i]+INTEGRAL[i]+DERIVATIVE[i]);
 800a6c4:	4a51      	ldr	r2, [pc, #324]	; (800a80c <Start_PID_TASK+0x70c>)
 800a6c6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	ed93 7a00 	vldr	s14, [r3]
 800a6d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6dc:	443b      	add	r3, r7
 800a6de:	3bd0      	subs	r3, #208	; 0xd0
 800a6e0:	edd3 6a00 	vldr	s13, [r3]
 800a6e4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a6e8:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800a6ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	edd3 7a00 	vldr	s15, [r3]
 800a6f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a6fc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a700:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 800a704:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	edd3 7a00 	vldr	s15, [r3]
 800a710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a714:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a718:	4a3e      	ldr	r2, [pc, #248]	; (800a814 <Start_PID_TASK+0x714>)
 800a71a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	edc3 7a00 	vstr	s15, [r3]
			if( PID_OUTPUT[i]>0)
 800a726:	4a3b      	ldr	r2, [pc, #236]	; (800a814 <Start_PID_TASK+0x714>)
 800a728:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	edd3 7a00 	vldr	s15, [r3]
 800a734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73c:	dd2d      	ble.n	800a79a <Start_PID_TASK+0x69a>
			{
			DUTY[i] = map(PID_OUTPUT[i],0,setpoint,0,1);
 800a73e:	4a35      	ldr	r2, [pc, #212]	; (800a814 <Start_PID_TASK+0x714>)
 800a740:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	edd3 7a00 	vldr	s15, [r3]
 800a74c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800a750:	eddf 1a31 	vldr	s3, [pc, #196]	; 800a818 <Start_PID_TASK+0x718>
 800a754:	ed97 1a69 	vldr	s2, [r7, #420]	; 0x1a4
 800a758:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800a818 <Start_PID_TASK+0x718>
 800a75c:	eeb0 0a67 	vmov.f32	s0, s15
 800a760:	f7f7 fc2a 	bl	8001fb8 <map>
 800a764:	eef0 7a40 	vmov.f32	s15, s0
 800a768:	4a20      	ldr	r2, [pc, #128]	; (800a7ec <Start_PID_TASK+0x6ec>)
 800a76a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	edc3 7a00 	vstr	s15, [r3]
			PREVIOUS_ERROR[i] = CURRENT_ERROR[i];
 800a776:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a77a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800a77e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a78c:	f5a3 71c8 	sub.w	r1, r3, #400	; 0x190
 800a790:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	440b      	add	r3, r1
 800a798:	601a      	str	r2, [r3, #0]
			}
			if(PID_OUTPUT[i]<0)
 800a79a:	4a1e      	ldr	r2, [pc, #120]	; (800a814 <Start_PID_TASK+0x714>)
 800a79c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	edd3 7a00 	vldr	s15, [r3]
 800a7a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b0:	d507      	bpl.n	800a7c2 <Start_PID_TASK+0x6c2>
			{
			DUTY[i] =0;
 800a7b2:	4a0e      	ldr	r2, [pc, #56]	; (800a7ec <Start_PID_TASK+0x6ec>)
 800a7b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f04f 0200 	mov.w	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
			for(int i =0;i<16;i++)
 800a7c2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a7cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a7d0:	2b0f      	cmp	r3, #15
 800a7d2:	f77f aea7 	ble.w	800a524 <Start_PID_TASK+0x424>
			}
			}

			pidmsg = osPoolAlloc(pidpool);
 800a7d6:	4b11      	ldr	r3, [pc, #68]	; (800a81c <Start_PID_TASK+0x71c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f00c ff49 	bl	8017672 <osPoolAlloc>
 800a7e0:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			for(int i =0;i<16;i++)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800a7ea:	e034      	b.n	800a856 <Start_PID_TASK+0x756>
 800a7ec:	20001f64 	.word	0x20001f64
 800a7f0:	20002ad4 	.word	0x20002ad4
 800a7f4:	20002ad8 	.word	0x20002ad8
 800a7f8:	20001940 	.word	0x20001940
 800a7fc:	46ea6000 	.word	0x46ea6000
 800a800:	20002ab4 	.word	0x20002ab4
 800a804:	42c80000 	.word	0x42c80000
 800a808:	200029bc 	.word	0x200029bc
 800a80c:	2000297c 	.word	0x2000297c
 800a810:	200029fc 	.word	0x200029fc
 800a814:	20002adc 	.word	0x20002adc
 800a818:	00000000 	.word	0x00000000
 800a81c:	20001628 	.word	0x20001628
			{
			pidmsg->PID_DATA_t[i] = (int)(DUTY[i]*1000);
 800a820:	4a1c      	ldr	r2, [pc, #112]	; (800a894 <Start_PID_TASK+0x794>)
 800a822:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	edd3 7a00 	vldr	s15, [r3]
 800a82e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a898 <Start_PID_TASK+0x798>
 800a832:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a83a:	ee17 3a90 	vmov	r3, s15
 800a83e:	b299      	uxth	r1, r3
 800a840:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a844:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800a848:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(int i =0;i<16;i++)
 800a84c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a850:	3301      	adds	r3, #1
 800a852:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800a856:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800a85a:	2b0f      	cmp	r3, #15
 800a85c:	dde0      	ble.n	800a820 <Start_PID_TASK+0x720>
			}
			osMessagePut(PID_DATA_qHandle, (uint32_t)pidmsg,100);
 800a85e:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <Start_PID_TASK+0x79c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800a866:	2264      	movs	r2, #100	; 0x64
 800a868:	4618      	mov	r0, r3
 800a86a:	f00c ffcf 	bl	801780c <osMessagePut>

			PREVIOUS_COUNT = CURRENT_COUNT;
 800a86e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a872:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
			CURRENT_COUNT =0;
 800a876:	f04f 0300 	mov.w	r3, #0
 800a87a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			__HAL_TIM_SET_COUNTER(&htim4,0);
 800a87e:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <Start_PID_TASK+0x7a0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim4);
 800a886:	4806      	ldr	r0, [pc, #24]	; (800a8a0 <Start_PID_TASK+0x7a0>)
 800a888:	f00a fd2c 	bl	80152e4 <HAL_TIM_Base_Start>
	  }
	  }
    osDelay(50);
 800a88c:	2032      	movs	r0, #50	; 0x32
 800a88e:	f00c fdca 	bl	8017426 <osDelay>
	  givememsg = osPoolAlloc(givepool);
 800a892:	e447      	b.n	800a124 <Start_PID_TASK+0x24>
 800a894:	20001f64 	.word	0x20001f64
 800a898:	447a0000 	.word	0x447a0000
 800a89c:	20001e68 	.word	0x20001e68
 800a8a0:	20001940 	.word	0x20001940
 800a8a4:	00000000 	.word	0x00000000

0800a8a8 <Start_VOLTAGE_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_VOLTAGE_TASK */
void Start_VOLTAGE_TASK(void const * argument)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b094      	sub	sp, #80	; 0x50
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	float MAVG;
	static int k =0;
  /* Infinite loop */
  for(;;)
  {
		HAL_ADC_Start(&hadc2);
 800a8b0:	4855      	ldr	r0, [pc, #340]	; (800aa08 <Start_VOLTAGE_TASK+0x160>)
 800a8b2:	f005 fd43 	bl	801033c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1);
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	4853      	ldr	r0, [pc, #332]	; (800aa08 <Start_VOLTAGE_TASK+0x160>)
 800a8ba:	f005 fe41 	bl	8010540 <HAL_ADC_PollForConversion>
		ADC_VALUE_OF_VOLTAGE = HAL_ADC_GetValue(&hadc2);
 800a8be:	4852      	ldr	r0, [pc, #328]	; (800aa08 <Start_VOLTAGE_TASK+0x160>)
 800a8c0:	f005 fec9 	bl	8010656 <HAL_ADC_GetValue>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		REAL_VOLTAGE_ADC_RANGE = (ADC_VALUE_OF_VOLTAGE*(3.3/4096))*1000;
 800a8ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a8d6:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800a9f8 <Start_VOLTAGE_TASK+0x150>
 800a8da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8de:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800aa00 <Start_VOLTAGE_TASK+0x158>
 800a8e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800a8ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		VOLTAGE = map(REAL_VOLTAGE_ADC_RANGE, 1755,193,60, 80);
 800a8ee:	ed9f 2a47 	vldr	s4, [pc, #284]	; 800aa0c <Start_VOLTAGE_TASK+0x164>
 800a8f2:	eddf 1a47 	vldr	s3, [pc, #284]	; 800aa10 <Start_VOLTAGE_TASK+0x168>
 800a8f6:	ed9f 1a47 	vldr	s2, [pc, #284]	; 800aa14 <Start_VOLTAGE_TASK+0x16c>
 800a8fa:	eddf 0a47 	vldr	s1, [pc, #284]	; 800aa18 <Start_VOLTAGE_TASK+0x170>
 800a8fe:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800a902:	f7f7 fb59 	bl	8001fb8 <map>
 800a906:	eef0 7a40 	vmov.f32	s15, s0
 800a90a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a90e:	ee17 3a90 	vmov	r3, s15
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_ADC_Stop(&hadc2);
 800a914:	483c      	ldr	r0, [pc, #240]	; (800aa08 <Start_VOLTAGE_TASK+0x160>)
 800a916:	f005 fddf 	bl	80104d8 <HAL_ADC_Stop>
		buffer[k] = VOLTAGE;
 800a91a:	4b40      	ldr	r3, [pc, #256]	; (800aa1c <Start_VOLTAGE_TASK+0x174>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a920:	ee07 2a90 	vmov	s15, r2
 800a924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	3350      	adds	r3, #80	; 0x50
 800a92c:	443b      	add	r3, r7
 800a92e:	3b44      	subs	r3, #68	; 0x44
 800a930:	edc3 7a00 	vstr	s15, [r3]
		k++;
 800a934:	4b39      	ldr	r3, [pc, #228]	; (800aa1c <Start_VOLTAGE_TASK+0x174>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	4a38      	ldr	r2, [pc, #224]	; (800aa1c <Start_VOLTAGE_TASK+0x174>)
 800a93c:	6013      	str	r3, [r2, #0]
		if(k>=10)
 800a93e:	4b37      	ldr	r3, [pc, #220]	; (800aa1c <Start_VOLTAGE_TASK+0x174>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b09      	cmp	r3, #9
 800a944:	dd02      	ble.n	800a94c <Start_VOLTAGE_TASK+0xa4>
		{
		k=0;
 800a946:	4b35      	ldr	r3, [pc, #212]	; (800aa1c <Start_VOLTAGE_TASK+0x174>)
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]
		}
		for(int j =0;j<10;j++)
 800a94c:	2300      	movs	r3, #0
 800a94e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a950:	e00f      	b.n	800a972 <Start_VOLTAGE_TASK+0xca>
		{
		MAVG = MAVG+buffer[j];
 800a952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	3350      	adds	r3, #80	; 0x50
 800a958:	443b      	add	r3, r7
 800a95a:	3b44      	subs	r3, #68	; 0x44
 800a95c:	edd3 7a00 	vldr	s15, [r3]
 800a960:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a964:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a968:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		for(int j =0;j<10;j++)
 800a96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a96e:	3301      	adds	r3, #1
 800a970:	64bb      	str	r3, [r7, #72]	; 0x48
 800a972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a974:	2b09      	cmp	r3, #9
 800a976:	ddec      	ble.n	800a952 <Start_VOLTAGE_TASK+0xaa>
		}
		MAVG = MAVG/10;
 800a978:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a97c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a984:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		lcdmsg = osPoolAlloc(lcdpool);
 800a988:	4b25      	ldr	r3, [pc, #148]	; (800aa20 <Start_VOLTAGE_TASK+0x178>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f00c fe70 	bl	8017672 <osPoolAlloc>
 800a992:	63b8      	str	r0, [r7, #56]	; 0x38
		dataaccumsg = osPoolAlloc(dataaccupool);
 800a994:	4b23      	ldr	r3, [pc, #140]	; (800aa24 <Start_VOLTAGE_TASK+0x17c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4618      	mov	r0, r3
 800a99a:	f00c fe6a 	bl	8017672 <osPoolAlloc>
 800a99e:	6378      	str	r0, [r7, #52]	; 0x34
		lcdmsg->LCD_DATA[0]=SYS_VOLTAGE;
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	222b      	movs	r2, #43	; 0x2b
 800a9a4:	701a      	strb	r2, [r3, #0]
		lcdmsg->LCD_DATA[1] = (int)MAVG;
 800a9a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a9aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9ae:	edc7 7a00 	vstr	s15, [r7]
 800a9b2:	783a      	ldrb	r2, [r7, #0]
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	705a      	strb	r2, [r3, #1]
		dataaccumsg->SYSTEM_VOLTAGE_t = (int)MAVG;
 800a9b8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a9bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9c0:	edc7 7a00 	vstr	s15, [r7]
 800a9c4:	783a      	ldrb	r2, [r7, #0]
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	701a      	strb	r2, [r3, #0]
		osMessagePut(DATA_ACCU_qHandle, (uint32_t)dataaccumsg,100);
 800a9ca:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <Start_VOLTAGE_TASK+0x180>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9d0:	2264      	movs	r2, #100	; 0x64
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f00c ff1a 	bl	801780c <osMessagePut>
		osMessagePut(LCD_QUEUE_qHandle, (uint32_t)lcdmsg,100);
 800a9d8:	4b14      	ldr	r3, [pc, #80]	; (800aa2c <Start_VOLTAGE_TASK+0x184>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9de:	2264      	movs	r2, #100	; 0x64
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f00c ff13 	bl	801780c <osMessagePut>
		MAVG = 0;
 800a9e6:	f04f 0300 	mov.w	r3, #0
 800a9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    osDelay(1);
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	f00c fd1a 	bl	8017426 <osDelay>
		HAL_ADC_Start(&hadc2);
 800a9f2:	e75d      	b.n	800a8b0 <Start_VOLTAGE_TASK+0x8>
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	66666666 	.word	0x66666666
 800a9fc:	3f4a6666 	.word	0x3f4a6666
 800aa00:	00000000 	.word	0x00000000
 800aa04:	408f4000 	.word	0x408f4000
 800aa08:	20001688 	.word	0x20001688
 800aa0c:	42a00000 	.word	0x42a00000
 800aa10:	42700000 	.word	0x42700000
 800aa14:	43410000 	.word	0x43410000
 800aa18:	44db6000 	.word	0x44db6000
 800aa1c:	20002b1c 	.word	0x20002b1c
 800aa20:	2000160c 	.word	0x2000160c
 800aa24:	200015e0 	.word	0x200015e0
 800aa28:	20001e50 	.word	0x20001e50
 800aa2c:	20001e4c 	.word	0x20001e4c

0800aa30 <Start_WHOLE_CURRENT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_WHOLE_CURRENT */
void Start_WHOLE_CURRENT(void const * argument)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800aa3c:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800aa40:	6018      	str	r0, [r3, #0]
	float MAVG;
	static int k =0;
  /* Infinite loop */
  for(;;)
  {
		HAL_ADC_Start(&hadc1);
 800aa42:	4869      	ldr	r0, [pc, #420]	; (800abe8 <Start_WHOLE_CURRENT+0x1b8>)
 800aa44:	f005 fc7a 	bl	801033c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 800aa48:	210a      	movs	r1, #10
 800aa4a:	4867      	ldr	r0, [pc, #412]	; (800abe8 <Start_WHOLE_CURRENT+0x1b8>)
 800aa4c:	f005 fd78 	bl	8010540 <HAL_ADC_PollForConversion>
		ADC_READINg_CURR_SENSOR = HAL_ADC_GetValue(&hadc1);
 800aa50:	4865      	ldr	r0, [pc, #404]	; (800abe8 <Start_WHOLE_CURRENT+0x1b8>)
 800aa52:	f005 fe00 	bl	8010656 <HAL_ADC_GetValue>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
		VOLT_READING_CURR_SENSOR = (float)ADC_READINg_CURR_SENSOR*(3.3/4096);
 800aa5c:	f8b7 333e 	ldrh.w	r3, [r7, #830]	; 0x33e
 800aa60:	ee07 3a90 	vmov	s15, r3
 800aa64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800aa6c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 800abd8 <Start_WHOLE_CURRENT+0x1a8>
 800aa70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800aa78:	edc7 7ace 	vstr	s15, [r7, #824]	; 0x338
		CURR_READING = (float)(2.495-VOLT_READING_CURR_SENSOR)/(float)(0.003125);
 800aa7c:	edd7 7ace 	vldr	s15, [r7, #824]	; 0x338
 800aa80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800aa84:	ed9f 6b56 	vldr	d6, [pc, #344]	; 800abe0 <Start_WHOLE_CURRENT+0x1b0>
 800aa88:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aa8c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800aa90:	eddf 6a56 	vldr	s13, [pc, #344]	; 800abec <Start_WHOLE_CURRENT+0x1bc>
 800aa94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa98:	edc7 7acd 	vstr	s15, [r7, #820]	; 0x334
		buffer[k] = CURR_READING;
 800aa9c:	4b54      	ldr	r3, [pc, #336]	; (800abf0 <Start_WHOLE_CURRENT+0x1c0>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800aaa4:	f5a2 7250 	sub.w	r2, r2, #832	; 0x340
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800aab0:	601a      	str	r2, [r3, #0]
		k++;
 800aab2:	4b4f      	ldr	r3, [pc, #316]	; (800abf0 <Start_WHOLE_CURRENT+0x1c0>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3301      	adds	r3, #1
 800aab8:	4a4d      	ldr	r2, [pc, #308]	; (800abf0 <Start_WHOLE_CURRENT+0x1c0>)
 800aaba:	6013      	str	r3, [r2, #0]
		if(k>=200)
 800aabc:	4b4c      	ldr	r3, [pc, #304]	; (800abf0 <Start_WHOLE_CURRENT+0x1c0>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2bc7      	cmp	r3, #199	; 0xc7
 800aac2:	dd02      	ble.n	800aaca <Start_WHOLE_CURRENT+0x9a>
		{
		k=0;
 800aac4:	4b4a      	ldr	r3, [pc, #296]	; (800abf0 <Start_WHOLE_CURRENT+0x1c0>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]
		}
		for(int j =0;j<200;j++)
 800aaca:	2300      	movs	r3, #0
 800aacc:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800aad0:	e014      	b.n	800aafc <Start_WHOLE_CURRENT+0xcc>
		{
		MAVG = MAVG+buffer[j];
 800aad2:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800aad6:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800aada:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	edd3 7a00 	vldr	s15, [r3]
 800aae6:	ed97 7ad1 	vldr	s14, [r7, #836]	; 0x344
 800aaea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaee:	edc7 7ad1 	vstr	s15, [r7, #836]	; 0x344
		for(int j =0;j<200;j++)
 800aaf2:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800aafc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800ab00:	2bc7      	cmp	r3, #199	; 0xc7
 800ab02:	dde6      	ble.n	800aad2 <Start_WHOLE_CURRENT+0xa2>
		}
		MAVG = MAVG/200;
 800ab04:	ed97 7ad1 	vldr	s14, [r7, #836]	; 0x344
 800ab08:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800abf4 <Start_WHOLE_CURRENT+0x1c4>
 800ab0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab10:	edc7 7ad1 	vstr	s15, [r7, #836]	; 0x344
		lcdmsg = osPoolAlloc(lcdpool);
 800ab14:	4b38      	ldr	r3, [pc, #224]	; (800abf8 <Start_WHOLE_CURRENT+0x1c8>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f00c fdaa 	bl	8017672 <osPoolAlloc>
 800ab1e:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
		dataaccumsg = osPoolAlloc(dataaccupool);
 800ab22:	4b36      	ldr	r3, [pc, #216]	; (800abfc <Start_WHOLE_CURRENT+0x1cc>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f00c fda3 	bl	8017672 <osPoolAlloc>
 800ab2c:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
		lcdmsg->LCD_DATA[0]=WHOLE_CURRENT;
 800ab30:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800ab34:	222a      	movs	r2, #42	; 0x2a
 800ab36:	701a      	strb	r2, [r3, #0]
		lcdmsg->LCD_DATA[1] = MAVG;
 800ab38:	edd7 7ad1 	vldr	s15, [r7, #836]	; 0x344
 800ab3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab40:	edc7 7a00 	vstr	s15, [r7]
 800ab44:	783b      	ldrb	r3, [r7, #0]
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800ab4c:	705a      	strb	r2, [r3, #1]
		dataaccumsg->SYSTEM_CURRENT_t = MAVG;
 800ab4e:	edd7 7ad1 	vldr	s15, [r7, #836]	; 0x344
 800ab52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab56:	edc7 7a00 	vstr	s15, [r7]
 800ab5a:	783b      	ldrb	r3, [r7, #0]
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800ab62:	705a      	strb	r2, [r3, #1]
		osMessagePut(DATA_ACCU_qHandle,(uint32_t)dataaccumsg,100);
 800ab64:	4b26      	ldr	r3, [pc, #152]	; (800ac00 <Start_WHOLE_CURRENT+0x1d0>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800ab6c:	2264      	movs	r2, #100	; 0x64
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f00c fe4c 	bl	801780c <osMessagePut>
		osMessagePut(LCD_QUEUE_qHandle, (uint32_t)lcdmsg,100);
 800ab74:	4b23      	ldr	r3, [pc, #140]	; (800ac04 <Start_WHOLE_CURRENT+0x1d4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 800ab7c:	2264      	movs	r2, #100	; 0x64
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f00c fe44 	bl	801780c <osMessagePut>
		if(MAVG>=1)
 800ab84:	edd7 7ad1 	vldr	s15, [r7, #836]	; 0x344
 800ab88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab94:	db17      	blt.n	800abc6 <Start_WHOLE_CURRENT+0x196>
		{
		currlmsg = osPoolAlloc(currlimitpool);
 800ab96:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <Start_WHOLE_CURRENT+0x1d8>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f00c fd69 	bl	8017672 <osPoolAlloc>
 800aba0:	f8c7 0328 	str.w	r0, [r7, #808]	; 0x328
		currlmsg->WHOLE_CURRENT_DATA = (int)MAVG;
 800aba4:	edd7 7ad1 	vldr	s15, [r7, #836]	; 0x344
 800aba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abac:	ee17 2a90 	vmov	r2, s15
 800abb0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800abb4:	605a      	str	r2, [r3, #4]
		osMessagePut(CURRENT_LIMIT_Q_qHandle, (uint32_t)currlmsg,10);
 800abb6:	4b15      	ldr	r3, [pc, #84]	; (800ac0c <Start_WHOLE_CURRENT+0x1dc>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f8d7 1328 	ldr.w	r1, [r7, #808]	; 0x328
 800abbe:	220a      	movs	r2, #10
 800abc0:	4618      	mov	r0, r3
 800abc2:	f00c fe23 	bl	801780c <osMessagePut>
		}
		MAVG =0;
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    osDelay(1);
 800abce:	2001      	movs	r0, #1
 800abd0:	f00c fc29 	bl	8017426 <osDelay>
		HAL_ADC_Start(&hadc1);
 800abd4:	e735      	b.n	800aa42 <Start_WHOLE_CURRENT+0x12>
 800abd6:	bf00      	nop
 800abd8:	66666666 	.word	0x66666666
 800abdc:	3f4a6666 	.word	0x3f4a6666
 800abe0:	8f5c28f6 	.word	0x8f5c28f6
 800abe4:	4003f5c2 	.word	0x4003f5c2
 800abe8:	20001640 	.word	0x20001640
 800abec:	3b4ccccd 	.word	0x3b4ccccd
 800abf0:	20002b20 	.word	0x20002b20
 800abf4:	43480000 	.word	0x43480000
 800abf8:	2000160c 	.word	0x2000160c
 800abfc:	200015e0 	.word	0x200015e0
 800ac00:	20001e50 	.word	0x20001e50
 800ac04:	20001e4c 	.word	0x20001e4c
 800ac08:	20001618 	.word	0x20001618
 800ac0c:	20001e6c 	.word	0x20001e6c

0800ac10 <Start_ADC_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ADC_TASK */
void Start_ADC_TASK(void const * argument)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b0ca      	sub	sp, #296	; 0x128
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800ac1a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ac1e:	6018      	str	r0, [r3, #0]
	static int rsk =0;
	static int connected =0;
  /* Infinite loop */
  for(;;)
  {
	  switch(pos)
 800ac20:	4bc1      	ldr	r3, [pc, #772]	; (800af28 <Start_ADC_TASK+0x318>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	f200 83ed 	bhi.w	800b404 <Start_ADC_TASK+0x7f4>
 800ac2a:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <Start_ADC_TASK+0x20>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac41 	.word	0x0800ac41
 800ac34:	0800add5 	.word	0x0800add5
 800ac38:	0800b021 	.word	0x0800b021
 800ac3c:	0800b235 	.word	0x0800b235
	  {
	  case 0:
		  IR_TEMPERATURE();
 800ac40:	f7f7 f9e8 	bl	8002014 <IR_TEMPERATURE>
		  HAL_ADC_Start(&hadc3);
 800ac44:	48b9      	ldr	r0, [pc, #740]	; (800af2c <Start_ADC_TASK+0x31c>)
 800ac46:	f005 fb79 	bl	801033c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc3, 1000);
 800ac4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac4e:	48b7      	ldr	r0, [pc, #732]	; (800af2c <Start_ADC_TASK+0x31c>)
 800ac50:	f005 fc76 	bl	8010540 <HAL_ADC_PollForConversion>
		  IR_TEMPERATURE_t = HAL_ADC_GetValue(&hadc3);
 800ac54:	48b5      	ldr	r0, [pc, #724]	; (800af2c <Start_ADC_TASK+0x31c>)
 800ac56:	f005 fcfe 	bl	8010656 <HAL_ADC_GetValue>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
		  HAL_ADC_Stop(&hadc3);
 800ac60:	48b2      	ldr	r0, [pc, #712]	; (800af2c <Start_ADC_TASK+0x31c>)
 800ac62:	f005 fc39 	bl	80104d8 <HAL_ADC_Stop>
		  VOLTS_OF_IR_READING = (((float)IR_TEMPERATURE_t*3.3)/4096);
 800ac66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ac76:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 800af00 <Start_ADC_TASK+0x2f0>
 800ac7a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ac7e:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800af08 <Start_ADC_TASK+0x2f8>
 800ac82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ac86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ac8a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		  FINAL_IR = map(VOLTS_OF_IR_READING,2.9,0.2,0,100);
 800ac8e:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 800af30 <Start_ADC_TASK+0x320>
 800ac92:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800af34 <Start_ADC_TASK+0x324>
 800ac96:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800af38 <Start_ADC_TASK+0x328>
 800ac9a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800af3c <Start_ADC_TASK+0x32c>
 800ac9e:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 800aca2:	f7f7 f989 	bl	8001fb8 <map>
 800aca6:	ed87 0a49 	vstr	s0, [r7, #292]	; 0x124
		  if((VOLTS_OF_IR_READING<0.2)||(VOLTS_OF_IR_READING>2.9))
 800acaa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800acae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800acb2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800af10 <Start_ADC_TASK+0x300>
 800acb6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acbe:	d40a      	bmi.n	800acd6 <Start_ADC_TASK+0xc6>
 800acc0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800acc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800acc8:	ed9f 6b93 	vldr	d6, [pc, #588]	; 800af18 <Start_ADC_TASK+0x308>
 800accc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd4:	dd07      	ble.n	800ace6 <Start_ADC_TASK+0xd6>
		  {
			  FINAL_IR =0;
 800acd6:	f04f 0300 	mov.w	r3, #0
 800acda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			  connected =0;
 800acde:	4b98      	ldr	r3, [pc, #608]	; (800af40 <Start_ADC_TASK+0x330>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	e002      	b.n	800acec <Start_ADC_TASK+0xdc>
		  }
		  else
		  {
			  connected =1;
 800ace6:	4b96      	ldr	r3, [pc, #600]	; (800af40 <Start_ADC_TASK+0x330>)
 800ace8:	2201      	movs	r2, #1
 800acea:	601a      	str	r2, [r3, #0]
		  }
		  irbuffer[irk] = FINAL_IR;
 800acec:	4b95      	ldr	r3, [pc, #596]	; (800af44 <Start_ADC_TASK+0x334>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800acf6:	443b      	add	r3, r7
 800acf8:	3ba4      	subs	r3, #164	; 0xa4
 800acfa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800acfe:	601a      	str	r2, [r3, #0]
		  irk++;
 800ad00:	4b90      	ldr	r3, [pc, #576]	; (800af44 <Start_ADC_TASK+0x334>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3301      	adds	r3, #1
 800ad06:	4a8f      	ldr	r2, [pc, #572]	; (800af44 <Start_ADC_TASK+0x334>)
 800ad08:	6013      	str	r3, [r2, #0]
		  if(irk>=10)
 800ad0a:	4b8e      	ldr	r3, [pc, #568]	; (800af44 <Start_ADC_TASK+0x334>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b09      	cmp	r3, #9
 800ad10:	dd02      	ble.n	800ad18 <Start_ADC_TASK+0x108>
		  {
			  irk = 0;
 800ad12:	4b8c      	ldr	r3, [pc, #560]	; (800af44 <Start_ADC_TASK+0x334>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
		  }
		  for(int j =0;j<10;j++)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ad1e:	e013      	b.n	800ad48 <Start_ADC_TASK+0x138>
		  {
			  irMAVG = irMAVG+irbuffer[j];
 800ad20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ad2a:	443b      	add	r3, r7
 800ad2c:	3ba4      	subs	r3, #164	; 0xa4
 800ad2e:	edd3 7a00 	vldr	s15, [r3]
 800ad32:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800ad36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad3a:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
		  for(int j =0;j<10;j++)
 800ad3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad42:	3301      	adds	r3, #1
 800ad44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ad48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	dde7      	ble.n	800ad20 <Start_ADC_TASK+0x110>
		  }
		  irMAVG = irMAVG/10;
 800ad50:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800ad54:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ad58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad5c:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
		  lcdmsg=osPoolAlloc(lcdpool);
 800ad60:	4b79      	ldr	r3, [pc, #484]	; (800af48 <Start_ADC_TASK+0x338>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f00c fc84 	bl	8017672 <osPoolAlloc>
 800ad6a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		  dataaccumsg = osPoolAlloc(dataaccupool);
 800ad6e:	4b77      	ldr	r3, [pc, #476]	; (800af4c <Start_ADC_TASK+0x33c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f00c fc7d 	bl	8017672 <osPoolAlloc>
 800ad78:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  lcdmsg->LCD_DATA[0] = IR_TEMP_t;
 800ad7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad80:	22fb      	movs	r2, #251	; 0xfb
 800ad82:	701a      	strb	r2, [r3, #0]
		  lcdmsg->LCD_DATA[1] = (int)irMAVG;
 800ad84:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800ad88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad8c:	edc7 7a00 	vstr	s15, [r7]
 800ad90:	783a      	ldrb	r2, [r7, #0]
 800ad92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad96:	705a      	strb	r2, [r3, #1]
		  dataaccumsg->IR_TEMPERATURE_t = (int)irMAVG;
 800ad98:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800ad9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ada0:	edc7 7a00 	vstr	s15, [r7]
 800ada4:	783a      	ldrb	r2, [r7, #0]
 800ada6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adaa:	70da      	strb	r2, [r3, #3]
		  osMessagePut(DATA_ACCU_qHandle, (uint32_t)dataaccumsg,100);
 800adac:	4b68      	ldr	r3, [pc, #416]	; (800af50 <Start_ADC_TASK+0x340>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800adb4:	2264      	movs	r2, #100	; 0x64
 800adb6:	4618      	mov	r0, r3
 800adb8:	f00c fd28 	bl	801780c <osMessagePut>
		  osMessagePut(LCD_QUEUE_qHandle, (uint32_t)lcdmsg, 100);
 800adbc:	4b65      	ldr	r3, [pc, #404]	; (800af54 <Start_ADC_TASK+0x344>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800adc4:	2264      	movs	r2, #100	; 0x64
 800adc6:	4618      	mov	r0, r3
 800adc8:	f00c fd20 	bl	801780c <osMessagePut>
		  pos =1;
 800adcc:	4b56      	ldr	r3, [pc, #344]	; (800af28 <Start_ADC_TASK+0x318>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]
		  break;
 800add2:	e317      	b.n	800b404 <Start_ADC_TASK+0x7f4>

	  case 1:
		  AMB_TEMPERATURE();
 800add4:	f7f7 f93e 	bl	8002054 <AMB_TEMPERATURE>
		  HAL_ADC_Start(&hadc3);
 800add8:	4854      	ldr	r0, [pc, #336]	; (800af2c <Start_ADC_TASK+0x31c>)
 800adda:	f005 faaf 	bl	801033c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc3, 1000);
 800adde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ade2:	4852      	ldr	r0, [pc, #328]	; (800af2c <Start_ADC_TASK+0x31c>)
 800ade4:	f005 fbac 	bl	8010540 <HAL_ADC_PollForConversion>
		  AMB_TEMPERATURE_t = HAL_ADC_GetValue(&hadc3);
 800ade8:	4850      	ldr	r0, [pc, #320]	; (800af2c <Start_ADC_TASK+0x31c>)
 800adea:	f005 fc34 	bl	8010656 <HAL_ADC_GetValue>
 800adee:	4603      	mov	r3, r0
 800adf0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		  HAL_ADC_Stop(&hadc3);
 800adf4:	484d      	ldr	r0, [pc, #308]	; (800af2c <Start_ADC_TASK+0x31c>)
 800adf6:	f005 fb6f 	bl	80104d8 <HAL_ADC_Stop>
		  VOLTS_OF_AMB_READING = ((AMB_TEMPERATURE_t*3.3)/4096);
 800adfa:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae06:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 800af00 <Start_ADC_TASK+0x2f0>
 800ae0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ae0e:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 800af08 <Start_ADC_TASK+0x2f8>
 800ae12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ae1a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
		  AMB_RES = (VOLTS_OF_AMB_READING/(9-VOLTS_OF_AMB_READING))*1000000;
 800ae1e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800ae22:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800ae26:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae2a:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800ae2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae32:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800af58 <Start_ADC_TASK+0x348>
 800ae36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae3e:	ee17 3a90 	vmov	r3, s15
 800ae42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		  IR_logr = logf(AMB_RES);
 800ae46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae52:	eeb0 0a67 	vmov.f32	s0, s15
 800ae56:	f014 ffcb 	bl	801fdf0 <logf>
 800ae5a:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
		  IR_Inv_T = IR_A+(IR_B*IR_logr)+(IR_C*(IR_logr*IR_logr*IR_logr));
 800ae5e:	4b3f      	ldr	r3, [pc, #252]	; (800af5c <Start_ADC_TASK+0x34c>)
 800ae60:	ed93 7a00 	vldr	s14, [r3]
 800ae64:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ae68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae6c:	4b3c      	ldr	r3, [pc, #240]	; (800af60 <Start_ADC_TASK+0x350>)
 800ae6e:	edd3 7a00 	vldr	s15, [r3]
 800ae72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae76:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ae7a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ae7e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ae82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ae86:	4b37      	ldr	r3, [pc, #220]	; (800af64 <Start_ADC_TASK+0x354>)
 800ae88:	edd3 7a00 	vldr	s15, [r3]
 800ae8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae94:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		  IR_AMB_T = (1/IR_Inv_T)-273.15;
 800ae98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800aea8:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800af20 <Start_ADC_TASK+0x310>
 800aeac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aeb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800aeb4:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
		  if(connected ==0)
 800aeb8:	4b21      	ldr	r3, [pc, #132]	; (800af40 <Start_ADC_TASK+0x330>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <Start_ADC_TASK+0x2b8>
		  {
			  IR_AMB_T=0;
 800aec0:	f04f 0300 	mov.w	r3, #0
 800aec4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  }
		  ambbuffer[ambk] = IR_AMB_T;
 800aec8:	4b27      	ldr	r3, [pc, #156]	; (800af68 <Start_ADC_TASK+0x358>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aed2:	443b      	add	r3, r7
 800aed4:	3bcc      	subs	r3, #204	; 0xcc
 800aed6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800aeda:	601a      	str	r2, [r3, #0]
		  ambk++;
 800aedc:	4b22      	ldr	r3, [pc, #136]	; (800af68 <Start_ADC_TASK+0x358>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3301      	adds	r3, #1
 800aee2:	4a21      	ldr	r2, [pc, #132]	; (800af68 <Start_ADC_TASK+0x358>)
 800aee4:	6013      	str	r3, [r2, #0]
		  if(ambk>=10)
 800aee6:	4b20      	ldr	r3, [pc, #128]	; (800af68 <Start_ADC_TASK+0x358>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b09      	cmp	r3, #9
 800aeec:	dd02      	ble.n	800aef4 <Start_ADC_TASK+0x2e4>
		  {
			  ambk=0;
 800aeee:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <Start_ADC_TASK+0x358>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]
		  }
		  for(int j =0;j<10;j++)
 800aef4:	2300      	movs	r3, #0
 800aef6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800aefa:	e04b      	b.n	800af94 <Start_ADC_TASK+0x384>
 800aefc:	f3af 8000 	nop.w
 800af00:	66666666 	.word	0x66666666
 800af04:	400a6666 	.word	0x400a6666
 800af08:	00000000 	.word	0x00000000
 800af0c:	40b00000 	.word	0x40b00000
 800af10:	9999999a 	.word	0x9999999a
 800af14:	3fc99999 	.word	0x3fc99999
 800af18:	33333333 	.word	0x33333333
 800af1c:	40073333 	.word	0x40073333
 800af20:	66666666 	.word	0x66666666
 800af24:	40711266 	.word	0x40711266
 800af28:	20002b24 	.word	0x20002b24
 800af2c:	200016d0 	.word	0x200016d0
 800af30:	42c80000 	.word	0x42c80000
 800af34:	00000000 	.word	0x00000000
 800af38:	3e4ccccd 	.word	0x3e4ccccd
 800af3c:	4039999a 	.word	0x4039999a
 800af40:	20002b28 	.word	0x20002b28
 800af44:	20002b2c 	.word	0x20002b2c
 800af48:	2000160c 	.word	0x2000160c
 800af4c:	200015e0 	.word	0x200015e0
 800af50:	20001e50 	.word	0x20001e50
 800af54:	20001e4c 	.word	0x20001e4c
 800af58:	49742400 	.word	0x49742400
 800af5c:	20000028 	.word	0x20000028
 800af60:	2000002c 	.word	0x2000002c
 800af64:	20000030 	.word	0x20000030
 800af68:	20002b30 	.word	0x20002b30
		  {
			  ambMAVG = ambMAVG+ambbuffer[j];
 800af6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800af76:	443b      	add	r3, r7
 800af78:	3bcc      	subs	r3, #204	; 0xcc
 800af7a:	edd3 7a00 	vldr	s15, [r3]
 800af7e:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 800af82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af86:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
		  for(int j =0;j<10;j++)
 800af8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800af8e:	3301      	adds	r3, #1
 800af90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800af94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800af98:	2b09      	cmp	r3, #9
 800af9a:	dde7      	ble.n	800af6c <Start_ADC_TASK+0x35c>
		  }
		  ambMAVG = ambMAVG/10;
 800af9c:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 800afa0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800afa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afa8:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
		  lcdmsg=osPoolAlloc(lcdpool);
 800afac:	4b96      	ldr	r3, [pc, #600]	; (800b208 <Start_ADC_TASK+0x5f8>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f00c fb5e 	bl	8017672 <osPoolAlloc>
 800afb6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		  lcdmsg->LCD_DATA[0] = AMB_TEMP_t;
 800afba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afbe:	22fa      	movs	r2, #250	; 0xfa
 800afc0:	701a      	strb	r2, [r3, #0]
		  lcdmsg->LCD_DATA[1] = (int)ambMAVG;
 800afc2:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800afc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afca:	edc7 7a00 	vstr	s15, [r7]
 800afce:	783a      	ldrb	r2, [r7, #0]
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd4:	705a      	strb	r2, [r3, #1]
		  dataaccumsg = osPoolAlloc(dataaccupool);
 800afd6:	4b8d      	ldr	r3, [pc, #564]	; (800b20c <Start_ADC_TASK+0x5fc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	f00c fb49 	bl	8017672 <osPoolAlloc>
 800afe0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  dataaccumsg->AMBIENT_TEMPERATURE_t = (int)ambMAVG;
 800afe4:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800afe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afec:	edc7 7a00 	vstr	s15, [r7]
 800aff0:	783a      	ldrb	r2, [r7, #0]
 800aff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff6:	709a      	strb	r2, [r3, #2]
		  osMessagePut(DATA_ACCU_qHandle, (uint32_t)dataaccumsg,100);
 800aff8:	4b85      	ldr	r3, [pc, #532]	; (800b210 <Start_ADC_TASK+0x600>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800b000:	2264      	movs	r2, #100	; 0x64
 800b002:	4618      	mov	r0, r3
 800b004:	f00c fc02 	bl	801780c <osMessagePut>
		  osMessagePut(LCD_QUEUE_qHandle, (uint32_t)lcdmsg, 100);
 800b008:	4b82      	ldr	r3, [pc, #520]	; (800b214 <Start_ADC_TASK+0x604>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b010:	2264      	movs	r2, #100	; 0x64
 800b012:	4618      	mov	r0, r3
 800b014:	f00c fbfa 	bl	801780c <osMessagePut>
		  pos =2;
 800b018:	4b7f      	ldr	r3, [pc, #508]	; (800b218 <Start_ADC_TASK+0x608>)
 800b01a:	2202      	movs	r2, #2
 800b01c:	601a      	str	r2, [r3, #0]
		  break;
 800b01e:	e1f1      	b.n	800b404 <Start_ADC_TASK+0x7f4>

	  case 2:
		  LHS_TEMPERATURE();
 800b020:	f7f7 f838 	bl	8002094 <LHS_TEMPERATURE>
		  HAL_ADC_Start(&hadc3);
 800b024:	487d      	ldr	r0, [pc, #500]	; (800b21c <Start_ADC_TASK+0x60c>)
 800b026:	f005 f989 	bl	801033c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc3, 1000);
 800b02a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b02e:	487b      	ldr	r0, [pc, #492]	; (800b21c <Start_ADC_TASK+0x60c>)
 800b030:	f005 fa86 	bl	8010540 <HAL_ADC_PollForConversion>
		  LHS_TEMPERATURE_t = HAL_ADC_GetValue(&hadc3);
 800b034:	4879      	ldr	r0, [pc, #484]	; (800b21c <Start_ADC_TASK+0x60c>)
 800b036:	f005 fb0e 	bl	8010656 <HAL_ADC_GetValue>
 800b03a:	4603      	mov	r3, r0
 800b03c:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		  HAL_ADC_Stop(&hadc3);
 800b040:	4876      	ldr	r0, [pc, #472]	; (800b21c <Start_ADC_TASK+0x60c>)
 800b042:	f005 fa49 	bl	80104d8 <HAL_ADC_Stop>
		  VOLTS_OF_LHS_READING = ((LHS_TEMPERATURE_t*3.3)/4096);
 800b046:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b052:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800b1f0 <Start_ADC_TASK+0x5e0>
 800b056:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b05a:	ed9f 5b67 	vldr	d5, [pc, #412]	; 800b1f8 <Start_ADC_TASK+0x5e8>
 800b05e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b062:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b066:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
		  HSL_RES = (VOLTS_OF_LHS_READING/(5-VOLTS_OF_LHS_READING))*27000;
 800b06a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800b06e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800b072:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b076:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 800b07a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b07e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b220 <Start_ADC_TASK+0x610>
 800b082:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b08a:	ee17 3a90 	vmov	r3, s15
 800b08e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  HSL_logr = logf(HSL_RES);
 800b092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b09e:	eeb0 0a67 	vmov.f32	s0, s15
 800b0a2:	f014 fea5 	bl	801fdf0 <logf>
 800b0a6:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
		  HSL_Inv_T = HS_A+(HS_B*HSL_logr)+(HS_C*(HSL_logr*HSL_logr*HSL_logr));
 800b0aa:	4b5e      	ldr	r3, [pc, #376]	; (800b224 <Start_ADC_TASK+0x614>)
 800b0ac:	ed93 7a00 	vldr	s14, [r3]
 800b0b0:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800b0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b8:	4b5b      	ldr	r3, [pc, #364]	; (800b228 <Start_ADC_TASK+0x618>)
 800b0ba:	edd3 7a00 	vldr	s15, [r3]
 800b0be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0c2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800b0c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b0ca:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800b0ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b0d2:	4b56      	ldr	r3, [pc, #344]	; (800b22c <Start_ADC_TASK+0x61c>)
 800b0d4:	edd3 7a00 	vldr	s15, [r3]
 800b0d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e0:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		  HSL_T = (1/HSL_Inv_T)-273.15;
 800b0e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e8:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800b0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b0f4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800b200 <Start_ADC_TASK+0x5f0>
 800b0f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b0fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b100:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
		  lsbuffer[lsk] = HSL_T;
 800b104:	4b4a      	ldr	r3, [pc, #296]	; (800b230 <Start_ADC_TASK+0x620>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b10e:	443b      	add	r3, r7
 800b110:	3bf4      	subs	r3, #244	; 0xf4
 800b112:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b116:	601a      	str	r2, [r3, #0]
		  lsk++;
 800b118:	4b45      	ldr	r3, [pc, #276]	; (800b230 <Start_ADC_TASK+0x620>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	4a44      	ldr	r2, [pc, #272]	; (800b230 <Start_ADC_TASK+0x620>)
 800b120:	6013      	str	r3, [r2, #0]
		  if(lsk>=10)
 800b122:	4b43      	ldr	r3, [pc, #268]	; (800b230 <Start_ADC_TASK+0x620>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b09      	cmp	r3, #9
 800b128:	dd02      	ble.n	800b130 <Start_ADC_TASK+0x520>
		  {
			  lsk=0;
 800b12a:	4b41      	ldr	r3, [pc, #260]	; (800b230 <Start_ADC_TASK+0x620>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
		  }
		  for(int j =0;j<10;j++)
 800b130:	2300      	movs	r3, #0
 800b132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b136:	e013      	b.n	800b160 <Start_ADC_TASK+0x550>
		  {
			  lsMAVG = lsMAVG+lsbuffer[j];
 800b138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b142:	443b      	add	r3, r7
 800b144:	3bf4      	subs	r3, #244	; 0xf4
 800b146:	edd3 7a00 	vldr	s15, [r3]
 800b14a:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 800b14e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b152:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
		  for(int j =0;j<10;j++)
 800b156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15a:	3301      	adds	r3, #1
 800b15c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b164:	2b09      	cmp	r3, #9
 800b166:	dde7      	ble.n	800b138 <Start_ADC_TASK+0x528>
		  }
		  lsMAVG = lsMAVG/10;
 800b168:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 800b16c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800b170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b174:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
		  lcdmsg=osPoolAlloc(lcdpool);
 800b178:	4b23      	ldr	r3, [pc, #140]	; (800b208 <Start_ADC_TASK+0x5f8>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f00c fa78 	bl	8017672 <osPoolAlloc>
 800b182:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		  lcdmsg->LCD_DATA[0] = HS_LEFT_t;
 800b186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18a:	22fc      	movs	r2, #252	; 0xfc
 800b18c:	701a      	strb	r2, [r3, #0]
		  lcdmsg->LCD_DATA[1] = (int)lsMAVG;
 800b18e:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800b192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b196:	edc7 7a00 	vstr	s15, [r7]
 800b19a:	783a      	ldrb	r2, [r7, #0]
 800b19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a0:	705a      	strb	r2, [r3, #1]
		  dataaccumsg = osPoolAlloc(dataaccupool);
 800b1a2:	4b1a      	ldr	r3, [pc, #104]	; (800b20c <Start_ADC_TASK+0x5fc>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f00c fa63 	bl	8017672 <osPoolAlloc>
 800b1ac:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  dataaccumsg->LEFT_HS_TEMPERATURE_t = (int)lsMAVG;
 800b1b0:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800b1b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1b8:	edc7 7a00 	vstr	s15, [r7]
 800b1bc:	783a      	ldrb	r2, [r7, #0]
 800b1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c2:	711a      	strb	r2, [r3, #4]
		  osMessagePut(DATA_ACCU_qHandle, (uint32_t)dataaccumsg,100);
 800b1c4:	4b12      	ldr	r3, [pc, #72]	; (800b210 <Start_ADC_TASK+0x600>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800b1cc:	2264      	movs	r2, #100	; 0x64
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f00c fb1c 	bl	801780c <osMessagePut>
		  osMessagePut(LCD_QUEUE_qHandle, (uint32_t)lcdmsg, 100);
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <Start_ADC_TASK+0x604>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b1dc:	2264      	movs	r2, #100	; 0x64
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f00c fb14 	bl	801780c <osMessagePut>
		  pos=3;
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <Start_ADC_TASK+0x608>)
 800b1e6:	2203      	movs	r2, #3
 800b1e8:	601a      	str	r2, [r3, #0]
		  break;
 800b1ea:	e10b      	b.n	800b404 <Start_ADC_TASK+0x7f4>
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	66666666 	.word	0x66666666
 800b1f4:	400a6666 	.word	0x400a6666
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	40b00000 	.word	0x40b00000
 800b200:	66666666 	.word	0x66666666
 800b204:	40711266 	.word	0x40711266
 800b208:	2000160c 	.word	0x2000160c
 800b20c:	200015e0 	.word	0x200015e0
 800b210:	20001e50 	.word	0x20001e50
 800b214:	20001e4c 	.word	0x20001e4c
 800b218:	20002b24 	.word	0x20002b24
 800b21c:	200016d0 	.word	0x200016d0
 800b220:	46d2f000 	.word	0x46d2f000
 800b224:	20000034 	.word	0x20000034
 800b228:	20000038 	.word	0x20000038
 800b22c:	2000003c 	.word	0x2000003c
 800b230:	20002b34 	.word	0x20002b34

	  case 3:
		  RHS_TEMPERATURE();
 800b234:	f7f6 ff4e 	bl	80020d4 <RHS_TEMPERATURE>
		  HAL_ADC_Start(&hadc3);
 800b238:	487b      	ldr	r0, [pc, #492]	; (800b428 <Start_ADC_TASK+0x818>)
 800b23a:	f005 f87f 	bl	801033c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc3, 1000);
 800b23e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b242:	4879      	ldr	r0, [pc, #484]	; (800b428 <Start_ADC_TASK+0x818>)
 800b244:	f005 f97c 	bl	8010540 <HAL_ADC_PollForConversion>
		  RHS_TEMPERATURE_t = HAL_ADC_GetValue(&hadc3);
 800b248:	4877      	ldr	r0, [pc, #476]	; (800b428 <Start_ADC_TASK+0x818>)
 800b24a:	f005 fa04 	bl	8010656 <HAL_ADC_GetValue>
 800b24e:	4603      	mov	r3, r0
 800b250:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		  HAL_ADC_Stop(&hadc3);
 800b254:	4874      	ldr	r0, [pc, #464]	; (800b428 <Start_ADC_TASK+0x818>)
 800b256:	f005 f93f 	bl	80104d8 <HAL_ADC_Stop>
		  VOLTS_OF_RHS_READING = ((RHS_TEMPERATURE_t*3.3)/4096);
 800b25a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b266:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b410 <Start_ADC_TASK+0x800>
 800b26a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b26e:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b418 <Start_ADC_TASK+0x808>
 800b272:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b276:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b27a:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
		  HSR_RES = (VOLTS_OF_RHS_READING/(5-VOLTS_OF_RHS_READING))*27000;
 800b27e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800b282:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800b286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b28a:	edd7 6a3e 	vldr	s13, [r7, #248]	; 0xf8
 800b28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b292:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800b42c <Start_ADC_TASK+0x81c>
 800b296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b29e:	ee17 3a90 	vmov	r3, s15
 800b2a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		  HSR_logr = logf(HSR_RES);
 800b2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2aa:	ee07 3a90 	vmov	s15, r3
 800b2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b2b6:	f014 fd9b 	bl	801fdf0 <logf>
 800b2ba:	ed87 0a3c 	vstr	s0, [r7, #240]	; 0xf0
		  HSR_Inv_T = HS_A+(HS_B*HSR_logr)+(HS_C*(HSR_logr*HSR_logr*HSR_logr));
 800b2be:	4b5c      	ldr	r3, [pc, #368]	; (800b430 <Start_ADC_TASK+0x820>)
 800b2c0:	ed93 7a00 	vldr	s14, [r3]
 800b2c4:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800b2c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2cc:	4b59      	ldr	r3, [pc, #356]	; (800b434 <Start_ADC_TASK+0x824>)
 800b2ce:	edd3 7a00 	vldr	s15, [r3]
 800b2d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2d6:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800b2da:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b2de:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800b2e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b2e6:	4b54      	ldr	r3, [pc, #336]	; (800b438 <Start_ADC_TASK+0x828>)
 800b2e8:	edd3 7a00 	vldr	s15, [r3]
 800b2ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2f4:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
		  HSR_T = (1/HSR_Inv_T)-273.15;
 800b2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fc:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800b300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b308:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800b420 <Start_ADC_TASK+0x810>
 800b30c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b310:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b314:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
		  rsbuffer[rsk] = HSR_T;
 800b318:	4b48      	ldr	r3, [pc, #288]	; (800b43c <Start_ADC_TASK+0x82c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800b320:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b32c:	601a      	str	r2, [r3, #0]
		  rsk++;
 800b32e:	4b43      	ldr	r3, [pc, #268]	; (800b43c <Start_ADC_TASK+0x82c>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a41      	ldr	r2, [pc, #260]	; (800b43c <Start_ADC_TASK+0x82c>)
 800b336:	6013      	str	r3, [r2, #0]
		  if(rsk>=10)
 800b338:	4b40      	ldr	r3, [pc, #256]	; (800b43c <Start_ADC_TASK+0x82c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b09      	cmp	r3, #9
 800b33e:	dd02      	ble.n	800b346 <Start_ADC_TASK+0x736>
		  {
			  rsk =0;
 800b340:	4b3e      	ldr	r3, [pc, #248]	; (800b43c <Start_ADC_TASK+0x82c>)
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
		  }
		  for(int j =0;j<10;j++)
 800b346:	2300      	movs	r3, #0
 800b348:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b34c:	e014      	b.n	800b378 <Start_ADC_TASK+0x768>
		  {
			  rsMAVG = rsMAVG+rsbuffer[j];
 800b34e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800b352:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800b356:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	edd3 7a00 	vldr	s15, [r3]
 800b362:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 800b366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b36a:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
		  for(int j =0;j<10;j++)
 800b36e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b372:	3301      	adds	r3, #1
 800b374:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b378:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b37c:	2b09      	cmp	r3, #9
 800b37e:	dde6      	ble.n	800b34e <Start_ADC_TASK+0x73e>
		  }
		  rsMAVG = rsMAVG/10;
 800b380:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 800b384:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800b388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b38c:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
		  lcdmsg=osPoolAlloc(lcdpool);
 800b390:	4b2b      	ldr	r3, [pc, #172]	; (800b440 <Start_ADC_TASK+0x830>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4618      	mov	r0, r3
 800b396:	f00c f96c 	bl	8017672 <osPoolAlloc>
 800b39a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		  lcdmsg->LCD_DATA[0] = HS_RIGHT_t;
 800b39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a2:	22fd      	movs	r2, #253	; 0xfd
 800b3a4:	701a      	strb	r2, [r3, #0]
		  lcdmsg->LCD_DATA[1] = (int)rsMAVG;
 800b3a6:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 800b3aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3ae:	edc7 7a00 	vstr	s15, [r7]
 800b3b2:	783a      	ldrb	r2, [r7, #0]
 800b3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3b8:	705a      	strb	r2, [r3, #1]
		  dataaccumsg = osPoolAlloc(dataaccupool);
 800b3ba:	4b22      	ldr	r3, [pc, #136]	; (800b444 <Start_ADC_TASK+0x834>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f00c f957 	bl	8017672 <osPoolAlloc>
 800b3c4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		  dataaccumsg->RIGHT_HS_TEMPERATURE_t = (int)rsMAVG;
 800b3c8:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 800b3cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3d0:	edc7 7a00 	vstr	s15, [r7]
 800b3d4:	783a      	ldrb	r2, [r7, #0]
 800b3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3da:	715a      	strb	r2, [r3, #5]
		  osMessagePut(DATA_ACCU_qHandle, (uint32_t)dataaccumsg,100);
 800b3dc:	4b1a      	ldr	r3, [pc, #104]	; (800b448 <Start_ADC_TASK+0x838>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800b3e4:	2264      	movs	r2, #100	; 0x64
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f00c fa10 	bl	801780c <osMessagePut>
		  osMessagePut(LCD_QUEUE_qHandle, (uint32_t)lcdmsg, 100);
 800b3ec:	4b17      	ldr	r3, [pc, #92]	; (800b44c <Start_ADC_TASK+0x83c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b3f4:	2264      	movs	r2, #100	; 0x64
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f00c fa08 	bl	801780c <osMessagePut>
		  pos=0;
 800b3fc:	4b14      	ldr	r3, [pc, #80]	; (800b450 <Start_ADC_TASK+0x840>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
		  break;
 800b402:	bf00      	nop
	  }
	osDelay(1);
 800b404:	2001      	movs	r0, #1
 800b406:	f00c f80e 	bl	8017426 <osDelay>
	  switch(pos)
 800b40a:	e409      	b.n	800ac20 <Start_ADC_TASK+0x10>
 800b40c:	f3af 8000 	nop.w
 800b410:	66666666 	.word	0x66666666
 800b414:	400a6666 	.word	0x400a6666
 800b418:	00000000 	.word	0x00000000
 800b41c:	40b00000 	.word	0x40b00000
 800b420:	66666666 	.word	0x66666666
 800b424:	40711266 	.word	0x40711266
 800b428:	200016d0 	.word	0x200016d0
 800b42c:	46d2f000 	.word	0x46d2f000
 800b430:	20000034 	.word	0x20000034
 800b434:	20000038 	.word	0x20000038
 800b438:	2000003c 	.word	0x2000003c
 800b43c:	20002b38 	.word	0x20002b38
 800b440:	2000160c 	.word	0x2000160c
 800b444:	200015e0 	.word	0x200015e0
 800b448:	20001e50 	.word	0x20001e50
 800b44c:	20001e4c 	.word	0x20001e4c
 800b450:	20002b24 	.word	0x20002b24

0800b454 <Start_FLASH_WRITE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_FLASH_WRITE */
void Start_FLASH_WRITE(void const * argument)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b0f2      	sub	sp, #456	; 0x1c8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b45e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800b462:	6018      	str	r0, [r3, #0]
	uint8_t DATA_FROM_FLASH[200];
	static int increment = 0x32;
  /* Infinite loop */
  for(;;)
  {
	  flashevt = osMessageGet(FLASH_DATAHandle, 0);
 800b464:	4bec      	ldr	r3, [pc, #944]	; (800b818 <Start_FLASH_WRITE+0x3c4>)
 800b466:	6819      	ldr	r1, [r3, #0]
 800b468:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800b46c:	2200      	movs	r2, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f00c fa0c 	bl	801788c <osMessageGet>
	  if(flashevt.status == osEventMessage)
 800b474:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800b478:	2b10      	cmp	r3, #16
 800b47a:	f040 82c2 	bne.w	800ba02 <Start_FLASH_WRITE+0x5ae>
	  {
		  flashmsg = flashevt.value.p;
 800b47e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800b482:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		  memcpy(DATA_FOR_FLASH,flashmsg->FLASH_DATA_t,200);
 800b486:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800b48a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b48e:	4611      	mov	r1, r2
 800b490:	22c8      	movs	r2, #200	; 0xc8
 800b492:	4618      	mov	r0, r3
 800b494:	f00f feaf 	bl	801b1f6 <memcpy>
		  osPoolFree(flashpool, flashmsg);
 800b498:	4be0      	ldr	r3, [pc, #896]	; (800b81c <Start_FLASH_WRITE+0x3c8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f00c f94a 	bl	801773a <osPoolFree>
		  switch(DATA_FOR_FLASH[0])
 800b4a6:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800b4aa:	2bcf      	cmp	r3, #207	; 0xcf
 800b4ac:	f300 82aa 	bgt.w	800ba04 <Start_FLASH_WRITE+0x5b0>
 800b4b0:	2bb8      	cmp	r3, #184	; 0xb8
 800b4b2:	da06      	bge.n	800b4c2 <Start_FLASH_WRITE+0x6e>
 800b4b4:	2b2c      	cmp	r3, #44	; 0x2c
 800b4b6:	f000 81b5 	beq.w	800b824 <Start_FLASH_WRITE+0x3d0>
 800b4ba:	2b55      	cmp	r3, #85	; 0x55
 800b4bc:	f000 8218 	beq.w	800b8f0 <Start_FLASH_WRITE+0x49c>
 800b4c0:	e2a0      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
 800b4c2:	3bb8      	subs	r3, #184	; 0xb8
 800b4c4:	2b17      	cmp	r3, #23
 800b4c6:	f200 829d 	bhi.w	800ba04 <Start_FLASH_WRITE+0x5b0>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <Start_FLASH_WRITE+0x7c>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b67f 	.word	0x0800b67f
 800b4d4:	0800ba05 	.word	0x0800ba05
 800b4d8:	0800b749 	.word	0x0800b749
 800b4dc:	0800ba05 	.word	0x0800ba05
 800b4e0:	0800ba05 	.word	0x0800ba05
 800b4e4:	0800ba05 	.word	0x0800ba05
 800b4e8:	0800ba05 	.word	0x0800ba05
 800b4ec:	0800b5d1 	.word	0x0800b5d1
 800b4f0:	0800ba05 	.word	0x0800ba05
 800b4f4:	0800ba05 	.word	0x0800ba05
 800b4f8:	0800ba05 	.word	0x0800ba05
 800b4fc:	0800ba05 	.word	0x0800ba05
 800b500:	0800ba05 	.word	0x0800ba05
 800b504:	0800ba05 	.word	0x0800ba05
 800b508:	0800b98b 	.word	0x0800b98b
 800b50c:	0800ba05 	.word	0x0800ba05
 800b510:	0800ba05 	.word	0x0800ba05
 800b514:	0800ba05 	.word	0x0800ba05
 800b518:	0800ba05 	.word	0x0800ba05
 800b51c:	0800ba05 	.word	0x0800ba05
 800b520:	0800ba05 	.word	0x0800ba05
 800b524:	0800ba05 	.word	0x0800ba05
 800b528:	0800ba05 	.word	0x0800ba05
 800b52c:	0800b531 	.word	0x0800b531
		  {
		  case CURRENT_LIMIT:
			  address_to_write = STARTING_ADD_OF_ENGG_MODE;
 800b530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b534:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  address_to_read = STARTING_ADD_OF_ENGG_MODE;
 800b538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b53c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			  SLAVE_Read_Data(address_to_read, (char*)DATA_FROM_FLASH,200);
 800b540:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b544:	f107 010c 	add.w	r1, r7, #12
 800b548:	22c8      	movs	r2, #200	; 0xc8
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7f5 fb8b 	bl	8000c66 <SLAVE_Read_Data>
			  SLAVE_Erase_4K(address_to_write);
 800b550:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b554:	4618      	mov	r0, r3
 800b556:	f7f5 fb0f 	bl	8000b78 <SLAVE_Erase_4K>
			  DATA_FROM_FLASH[0] = 0;
 800b55a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b55e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b562:	2200      	movs	r2, #0
 800b564:	701a      	strb	r2, [r3, #0]
			  DATA_FROM_FLASH[1] = 0;
 800b566:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b56a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b56e:	2200      	movs	r2, #0
 800b570:	705a      	strb	r2, [r3, #1]
			  DATA_FROM_FLASH[2] = 0;
 800b572:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b576:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b57a:	2200      	movs	r2, #0
 800b57c:	709a      	strb	r2, [r3, #2]
			  DATA_FROM_FLASH[3] = ENGG_MODE_DATA;
 800b57e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b582:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b586:	22b7      	movs	r2, #183	; 0xb7
 800b588:	70da      	strb	r2, [r3, #3]
			  DATA_FROM_FLASH[4] = SIZE_UPDATE;
 800b58a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b58e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b592:	22a2      	movs	r2, #162	; 0xa2
 800b594:	711a      	strb	r2, [r3, #4]
			  DATA_FROM_FLASH[5] = TEMP_SIZE_UPDATE;
 800b596:	4ba2      	ldr	r3, [pc, #648]	; (800b820 <Start_FLASH_WRITE+0x3cc>)
 800b598:	781a      	ldrb	r2, [r3, #0]
 800b59a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b59e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b5a2:	715a      	strb	r2, [r3, #5]
			  DATA_FROM_FLASH[6] = CURRENT_LIMIT;
 800b5a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b5a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b5ac:	22cf      	movs	r2, #207	; 0xcf
 800b5ae:	719a      	strb	r2, [r3, #6]
			  DATA_FROM_FLASH[7] = DATA_FOR_FLASH[1];
 800b5b0:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 800b5b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b5b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b5bc:	71da      	strb	r2, [r3, #7]
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,200);
 800b5be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b5c2:	f107 010c 	add.w	r1, r7, #12
 800b5c6:	22c8      	movs	r2, #200	; 0xc8
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7f5 fb03 	bl	8000bd4 <SLAVE_Write_Data>
			  break;
 800b5ce:	e219      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
		  case LOGGING_INTERVAL:
			  address_to_write = STARTING_ADD_OF_ENGG_MODE;
 800b5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  address_to_read = STARTING_ADD_OF_ENGG_MODE;
 800b5d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			  SLAVE_Read_Data(address_to_read, (char*)DATA_FROM_FLASH,200);
 800b5e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b5e4:	f107 010c 	add.w	r1, r7, #12
 800b5e8:	22c8      	movs	r2, #200	; 0xc8
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7f5 fb3b 	bl	8000c66 <SLAVE_Read_Data>
			  SLAVE_Erase_4K(address_to_write);
 800b5f0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f5 fabf 	bl	8000b78 <SLAVE_Erase_4K>
			  DATA_FROM_FLASH[0] = 0;
 800b5fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b5fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]
			  DATA_FROM_FLASH[1] = 0;
 800b606:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b60a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b60e:	2200      	movs	r2, #0
 800b610:	705a      	strb	r2, [r3, #1]
			  DATA_FROM_FLASH[2] = 0;
 800b612:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b616:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b61a:	2200      	movs	r2, #0
 800b61c:	709a      	strb	r2, [r3, #2]
			  DATA_FROM_FLASH[3] = ENGG_MODE_DATA;
 800b61e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b622:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b626:	22b7      	movs	r2, #183	; 0xb7
 800b628:	70da      	strb	r2, [r3, #3]
			  DATA_FROM_FLASH[4] = SIZE_UPDATE;
 800b62a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b62e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b632:	22a2      	movs	r2, #162	; 0xa2
 800b634:	711a      	strb	r2, [r3, #4]
			  DATA_FROM_FLASH[5] = TEMP_SIZE_UPDATE;
 800b636:	4b7a      	ldr	r3, [pc, #488]	; (800b820 <Start_FLASH_WRITE+0x3cc>)
 800b638:	781a      	ldrb	r2, [r3, #0]
 800b63a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b63e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b642:	715a      	strb	r2, [r3, #5]
			  DATA_FROM_FLASH[8] = LOGGING_INTERVAL;
 800b644:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b648:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b64c:	22bf      	movs	r2, #191	; 0xbf
 800b64e:	721a      	strb	r2, [r3, #8]
			  DATA_FROM_FLASH[9] = DATA_FOR_FLASH[1];
 800b650:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 800b654:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b658:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b65c:	725a      	strb	r2, [r3, #9]
			  DATA_FROM_FLASH[10] = DATA_FOR_FLASH[2];
 800b65e:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 800b662:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b666:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b66a:	729a      	strb	r2, [r3, #10]
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,200);
 800b66c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b670:	f107 010c 	add.w	r1, r7, #12
 800b674:	22c8      	movs	r2, #200	; 0xc8
 800b676:	4618      	mov	r0, r3
 800b678:	f7f5 faac 	bl	8000bd4 <SLAVE_Write_Data>
			  break;
 800b67c:	e1c2      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
		  case SDA_CALLIBRATION_FACTOR:
			  address_to_write = STARTING_ADD_OF_ENGG_MODE;
 800b67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b682:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  address_to_read = STARTING_ADD_OF_ENGG_MODE;
 800b686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b68a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			  SLAVE_Read_Data(address_to_read, (char*)DATA_FROM_FLASH,200);
 800b68e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b692:	f107 010c 	add.w	r1, r7, #12
 800b696:	22c8      	movs	r2, #200	; 0xc8
 800b698:	4618      	mov	r0, r3
 800b69a:	f7f5 fae4 	bl	8000c66 <SLAVE_Read_Data>
			  SLAVE_Erase_4K(address_to_write);
 800b69e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7f5 fa68 	bl	8000b78 <SLAVE_Erase_4K>
			  DATA_FROM_FLASH[0] = 0;
 800b6a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	701a      	strb	r2, [r3, #0]
			  DATA_FROM_FLASH[1] = 0;
 800b6b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6bc:	2200      	movs	r2, #0
 800b6be:	705a      	strb	r2, [r3, #1]
			  DATA_FROM_FLASH[2] = 0;
 800b6c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	709a      	strb	r2, [r3, #2]
			  DATA_FROM_FLASH[3] = ENGG_MODE_DATA;
 800b6cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6d4:	22b7      	movs	r2, #183	; 0xb7
 800b6d6:	70da      	strb	r2, [r3, #3]
			  DATA_FROM_FLASH[4] = SIZE_UPDATE;
 800b6d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6dc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6e0:	22a2      	movs	r2, #162	; 0xa2
 800b6e2:	711a      	strb	r2, [r3, #4]
			  DATA_FROM_FLASH[5] = TEMP_SIZE_UPDATE;
 800b6e4:	4b4e      	ldr	r3, [pc, #312]	; (800b820 <Start_FLASH_WRITE+0x3cc>)
 800b6e6:	781a      	ldrb	r2, [r3, #0]
 800b6e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6f0:	715a      	strb	r2, [r3, #5]
			  DATA_FROM_FLASH[11] = SDA_CALLIBRATION_FACTOR;
 800b6f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b6f6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b6fa:	22b8      	movs	r2, #184	; 0xb8
 800b6fc:	72da      	strb	r2, [r3, #11]
			  DATA_FROM_FLASH[12] = DATA_FOR_FLASH[1];
 800b6fe:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 800b702:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b706:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b70a:	731a      	strb	r2, [r3, #12]
			  DATA_FROM_FLASH[13] = DATA_FOR_FLASH[2];
 800b70c:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 800b710:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b714:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b718:	735a      	strb	r2, [r3, #13]
			  DATA_FROM_FLASH[14] = DATA_FOR_FLASH[3];
 800b71a:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 800b71e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b722:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b726:	739a      	strb	r2, [r3, #14]
			  DATA_FROM_FLASH[15] = DATA_FOR_FLASH[4];
 800b728:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 800b72c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b730:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b734:	73da      	strb	r2, [r3, #15]
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,200);
 800b736:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b73a:	f107 010c 	add.w	r1, r7, #12
 800b73e:	22c8      	movs	r2, #200	; 0xc8
 800b740:	4618      	mov	r0, r3
 800b742:	f7f5 fa47 	bl	8000bd4 <SLAVE_Write_Data>
			  break;
 800b746:	e15d      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
		  case LORA_PARAMETERS:
			  address_to_write = STARTING_ADD_OF_ENGG_MODE;
 800b748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b74c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  address_to_read = STARTING_ADD_OF_ENGG_MODE;
 800b750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b754:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			  SLAVE_Read_Data(address_to_read, (char*)DATA_FROM_FLASH,200);
 800b758:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b75c:	f107 010c 	add.w	r1, r7, #12
 800b760:	22c8      	movs	r2, #200	; 0xc8
 800b762:	4618      	mov	r0, r3
 800b764:	f7f5 fa7f 	bl	8000c66 <SLAVE_Read_Data>
			  SLAVE_Erase_4K(address_to_write);
 800b768:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7f5 fa03 	bl	8000b78 <SLAVE_Erase_4K>
			  DATA_FROM_FLASH[0] = 0;
 800b772:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b776:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b77a:	2200      	movs	r2, #0
 800b77c:	701a      	strb	r2, [r3, #0]
			  DATA_FROM_FLASH[1] = 0;
 800b77e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b782:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b786:	2200      	movs	r2, #0
 800b788:	705a      	strb	r2, [r3, #1]
			  DATA_FROM_FLASH[2] = 0;
 800b78a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b78e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b792:	2200      	movs	r2, #0
 800b794:	709a      	strb	r2, [r3, #2]
			  DATA_FROM_FLASH[3] = ENGG_MODE_DATA;
 800b796:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b79a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b79e:	22b7      	movs	r2, #183	; 0xb7
 800b7a0:	70da      	strb	r2, [r3, #3]
			  DATA_FROM_FLASH[4] = SIZE_UPDATE;
 800b7a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b7a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b7aa:	22a2      	movs	r2, #162	; 0xa2
 800b7ac:	711a      	strb	r2, [r3, #4]
			  DATA_FROM_FLASH[5] = TEMP_SIZE_UPDATE;
 800b7ae:	4b1c      	ldr	r3, [pc, #112]	; (800b820 <Start_FLASH_WRITE+0x3cc>)
 800b7b0:	781a      	ldrb	r2, [r3, #0]
 800b7b2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b7b6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b7ba:	715a      	strb	r2, [r3, #5]
			  DATA_FROM_FLASH[16] = LORA_PARAMETERS;
 800b7bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b7c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b7c4:	22ba      	movs	r2, #186	; 0xba
 800b7c6:	741a      	strb	r2, [r3, #16]
			  for(int i =17;i<29;i++)
 800b7c8:	2311      	movs	r3, #17
 800b7ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800b7ce:	e015      	b.n	800b7fc <Start_FLASH_WRITE+0x3a8>
			  {
				  DATA_FROM_FLASH[i] = DATA_FOR_FLASH[i-16];
 800b7d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b7d4:	3b10      	subs	r3, #16
 800b7d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b7da:	443b      	add	r3, r7
 800b7dc:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 800b7e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b7e4:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800b7e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b7ec:	4413      	add	r3, r2
 800b7ee:	460a      	mov	r2, r1
 800b7f0:	701a      	strb	r2, [r3, #0]
			  for(int i =17;i<29;i++)
 800b7f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800b7fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b800:	2b1c      	cmp	r3, #28
 800b802:	dde5      	ble.n	800b7d0 <Start_FLASH_WRITE+0x37c>
			  }
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,200);
 800b804:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b808:	f107 010c 	add.w	r1, r7, #12
 800b80c:	22c8      	movs	r2, #200	; 0xc8
 800b80e:	4618      	mov	r0, r3
 800b810:	f7f5 f9e0 	bl	8000bd4 <SLAVE_Write_Data>
			  break;
 800b814:	e0f6      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
 800b816:	bf00      	nop
 800b818:	20001e70 	.word	0x20001e70
 800b81c:	200015cc 	.word	0x200015cc
 800b820:	20001e90 	.word	0x20001e90
		  case KP_KI_KD_DATA:
			  address_to_write = STARTING_ADD_OF_ENGG_MODE;
 800b824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b828:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  address_to_read = STARTING_ADD_OF_ENGG_MODE;
 800b82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b830:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			  SLAVE_Read_Data(address_to_read, (char*)DATA_FROM_FLASH,200);
 800b834:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b838:	f107 010c 	add.w	r1, r7, #12
 800b83c:	22c8      	movs	r2, #200	; 0xc8
 800b83e:	4618      	mov	r0, r3
 800b840:	f7f5 fa11 	bl	8000c66 <SLAVE_Read_Data>
			  SLAVE_Erase_4K(address_to_write);
 800b844:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7f5 f995 	bl	8000b78 <SLAVE_Erase_4K>
			  DATA_FROM_FLASH[0] = 0;
 800b84e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b852:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
			  DATA_FROM_FLASH[1] = 0;
 800b85a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b85e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b862:	2200      	movs	r2, #0
 800b864:	705a      	strb	r2, [r3, #1]
			  DATA_FROM_FLASH[2] = 0;
 800b866:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b86a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b86e:	2200      	movs	r2, #0
 800b870:	709a      	strb	r2, [r3, #2]
			  DATA_FROM_FLASH[3] = ENGG_MODE_DATA;
 800b872:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b876:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b87a:	22b7      	movs	r2, #183	; 0xb7
 800b87c:	70da      	strb	r2, [r3, #3]
			  DATA_FROM_FLASH[4] = SIZE_UPDATE;
 800b87e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b882:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b886:	22a2      	movs	r2, #162	; 0xa2
 800b888:	711a      	strb	r2, [r3, #4]
			  DATA_FROM_FLASH[5] = TEMP_SIZE_UPDATE;
 800b88a:	4b60      	ldr	r3, [pc, #384]	; (800ba0c <Start_FLASH_WRITE+0x5b8>)
 800b88c:	781a      	ldrb	r2, [r3, #0]
 800b88e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b892:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b896:	715a      	strb	r2, [r3, #5]
			  DATA_FROM_FLASH[36] = KP_KI_KD_DATA;
 800b898:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b89c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b8a0:	222c      	movs	r2, #44	; 0x2c
 800b8a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  for(int i =37;i<101;i++)
 800b8a6:	2325      	movs	r3, #37	; 0x25
 800b8a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800b8ac:	e013      	b.n	800b8d6 <Start_FLASH_WRITE+0x482>
			  {
				  DATA_FROM_FLASH[i] = DATA_FOR_FLASH[i];
 800b8ae:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800b8b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b8b6:	4413      	add	r3, r2
 800b8b8:	7819      	ldrb	r1, [r3, #0]
 800b8ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b8be:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800b8c2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b8c6:	4413      	add	r3, r2
 800b8c8:	460a      	mov	r2, r1
 800b8ca:	701a      	strb	r2, [r3, #0]
			  for(int i =37;i<101;i++)
 800b8cc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800b8d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b8da:	2b64      	cmp	r3, #100	; 0x64
 800b8dc:	dde7      	ble.n	800b8ae <Start_FLASH_WRITE+0x45a>
			  }
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,200);
 800b8de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b8e2:	f107 010c 	add.w	r1, r7, #12
 800b8e6:	22c8      	movs	r2, #200	; 0xc8
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f5 f973 	bl	8000bd4 <SLAVE_Write_Data>
			  break;
 800b8ee:	e089      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>

		  case UPDATE_PROFILE:
			  address_to_write = STARTING_ADD_OF_PROFILES;
 800b8f0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800b8f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  SLAVE_Erase_4K(address_to_write);
 800b8f8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7f5 f93b 	bl	8000b78 <SLAVE_Erase_4K>
			  for(int j =0;j<50;j++)
 800b902:	2300      	movs	r3, #0
 800b904:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800b908:	e035      	b.n	800b976 <Start_FLASH_WRITE+0x522>
			  {
			  for(int i =0;i<50;i++)
 800b90a:	2300      	movs	r3, #0
 800b90c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800b910:	e018      	b.n	800b944 <Start_FLASH_WRITE+0x4f0>
			  {
				  DATA_FROM_FLASH[i] = PROFILES[j][i];
 800b912:	4a3f      	ldr	r2, [pc, #252]	; (800ba10 <Start_FLASH_WRITE+0x5bc>)
 800b914:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800b918:	2132      	movs	r1, #50	; 0x32
 800b91a:	fb01 f303 	mul.w	r3, r1, r3
 800b91e:	441a      	add	r2, r3
 800b920:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b924:	4413      	add	r3, r2
 800b926:	7819      	ldrb	r1, [r3, #0]
 800b928:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b92c:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800b930:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b934:	4413      	add	r3, r2
 800b936:	460a      	mov	r2, r1
 800b938:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<50;i++)
 800b93a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b93e:	3301      	adds	r3, #1
 800b940:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800b944:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b948:	2b31      	cmp	r3, #49	; 0x31
 800b94a:	dde2      	ble.n	800b912 <Start_FLASH_WRITE+0x4be>
			  }
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,50);
 800b94c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b950:	f107 010c 	add.w	r1, r7, #12
 800b954:	2232      	movs	r2, #50	; 0x32
 800b956:	4618      	mov	r0, r3
 800b958:	f7f5 f93c 	bl	8000bd4 <SLAVE_Write_Data>
			  address_to_write = address_to_write+increment;
 800b95c:	4b2d      	ldr	r3, [pc, #180]	; (800ba14 <Start_FLASH_WRITE+0x5c0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b966:	4413      	add	r3, r2
 800b968:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  for(int j =0;j<50;j++)
 800b96c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800b970:	3301      	adds	r3, #1
 800b972:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800b976:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800b97a:	2b31      	cmp	r3, #49	; 0x31
 800b97c:	ddc5      	ble.n	800b90a <Start_FLASH_WRITE+0x4b6>
			  }
			  osThreadResume(PROFILE_STARTHandle);
 800b97e:	4b26      	ldr	r3, [pc, #152]	; (800ba18 <Start_FLASH_WRITE+0x5c4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f00c f938 	bl	8017bf8 <osThreadResume>
			  break;
 800b988:	e03c      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
		  case SYSTEM_STATE:
			  address_to_write = STARTING_ADD_OF_ENGG_MODE;
 800b98a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b98e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			  address_to_read = STARTING_ADD_OF_ENGG_MODE;
 800b992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b996:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			  SLAVE_Read_Data(address_to_read, (char*)DATA_FROM_FLASH,200);
 800b99a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800b99e:	f107 010c 	add.w	r1, r7, #12
 800b9a2:	22c8      	movs	r2, #200	; 0xc8
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7f5 f95e 	bl	8000c66 <SLAVE_Read_Data>
			  SLAVE_Erase_4K(address_to_write);
 800b9aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f5 f8e2 	bl	8000b78 <SLAVE_Erase_4K>
			  for(int i =138;i<191;i++)
 800b9b4:	238a      	movs	r3, #138	; 0x8a
 800b9b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800b9ba:	e015      	b.n	800b9e8 <Start_FLASH_WRITE+0x594>
			  {
				  DATA_FROM_FLASH[i]=DATA_FOR_FLASH[i-138];
 800b9bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800b9c0:	3b8a      	subs	r3, #138	; 0x8a
 800b9c2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b9c6:	443b      	add	r3, r7
 800b9c8:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 800b9cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800b9d0:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800b9d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800b9d8:	4413      	add	r3, r2
 800b9da:	460a      	mov	r2, r1
 800b9dc:	701a      	strb	r2, [r3, #0]
			  for(int i =138;i<191;i++)
 800b9de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800b9e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800b9ec:	2bbe      	cmp	r3, #190	; 0xbe
 800b9ee:	dde5      	ble.n	800b9bc <Start_FLASH_WRITE+0x568>
			  }
			  SLAVE_Write_Data(address_to_write, (char*)DATA_FROM_FLASH,200);
 800b9f0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b9f4:	f107 010c 	add.w	r1, r7, #12
 800b9f8:	22c8      	movs	r2, #200	; 0xc8
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7f5 f8ea 	bl	8000bd4 <SLAVE_Write_Data>
			  break;
 800ba00:	e000      	b.n	800ba04 <Start_FLASH_WRITE+0x5b0>
		  }
	  }
 800ba02:	bf00      	nop
    osDelay(1);
 800ba04:	2001      	movs	r0, #1
 800ba06:	f00b fd0e 	bl	8017426 <osDelay>
	  flashevt = osMessageGet(FLASH_DATAHandle, 0);
 800ba0a:	e52b      	b.n	800b464 <Start_FLASH_WRITE+0x10>
 800ba0c:	20001e90 	.word	0x20001e90
 800ba10:	20001fb4 	.word	0x20001fb4
 800ba14:	20000040 	.word	0x20000040
 800ba18:	20001e18 	.word	0x20001e18

0800ba1c <Start_POWER_ON_TEST>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_POWER_ON_TEST */
void Start_POWER_ON_TEST(void const * argument)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_POWER_ON_TEST */
	PCA9685_STATUS pwmstatus;

	Lcd_init();
 800ba24:	f7f5 ff67 	bl	80018f6 <Lcd_init>
	LCD_setCursor_xy(0, 3);
 800ba28:	2103      	movs	r1, #3
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f7f6 f80d 	bl	8001a4a <LCD_setCursor_xy>
	Lcd_send_string("*** MCTC ***");
 800ba30:	4831      	ldr	r0, [pc, #196]	; (800baf8 <Start_POWER_ON_TEST+0xdc>)
 800ba32:	f7f5 fff5 	bl	8001a20 <Lcd_send_string>
	LCD_setCursor_xy(1,0);
 800ba36:	2100      	movs	r1, #0
 800ba38:	2001      	movs	r0, #1
 800ba3a:	f7f6 f806 	bl	8001a4a <LCD_setCursor_xy>
	Lcd_send_string("  ARIHANT LTD.  ");
 800ba3e:	482f      	ldr	r0, [pc, #188]	; (800bafc <Start_POWER_ON_TEST+0xe0>)
 800ba40:	f7f5 ffee 	bl	8001a20 <Lcd_send_string>
	char Data[] = "ab";
 800ba44:	4a2e      	ldr	r2, [pc, #184]	; (800bb00 <Start_POWER_ON_TEST+0xe4>)
 800ba46:	f107 0310 	add.w	r3, r7, #16
 800ba4a:	6812      	ldr	r2, [r2, #0]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	8019      	strh	r1, [r3, #0]
 800ba50:	3302      	adds	r3, #2
 800ba52:	0c12      	lsrs	r2, r2, #16
 800ba54:	701a      	strb	r2, [r3, #0]
	char RXData[2]={0};
 800ba56:	2300      	movs	r3, #0
 800ba58:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	SLAVE_Read_ID();
 800ba5a:	f7f5 f809 	bl	8000a70 <SLAVE_Read_ID>
	SLAVE_Read_StatusReg1();
 800ba5e:	f7f5 f82f 	bl	8000ac0 <SLAVE_Read_StatusReg1>
    SLAVE_Read_StatusReg2();
 800ba62:	f7f5 f843 	bl	8000aec <SLAVE_Read_StatusReg2>
	SLAVE_Clear_StatusReg();
 800ba66:	f7f5 f876 	bl	8000b56 <SLAVE_Clear_StatusReg>
	SLAVE_Read_StatusReg1();
 800ba6a:	f7f5 f829 	bl	8000ac0 <SLAVE_Read_StatusReg1>
	SLAVE_Read_StatusReg2();
 800ba6e:	f7f5 f83d 	bl	8000aec <SLAVE_Read_StatusReg2>
	SLAVE_Write_Data(0x00, Data,2);
 800ba72:	f107 0310 	add.w	r3, r7, #16
 800ba76:	2202      	movs	r2, #2
 800ba78:	4619      	mov	r1, r3
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	f7f5 f8aa 	bl	8000bd4 <SLAVE_Write_Data>
	SLAVE_Read_Data(0x00,RXData,2);
 800ba80:	f107 030c 	add.w	r3, r7, #12
 800ba84:	2202      	movs	r2, #2
 800ba86:	4619      	mov	r1, r3
 800ba88:	2000      	movs	r0, #0
 800ba8a:	f7f5 f8ec 	bl	8000c66 <SLAVE_Read_Data>
	if(RXData[0]=='a' && RXData[1]=='b')
 800ba8e:	7b3b      	ldrb	r3, [r7, #12]
 800ba90:	2b61      	cmp	r3, #97	; 0x61
 800ba92:	d106      	bne.n	800baa2 <Start_POWER_ON_TEST+0x86>
 800ba94:	7b7b      	ldrb	r3, [r7, #13]
 800ba96:	2b62      	cmp	r3, #98	; 0x62
 800ba98:	d103      	bne.n	800baa2 <Start_POWER_ON_TEST+0x86>
	{
		TCU_ERROR_DATA_FLASH =0;
 800ba9a:	4b1a      	ldr	r3, [pc, #104]	; (800bb04 <Start_POWER_ON_TEST+0xe8>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	e002      	b.n	800baa8 <Start_POWER_ON_TEST+0x8c>
	}
	else TCU_ERROR_DATA_FLASH =1;
 800baa2:	4b18      	ldr	r3, [pc, #96]	; (800bb04 <Start_POWER_ON_TEST+0xe8>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	701a      	strb	r2, [r3, #0]

	bool START_STOP = RADIO_START(LORA_DEVICE);
 800baa8:	2000      	movs	r0, #0
 800baaa:	f7f5 fa5d 	bl	8000f68 <RADIO_START>
 800baae:	4603      	mov	r3, r0
 800bab0:	75fb      	strb	r3, [r7, #23]
	if(START_STOP == true)
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <Start_POWER_ON_TEST+0xa4>
	{
		LORA_ERROR_DATA=0;
 800bab8:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <Start_POWER_ON_TEST+0xec>)
 800baba:	2200      	movs	r2, #0
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	e002      	b.n	800bac6 <Start_POWER_ON_TEST+0xaa>
	}
	else LORA_ERROR_DATA=1;
 800bac0:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <Start_POWER_ON_TEST+0xec>)
 800bac2:	2201      	movs	r2, #1
 800bac4:	701a      	strb	r2, [r3, #0]
	pwmstatus  = PCA9685_SleepMode(1);
 800bac6:	2001      	movs	r0, #1
 800bac8:	f7f6 f86c 	bl	8001ba4 <PCA9685_SleepMode>
 800bacc:	4603      	mov	r3, r0
 800bace:	75bb      	strb	r3, [r7, #22]
	if(pwmstatus == PCA9685_OK)
 800bad0:	7dbb      	ldrb	r3, [r7, #22]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d103      	bne.n	800bade <Start_POWER_ON_TEST+0xc2>
	{
		TCU_ERROR_DATA_PWM=0;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <Start_POWER_ON_TEST+0xf0>)
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	e002      	b.n	800bae4 <Start_POWER_ON_TEST+0xc8>
	}
	else TCU_ERROR_DATA_PWM =1;
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <Start_POWER_ON_TEST+0xf0>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]
	//ESP Verification will be done by UART.

	  osThreadTerminate(POWER_ON_TESTHandle);
 800bae4:	4b0a      	ldr	r3, [pc, #40]	; (800bb10 <Start_POWER_ON_TEST+0xf4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4618      	mov	r0, r3
 800baea:	f00b fc90 	bl	801740e <osThreadTerminate>
    osDelay(1);
 800baee:	2001      	movs	r0, #1
 800baf0:	f00b fc99 	bl	8017426 <osDelay>
  {
 800baf4:	e7b1      	b.n	800ba5a <Start_POWER_ON_TEST+0x3e>
 800baf6:	bf00      	nop
 800baf8:	080204e4 	.word	0x080204e4
 800bafc:	080204f4 	.word	0x080204f4
 800bb00:	08020508 	.word	0x08020508
 800bb04:	20000012 	.word	0x20000012
 800bb08:	20000011 	.word	0x20000011
 800bb0c:	20000013 	.word	0x20000013
 800bb10:	20001df8 	.word	0x20001df8

0800bb14 <Start_LCD_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_TASK */
void Start_LCD_TASK(void const * argument)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b098      	sub	sp, #96	; 0x60
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
	LCD_QUEUE *lcdmsg;
	ERROR_D	*errmsg;

	osEvent lcdevt,errevt;

	uint8_t VOLTAGE =0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t CURRENT=0;;
 800bb22:	2300      	movs	r3, #0
 800bb24:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t AMB_TEMP=0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint8_t IR_TEMP=0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	uint8_t HS_LEFT=0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t HS_RIGHT=0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t ERROR_DATA=0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	char line1_buffer[16];
	char line2_buffer[16];
	char error_string[2];
	static int page=1;

	TickType_t last_tick = xTaskGetTickCount();
 800bb46:	f00d fc33 	bl	80193b0 <xTaskGetTickCount>
 800bb4a:	6578      	str	r0, [r7, #84]	; 0x54
  /* Infinite loop */
  for(;;)
  {
	  errevt = osMessageGet(ERROR_D_qHandle, 0);
 800bb4c:	4b82      	ldr	r3, [pc, #520]	; (800bd58 <Start_LCD_TASK+0x244>)
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb54:	2200      	movs	r2, #0
 800bb56:	4618      	mov	r0, r3
 800bb58:	f00b fe98 	bl	801788c <osMessageGet>
	  if(errevt.status == osEventMessage)
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	2b10      	cmp	r3, #16
 800bb60:	d10b      	bne.n	800bb7a <Start_LCD_TASK+0x66>
	  {
		  errmsg = errevt.value.p;
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	64fb      	str	r3, [r7, #76]	; 0x4c
		  ERROR_DATA = errmsg->error_data_rec[1];
 800bb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb68:	785b      	ldrb	r3, [r3, #1]
 800bb6a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		  osPoolFree(errorpool, errmsg);
 800bb6e:	4b7b      	ldr	r3, [pc, #492]	; (800bd5c <Start_LCD_TASK+0x248>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bb74:	4618      	mov	r0, r3
 800bb76:	f00b fde0 	bl	801773a <osPoolFree>
	  }
	  lcdevt = osMessageGet(LCD_QUEUE_qHandle, 0);
 800bb7a:	4b79      	ldr	r3, [pc, #484]	; (800bd60 <Start_LCD_TASK+0x24c>)
 800bb7c:	6819      	ldr	r1, [r3, #0]
 800bb7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bb82:	2200      	movs	r2, #0
 800bb84:	4618      	mov	r0, r3
 800bb86:	f00b fe81 	bl	801788c <osMessageGet>
	  if(lcdevt.status == osEventMessage)
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8c:	2b10      	cmp	r3, #16
 800bb8e:	d151      	bne.n	800bc34 <Start_LCD_TASK+0x120>
	  {
		  lcdmsg = lcdevt.value.p;
 800bb90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb92:	64bb      	str	r3, [r7, #72]	; 0x48
		  for(int i =0;i<2;i++)
 800bb94:	2300      	movs	r3, #0
 800bb96:	653b      	str	r3, [r7, #80]	; 0x50
 800bb98:	e00c      	b.n	800bbb4 <Start_LCD_TASK+0xa0>
		  {
			  LCD_DATA_t[i] = lcdmsg->LCD_DATA[i];
 800bb9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb9e:	4413      	add	r3, r2
 800bba0:	7819      	ldrb	r1, [r3, #0]
 800bba2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba8:	4413      	add	r3, r2
 800bbaa:	460a      	mov	r2, r1
 800bbac:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<2;i++)
 800bbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	653b      	str	r3, [r7, #80]	; 0x50
 800bbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	ddef      	ble.n	800bb9a <Start_LCD_TASK+0x86>
		  }
		  osPoolFree(lcdpool, lcdmsg);
 800bbba:	4b6a      	ldr	r3, [pc, #424]	; (800bd64 <Start_LCD_TASK+0x250>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f00b fdba 	bl	801773a <osPoolFree>
		  switch(LCD_DATA_t[0])
 800bbc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bbca:	2bfd      	cmp	r3, #253	; 0xfd
 800bbcc:	dc33      	bgt.n	800bc36 <Start_LCD_TASK+0x122>
 800bbce:	2bfa      	cmp	r3, #250	; 0xfa
 800bbd0:	da04      	bge.n	800bbdc <Start_LCD_TASK+0xc8>
 800bbd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bbd4:	d015      	beq.n	800bc02 <Start_LCD_TASK+0xee>
 800bbd6:	2b2b      	cmp	r3, #43	; 0x2b
 800bbd8:	d00e      	beq.n	800bbf8 <Start_LCD_TASK+0xe4>
 800bbda:	e02c      	b.n	800bc36 <Start_LCD_TASK+0x122>
 800bbdc:	3bfa      	subs	r3, #250	; 0xfa
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d829      	bhi.n	800bc36 <Start_LCD_TASK+0x122>
 800bbe2:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <Start_LCD_TASK+0xd4>)
 800bbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe8:	0800bc2b 	.word	0x0800bc2b
 800bbec:	0800bc0d 	.word	0x0800bc0d
 800bbf0:	0800bc17 	.word	0x0800bc17
 800bbf4:	0800bc21 	.word	0x0800bc21
		  {
		  case SYS_VOLTAGE:
			  VOLTAGE = LCD_DATA_t[1];
 800bbf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bbfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			  break;
 800bc00:	e019      	b.n	800bc36 <Start_LCD_TASK+0x122>
		  case WHOLE_CURRENT:
			  CURRENT = LCD_DATA_t[1];
 800bc02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			  break;
 800bc0a:	e014      	b.n	800bc36 <Start_LCD_TASK+0x122>
		  case IR_TEMP_t:
			  IR_TEMP = LCD_DATA_t[1];
 800bc0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		  	  break;
 800bc14:	e00f      	b.n	800bc36 <Start_LCD_TASK+0x122>
		  case HS_LEFT_t:
			  HS_LEFT = LCD_DATA_t[1];
 800bc16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc1a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			  break;
 800bc1e:	e00a      	b.n	800bc36 <Start_LCD_TASK+0x122>
		  case HS_RIGHT_t:
			  HS_RIGHT = LCD_DATA_t[1];
 800bc20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc24:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			  break;
 800bc28:	e005      	b.n	800bc36 <Start_LCD_TASK+0x122>
		  case AMB_TEMP_t:
			  AMB_TEMP = LCD_DATA_t[1];
 800bc2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bc2e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			  break;
 800bc32:	e000      	b.n	800bc36 <Start_LCD_TASK+0x122>
		  }
	  }
 800bc34:	bf00      	nop


	  if((xTaskGetTickCount()-last_tick)>pdMS_TO_TICKS( 4000 ))
 800bc36:	f00d fbbb 	bl	80193b0 <xTaskGetTickCount>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800bc44:	f240 8084 	bls.w	800bd50 <Start_LCD_TASK+0x23c>
	  {
		  last_tick=xTaskGetTickCount();
 800bc48:	f00d fbb2 	bl	80193b0 <xTaskGetTickCount>
 800bc4c:	6578      	str	r0, [r7, #84]	; 0x54
	  switch(page)
 800bc4e:	4b46      	ldr	r3, [pc, #280]	; (800bd68 <Start_LCD_TASK+0x254>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	d867      	bhi.n	800bd28 <Start_LCD_TASK+0x214>
 800bc58:	a201      	add	r2, pc, #4	; (adr r2, 800bc60 <Start_LCD_TASK+0x14c>)
 800bc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5e:	bf00      	nop
 800bc60:	0800bc71 	.word	0x0800bc71
 800bc64:	0800bc99 	.word	0x0800bc99
 800bc68:	0800bcc1 	.word	0x0800bcc1
 800bc6c:	0800bce9 	.word	0x0800bce9
	  {
	  case 1:

		  sprintf(line1_buffer,"SYS VOLTAGE: %dV",VOLTAGE);
 800bc70:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bc74:	f107 031c 	add.w	r3, r7, #28
 800bc78:	493c      	ldr	r1, [pc, #240]	; (800bd6c <Start_LCD_TASK+0x258>)
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f010 fa48 	bl	801c110 <siprintf>
		  sprintf(line2_buffer,"SYS CURRENT: %dA",CURRENT);
 800bc80:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800bc84:	f107 030c 	add.w	r3, r7, #12
 800bc88:	4939      	ldr	r1, [pc, #228]	; (800bd70 <Start_LCD_TASK+0x25c>)
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f010 fa40 	bl	801c110 <siprintf>
		  page =2;
 800bc90:	4b35      	ldr	r3, [pc, #212]	; (800bd68 <Start_LCD_TASK+0x254>)
 800bc92:	2202      	movs	r2, #2
 800bc94:	601a      	str	r2, [r3, #0]
		  break;
 800bc96:	e047      	b.n	800bd28 <Start_LCD_TASK+0x214>
	  case 2:
		  sprintf(line1_buffer,"AMBIENT: %d C",AMB_TEMP);
 800bc98:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800bc9c:	f107 031c 	add.w	r3, r7, #28
 800bca0:	4934      	ldr	r1, [pc, #208]	; (800bd74 <Start_LCD_TASK+0x260>)
 800bca2:	4618      	mov	r0, r3
 800bca4:	f010 fa34 	bl	801c110 <siprintf>
		  sprintf(line2_buffer,"IR TEMP: %d C",IR_TEMP);
 800bca8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800bcac:	f107 030c 	add.w	r3, r7, #12
 800bcb0:	4931      	ldr	r1, [pc, #196]	; (800bd78 <Start_LCD_TASK+0x264>)
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f010 fa2c 	bl	801c110 <siprintf>
		  page =3;
 800bcb8:	4b2b      	ldr	r3, [pc, #172]	; (800bd68 <Start_LCD_TASK+0x254>)
 800bcba:	2203      	movs	r2, #3
 800bcbc:	601a      	str	r2, [r3, #0]
		  break;
 800bcbe:	e033      	b.n	800bd28 <Start_LCD_TASK+0x214>
	  case 3:
		  sprintf(line1_buffer,"L SINK T : %d C",HS_LEFT);
 800bcc0:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800bcc4:	f107 031c 	add.w	r3, r7, #28
 800bcc8:	492c      	ldr	r1, [pc, #176]	; (800bd7c <Start_LCD_TASK+0x268>)
 800bcca:	4618      	mov	r0, r3
 800bccc:	f010 fa20 	bl	801c110 <siprintf>
		  sprintf(line2_buffer,"R SINK T : %d C",HS_RIGHT);
 800bcd0:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 800bcd4:	f107 030c 	add.w	r3, r7, #12
 800bcd8:	4929      	ldr	r1, [pc, #164]	; (800bd80 <Start_LCD_TASK+0x26c>)
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f010 fa18 	bl	801c110 <siprintf>
		  page =4;
 800bce0:	4b21      	ldr	r3, [pc, #132]	; (800bd68 <Start_LCD_TASK+0x254>)
 800bce2:	2204      	movs	r2, #4
 800bce4:	601a      	str	r2, [r3, #0]
		  break;
 800bce6:	e01f      	b.n	800bd28 <Start_LCD_TASK+0x214>
	  case 4:
		  sprintf(line1_buffer,"MY TCU ID : %d",MY_TCU_ID);
 800bce8:	f107 031c 	add.w	r3, r7, #28
 800bcec:	2204      	movs	r2, #4
 800bcee:	4925      	ldr	r1, [pc, #148]	; (800bd84 <Start_LCD_TASK+0x270>)
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f010 fa0d 	bl	801c110 <siprintf>
		  if(ERROR_DATA == ERROR_NO_SDA)
 800bcf6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800bcfa:	2be2      	cmp	r3, #226	; 0xe2
 800bcfc:	d104      	bne.n	800bd08 <Start_LCD_TASK+0x1f4>
		  {
			  error_string[0] = 'E';
 800bcfe:	2345      	movs	r3, #69	; 0x45
 800bd00:	723b      	strb	r3, [r7, #8]
			  error_string[1] = '2';
 800bd02:	2332      	movs	r3, #50	; 0x32
 800bd04:	727b      	strb	r3, [r7, #9]
 800bd06:	e003      	b.n	800bd10 <Start_LCD_TASK+0x1fc>
		  }
		  else
		  {
			  error_string[0] = 'N';
 800bd08:	234e      	movs	r3, #78	; 0x4e
 800bd0a:	723b      	strb	r3, [r7, #8]
			  error_string[1] = 'O';
 800bd0c:	234f      	movs	r3, #79	; 0x4f
 800bd0e:	727b      	strb	r3, [r7, #9]
		  }
		  sprintf(line2_buffer,"ERROR : %c%c",error_string[0],error_string[1]);
 800bd10:	7a3b      	ldrb	r3, [r7, #8]
 800bd12:	461a      	mov	r2, r3
 800bd14:	7a7b      	ldrb	r3, [r7, #9]
 800bd16:	f107 000c 	add.w	r0, r7, #12
 800bd1a:	491b      	ldr	r1, [pc, #108]	; (800bd88 <Start_LCD_TASK+0x274>)
 800bd1c:	f010 f9f8 	bl	801c110 <siprintf>
		  page =1;
 800bd20:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <Start_LCD_TASK+0x254>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	601a      	str	r2, [r3, #0]
		  break;
 800bd26:	bf00      	nop
	  }

	  LCD_Clear();
 800bd28:	f7f5 fec0 	bl	8001aac <LCD_Clear>
	  LCD_setCursor_xy(0,0);
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f7f5 fe8b 	bl	8001a4a <LCD_setCursor_xy>
	  Lcd_send_string(line1_buffer);
 800bd34:	f107 031c 	add.w	r3, r7, #28
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f5 fe71 	bl	8001a20 <Lcd_send_string>
	  LCD_setCursor_xy(1,0);
 800bd3e:	2100      	movs	r1, #0
 800bd40:	2001      	movs	r0, #1
 800bd42:	f7f5 fe82 	bl	8001a4a <LCD_setCursor_xy>
	  Lcd_send_string(line2_buffer);
 800bd46:	f107 030c 	add.w	r3, r7, #12
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7f5 fe68 	bl	8001a20 <Lcd_send_string>
	  }
    osDelay(10);
 800bd50:	200a      	movs	r0, #10
 800bd52:	f00b fb68 	bl	8017426 <osDelay>
	  errevt = osMessageGet(ERROR_D_qHandle, 0);
 800bd56:	e6f9      	b.n	800bb4c <Start_LCD_TASK+0x38>
 800bd58:	20001e5c 	.word	0x20001e5c
 800bd5c:	2000161c 	.word	0x2000161c
 800bd60:	20001e4c 	.word	0x20001e4c
 800bd64:	2000160c 	.word	0x2000160c
 800bd68:	20000044 	.word	0x20000044
 800bd6c:	0802050c 	.word	0x0802050c
 800bd70:	08020520 	.word	0x08020520
 800bd74:	08020534 	.word	0x08020534
 800bd78:	08020544 	.word	0x08020544
 800bd7c:	08020554 	.word	0x08020554
 800bd80:	08020564 	.word	0x08020564
 800bd84:	08020574 	.word	0x08020574
 800bd88:	08020584 	.word	0x08020584

0800bd8c <Start_DATA_LOGGING>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DATA_LOGGING */
void Start_DATA_LOGGING(void const * argument)
{
 800bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bd98:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800bd9c:	6018      	str	r0, [r3, #0]
	static int notification = 0;
//	static uint8_t NOTIFY_t = 0x00;
  /* Infinite loop */
  for(;;)
  {
	  switch(state)
 800bd9e:	4bc4      	ldr	r3, [pc, #784]	; (800c0b0 <Start_DATA_LOGGING+0x324>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d004      	beq.n	800bdb0 <Start_DATA_LOGGING+0x24>
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	f000 86e9 	beq.w	800cb7e <Start_DATA_LOGGING+0xdf2>
 800bdac:	f001 bdfd 	b.w	800d9aa <Start_DATA_LOGGING+0x1c1e>
	  {
	  case 0:
	  clcurrevt = osMailGet(closecurrmail, 0);
 800bdb0:	4bc0      	ldr	r3, [pc, #768]	; (800c0b4 <Start_DATA_LOGGING+0x328>)
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800bdb8:	2200      	movs	r2, #0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f00b fe86 	bl	8017acc <osMailGet>
	  if(clcurrevt.status == osEventMail)
 800bdc0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800bdc4:	2b20      	cmp	r3, #32
 800bdc6:	f040 86d5 	bne.w	800cb74 <Start_DATA_LOGGING+0xde8>
	  {
		  clcurrmsg = clcurrevt.value.p;
 800bdca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800bdce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		  for(int i =0;i<50;i++)
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bdd8:	e011      	b.n	800bdfe <Start_DATA_LOGGING+0x72>
		  {
			  CLOSE_CURRENT_DATA_t[i] = clcurrmsg->CLOSE_CURRENT_DATA[i];
 800bdda:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800bdde:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bde2:	4413      	add	r3, r2
 800bde4:	7819      	ldrb	r1, [r3, #0]
 800bde6:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800bdea:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bdee:	4413      	add	r3, r2
 800bdf0:	460a      	mov	r2, r1
 800bdf2:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<50;i++)
 800bdf4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bdfe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800be02:	2b31      	cmp	r3, #49	; 0x31
 800be04:	dde9      	ble.n	800bdda <Start_DATA_LOGGING+0x4e>
		  }
		  osMailFree(closecurrmail, clcurrmsg);
 800be06:	4bab      	ldr	r3, [pc, #684]	; (800c0b4 <Start_DATA_LOGGING+0x328>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 800be0e:	4618      	mov	r0, r3
 800be10:	f00b fed0 	bl	8017bb4 <osMailFree>
			  if(I_AM == I_AM_MASTER)
 800be14:	4ba8      	ldr	r3, [pc, #672]	; (800c0b8 <Start_DATA_LOGGING+0x32c>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b0a      	cmp	r3, #10
 800be1a:	f040 86ab 	bne.w	800cb74 <Start_DATA_LOGGING+0xde8>
			  {

				  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_1SYS)
 800be1e:	4ba7      	ldr	r3, [pc, #668]	; (800c0bc <Start_DATA_LOGGING+0x330>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b32      	cmp	r3, #50	; 0x32
 800be24:	f040 808d 	bne.w	800bf42 <Start_DATA_LOGGING+0x1b6>
				  {
		  			  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800be28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800be2c:	22c8      	movs	r2, #200	; 0xc8
 800be2e:	2100      	movs	r1, #0
 800be30:	4618      	mov	r0, r3
 800be32:	f00f f9ee 	bl	801b212 <memset>
		  			  DATA_TO_SEND[0] = MODEM_BIT;
 800be36:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800be3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800be3e:	2201      	movs	r2, #1
 800be40:	701a      	strb	r2, [r3, #0]
		  			  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800be42:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800be46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800be4a:	2204      	movs	r2, #4
 800be4c:	705a      	strb	r2, [r3, #1]
		  			  memcpy( &DATA_TO_SEND[2],CLOSE_CURRENT_DATA_t,48);
 800be4e:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800be52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800be56:	3302      	adds	r3, #2
 800be58:	2230      	movs	r2, #48	; 0x30
 800be5a:	4618      	mov	r0, r3
 800be5c:	f00f f9cb 	bl	801b1f6 <memcpy>
		  			  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800be60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800be64:	22c7      	movs	r2, #199	; 0xc7
 800be66:	4619      	mov	r1, r3
 800be68:	4895      	ldr	r0, [pc, #596]	; (800c0c0 <Start_DATA_LOGGING+0x334>)
 800be6a:	f004 ff97 	bl	8010d9c <HAL_CRC_Calculate>
 800be6e:	4603      	mov	r3, r0
 800be70:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
		  			  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800be74:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800be78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800be7c:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800be80:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 800be84:	4b8f      	ldr	r3, [pc, #572]	; (800c0c4 <Start_DATA_LOGGING+0x338>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d002      	beq.n	800be92 <Start_DATA_LOGGING+0x106>
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d03c      	beq.n	800bf0a <Start_DATA_LOGGING+0x17e>
 800be90:	e05c      	b.n	800bf4c <Start_DATA_LOGGING+0x1c0>
					  {
					  case MODEM_SYSTEM:
			  			  notification = ulTaskNotifyTake(0,5000);
 800be92:	f241 3188 	movw	r1, #5000	; 0x1388
 800be96:	2000      	movs	r0, #0
 800be98:	f00d fe7c 	bl	8019b94 <ulTaskNotifyTake>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	4b89      	ldr	r3, [pc, #548]	; (800c0c8 <Start_DATA_LOGGING+0x33c>)
 800bea2:	601a      	str	r2, [r3, #0]
			  			  if( (notification>=0))
 800bea4:	4b88      	ldr	r3, [pc, #544]	; (800c0c8 <Start_DATA_LOGGING+0x33c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	db4c      	blt.n	800bf46 <Start_DATA_LOGGING+0x1ba>
			  			  {
			  			  notification =0;
 800beac:	4b86      	ldr	r3, [pc, #536]	; (800c0c8 <Start_DATA_LOGGING+0x33c>)
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800beb2:	4b86      	ldr	r3, [pc, #536]	; (800c0cc <Start_DATA_LOGGING+0x340>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f00b fbdb 	bl	8017672 <osPoolAlloc>
 800bebc:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800bec0:	2300      	movs	r3, #0
 800bec2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800bec6:	e013      	b.n	800bef0 <Start_DATA_LOGGING+0x164>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800bec8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800becc:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800bed0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bed4:	4413      	add	r3, r2
 800bed6:	7819      	ldrb	r1, [r3, #0]
 800bed8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800bedc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bee0:	4413      	add	r3, r2
 800bee2:	460a      	mov	r2, r1
 800bee4:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800bee6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800beea:	3301      	adds	r3, #1
 800beec:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800bef0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800bef4:	2bc7      	cmp	r3, #199	; 0xc7
 800bef6:	dde7      	ble.n	800bec8 <Start_DATA_LOGGING+0x13c>
						  }
						  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800bef8:	4b75      	ldr	r3, [pc, #468]	; (800c0d0 <Start_DATA_LOGGING+0x344>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800bf00:	2264      	movs	r2, #100	; 0x64
 800bf02:	4618      	mov	r0, r3
 800bf04:	f00b fc82 	bl	801780c <osMessagePut>
			  			  }
						  break;
 800bf08:	e01d      	b.n	800bf46 <Start_DATA_LOGGING+0x1ba>
					  case LOCAL_SYSTEM:
			  			  if(CLOSE_CURRENT_DATA_t[0]==MY_TCU_ID)
 800bf0a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d11b      	bne.n	800bf4a <Start_DATA_LOGGING+0x1be>
			  			  {
			  				  notification = ulTaskNotifyTake(0,5000);
 800bf12:	f241 3188 	movw	r1, #5000	; 0x1388
 800bf16:	2000      	movs	r0, #0
 800bf18:	f00d fe3c 	bl	8019b94 <ulTaskNotifyTake>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461a      	mov	r2, r3
 800bf20:	4b69      	ldr	r3, [pc, #420]	; (800c0c8 <Start_DATA_LOGGING+0x33c>)
 800bf22:	601a      	str	r2, [r3, #0]
			  				  if( (notification>=0))
 800bf24:	4b68      	ldr	r3, [pc, #416]	; (800c0c8 <Start_DATA_LOGGING+0x33c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	db0e      	blt.n	800bf4a <Start_DATA_LOGGING+0x1be>
			  				  {
			  				  notification =0;
 800bf2c:	4b66      	ldr	r3, [pc, #408]	; (800c0c8 <Start_DATA_LOGGING+0x33c>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	601a      	str	r2, [r3, #0]
			  			      HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800bf32:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800bf36:	2364      	movs	r3, #100	; 0x64
 800bf38:	22c8      	movs	r2, #200	; 0xc8
 800bf3a:	4866      	ldr	r0, [pc, #408]	; (800c0d4 <Start_DATA_LOGGING+0x348>)
 800bf3c:	f009 ff28 	bl	8015d90 <HAL_UART_Transmit>
			  				  }
			  			  }
						  break;
 800bf40:	e003      	b.n	800bf4a <Start_DATA_LOGGING+0x1be>
					  }
				  }
 800bf42:	bf00      	nop
 800bf44:	e002      	b.n	800bf4c <Start_DATA_LOGGING+0x1c0>
						  break;
 800bf46:	bf00      	nop
 800bf48:	e000      	b.n	800bf4c <Start_DATA_LOGGING+0x1c0>
						  break;
 800bf4a:	bf00      	nop

				  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_2SYS)
 800bf4c:	4b5b      	ldr	r3, [pc, #364]	; (800c0bc <Start_DATA_LOGGING+0x330>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b64      	cmp	r3, #100	; 0x64
 800bf52:	f040 8156 	bne.w	800c202 <Start_DATA_LOGGING+0x476>
				  {
					  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800bf56:	f107 031c 	add.w	r3, r7, #28
 800bf5a:	2232      	movs	r2, #50	; 0x32
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f00f f957 	bl	801b212 <memset>
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800bf64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bf68:	2232      	movs	r2, #50	; 0x32
 800bf6a:	21ff      	movs	r1, #255	; 0xff
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f00f f950 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800bf72:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bf76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800bf7e:	4b56      	ldr	r3, [pc, #344]	; (800c0d8 <Start_DATA_LOGGING+0x34c>)
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bf86:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800bf8a:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_CURRENT;
 800bf8c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bf90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800bf94:	22cb      	movs	r2, #203	; 0xcb
 800bf96:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800bf98:	4b50      	ldr	r3, [pc, #320]	; (800c0dc <Start_DATA_LOGGING+0x350>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f00b fb68 	bl	8017672 <osPoolAlloc>
 800bfa2:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800bfa6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800bfaa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800bfae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800bfb2:	461c      	mov	r4, r3
 800bfb4:	4694      	mov	ip, r2
 800bfb6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800bfba:	4665      	mov	r5, ip
 800bfbc:	4626      	mov	r6, r4
 800bfbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bfc0:	6028      	str	r0, [r5, #0]
 800bfc2:	6069      	str	r1, [r5, #4]
 800bfc4:	60aa      	str	r2, [r5, #8]
 800bfc6:	60eb      	str	r3, [r5, #12]
 800bfc8:	3410      	adds	r4, #16
 800bfca:	f10c 0c10 	add.w	ip, ip, #16
 800bfce:	4574      	cmp	r4, lr
 800bfd0:	d1f3      	bne.n	800bfba <Start_DATA_LOGGING+0x22e>
 800bfd2:	4662      	mov	r2, ip
 800bfd4:	4623      	mov	r3, r4
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800bfda:	4b41      	ldr	r3, [pc, #260]	; (800c0e0 <Start_DATA_LOGGING+0x354>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800bfe2:	2264      	movs	r2, #100	; 0x64
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f00b fc11 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800bfea:	4b3e      	ldr	r3, [pc, #248]	; (800c0e4 <Start_DATA_LOGGING+0x358>)
 800bfec:	6819      	ldr	r1, [r3, #0]
 800bfee:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800bff2:	f641 3258 	movw	r2, #7000	; 0x1b58
 800bff6:	4618      	mov	r0, r3
 800bff8:	f00b fc48 	bl	801788c <osMessageGet>
					  if(dataofslaveevt.status == osEventMessage)
 800bffc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c000:	2b10      	cmp	r3, #16
 800c002:	d123      	bne.n	800c04c <Start_DATA_LOGGING+0x2c0>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800c004:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c008:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800c00c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800c010:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c014:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c018:	4614      	mov	r4, r2
 800c01a:	461e      	mov	r6, r3
 800c01c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800c020:	4635      	mov	r5, r6
 800c022:	4623      	mov	r3, r4
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	6859      	ldr	r1, [r3, #4]
 800c028:	689a      	ldr	r2, [r3, #8]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c02e:	3410      	adds	r4, #16
 800c030:	3610      	adds	r6, #16
 800c032:	4564      	cmp	r4, ip
 800c034:	d1f4      	bne.n	800c020 <Start_DATA_LOGGING+0x294>
 800c036:	4632      	mov	r2, r6
 800c038:	4623      	mov	r3, r4
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800c03e:	4b2a      	ldr	r3, [pc, #168]	; (800c0e8 <Start_DATA_LOGGING+0x35c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800c046:	4618      	mov	r0, r3
 800c048:	f00b fb77 	bl	801773a <osPoolFree>
					  }
					  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800c04c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c050:	22c8      	movs	r2, #200	; 0xc8
 800c052:	2100      	movs	r1, #0
 800c054:	4618      	mov	r0, r3
 800c056:	f00f f8dc 	bl	801b212 <memset>
					  DATA_TO_SEND[0] = MODEM_BIT;
 800c05a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c05e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c062:	2201      	movs	r2, #1
 800c064:	701a      	strb	r2, [r3, #0]
					  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800c066:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c06a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c06e:	2204      	movs	r2, #4
 800c070:	705a      	strb	r2, [r3, #1]
		  			  for(int i=0;i<48;i++)
 800c072:	2300      	movs	r3, #0
 800c074:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c078:	e012      	b.n	800c0a0 <Start_DATA_LOGGING+0x314>
		  			  {
		  				  DATA_TO_SEND[i+2] = CLOSE_CURRENT_DATA_t[i];
 800c07a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c07e:	3302      	adds	r3, #2
 800c080:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800c084:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800c088:	440a      	add	r2, r1
 800c08a:	7811      	ldrb	r1, [r2, #0]
 800c08c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c090:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800c094:	54d1      	strb	r1, [r2, r3]
		  			  for(int i=0;i<48;i++)
 800c096:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c09a:	3301      	adds	r3, #1
 800c09c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c0a0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800c0a4:	2b2f      	cmp	r3, #47	; 0x2f
 800c0a6:	dde8      	ble.n	800c07a <Start_DATA_LOGGING+0x2ee>
		  			  }
		  			  for(int i =50;i<92;i++)
 800c0a8:	2332      	movs	r3, #50	; 0x32
 800c0aa:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800c0ae:	e033      	b.n	800c118 <Start_DATA_LOGGING+0x38c>
 800c0b0:	20002b3c 	.word	0x20002b3c
 800c0b4:	200015f0 	.word	0x200015f0
 800c0b8:	20000009 	.word	0x20000009
 800c0bc:	20001e93 	.word	0x20001e93
 800c0c0:	20001718 	.word	0x20001718
 800c0c4:	20001f5c 	.word	0x20001f5c
 800c0c8:	20002b40 	.word	0x20002b40
 800c0cc:	200015c8 	.word	0x200015c8
 800c0d0:	20001e1c 	.word	0x20001e1c
 800c0d4:	20001bac 	.word	0x20001bac
 800c0d8:	20001f54 	.word	0x20001f54
 800c0dc:	200015e4 	.word	0x200015e4
 800c0e0:	20001e30 	.word	0x20001e30
 800c0e4:	20001e48 	.word	0x20001e48
 800c0e8:	200015dc 	.word	0x200015dc
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-49];
 800c0ec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c0f0:	3b31      	subs	r3, #49	; 0x31
 800c0f2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c0f6:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800c0fa:	5cd1      	ldrb	r1, [r2, r3]
 800c0fc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c100:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c104:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c108:	4413      	add	r3, r2
 800c10a:	460a      	mov	r2, r1
 800c10c:	701a      	strb	r2, [r3, #0]
		  			  for(int i =50;i<92;i++)
 800c10e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c112:	3301      	adds	r3, #1
 800c114:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800c118:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800c11c:	2b5b      	cmp	r3, #91	; 0x5b
 800c11e:	dde5      	ble.n	800c0ec <Start_DATA_LOGGING+0x360>
		  			  }
					  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800c120:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c124:	22c7      	movs	r2, #199	; 0xc7
 800c126:	4619      	mov	r1, r3
 800c128:	4892      	ldr	r0, [pc, #584]	; (800c374 <Start_DATA_LOGGING+0x5e8>)
 800c12a:	f004 fe37 	bl	8010d9c <HAL_CRC_Calculate>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
					  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800c134:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c138:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c13c:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800c140:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 800c144:	4b8c      	ldr	r3, [pc, #560]	; (800c378 <Start_DATA_LOGGING+0x5ec>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d002      	beq.n	800c152 <Start_DATA_LOGGING+0x3c6>
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d03c      	beq.n	800c1ca <Start_DATA_LOGGING+0x43e>
 800c150:	e05c      	b.n	800c20c <Start_DATA_LOGGING+0x480>
					  {
					  case MODEM_SYSTEM:
						  notification = ulTaskNotifyTake(0,5000);
 800c152:	f241 3188 	movw	r1, #5000	; 0x1388
 800c156:	2000      	movs	r0, #0
 800c158:	f00d fd1c 	bl	8019b94 <ulTaskNotifyTake>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461a      	mov	r2, r3
 800c160:	4b86      	ldr	r3, [pc, #536]	; (800c37c <Start_DATA_LOGGING+0x5f0>)
 800c162:	601a      	str	r2, [r3, #0]
						  if( (notification>=0))
 800c164:	4b85      	ldr	r3, [pc, #532]	; (800c37c <Start_DATA_LOGGING+0x5f0>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	db4c      	blt.n	800c206 <Start_DATA_LOGGING+0x47a>
			  			  {
			  			  notification =0;
 800c16c:	4b83      	ldr	r3, [pc, #524]	; (800c37c <Start_DATA_LOGGING+0x5f0>)
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800c172:	4b83      	ldr	r3, [pc, #524]	; (800c380 <Start_DATA_LOGGING+0x5f4>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f00b fa7b 	bl	8017672 <osPoolAlloc>
 800c17c:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800c180:	2300      	movs	r3, #0
 800c182:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800c186:	e013      	b.n	800c1b0 <Start_DATA_LOGGING+0x424>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800c188:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c18c:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c190:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c194:	4413      	add	r3, r2
 800c196:	7819      	ldrb	r1, [r3, #0]
 800c198:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800c19c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c1a0:	4413      	add	r3, r2
 800c1a2:	460a      	mov	r2, r1
 800c1a4:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800c1a6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800c1b0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800c1b4:	2bc7      	cmp	r3, #199	; 0xc7
 800c1b6:	dde7      	ble.n	800c188 <Start_DATA_LOGGING+0x3fc>
						  }
						  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800c1b8:	4b72      	ldr	r3, [pc, #456]	; (800c384 <Start_DATA_LOGGING+0x5f8>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800c1c0:	2264      	movs	r2, #100	; 0x64
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f00b fb22 	bl	801780c <osMessagePut>
			  			  }
						  break;
 800c1c8:	e01d      	b.n	800c206 <Start_DATA_LOGGING+0x47a>

					  case LOCAL_SYSTEM:
			  			  if(CLOSE_CURRENT_DATA_t[0]==MY_TCU_ID)
 800c1ca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c1ce:	2b04      	cmp	r3, #4
 800c1d0:	d11b      	bne.n	800c20a <Start_DATA_LOGGING+0x47e>
			  			  {
			  				  notification = ulTaskNotifyTake(0,5000);
 800c1d2:	f241 3188 	movw	r1, #5000	; 0x1388
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f00d fcdc 	bl	8019b94 <ulTaskNotifyTake>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	461a      	mov	r2, r3
 800c1e0:	4b66      	ldr	r3, [pc, #408]	; (800c37c <Start_DATA_LOGGING+0x5f0>)
 800c1e2:	601a      	str	r2, [r3, #0]
			  				  if( (notification>=0))
 800c1e4:	4b65      	ldr	r3, [pc, #404]	; (800c37c <Start_DATA_LOGGING+0x5f0>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	db0e      	blt.n	800c20a <Start_DATA_LOGGING+0x47e>
			  				  {
			  				  notification =0;
 800c1ec:	4b63      	ldr	r3, [pc, #396]	; (800c37c <Start_DATA_LOGGING+0x5f0>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	601a      	str	r2, [r3, #0]
			  			  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800c1f2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800c1f6:	2364      	movs	r3, #100	; 0x64
 800c1f8:	22c8      	movs	r2, #200	; 0xc8
 800c1fa:	4863      	ldr	r0, [pc, #396]	; (800c388 <Start_DATA_LOGGING+0x5fc>)
 800c1fc:	f009 fdc8 	bl	8015d90 <HAL_UART_Transmit>
			  				  }
			  			  }
						  break;
 800c200:	e003      	b.n	800c20a <Start_DATA_LOGGING+0x47e>
					  }
				  }
 800c202:	bf00      	nop
 800c204:	e002      	b.n	800c20c <Start_DATA_LOGGING+0x480>
						  break;
 800c206:	bf00      	nop
 800c208:	e000      	b.n	800c20c <Start_DATA_LOGGING+0x480>
						  break;
 800c20a:	bf00      	nop

				  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_3SYS)
 800c20c:	4b5f      	ldr	r3, [pc, #380]	; (800c38c <Start_DATA_LOGGING+0x600>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b96      	cmp	r3, #150	; 0x96
 800c212:	f040 81f3 	bne.w	800c5fc <Start_DATA_LOGGING+0x870>
				  {
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800c216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c21a:	2232      	movs	r2, #50	; 0x32
 800c21c:	21ff      	movs	r1, #255	; 0xff
 800c21e:	4618      	mov	r0, r3
 800c220:	f00e fff7 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800c224:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c228:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c22c:	2202      	movs	r2, #2
 800c22e:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800c230:	4b57      	ldr	r3, [pc, #348]	; (800c390 <Start_DATA_LOGGING+0x604>)
 800c232:	781a      	ldrb	r2, [r3, #0]
 800c234:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c238:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c23c:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_CURRENT;
 800c23e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c242:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c246:	22cb      	movs	r2, #203	; 0xcb
 800c248:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800c24a:	4b52      	ldr	r3, [pc, #328]	; (800c394 <Start_DATA_LOGGING+0x608>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	f00b fa0f 	bl	8017672 <osPoolAlloc>
 800c254:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800c258:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800c25c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c260:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c264:	461c      	mov	r4, r3
 800c266:	4694      	mov	ip, r2
 800c268:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c26c:	4665      	mov	r5, ip
 800c26e:	4626      	mov	r6, r4
 800c270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c272:	6028      	str	r0, [r5, #0]
 800c274:	6069      	str	r1, [r5, #4]
 800c276:	60aa      	str	r2, [r5, #8]
 800c278:	60eb      	str	r3, [r5, #12]
 800c27a:	3410      	adds	r4, #16
 800c27c:	f10c 0c10 	add.w	ip, ip, #16
 800c280:	4574      	cmp	r4, lr
 800c282:	d1f3      	bne.n	800c26c <Start_DATA_LOGGING+0x4e0>
 800c284:	4662      	mov	r2, ip
 800c286:	4623      	mov	r3, r4
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800c28c:	4b42      	ldr	r3, [pc, #264]	; (800c398 <Start_DATA_LOGGING+0x60c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800c294:	2264      	movs	r2, #100	; 0x64
 800c296:	4618      	mov	r0, r3
 800c298:	f00b fab8 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800c29c:	4b3f      	ldr	r3, [pc, #252]	; (800c39c <Start_DATA_LOGGING+0x610>)
 800c29e:	6819      	ldr	r1, [r3, #0]
 800c2a0:	463b      	mov	r3, r7
 800c2a2:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f00b faf0 	bl	801788c <osMessageGet>
 800c2ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c2b0:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800c2b4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800c2b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  if(dataofslaveevt.status == osEventMessage)
 800c2be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c2c2:	2b10      	cmp	r3, #16
 800c2c4:	d123      	bne.n	800c30e <Start_DATA_LOGGING+0x582>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800c2c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c2ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800c2ce:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800c2d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c2d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c2da:	4614      	mov	r4, r2
 800c2dc:	461e      	mov	r6, r3
 800c2de:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800c2e2:	4635      	mov	r5, r6
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	6859      	ldr	r1, [r3, #4]
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2f0:	3410      	adds	r4, #16
 800c2f2:	3610      	adds	r6, #16
 800c2f4:	4564      	cmp	r4, ip
 800c2f6:	d1f4      	bne.n	800c2e2 <Start_DATA_LOGGING+0x556>
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	4623      	mov	r3, r4
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800c300:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <Start_DATA_LOGGING+0x614>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800c308:	4618      	mov	r0, r3
 800c30a:	f00b fa16 	bl	801773a <osPoolFree>
					  }
					  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800c30e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c312:	22c8      	movs	r2, #200	; 0xc8
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f00e ff7b 	bl	801b212 <memset>
					  DATA_TO_SEND[0] = MODEM_BIT;
 800c31c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c320:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
					  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800c328:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c32c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c330:	2204      	movs	r2, #4
 800c332:	705a      	strb	r2, [r3, #1]
		  			  for(int i=0;i<48;i++)
 800c334:	2300      	movs	r3, #0
 800c336:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c33a:	e012      	b.n	800c362 <Start_DATA_LOGGING+0x5d6>
		  			  {
		  				  DATA_TO_SEND[i+2] = CLOSE_CURRENT_DATA_t[i];
 800c33c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c340:	3302      	adds	r3, #2
 800c342:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800c346:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800c34a:	440a      	add	r2, r1
 800c34c:	7811      	ldrb	r1, [r2, #0]
 800c34e:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c352:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800c356:	54d1      	strb	r1, [r2, r3]
		  			  for(int i=0;i<48;i++)
 800c358:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c35c:	3301      	adds	r3, #1
 800c35e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800c362:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c366:	2b2f      	cmp	r3, #47	; 0x2f
 800c368:	dde8      	ble.n	800c33c <Start_DATA_LOGGING+0x5b0>
		  			  }
		  			  for(int i =50;i<92;i++)
 800c36a:	2332      	movs	r3, #50	; 0x32
 800c36c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800c370:	e02e      	b.n	800c3d0 <Start_DATA_LOGGING+0x644>
 800c372:	bf00      	nop
 800c374:	20001718 	.word	0x20001718
 800c378:	20001f5c 	.word	0x20001f5c
 800c37c:	20002b40 	.word	0x20002b40
 800c380:	200015c8 	.word	0x200015c8
 800c384:	20001e1c 	.word	0x20001e1c
 800c388:	20001bac 	.word	0x20001bac
 800c38c:	20001e93 	.word	0x20001e93
 800c390:	20001f54 	.word	0x20001f54
 800c394:	200015e4 	.word	0x200015e4
 800c398:	20001e30 	.word	0x20001e30
 800c39c:	20001e48 	.word	0x20001e48
 800c3a0:	200015dc 	.word	0x200015dc
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-49];
 800c3a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c3a8:	3b31      	subs	r3, #49	; 0x31
 800c3aa:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c3ae:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800c3b2:	5cd1      	ldrb	r1, [r2, r3]
 800c3b4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c3b8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c3bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c3c0:	4413      	add	r3, r2
 800c3c2:	460a      	mov	r2, r1
 800c3c4:	701a      	strb	r2, [r3, #0]
		  			  for(int i =50;i<92;i++)
 800c3c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800c3d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c3d4:	2b5b      	cmp	r3, #91	; 0x5b
 800c3d6:	dde5      	ble.n	800c3a4 <Start_DATA_LOGGING+0x618>
		  			  }
					  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800c3d8:	f107 031c 	add.w	r3, r7, #28
 800c3dc:	2232      	movs	r2, #50	; 0x32
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f00e ff16 	bl	801b212 <memset>
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800c3e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c3ea:	2232      	movs	r2, #50	; 0x32
 800c3ec:	21ff      	movs	r1, #255	; 0xff
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f00e ff0f 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800c3f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c3f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c3fc:	2202      	movs	r2, #2
 800c3fe:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[1];
 800c400:	4bcd      	ldr	r3, [pc, #820]	; (800c738 <Start_DATA_LOGGING+0x9ac>)
 800c402:	785a      	ldrb	r2, [r3, #1]
 800c404:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c408:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c40c:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_CURRENT;
 800c40e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c412:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c416:	22cb      	movs	r2, #203	; 0xcb
 800c418:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800c41a:	4bc8      	ldr	r3, [pc, #800]	; (800c73c <Start_DATA_LOGGING+0x9b0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4618      	mov	r0, r3
 800c420:	f00b f927 	bl	8017672 <osPoolAlloc>
 800c424:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800c428:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800c42c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c430:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c434:	461c      	mov	r4, r3
 800c436:	4694      	mov	ip, r2
 800c438:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c43c:	4665      	mov	r5, ip
 800c43e:	4626      	mov	r6, r4
 800c440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c442:	6028      	str	r0, [r5, #0]
 800c444:	6069      	str	r1, [r5, #4]
 800c446:	60aa      	str	r2, [r5, #8]
 800c448:	60eb      	str	r3, [r5, #12]
 800c44a:	3410      	adds	r4, #16
 800c44c:	f10c 0c10 	add.w	ip, ip, #16
 800c450:	4574      	cmp	r4, lr
 800c452:	d1f3      	bne.n	800c43c <Start_DATA_LOGGING+0x6b0>
 800c454:	4662      	mov	r2, ip
 800c456:	4623      	mov	r3, r4
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800c45c:	4bb8      	ldr	r3, [pc, #736]	; (800c740 <Start_DATA_LOGGING+0x9b4>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800c464:	2264      	movs	r2, #100	; 0x64
 800c466:	4618      	mov	r0, r3
 800c468:	f00b f9d0 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800c46c:	4bb5      	ldr	r3, [pc, #724]	; (800c744 <Start_DATA_LOGGING+0x9b8>)
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	463b      	mov	r3, r7
 800c472:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c476:	4618      	mov	r0, r3
 800c478:	f00b fa08 	bl	801788c <osMessageGet>
 800c47c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c480:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800c484:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800c488:	ca07      	ldmia	r2, {r0, r1, r2}
 800c48a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  if(dataofslaveevt.status == osEventMessage)
 800c48e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c492:	2b10      	cmp	r3, #16
 800c494:	d123      	bne.n	800c4de <Start_DATA_LOGGING+0x752>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800c496:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c49a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800c49e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800c4a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c4a6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c4aa:	4614      	mov	r4, r2
 800c4ac:	461e      	mov	r6, r3
 800c4ae:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800c4b2:	4635      	mov	r5, r6
 800c4b4:	4623      	mov	r3, r4
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	6859      	ldr	r1, [r3, #4]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c4c0:	3410      	adds	r4, #16
 800c4c2:	3610      	adds	r6, #16
 800c4c4:	4564      	cmp	r4, ip
 800c4c6:	d1f4      	bne.n	800c4b2 <Start_DATA_LOGGING+0x726>
 800c4c8:	4632      	mov	r2, r6
 800c4ca:	4623      	mov	r3, r4
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800c4d0:	4b9d      	ldr	r3, [pc, #628]	; (800c748 <Start_DATA_LOGGING+0x9bc>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f00b f92e 	bl	801773a <osPoolFree>
					  }
		  			  for(int i =92;i<134;i++)
 800c4de:	235c      	movs	r3, #92	; 0x5c
 800c4e0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800c4e4:	e015      	b.n	800c512 <Start_DATA_LOGGING+0x786>
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-91];
 800c4e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c4ea:	3b5b      	subs	r3, #91	; 0x5b
 800c4ec:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c4f0:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800c4f4:	5cd1      	ldrb	r1, [r2, r3]
 800c4f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c4fa:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c4fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c502:	4413      	add	r3, r2
 800c504:	460a      	mov	r2, r1
 800c506:	701a      	strb	r2, [r3, #0]
		  			  for(int i =92;i<134;i++)
 800c508:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c50c:	3301      	adds	r3, #1
 800c50e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800c512:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800c516:	2b85      	cmp	r3, #133	; 0x85
 800c518:	dde5      	ble.n	800c4e6 <Start_DATA_LOGGING+0x75a>
		  			  }
					  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800c51a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c51e:	22c7      	movs	r2, #199	; 0xc7
 800c520:	4619      	mov	r1, r3
 800c522:	488a      	ldr	r0, [pc, #552]	; (800c74c <Start_DATA_LOGGING+0x9c0>)
 800c524:	f004 fc3a 	bl	8010d9c <HAL_CRC_Calculate>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
					  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800c52e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c532:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c536:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800c53a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 800c53e:	4b84      	ldr	r3, [pc, #528]	; (800c750 <Start_DATA_LOGGING+0x9c4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d002      	beq.n	800c54c <Start_DATA_LOGGING+0x7c0>
 800c546:	2b02      	cmp	r3, #2
 800c548:	d03c      	beq.n	800c5c4 <Start_DATA_LOGGING+0x838>
 800c54a:	e05c      	b.n	800c606 <Start_DATA_LOGGING+0x87a>
					  {
					  case MODEM_SYSTEM:
						  notification = ulTaskNotifyTake(0,5000);
 800c54c:	f241 3188 	movw	r1, #5000	; 0x1388
 800c550:	2000      	movs	r0, #0
 800c552:	f00d fb1f 	bl	8019b94 <ulTaskNotifyTake>
 800c556:	4603      	mov	r3, r0
 800c558:	461a      	mov	r2, r3
 800c55a:	4b7e      	ldr	r3, [pc, #504]	; (800c754 <Start_DATA_LOGGING+0x9c8>)
 800c55c:	601a      	str	r2, [r3, #0]
						  if( (notification>=0))
 800c55e:	4b7d      	ldr	r3, [pc, #500]	; (800c754 <Start_DATA_LOGGING+0x9c8>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	db4c      	blt.n	800c600 <Start_DATA_LOGGING+0x874>
			  			  {
			  			  notification =0;
 800c566:	4b7b      	ldr	r3, [pc, #492]	; (800c754 <Start_DATA_LOGGING+0x9c8>)
 800c568:	2200      	movs	r2, #0
 800c56a:	601a      	str	r2, [r3, #0]
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800c56c:	4b7a      	ldr	r3, [pc, #488]	; (800c758 <Start_DATA_LOGGING+0x9cc>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4618      	mov	r0, r3
 800c572:	f00b f87e 	bl	8017672 <osPoolAlloc>
 800c576:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800c57a:	2300      	movs	r3, #0
 800c57c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800c580:	e013      	b.n	800c5aa <Start_DATA_LOGGING+0x81e>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800c582:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c586:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c58a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800c58e:	4413      	add	r3, r2
 800c590:	7819      	ldrb	r1, [r3, #0]
 800c592:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800c596:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800c59a:	4413      	add	r3, r2
 800c59c:	460a      	mov	r2, r1
 800c59e:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800c5a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800c5aa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800c5ae:	2bc7      	cmp	r3, #199	; 0xc7
 800c5b0:	dde7      	ble.n	800c582 <Start_DATA_LOGGING+0x7f6>
						  }
						  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800c5b2:	4b6a      	ldr	r3, [pc, #424]	; (800c75c <Start_DATA_LOGGING+0x9d0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800c5ba:	2264      	movs	r2, #100	; 0x64
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f00b f925 	bl	801780c <osMessagePut>
			  			  }

						  break;
 800c5c2:	e01d      	b.n	800c600 <Start_DATA_LOGGING+0x874>

					  case LOCAL_SYSTEM:
			  			  if(CLOSE_CURRENT_DATA_t[0]==MY_TCU_ID)
 800c5c4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c5c8:	2b04      	cmp	r3, #4
 800c5ca:	d11b      	bne.n	800c604 <Start_DATA_LOGGING+0x878>
			  			  {
			  				  notification = ulTaskNotifyTake(0,5000);
 800c5cc:	f241 3188 	movw	r1, #5000	; 0x1388
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	f00d fadf 	bl	8019b94 <ulTaskNotifyTake>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b5e      	ldr	r3, [pc, #376]	; (800c754 <Start_DATA_LOGGING+0x9c8>)
 800c5dc:	601a      	str	r2, [r3, #0]
			  				  if( (notification>=0))
 800c5de:	4b5d      	ldr	r3, [pc, #372]	; (800c754 <Start_DATA_LOGGING+0x9c8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	db0e      	blt.n	800c604 <Start_DATA_LOGGING+0x878>
			  				  {
			  				  notification =0;
 800c5e6:	4b5b      	ldr	r3, [pc, #364]	; (800c754 <Start_DATA_LOGGING+0x9c8>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
			  				  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800c5ec:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800c5f0:	2364      	movs	r3, #100	; 0x64
 800c5f2:	22c8      	movs	r2, #200	; 0xc8
 800c5f4:	485a      	ldr	r0, [pc, #360]	; (800c760 <Start_DATA_LOGGING+0x9d4>)
 800c5f6:	f009 fbcb 	bl	8015d90 <HAL_UART_Transmit>
			  				  }
			  			  }
						  break;
 800c5fa:	e003      	b.n	800c604 <Start_DATA_LOGGING+0x878>
					  }
				  }
 800c5fc:	bf00      	nop
 800c5fe:	e002      	b.n	800c606 <Start_DATA_LOGGING+0x87a>
						  break;
 800c600:	bf00      	nop
 800c602:	e000      	b.n	800c606 <Start_DATA_LOGGING+0x87a>
						  break;
 800c604:	bf00      	nop

				  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_4SYS)
 800c606:	4b57      	ldr	r3, [pc, #348]	; (800c764 <Start_DATA_LOGGING+0x9d8>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2bc8      	cmp	r3, #200	; 0xc8
 800c60c:	f040 8294 	bne.w	800cb38 <Start_DATA_LOGGING+0xdac>
				  {
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800c610:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c614:	2232      	movs	r2, #50	; 0x32
 800c616:	21ff      	movs	r1, #255	; 0xff
 800c618:	4618      	mov	r0, r3
 800c61a:	f00e fdfa 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800c61e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c622:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c626:	2202      	movs	r2, #2
 800c628:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800c62a:	4b43      	ldr	r3, [pc, #268]	; (800c738 <Start_DATA_LOGGING+0x9ac>)
 800c62c:	781a      	ldrb	r2, [r3, #0]
 800c62e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c632:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c636:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_CURRENT;
 800c638:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c63c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c640:	22cb      	movs	r2, #203	; 0xcb
 800c642:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800c644:	4b3d      	ldr	r3, [pc, #244]	; (800c73c <Start_DATA_LOGGING+0x9b0>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f00b f812 	bl	8017672 <osPoolAlloc>
 800c64e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800c652:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800c656:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c65a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c65e:	461c      	mov	r4, r3
 800c660:	4694      	mov	ip, r2
 800c662:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c666:	4665      	mov	r5, ip
 800c668:	4626      	mov	r6, r4
 800c66a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c66c:	6028      	str	r0, [r5, #0]
 800c66e:	6069      	str	r1, [r5, #4]
 800c670:	60aa      	str	r2, [r5, #8]
 800c672:	60eb      	str	r3, [r5, #12]
 800c674:	3410      	adds	r4, #16
 800c676:	f10c 0c10 	add.w	ip, ip, #16
 800c67a:	4574      	cmp	r4, lr
 800c67c:	d1f3      	bne.n	800c666 <Start_DATA_LOGGING+0x8da>
 800c67e:	4662      	mov	r2, ip
 800c680:	4623      	mov	r3, r4
 800c682:	881b      	ldrh	r3, [r3, #0]
 800c684:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800c686:	4b2e      	ldr	r3, [pc, #184]	; (800c740 <Start_DATA_LOGGING+0x9b4>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800c68e:	2264      	movs	r2, #100	; 0x64
 800c690:	4618      	mov	r0, r3
 800c692:	f00b f8bb 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800c696:	4b2b      	ldr	r3, [pc, #172]	; (800c744 <Start_DATA_LOGGING+0x9b8>)
 800c698:	6819      	ldr	r1, [r3, #0]
 800c69a:	463b      	mov	r3, r7
 800c69c:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f00b f8f3 	bl	801788c <osMessageGet>
 800c6a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c6aa:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800c6ae:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800c6b2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  if(dataofslaveevt.status == osEventMessage)
 800c6b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c6bc:	2b10      	cmp	r3, #16
 800c6be:	d123      	bne.n	800c708 <Start_DATA_LOGGING+0x97c>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800c6c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c6c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800c6c8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800c6cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c6d0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c6d4:	4614      	mov	r4, r2
 800c6d6:	461e      	mov	r6, r3
 800c6d8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800c6dc:	4635      	mov	r5, r6
 800c6de:	4623      	mov	r3, r4
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	6859      	ldr	r1, [r3, #4]
 800c6e4:	689a      	ldr	r2, [r3, #8]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6ea:	3410      	adds	r4, #16
 800c6ec:	3610      	adds	r6, #16
 800c6ee:	4564      	cmp	r4, ip
 800c6f0:	d1f4      	bne.n	800c6dc <Start_DATA_LOGGING+0x950>
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	4623      	mov	r3, r4
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800c6fa:	4b13      	ldr	r3, [pc, #76]	; (800c748 <Start_DATA_LOGGING+0x9bc>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800c702:	4618      	mov	r0, r3
 800c704:	f00b f819 	bl	801773a <osPoolFree>
					  }
					  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800c708:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c70c:	22c8      	movs	r2, #200	; 0xc8
 800c70e:	2100      	movs	r1, #0
 800c710:	4618      	mov	r0, r3
 800c712:	f00e fd7e 	bl	801b212 <memset>
					  DATA_TO_SEND[0] = MODEM_BIT;
 800c716:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c71a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c71e:	2201      	movs	r2, #1
 800c720:	701a      	strb	r2, [r3, #0]
					  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800c722:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c726:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800c72a:	2204      	movs	r2, #4
 800c72c:	705a      	strb	r2, [r3, #1]
		  			  for(int i=0;i<48;i++)
 800c72e:	2300      	movs	r3, #0
 800c730:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800c734:	e02b      	b.n	800c78e <Start_DATA_LOGGING+0xa02>
 800c736:	bf00      	nop
 800c738:	20001f54 	.word	0x20001f54
 800c73c:	200015e4 	.word	0x200015e4
 800c740:	20001e30 	.word	0x20001e30
 800c744:	20001e48 	.word	0x20001e48
 800c748:	200015dc 	.word	0x200015dc
 800c74c:	20001718 	.word	0x20001718
 800c750:	20001f5c 	.word	0x20001f5c
 800c754:	20002b40 	.word	0x20002b40
 800c758:	200015c8 	.word	0x200015c8
 800c75c:	20001e1c 	.word	0x20001e1c
 800c760:	20001bac 	.word	0x20001bac
 800c764:	20001e93 	.word	0x20001e93
		  			  {
		  				  DATA_TO_SEND[i+2] = CLOSE_CURRENT_DATA_t[i];
 800c768:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800c76c:	3302      	adds	r3, #2
 800c76e:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800c772:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800c776:	440a      	add	r2, r1
 800c778:	7811      	ldrb	r1, [r2, #0]
 800c77a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c77e:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800c782:	54d1      	strb	r1, [r2, r3]
		  			  for(int i=0;i<48;i++)
 800c784:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800c788:	3301      	adds	r3, #1
 800c78a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800c78e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800c792:	2b2f      	cmp	r3, #47	; 0x2f
 800c794:	dde8      	ble.n	800c768 <Start_DATA_LOGGING+0x9dc>
		  			  }
		  			  for(int i =50;i<92;i++)
 800c796:	2332      	movs	r3, #50	; 0x32
 800c798:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800c79c:	e015      	b.n	800c7ca <Start_DATA_LOGGING+0xa3e>
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-49];
 800c79e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c7a2:	3b31      	subs	r3, #49	; 0x31
 800c7a4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c7a8:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800c7ac:	5cd1      	ldrb	r1, [r2, r3]
 800c7ae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c7b2:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c7b6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c7ba:	4413      	add	r3, r2
 800c7bc:	460a      	mov	r2, r1
 800c7be:	701a      	strb	r2, [r3, #0]
		  			  for(int i =50;i<92;i++)
 800c7c0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800c7ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800c7ce:	2b5b      	cmp	r3, #91	; 0x5b
 800c7d0:	dde5      	ble.n	800c79e <Start_DATA_LOGGING+0xa12>
		  			  }
					  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800c7d2:	f107 031c 	add.w	r3, r7, #28
 800c7d6:	2232      	movs	r2, #50	; 0x32
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f00e fd19 	bl	801b212 <memset>
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800c7e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c7e4:	2232      	movs	r2, #50	; 0x32
 800c7e6:	21ff      	movs	r1, #255	; 0xff
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f00e fd12 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800c7ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c7f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[1];
 800c7fa:	4bd1      	ldr	r3, [pc, #836]	; (800cb40 <Start_DATA_LOGGING+0xdb4>)
 800c7fc:	785a      	ldrb	r2, [r3, #1]
 800c7fe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c802:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c806:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_CURRENT;
 800c808:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c80c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c810:	22cb      	movs	r2, #203	; 0xcb
 800c812:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800c814:	4bcb      	ldr	r3, [pc, #812]	; (800cb44 <Start_DATA_LOGGING+0xdb8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4618      	mov	r0, r3
 800c81a:	f00a ff2a 	bl	8017672 <osPoolAlloc>
 800c81e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800c822:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800c826:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c82a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c82e:	461c      	mov	r4, r3
 800c830:	4694      	mov	ip, r2
 800c832:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c836:	4665      	mov	r5, ip
 800c838:	4626      	mov	r6, r4
 800c83a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c83c:	6028      	str	r0, [r5, #0]
 800c83e:	6069      	str	r1, [r5, #4]
 800c840:	60aa      	str	r2, [r5, #8]
 800c842:	60eb      	str	r3, [r5, #12]
 800c844:	3410      	adds	r4, #16
 800c846:	f10c 0c10 	add.w	ip, ip, #16
 800c84a:	4574      	cmp	r4, lr
 800c84c:	d1f3      	bne.n	800c836 <Start_DATA_LOGGING+0xaaa>
 800c84e:	4662      	mov	r2, ip
 800c850:	4623      	mov	r3, r4
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800c856:	4bbc      	ldr	r3, [pc, #752]	; (800cb48 <Start_DATA_LOGGING+0xdbc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800c85e:	2264      	movs	r2, #100	; 0x64
 800c860:	4618      	mov	r0, r3
 800c862:	f00a ffd3 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800c866:	4bb9      	ldr	r3, [pc, #740]	; (800cb4c <Start_DATA_LOGGING+0xdc0>)
 800c868:	6819      	ldr	r1, [r3, #0]
 800c86a:	463b      	mov	r3, r7
 800c86c:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c870:	4618      	mov	r0, r3
 800c872:	f00b f80b 	bl	801788c <osMessageGet>
 800c876:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c87a:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800c87e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800c882:	ca07      	ldmia	r2, {r0, r1, r2}
 800c884:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  if(dataofslaveevt.status == osEventMessage)
 800c888:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c88c:	2b10      	cmp	r3, #16
 800c88e:	d123      	bne.n	800c8d8 <Start_DATA_LOGGING+0xb4c>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800c890:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c894:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800c898:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800c89c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c8a0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c8a4:	4614      	mov	r4, r2
 800c8a6:	461e      	mov	r6, r3
 800c8a8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800c8ac:	4635      	mov	r5, r6
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	6859      	ldr	r1, [r3, #4]
 800c8b4:	689a      	ldr	r2, [r3, #8]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8ba:	3410      	adds	r4, #16
 800c8bc:	3610      	adds	r6, #16
 800c8be:	4564      	cmp	r4, ip
 800c8c0:	d1f4      	bne.n	800c8ac <Start_DATA_LOGGING+0xb20>
 800c8c2:	4632      	mov	r2, r6
 800c8c4:	4623      	mov	r3, r4
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800c8ca:	4ba1      	ldr	r3, [pc, #644]	; (800cb50 <Start_DATA_LOGGING+0xdc4>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f00a ff31 	bl	801773a <osPoolFree>
					  }
		  			  for(int i =92;i<134;i++)
 800c8d8:	235c      	movs	r3, #92	; 0x5c
 800c8da:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800c8de:	e015      	b.n	800c90c <Start_DATA_LOGGING+0xb80>
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-91];
 800c8e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c8e4:	3b5b      	subs	r3, #91	; 0x5b
 800c8e6:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c8ea:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800c8ee:	5cd1      	ldrb	r1, [r2, r3]
 800c8f0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c8f4:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800c8f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c8fc:	4413      	add	r3, r2
 800c8fe:	460a      	mov	r2, r1
 800c900:	701a      	strb	r2, [r3, #0]
		  			  for(int i =92;i<134;i++)
 800c902:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c906:	3301      	adds	r3, #1
 800c908:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800c90c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800c910:	2b85      	cmp	r3, #133	; 0x85
 800c912:	dde5      	ble.n	800c8e0 <Start_DATA_LOGGING+0xb54>
		  			  }
					  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800c914:	f107 031c 	add.w	r3, r7, #28
 800c918:	2232      	movs	r2, #50	; 0x32
 800c91a:	2100      	movs	r1, #0
 800c91c:	4618      	mov	r0, r3
 800c91e:	f00e fc78 	bl	801b212 <memset>
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800c922:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c926:	2232      	movs	r2, #50	; 0x32
 800c928:	21ff      	movs	r1, #255	; 0xff
 800c92a:	4618      	mov	r0, r3
 800c92c:	f00e fc71 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800c930:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c934:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c938:	2202      	movs	r2, #2
 800c93a:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[2];
 800c93c:	4b80      	ldr	r3, [pc, #512]	; (800cb40 <Start_DATA_LOGGING+0xdb4>)
 800c93e:	789a      	ldrb	r2, [r3, #2]
 800c940:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c944:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c948:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800c94a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c94e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c952:	22ca      	movs	r2, #202	; 0xca
 800c954:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800c956:	4b7b      	ldr	r3, [pc, #492]	; (800cb44 <Start_DATA_LOGGING+0xdb8>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f00a fe89 	bl	8017672 <osPoolAlloc>
 800c960:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800c964:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800c968:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c96c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800c970:	461c      	mov	r4, r3
 800c972:	4694      	mov	ip, r2
 800c974:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c978:	4665      	mov	r5, ip
 800c97a:	4626      	mov	r6, r4
 800c97c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c97e:	6028      	str	r0, [r5, #0]
 800c980:	6069      	str	r1, [r5, #4]
 800c982:	60aa      	str	r2, [r5, #8]
 800c984:	60eb      	str	r3, [r5, #12]
 800c986:	3410      	adds	r4, #16
 800c988:	f10c 0c10 	add.w	ip, ip, #16
 800c98c:	4574      	cmp	r4, lr
 800c98e:	d1f3      	bne.n	800c978 <Start_DATA_LOGGING+0xbec>
 800c990:	4662      	mov	r2, ip
 800c992:	4623      	mov	r3, r4
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800c998:	4b6b      	ldr	r3, [pc, #428]	; (800cb48 <Start_DATA_LOGGING+0xdbc>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800c9a0:	2264      	movs	r2, #100	; 0x64
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f00a ff32 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800c9a8:	4b68      	ldr	r3, [pc, #416]	; (800cb4c <Start_DATA_LOGGING+0xdc0>)
 800c9aa:	6819      	ldr	r1, [r3, #0]
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f00a ff6a 	bl	801788c <osMessageGet>
 800c9b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c9bc:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800c9c0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800c9c4:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  if(dataofslaveevt.status == osEventMessage)
 800c9ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c9ce:	2b10      	cmp	r3, #16
 800c9d0:	d123      	bne.n	800ca1a <Start_DATA_LOGGING+0xc8e>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800c9d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c9d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800c9da:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800c9de:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c9e2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800c9e6:	4614      	mov	r4, r2
 800c9e8:	461e      	mov	r6, r3
 800c9ea:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800c9ee:	4635      	mov	r5, r6
 800c9f0:	4623      	mov	r3, r4
 800c9f2:	6818      	ldr	r0, [r3, #0]
 800c9f4:	6859      	ldr	r1, [r3, #4]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9fc:	3410      	adds	r4, #16
 800c9fe:	3610      	adds	r6, #16
 800ca00:	4564      	cmp	r4, ip
 800ca02:	d1f4      	bne.n	800c9ee <Start_DATA_LOGGING+0xc62>
 800ca04:	4632      	mov	r2, r6
 800ca06:	4623      	mov	r3, r4
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800ca0c:	4b50      	ldr	r3, [pc, #320]	; (800cb50 <Start_DATA_LOGGING+0xdc4>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800ca14:	4618      	mov	r0, r3
 800ca16:	f00a fe90 	bl	801773a <osPoolFree>
					  }
		  			  for(int i =134;i<176;i++)
 800ca1a:	2386      	movs	r3, #134	; 0x86
 800ca1c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ca20:	e015      	b.n	800ca4e <Start_DATA_LOGGING+0xcc2>
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-133];
 800ca22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca26:	3b85      	subs	r3, #133	; 0x85
 800ca28:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800ca2c:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800ca30:	5cd1      	ldrb	r1, [r2, r3]
 800ca32:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ca36:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800ca3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca3e:	4413      	add	r3, r2
 800ca40:	460a      	mov	r2, r1
 800ca42:	701a      	strb	r2, [r3, #0]
		  			  for(int i =134;i<176;i++)
 800ca44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca48:	3301      	adds	r3, #1
 800ca4a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ca4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ca52:	2baf      	cmp	r3, #175	; 0xaf
 800ca54:	dde5      	ble.n	800ca22 <Start_DATA_LOGGING+0xc96>
		  			  }
					  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800ca56:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ca5a:	22c7      	movs	r2, #199	; 0xc7
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	483d      	ldr	r0, [pc, #244]	; (800cb54 <Start_DATA_LOGGING+0xdc8>)
 800ca60:	f004 f99c 	bl	8010d9c <HAL_CRC_Calculate>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
					  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800ca6a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ca6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ca72:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800ca76:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					  switch(WHOM_TO_GIVE_DATA)
 800ca7a:	4b37      	ldr	r3, [pc, #220]	; (800cb58 <Start_DATA_LOGGING+0xdcc>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d002      	beq.n	800ca88 <Start_DATA_LOGGING+0xcfc>
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d03c      	beq.n	800cb00 <Start_DATA_LOGGING+0xd74>
 800ca86:	e072      	b.n	800cb6e <Start_DATA_LOGGING+0xde2>
					  {
					  case MODEM_SYSTEM:
						  notification = ulTaskNotifyTake(0,5000);
 800ca88:	f241 3188 	movw	r1, #5000	; 0x1388
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	f00d f881 	bl	8019b94 <ulTaskNotifyTake>
 800ca92:	4603      	mov	r3, r0
 800ca94:	461a      	mov	r2, r3
 800ca96:	4b31      	ldr	r3, [pc, #196]	; (800cb5c <Start_DATA_LOGGING+0xdd0>)
 800ca98:	601a      	str	r2, [r3, #0]
						  if( (notification>=0))
 800ca9a:	4b30      	ldr	r3, [pc, #192]	; (800cb5c <Start_DATA_LOGGING+0xdd0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	db4c      	blt.n	800cb3c <Start_DATA_LOGGING+0xdb0>
			  			  {
			  			  notification =0;
 800caa2:	4b2e      	ldr	r3, [pc, #184]	; (800cb5c <Start_DATA_LOGGING+0xdd0>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800caa8:	4b2d      	ldr	r3, [pc, #180]	; (800cb60 <Start_DATA_LOGGING+0xdd4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	f00a fde0 	bl	8017672 <osPoolAlloc>
 800cab2:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800cab6:	2300      	movs	r3, #0
 800cab8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800cabc:	e013      	b.n	800cae6 <Start_DATA_LOGGING+0xd5a>
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800cabe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cac2:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800cac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800caca:	4413      	add	r3, r2
 800cacc:	7819      	ldrb	r1, [r3, #0]
 800cace:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800cad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cad6:	4413      	add	r3, r2
 800cad8:	460a      	mov	r2, r1
 800cada:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800cadc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cae0:	3301      	adds	r3, #1
 800cae2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800cae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800caea:	2bc7      	cmp	r3, #199	; 0xc7
 800caec:	dde7      	ble.n	800cabe <Start_DATA_LOGGING+0xd32>
						  }
						  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800caee:	4b1d      	ldr	r3, [pc, #116]	; (800cb64 <Start_DATA_LOGGING+0xdd8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800caf6:	2264      	movs	r2, #100	; 0x64
 800caf8:	4618      	mov	r0, r3
 800cafa:	f00a fe87 	bl	801780c <osMessagePut>
			  			  }

						  break;
 800cafe:	e01d      	b.n	800cb3c <Start_DATA_LOGGING+0xdb0>

					  case LOCAL_SYSTEM:
				  			  if(CLOSE_CURRENT_DATA_t[0]==MY_TCU_ID)
 800cb00:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800cb04:	2b04      	cmp	r3, #4
 800cb06:	d131      	bne.n	800cb6c <Start_DATA_LOGGING+0xde0>
			  			  {
			  				  notification = ulTaskNotifyTake(0,5000);
 800cb08:	f241 3188 	movw	r1, #5000	; 0x1388
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	f00d f841 	bl	8019b94 <ulTaskNotifyTake>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	4b11      	ldr	r3, [pc, #68]	; (800cb5c <Start_DATA_LOGGING+0xdd0>)
 800cb18:	601a      	str	r2, [r3, #0]
			  				  if( (notification>=0))
 800cb1a:	4b10      	ldr	r3, [pc, #64]	; (800cb5c <Start_DATA_LOGGING+0xdd0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	db24      	blt.n	800cb6c <Start_DATA_LOGGING+0xde0>
			  				  {
			  				  notification =0;
 800cb22:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <Start_DATA_LOGGING+0xdd0>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]
			  				  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800cb28:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800cb2c:	2364      	movs	r3, #100	; 0x64
 800cb2e:	22c8      	movs	r2, #200	; 0xc8
 800cb30:	480d      	ldr	r0, [pc, #52]	; (800cb68 <Start_DATA_LOGGING+0xddc>)
 800cb32:	f009 f92d 	bl	8015d90 <HAL_UART_Transmit>
			  				  }
			  			  }
						  break;
 800cb36:	e019      	b.n	800cb6c <Start_DATA_LOGGING+0xde0>
					  }
				  }
 800cb38:	bf00      	nop
 800cb3a:	e018      	b.n	800cb6e <Start_DATA_LOGGING+0xde2>
						  break;
 800cb3c:	bf00      	nop
 800cb3e:	e016      	b.n	800cb6e <Start_DATA_LOGGING+0xde2>
 800cb40:	20001f54 	.word	0x20001f54
 800cb44:	200015e4 	.word	0x200015e4
 800cb48:	20001e30 	.word	0x20001e30
 800cb4c:	20001e48 	.word	0x20001e48
 800cb50:	200015dc 	.word	0x200015dc
 800cb54:	20001718 	.word	0x20001718
 800cb58:	20001f5c 	.word	0x20001f5c
 800cb5c:	20002b40 	.word	0x20002b40
 800cb60:	200015c8 	.word	0x200015c8
 800cb64:	20001e1c 	.word	0x20001e1c
 800cb68:	20001bac 	.word	0x20001bac
						  break;
 800cb6c:	bf00      	nop
				  state =1;
 800cb6e:	4bcb      	ldr	r3, [pc, #812]	; (800ce9c <Start_DATA_LOGGING+0x1110>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	601a      	str	r2, [r3, #0]
//				  }
//				  state =1;
//			  }

	  }
	  state =1;
 800cb74:	4bc9      	ldr	r3, [pc, #804]	; (800ce9c <Start_DATA_LOGGING+0x1110>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	601a      	str	r2, [r3, #0]
	  break;
 800cb7a:	f000 bf16 	b.w	800d9aa <Start_DATA_LOGGING+0x1c1e>
	  case 1:
		  if(I_AM == I_AM_MASTER)
 800cb7e:	4bc8      	ldr	r3, [pc, #800]	; (800cea0 <Start_DATA_LOGGING+0x1114>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b0a      	cmp	r3, #10
 800cb84:	f040 870d 	bne.w	800d9a2 <Start_DATA_LOGGING+0x1c16>
		  {
	  givememsg = osPoolAlloc(givepool);
 800cb88:	4bc6      	ldr	r3, [pc, #792]	; (800cea4 <Start_DATA_LOGGING+0x1118>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f00a fd70 	bl	8017672 <osPoolAlloc>
 800cb92:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
	  givememsg->GIVE_ME_t = I_AM_DATA_LOGG;
 800cb96:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800cb9a:	2206      	movs	r2, #6
 800cb9c:	701a      	strb	r2, [r3, #0]
	  osMessagePut(GIVE_ME_qHandle, (uint32_t)givememsg,100);
 800cb9e:	4bc2      	ldr	r3, [pc, #776]	; (800cea8 <Start_DATA_LOGGING+0x111c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800cba6:	2264      	movs	r2, #100	; 0x64
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f00a fe2f 	bl	801780c <osMessagePut>
	  datalogevt = osMessageGet(DATA_LOGGING_qHandle, 5000);
 800cbae:	4bbf      	ldr	r3, [pc, #764]	; (800ceac <Start_DATA_LOGGING+0x1120>)
 800cbb0:	6819      	ldr	r1, [r3, #0]
 800cbb2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800cbb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f00a fe66 	bl	801788c <osMessageGet>
	  if(datalogevt.status == osEventMessage)
 800cbc0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800cbc4:	2b10      	cmp	r3, #16
 800cbc6:	f040 86ec 	bne.w	800d9a2 <Start_DATA_LOGGING+0x1c16>
	  {
		  datalogmsg = datalogevt.value.p;
 800cbca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800cbce:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		  memcpy(DATA_RECEIVED,datalogmsg->DATA_LOGGING_DATA,50);
 800cbd2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800cbd6:	4ab6      	ldr	r2, [pc, #728]	; (800ceb0 <Start_DATA_LOGGING+0x1124>)
 800cbd8:	461c      	mov	r4, r3
 800cbda:	4616      	mov	r6, r2
 800cbdc:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800cbe0:	4635      	mov	r5, r6
 800cbe2:	4623      	mov	r3, r4
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	6859      	ldr	r1, [r3, #4]
 800cbe8:	689a      	ldr	r2, [r3, #8]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbee:	3410      	adds	r4, #16
 800cbf0:	3610      	adds	r6, #16
 800cbf2:	4564      	cmp	r4, ip
 800cbf4:	d1f4      	bne.n	800cbe0 <Start_DATA_LOGGING+0xe54>
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	8013      	strh	r3, [r2, #0]
		  osPoolFree(datalogpool,datalogmsg);
 800cbfe:	4bad      	ldr	r3, [pc, #692]	; (800ceb4 <Start_DATA_LOGGING+0x1128>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800cc06:	4618      	mov	r0, r3
 800cc08:	f00a fd97 	bl	801773a <osPoolFree>
		  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_1SYS)
 800cc0c:	4baa      	ldr	r3, [pc, #680]	; (800ceb8 <Start_DATA_LOGGING+0x112c>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b32      	cmp	r3, #50	; 0x32
 800cc12:	f040 809e 	bne.w	800cd52 <Start_DATA_LOGGING+0xfc6>
			  {
  			  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800cc16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800cc1a:	22c8      	movs	r2, #200	; 0xc8
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f00e faf7 	bl	801b212 <memset>
  			  DATA_TO_SEND[0] = MODEM_BIT;
 800cc24:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cc28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	701a      	strb	r2, [r3, #0]
  			  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800cc30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cc34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cc38:	2204      	movs	r2, #4
 800cc3a:	705a      	strb	r2, [r3, #1]
  			  for(int i=0;i<48;i++)
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800cc42:	e011      	b.n	800cc68 <Start_DATA_LOGGING+0xedc>
  			  {
  				  DATA_TO_SEND[i+2] = DATA_RECEIVED[i];
 800cc44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cc48:	3302      	adds	r3, #2
 800cc4a:	4999      	ldr	r1, [pc, #612]	; (800ceb0 <Start_DATA_LOGGING+0x1124>)
 800cc4c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800cc50:	440a      	add	r2, r1
 800cc52:	7811      	ldrb	r1, [r2, #0]
 800cc54:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800cc58:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800cc5c:	54d1      	strb	r1, [r2, r3]
  			  for(int i=0;i<48;i++)
 800cc5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cc62:	3301      	adds	r3, #1
 800cc64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800cc68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800cc6c:	2b2f      	cmp	r3, #47	; 0x2f
 800cc6e:	dde9      	ble.n	800cc44 <Start_DATA_LOGGING+0xeb8>
  			  }
  			  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800cc70:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800cc74:	22c7      	movs	r2, #199	; 0xc7
 800cc76:	4619      	mov	r1, r3
 800cc78:	4890      	ldr	r0, [pc, #576]	; (800cebc <Start_DATA_LOGGING+0x1130>)
 800cc7a:	f004 f88f 	bl	8010d9c <HAL_CRC_Calculate>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
  			  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800cc84:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cc88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cc8c:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800cc90:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
				  switch(WHOM_TO_GIVE_DATA)
 800cc94:	4b8a      	ldr	r3, [pc, #552]	; (800cec0 <Start_DATA_LOGGING+0x1134>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d002      	beq.n	800cca2 <Start_DATA_LOGGING+0xf16>
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d03c      	beq.n	800cd1a <Start_DATA_LOGGING+0xf8e>
 800cca0:	e05c      	b.n	800cd5c <Start_DATA_LOGGING+0xfd0>
				  {
				  case MODEM_SYSTEM:

				  			  notification = ulTaskNotifyTake(0,5000);
 800cca2:	f241 3188 	movw	r1, #5000	; 0x1388
 800cca6:	2000      	movs	r0, #0
 800cca8:	f00c ff74 	bl	8019b94 <ulTaskNotifyTake>
 800ccac:	4603      	mov	r3, r0
 800ccae:	461a      	mov	r2, r3
 800ccb0:	4b84      	ldr	r3, [pc, #528]	; (800cec4 <Start_DATA_LOGGING+0x1138>)
 800ccb2:	601a      	str	r2, [r3, #0]
				  			  if( (notification>=0))
 800ccb4:	4b83      	ldr	r3, [pc, #524]	; (800cec4 <Start_DATA_LOGGING+0x1138>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	db4c      	blt.n	800cd56 <Start_DATA_LOGGING+0xfca>
				  			  {
				  			  notification =0;
 800ccbc:	4b81      	ldr	r3, [pc, #516]	; (800cec4 <Start_DATA_LOGGING+0x1138>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
							  lorasendmsg = osPoolAlloc(lorasendpool);
 800ccc2:	4b81      	ldr	r3, [pc, #516]	; (800cec8 <Start_DATA_LOGGING+0x113c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f00a fcd3 	bl	8017672 <osPoolAlloc>
 800cccc:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
							  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ccd6:	e013      	b.n	800cd00 <Start_DATA_LOGGING+0xf74>
							  {
								  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800ccd8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ccdc:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800cce0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cce4:	4413      	add	r3, r2
 800cce6:	7819      	ldrb	r1, [r3, #0]
 800cce8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800ccec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ccf0:	4413      	add	r3, r2
 800ccf2:	460a      	mov	r2, r1
 800ccf4:	701a      	strb	r2, [r3, #0]
							  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800ccf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cd00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cd04:	2bc7      	cmp	r3, #199	; 0xc7
 800cd06:	dde7      	ble.n	800ccd8 <Start_DATA_LOGGING+0xf4c>
							  }
							  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800cd08:	4b70      	ldr	r3, [pc, #448]	; (800cecc <Start_DATA_LOGGING+0x1140>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800cd10:	2264      	movs	r2, #100	; 0x64
 800cd12:	4618      	mov	r0, r3
 800cd14:	f00a fd7a 	bl	801780c <osMessagePut>
				  			  }

				  			  break;
 800cd18:	e01d      	b.n	800cd56 <Start_DATA_LOGGING+0xfca>
				  		  case LOCAL_SYSTEM:
				  			  if(DATA_RECEIVED[0]==MY_TCU_ID)
 800cd1a:	4b65      	ldr	r3, [pc, #404]	; (800ceb0 <Start_DATA_LOGGING+0x1124>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	d11b      	bne.n	800cd5a <Start_DATA_LOGGING+0xfce>
				  			  {
					  			  notification = ulTaskNotifyTake(0,5000);
 800cd22:	f241 3188 	movw	r1, #5000	; 0x1388
 800cd26:	2000      	movs	r0, #0
 800cd28:	f00c ff34 	bl	8019b94 <ulTaskNotifyTake>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	461a      	mov	r2, r3
 800cd30:	4b64      	ldr	r3, [pc, #400]	; (800cec4 <Start_DATA_LOGGING+0x1138>)
 800cd32:	601a      	str	r2, [r3, #0]
					  			  if( (notification>=0))
 800cd34:	4b63      	ldr	r3, [pc, #396]	; (800cec4 <Start_DATA_LOGGING+0x1138>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	db0e      	blt.n	800cd5a <Start_DATA_LOGGING+0xfce>
					  			  {
					  			  notification =0;
 800cd3c:	4b61      	ldr	r3, [pc, #388]	; (800cec4 <Start_DATA_LOGGING+0x1138>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]
				  			  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800cd42:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800cd46:	2364      	movs	r3, #100	; 0x64
 800cd48:	22c8      	movs	r2, #200	; 0xc8
 800cd4a:	4861      	ldr	r0, [pc, #388]	; (800ced0 <Start_DATA_LOGGING+0x1144>)
 800cd4c:	f009 f820 	bl	8015d90 <HAL_UART_Transmit>
					  			  }
				  			  }
				  			  break;
 800cd50:	e003      	b.n	800cd5a <Start_DATA_LOGGING+0xfce>
				  }

			  }
 800cd52:	bf00      	nop
 800cd54:	e002      	b.n	800cd5c <Start_DATA_LOGGING+0xfd0>
				  			  break;
 800cd56:	bf00      	nop
 800cd58:	e000      	b.n	800cd5c <Start_DATA_LOGGING+0xfd0>
				  			  break;
 800cd5a:	bf00      	nop
			  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_2SYS)
 800cd5c:	4b56      	ldr	r3, [pc, #344]	; (800ceb8 <Start_DATA_LOGGING+0x112c>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b64      	cmp	r3, #100	; 0x64
 800cd62:	f040 8166 	bne.w	800d032 <Start_DATA_LOGGING+0x12a6>
			  {
				  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800cd66:	f107 031c 	add.w	r3, r7, #28
 800cd6a:	2232      	movs	r2, #50	; 0x32
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f00e fa4f 	bl	801b212 <memset>
					  memset(DATA_FOR_SLAVE,0xFF,50);
 800cd74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cd78:	2232      	movs	r2, #50	; 0x32
 800cd7a:	21ff      	movs	r1, #255	; 0xff
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f00e fa48 	bl	801b212 <memset>
					  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800cd82:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cd86:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	701a      	strb	r2, [r3, #0]
					  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800cd8e:	4b51      	ldr	r3, [pc, #324]	; (800ced4 <Start_DATA_LOGGING+0x1148>)
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cd96:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cd9a:	705a      	strb	r2, [r3, #1]
					  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800cd9c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cda0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cda4:	22ca      	movs	r2, #202	; 0xca
 800cda6:	709a      	strb	r2, [r3, #2]
					  slavemsg = osPoolAlloc(slavesendpool);
 800cda8:	4b4b      	ldr	r3, [pc, #300]	; (800ced8 <Start_DATA_LOGGING+0x114c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f00a fc60 	bl	8017672 <osPoolAlloc>
 800cdb2:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
					  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800cdb6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800cdba:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cdbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cdc2:	461c      	mov	r4, r3
 800cdc4:	4694      	mov	ip, r2
 800cdc6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800cdca:	4665      	mov	r5, ip
 800cdcc:	4626      	mov	r6, r4
 800cdce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cdd0:	6028      	str	r0, [r5, #0]
 800cdd2:	6069      	str	r1, [r5, #4]
 800cdd4:	60aa      	str	r2, [r5, #8]
 800cdd6:	60eb      	str	r3, [r5, #12]
 800cdd8:	3410      	adds	r4, #16
 800cdda:	f10c 0c10 	add.w	ip, ip, #16
 800cdde:	4574      	cmp	r4, lr
 800cde0:	d1f3      	bne.n	800cdca <Start_DATA_LOGGING+0x103e>
 800cde2:	4662      	mov	r2, ip
 800cde4:	4623      	mov	r3, r4
 800cde6:	881b      	ldrh	r3, [r3, #0]
 800cde8:	8013      	strh	r3, [r2, #0]
					  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800cdea:	4b3c      	ldr	r3, [pc, #240]	; (800cedc <Start_DATA_LOGGING+0x1150>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800cdf2:	2264      	movs	r2, #100	; 0x64
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f00a fd09 	bl	801780c <osMessagePut>
					  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800cdfa:	4b39      	ldr	r3, [pc, #228]	; (800cee0 <Start_DATA_LOGGING+0x1154>)
 800cdfc:	6819      	ldr	r1, [r3, #0]
 800cdfe:	463b      	mov	r3, r7
 800ce00:	f641 3258 	movw	r2, #7000	; 0x1b58
 800ce04:	4618      	mov	r0, r3
 800ce06:	f00a fd41 	bl	801788c <osMessageGet>
 800ce0a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ce0e:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800ce12:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800ce16:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  if(dataofslaveevt.status == osEventMessage)
 800ce1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ce20:	2b10      	cmp	r3, #16
 800ce22:	d123      	bne.n	800ce6c <Start_DATA_LOGGING+0x10e0>
					  {
						  dataofslavemsg = dataofslaveevt.value.p;
 800ce24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ce28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
						  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800ce2c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800ce30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ce34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ce38:	4614      	mov	r4, r2
 800ce3a:	461e      	mov	r6, r3
 800ce3c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800ce40:	4635      	mov	r5, r6
 800ce42:	4623      	mov	r3, r4
 800ce44:	6818      	ldr	r0, [r3, #0]
 800ce46:	6859      	ldr	r1, [r3, #4]
 800ce48:	689a      	ldr	r2, [r3, #8]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce4e:	3410      	adds	r4, #16
 800ce50:	3610      	adds	r6, #16
 800ce52:	4564      	cmp	r4, ip
 800ce54:	d1f4      	bne.n	800ce40 <Start_DATA_LOGGING+0x10b4>
 800ce56:	4632      	mov	r2, r6
 800ce58:	4623      	mov	r3, r4
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	8013      	strh	r3, [r2, #0]
						  osPoolFree(dataofslavepool, dataofslavemsg);
 800ce5e:	4b21      	ldr	r3, [pc, #132]	; (800cee4 <Start_DATA_LOGGING+0x1158>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800ce66:	4618      	mov	r0, r3
 800ce68:	f00a fc67 	bl	801773a <osPoolFree>
					  }
					  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800ce6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ce70:	22c8      	movs	r2, #200	; 0xc8
 800ce72:	2100      	movs	r1, #0
 800ce74:	4618      	mov	r0, r3
 800ce76:	f00e f9cc 	bl	801b212 <memset>
					  DATA_TO_SEND[0] = MODEM_BIT;
 800ce7a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ce7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ce82:	2201      	movs	r2, #1
 800ce84:	701a      	strb	r2, [r3, #0]
					  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800ce86:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ce8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ce8e:	2204      	movs	r2, #4
 800ce90:	705a      	strb	r2, [r3, #1]
		  			  for(int i=0;i<48;i++)
 800ce92:	2300      	movs	r3, #0
 800ce94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ce98:	e038      	b.n	800cf0c <Start_DATA_LOGGING+0x1180>
 800ce9a:	bf00      	nop
 800ce9c:	20002b3c 	.word	0x20002b3c
 800cea0:	20000009 	.word	0x20000009
 800cea4:	20001614 	.word	0x20001614
 800cea8:	20001e3c 	.word	0x20001e3c
 800ceac:	20001e44 	.word	0x20001e44
 800ceb0:	20002b44 	.word	0x20002b44
 800ceb4:	200015e8 	.word	0x200015e8
 800ceb8:	20001e93 	.word	0x20001e93
 800cebc:	20001718 	.word	0x20001718
 800cec0:	20001f5c 	.word	0x20001f5c
 800cec4:	20002b40 	.word	0x20002b40
 800cec8:	200015c8 	.word	0x200015c8
 800cecc:	20001e1c 	.word	0x20001e1c
 800ced0:	20001bac 	.word	0x20001bac
 800ced4:	20001f54 	.word	0x20001f54
 800ced8:	200015e4 	.word	0x200015e4
 800cedc:	20001e30 	.word	0x20001e30
 800cee0:	20001e48 	.word	0x20001e48
 800cee4:	200015dc 	.word	0x200015dc
		  			  {
		  				  DATA_TO_SEND[i+2] = DATA_RECEIVED[i];
 800cee8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ceec:	3302      	adds	r3, #2
 800ceee:	49ac      	ldr	r1, [pc, #688]	; (800d1a0 <Start_DATA_LOGGING+0x1414>)
 800cef0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800cef4:	440a      	add	r2, r1
 800cef6:	7811      	ldrb	r1, [r2, #0]
 800cef8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800cefc:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800cf00:	54d1      	strb	r1, [r2, r3]
		  			  for(int i=0;i<48;i++)
 800cf02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf06:	3301      	adds	r3, #1
 800cf08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cf0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cf10:	2b2f      	cmp	r3, #47	; 0x2f
 800cf12:	dde9      	ble.n	800cee8 <Start_DATA_LOGGING+0x115c>
		  			  }
		  			  for(int i =50;i<92;i++)
 800cf14:	2332      	movs	r3, #50	; 0x32
 800cf16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800cf1a:	e015      	b.n	800cf48 <Start_DATA_LOGGING+0x11bc>
		  			  {
		  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-49];
 800cf1c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800cf20:	3b31      	subs	r3, #49	; 0x31
 800cf22:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800cf26:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800cf2a:	5cd1      	ldrb	r1, [r2, r3]
 800cf2c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cf30:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800cf34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800cf38:	4413      	add	r3, r2
 800cf3a:	460a      	mov	r2, r1
 800cf3c:	701a      	strb	r2, [r3, #0]
		  			  for(int i =50;i<92;i++)
 800cf3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800cf42:	3301      	adds	r3, #1
 800cf44:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800cf48:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800cf4c:	2b5b      	cmp	r3, #91	; 0x5b
 800cf4e:	dde5      	ble.n	800cf1c <Start_DATA_LOGGING+0x1190>
		  			  }
					  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800cf50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800cf54:	22c7      	movs	r2, #199	; 0xc7
 800cf56:	4619      	mov	r1, r3
 800cf58:	4892      	ldr	r0, [pc, #584]	; (800d1a4 <Start_DATA_LOGGING+0x1418>)
 800cf5a:	f003 ff1f 	bl	8010d9c <HAL_CRC_Calculate>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
					  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800cf64:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cf68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cf6c:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800cf70:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
				  switch(WHOM_TO_GIVE_DATA)
 800cf74:	4b8c      	ldr	r3, [pc, #560]	; (800d1a8 <Start_DATA_LOGGING+0x141c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d002      	beq.n	800cf82 <Start_DATA_LOGGING+0x11f6>
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d03c      	beq.n	800cffa <Start_DATA_LOGGING+0x126e>
 800cf80:	e05c      	b.n	800d03c <Start_DATA_LOGGING+0x12b0>
				  {
				  case MODEM_SYSTEM:
		  			  notification = ulTaskNotifyTake(0,5000);
 800cf82:	f241 3188 	movw	r1, #5000	; 0x1388
 800cf86:	2000      	movs	r0, #0
 800cf88:	f00c fe04 	bl	8019b94 <ulTaskNotifyTake>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4b86      	ldr	r3, [pc, #536]	; (800d1ac <Start_DATA_LOGGING+0x1420>)
 800cf92:	601a      	str	r2, [r3, #0]
		  			  if( (notification>=0))
 800cf94:	4b85      	ldr	r3, [pc, #532]	; (800d1ac <Start_DATA_LOGGING+0x1420>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	db4c      	blt.n	800d036 <Start_DATA_LOGGING+0x12aa>
		  			  {
		  			  notification =0;
 800cf9c:	4b83      	ldr	r3, [pc, #524]	; (800d1ac <Start_DATA_LOGGING+0x1420>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	601a      	str	r2, [r3, #0]
					  lorasendmsg = osPoolAlloc(lorasendpool);
 800cfa2:	4b83      	ldr	r3, [pc, #524]	; (800d1b0 <Start_DATA_LOGGING+0x1424>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f00a fb63 	bl	8017672 <osPoolAlloc>
 800cfac:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
					  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cfb6:	e013      	b.n	800cfe0 <Start_DATA_LOGGING+0x1254>
					  {
						  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800cfb8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800cfbc:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800cfc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800cfc4:	4413      	add	r3, r2
 800cfc6:	7819      	ldrb	r1, [r3, #0]
 800cfc8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800cfcc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800cfd0:	4413      	add	r3, r2
 800cfd2:	460a      	mov	r2, r1
 800cfd4:	701a      	strb	r2, [r3, #0]
					  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800cfd6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800cfda:	3301      	adds	r3, #1
 800cfdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cfe0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800cfe4:	2bc7      	cmp	r3, #199	; 0xc7
 800cfe6:	dde7      	ble.n	800cfb8 <Start_DATA_LOGGING+0x122c>
					  }
					  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800cfe8:	4b72      	ldr	r3, [pc, #456]	; (800d1b4 <Start_DATA_LOGGING+0x1428>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800cff0:	2264      	movs	r2, #100	; 0x64
 800cff2:	4618      	mov	r0, r3
 800cff4:	f00a fc0a 	bl	801780c <osMessagePut>
		  			  }

					  break;
 800cff8:	e01d      	b.n	800d036 <Start_DATA_LOGGING+0x12aa>

				  case LOCAL_SYSTEM:
		  			  if(DATA_RECEIVED[0]==MY_TCU_ID)
 800cffa:	4b69      	ldr	r3, [pc, #420]	; (800d1a0 <Start_DATA_LOGGING+0x1414>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d11b      	bne.n	800d03a <Start_DATA_LOGGING+0x12ae>
		  			  {
			  			  notification = ulTaskNotifyTake(0,5000);
 800d002:	f241 3188 	movw	r1, #5000	; 0x1388
 800d006:	2000      	movs	r0, #0
 800d008:	f00c fdc4 	bl	8019b94 <ulTaskNotifyTake>
 800d00c:	4603      	mov	r3, r0
 800d00e:	461a      	mov	r2, r3
 800d010:	4b66      	ldr	r3, [pc, #408]	; (800d1ac <Start_DATA_LOGGING+0x1420>)
 800d012:	601a      	str	r2, [r3, #0]
			  			  if( (notification>=0))
 800d014:	4b65      	ldr	r3, [pc, #404]	; (800d1ac <Start_DATA_LOGGING+0x1420>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	db0e      	blt.n	800d03a <Start_DATA_LOGGING+0x12ae>
			  			  {
			  			  notification =0;
 800d01c:	4b63      	ldr	r3, [pc, #396]	; (800d1ac <Start_DATA_LOGGING+0x1420>)
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]
		  			  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800d022:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800d026:	2364      	movs	r3, #100	; 0x64
 800d028:	22c8      	movs	r2, #200	; 0xc8
 800d02a:	4863      	ldr	r0, [pc, #396]	; (800d1b8 <Start_DATA_LOGGING+0x142c>)
 800d02c:	f008 feb0 	bl	8015d90 <HAL_UART_Transmit>
			  			  }
		  			  }

					  break;
 800d030:	e003      	b.n	800d03a <Start_DATA_LOGGING+0x12ae>
				  }
			  }
 800d032:	bf00      	nop
 800d034:	e002      	b.n	800d03c <Start_DATA_LOGGING+0x12b0>
					  break;
 800d036:	bf00      	nop
 800d038:	e000      	b.n	800d03c <Start_DATA_LOGGING+0x12b0>
					  break;
 800d03a:	bf00      	nop
			  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_3SYS)
 800d03c:	4b5f      	ldr	r3, [pc, #380]	; (800d1bc <Start_DATA_LOGGING+0x1430>)
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2b96      	cmp	r3, #150	; 0x96
 800d042:	f040 81f3 	bne.w	800d42c <Start_DATA_LOGGING+0x16a0>
			  {
				  memset(DATA_FOR_SLAVE,0xFF,50);
 800d046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d04a:	2232      	movs	r2, #50	; 0x32
 800d04c:	21ff      	movs	r1, #255	; 0xff
 800d04e:	4618      	mov	r0, r3
 800d050:	f00e f8df 	bl	801b212 <memset>
						  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800d054:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d058:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d05c:	2202      	movs	r2, #2
 800d05e:	701a      	strb	r2, [r3, #0]
						  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800d060:	4b57      	ldr	r3, [pc, #348]	; (800d1c0 <Start_DATA_LOGGING+0x1434>)
 800d062:	781a      	ldrb	r2, [r3, #0]
 800d064:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d068:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d06c:	705a      	strb	r2, [r3, #1]
						  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800d06e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d072:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d076:	22ca      	movs	r2, #202	; 0xca
 800d078:	709a      	strb	r2, [r3, #2]
						  slavemsg = osPoolAlloc(slavesendpool);
 800d07a:	4b52      	ldr	r3, [pc, #328]	; (800d1c4 <Start_DATA_LOGGING+0x1438>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4618      	mov	r0, r3
 800d080:	f00a faf7 	bl	8017672 <osPoolAlloc>
 800d084:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
						  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800d088:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d08c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d090:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d094:	461c      	mov	r4, r3
 800d096:	4694      	mov	ip, r2
 800d098:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800d09c:	4665      	mov	r5, ip
 800d09e:	4626      	mov	r6, r4
 800d0a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d0a2:	6028      	str	r0, [r5, #0]
 800d0a4:	6069      	str	r1, [r5, #4]
 800d0a6:	60aa      	str	r2, [r5, #8]
 800d0a8:	60eb      	str	r3, [r5, #12]
 800d0aa:	3410      	adds	r4, #16
 800d0ac:	f10c 0c10 	add.w	ip, ip, #16
 800d0b0:	4574      	cmp	r4, lr
 800d0b2:	d1f3      	bne.n	800d09c <Start_DATA_LOGGING+0x1310>
 800d0b4:	4662      	mov	r2, ip
 800d0b6:	4623      	mov	r3, r4
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	8013      	strh	r3, [r2, #0]
						  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800d0bc:	4b42      	ldr	r3, [pc, #264]	; (800d1c8 <Start_DATA_LOGGING+0x143c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800d0c4:	2264      	movs	r2, #100	; 0x64
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f00a fba0 	bl	801780c <osMessagePut>
						  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	; (800d1cc <Start_DATA_LOGGING+0x1440>)
 800d0ce:	6819      	ldr	r1, [r3, #0]
 800d0d0:	463b      	mov	r3, r7
 800d0d2:	f641 3258 	movw	r2, #7000	; 0x1b58
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f00a fbd8 	bl	801788c <osMessageGet>
 800d0dc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d0e0:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800d0e4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800d0e8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						  if(dataofslaveevt.status == osEventMessage)
 800d0ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d0f2:	2b10      	cmp	r3, #16
 800d0f4:	d123      	bne.n	800d13e <Start_DATA_LOGGING+0x13b2>
						  {
							  dataofslavemsg = dataofslaveevt.value.p;
 800d0f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d0fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
							  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800d0fe:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d102:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d106:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d10a:	4614      	mov	r4, r2
 800d10c:	461e      	mov	r6, r3
 800d10e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800d112:	4635      	mov	r5, r6
 800d114:	4623      	mov	r3, r4
 800d116:	6818      	ldr	r0, [r3, #0]
 800d118:	6859      	ldr	r1, [r3, #4]
 800d11a:	689a      	ldr	r2, [r3, #8]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d120:	3410      	adds	r4, #16
 800d122:	3610      	adds	r6, #16
 800d124:	4564      	cmp	r4, ip
 800d126:	d1f4      	bne.n	800d112 <Start_DATA_LOGGING+0x1386>
 800d128:	4632      	mov	r2, r6
 800d12a:	4623      	mov	r3, r4
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	8013      	strh	r3, [r2, #0]
     						  osPoolFree(dataofslavepool, dataofslavemsg);
 800d130:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <Start_DATA_LOGGING+0x1444>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800d138:	4618      	mov	r0, r3
 800d13a:	f00a fafe 	bl	801773a <osPoolFree>
						  }
						  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800d13e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d142:	22c8      	movs	r2, #200	; 0xc8
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f00e f863 	bl	801b212 <memset>
						  DATA_TO_SEND[0] = MODEM_BIT;
 800d14c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d150:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d154:	2201      	movs	r2, #1
 800d156:	701a      	strb	r2, [r3, #0]
						  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800d158:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d15c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d160:	2204      	movs	r2, #4
 800d162:	705a      	strb	r2, [r3, #1]
			  			  for(int i=0;i<48;i++)
 800d164:	2300      	movs	r3, #0
 800d166:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800d16a:	e011      	b.n	800d190 <Start_DATA_LOGGING+0x1404>
			  			  {
			  				  DATA_TO_SEND[i+2] = DATA_RECEIVED[i];
 800d16c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d170:	3302      	adds	r3, #2
 800d172:	490b      	ldr	r1, [pc, #44]	; (800d1a0 <Start_DATA_LOGGING+0x1414>)
 800d174:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800d178:	440a      	add	r2, r1
 800d17a:	7811      	ldrb	r1, [r2, #0]
 800d17c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d180:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800d184:	54d1      	strb	r1, [r2, r3]
			  			  for(int i=0;i<48;i++)
 800d186:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d18a:	3301      	adds	r3, #1
 800d18c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800d190:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d194:	2b2f      	cmp	r3, #47	; 0x2f
 800d196:	dde9      	ble.n	800d16c <Start_DATA_LOGGING+0x13e0>
			  			  }
			  			  for(int i =50;i<92;i++)
 800d198:	2332      	movs	r3, #50	; 0x32
 800d19a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d19e:	e02f      	b.n	800d200 <Start_DATA_LOGGING+0x1474>
 800d1a0:	20002b44 	.word	0x20002b44
 800d1a4:	20001718 	.word	0x20001718
 800d1a8:	20001f5c 	.word	0x20001f5c
 800d1ac:	20002b40 	.word	0x20002b40
 800d1b0:	200015c8 	.word	0x200015c8
 800d1b4:	20001e1c 	.word	0x20001e1c
 800d1b8:	20001bac 	.word	0x20001bac
 800d1bc:	20001e93 	.word	0x20001e93
 800d1c0:	20001f54 	.word	0x20001f54
 800d1c4:	200015e4 	.word	0x200015e4
 800d1c8:	20001e30 	.word	0x20001e30
 800d1cc:	20001e48 	.word	0x20001e48
 800d1d0:	200015dc 	.word	0x200015dc
			  			  {
			  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-49];
 800d1d4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800d1d8:	3b31      	subs	r3, #49	; 0x31
 800d1da:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d1de:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800d1e2:	5cd1      	ldrb	r1, [r2, r3]
 800d1e4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d1e8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d1ec:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800d1f0:	4413      	add	r3, r2
 800d1f2:	460a      	mov	r2, r1
 800d1f4:	701a      	strb	r2, [r3, #0]
			  			  for(int i =50;i<92;i++)
 800d1f6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d200:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800d204:	2b5b      	cmp	r3, #91	; 0x5b
 800d206:	dde5      	ble.n	800d1d4 <Start_DATA_LOGGING+0x1448>
			  			  }
						  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800d208:	f107 031c 	add.w	r3, r7, #28
 800d20c:	2232      	movs	r2, #50	; 0x32
 800d20e:	2100      	movs	r1, #0
 800d210:	4618      	mov	r0, r3
 800d212:	f00d fffe 	bl	801b212 <memset>
						  memset(DATA_FOR_SLAVE,0xFF,50);
 800d216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d21a:	2232      	movs	r2, #50	; 0x32
 800d21c:	21ff      	movs	r1, #255	; 0xff
 800d21e:	4618      	mov	r0, r3
 800d220:	f00d fff7 	bl	801b212 <memset>
						  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800d224:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d228:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d22c:	2202      	movs	r2, #2
 800d22e:	701a      	strb	r2, [r3, #0]
						  DATA_FOR_SLAVE[1] = ID_S_PRESENT[1];
 800d230:	4bcd      	ldr	r3, [pc, #820]	; (800d568 <Start_DATA_LOGGING+0x17dc>)
 800d232:	785a      	ldrb	r2, [r3, #1]
 800d234:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d238:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d23c:	705a      	strb	r2, [r3, #1]
						  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800d23e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d242:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d246:	22ca      	movs	r2, #202	; 0xca
 800d248:	709a      	strb	r2, [r3, #2]
						  slavemsg = osPoolAlloc(slavesendpool);
 800d24a:	4bc8      	ldr	r3, [pc, #800]	; (800d56c <Start_DATA_LOGGING+0x17e0>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4618      	mov	r0, r3
 800d250:	f00a fa0f 	bl	8017672 <osPoolAlloc>
 800d254:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
						  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800d258:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d25c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d260:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d264:	461c      	mov	r4, r3
 800d266:	4694      	mov	ip, r2
 800d268:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800d26c:	4665      	mov	r5, ip
 800d26e:	4626      	mov	r6, r4
 800d270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d272:	6028      	str	r0, [r5, #0]
 800d274:	6069      	str	r1, [r5, #4]
 800d276:	60aa      	str	r2, [r5, #8]
 800d278:	60eb      	str	r3, [r5, #12]
 800d27a:	3410      	adds	r4, #16
 800d27c:	f10c 0c10 	add.w	ip, ip, #16
 800d280:	4574      	cmp	r4, lr
 800d282:	d1f3      	bne.n	800d26c <Start_DATA_LOGGING+0x14e0>
 800d284:	4662      	mov	r2, ip
 800d286:	4623      	mov	r3, r4
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	8013      	strh	r3, [r2, #0]
						  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800d28c:	4bb8      	ldr	r3, [pc, #736]	; (800d570 <Start_DATA_LOGGING+0x17e4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800d294:	2264      	movs	r2, #100	; 0x64
 800d296:	4618      	mov	r0, r3
 800d298:	f00a fab8 	bl	801780c <osMessagePut>
						  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800d29c:	4bb5      	ldr	r3, [pc, #724]	; (800d574 <Start_DATA_LOGGING+0x17e8>)
 800d29e:	6819      	ldr	r1, [r3, #0]
 800d2a0:	463b      	mov	r3, r7
 800d2a2:	f641 3258 	movw	r2, #7000	; 0x1b58
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f00a faf0 	bl	801788c <osMessageGet>
 800d2ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d2b0:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800d2b4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800d2b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d2ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						  if(dataofslaveevt.status == osEventMessage)
 800d2be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d2c2:	2b10      	cmp	r3, #16
 800d2c4:	d123      	bne.n	800d30e <Start_DATA_LOGGING+0x1582>
						  {
							  dataofslavemsg = dataofslaveevt.value.p;
 800d2c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d2ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

							  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800d2ce:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d2d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d2d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d2da:	4614      	mov	r4, r2
 800d2dc:	461e      	mov	r6, r3
 800d2de:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800d2e2:	4635      	mov	r5, r6
 800d2e4:	4623      	mov	r3, r4
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	6859      	ldr	r1, [r3, #4]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d2f0:	3410      	adds	r4, #16
 800d2f2:	3610      	adds	r6, #16
 800d2f4:	4564      	cmp	r4, ip
 800d2f6:	d1f4      	bne.n	800d2e2 <Start_DATA_LOGGING+0x1556>
 800d2f8:	4632      	mov	r2, r6
 800d2fa:	4623      	mov	r3, r4
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	8013      	strh	r3, [r2, #0]

							  osPoolFree(dataofslavepool, dataofslavemsg);
 800d300:	4b9d      	ldr	r3, [pc, #628]	; (800d578 <Start_DATA_LOGGING+0x17ec>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800d308:	4618      	mov	r0, r3
 800d30a:	f00a fa16 	bl	801773a <osPoolFree>
						  }
			  			  for(int i =92;i<134;i++)
 800d30e:	235c      	movs	r3, #92	; 0x5c
 800d310:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800d314:	e015      	b.n	800d342 <Start_DATA_LOGGING+0x15b6>
			  			  {
			  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-91];
 800d316:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d31a:	3b5b      	subs	r3, #91	; 0x5b
 800d31c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d320:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800d324:	5cd1      	ldrb	r1, [r2, r3]
 800d326:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d32a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d32e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d332:	4413      	add	r3, r2
 800d334:	460a      	mov	r2, r1
 800d336:	701a      	strb	r2, [r3, #0]
			  			  for(int i =92;i<134;i++)
 800d338:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d33c:	3301      	adds	r3, #1
 800d33e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800d342:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800d346:	2b85      	cmp	r3, #133	; 0x85
 800d348:	dde5      	ble.n	800d316 <Start_DATA_LOGGING+0x158a>
			  			  }
						  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800d34a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d34e:	22c7      	movs	r2, #199	; 0xc7
 800d350:	4619      	mov	r1, r3
 800d352:	488a      	ldr	r0, [pc, #552]	; (800d57c <Start_DATA_LOGGING+0x17f0>)
 800d354:	f003 fd22 	bl	8010d9c <HAL_CRC_Calculate>
 800d358:	4603      	mov	r3, r0
 800d35a:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
						  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800d35e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d362:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d366:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800d36a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
				  switch(WHOM_TO_GIVE_DATA)
 800d36e:	4b84      	ldr	r3, [pc, #528]	; (800d580 <Start_DATA_LOGGING+0x17f4>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d002      	beq.n	800d37c <Start_DATA_LOGGING+0x15f0>
 800d376:	2b02      	cmp	r3, #2
 800d378:	d03c      	beq.n	800d3f4 <Start_DATA_LOGGING+0x1668>
 800d37a:	e05c      	b.n	800d436 <Start_DATA_LOGGING+0x16aa>
				  {
				  case MODEM_SYSTEM:

		  			  notification = ulTaskNotifyTake(0,5000);
 800d37c:	f241 3188 	movw	r1, #5000	; 0x1388
 800d380:	2000      	movs	r0, #0
 800d382:	f00c fc07 	bl	8019b94 <ulTaskNotifyTake>
 800d386:	4603      	mov	r3, r0
 800d388:	461a      	mov	r2, r3
 800d38a:	4b7e      	ldr	r3, [pc, #504]	; (800d584 <Start_DATA_LOGGING+0x17f8>)
 800d38c:	601a      	str	r2, [r3, #0]
		  			  if( (notification>=0))
 800d38e:	4b7d      	ldr	r3, [pc, #500]	; (800d584 <Start_DATA_LOGGING+0x17f8>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	db4c      	blt.n	800d430 <Start_DATA_LOGGING+0x16a4>
		  			  {
		  			  notification =0;
 800d396:	4b7b      	ldr	r3, [pc, #492]	; (800d584 <Start_DATA_LOGGING+0x17f8>)
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]
					  lorasendmsg = osPoolAlloc(lorasendpool);
 800d39c:	4b7a      	ldr	r3, [pc, #488]	; (800d588 <Start_DATA_LOGGING+0x17fc>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f00a f966 	bl	8017672 <osPoolAlloc>
 800d3a6:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
					  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800d3b0:	e013      	b.n	800d3da <Start_DATA_LOGGING+0x164e>
					  {
						  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800d3b2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d3b6:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d3ba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800d3be:	4413      	add	r3, r2
 800d3c0:	7819      	ldrb	r1, [r3, #0]
 800d3c2:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800d3c6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800d3ca:	4413      	add	r3, r2
 800d3cc:	460a      	mov	r2, r1
 800d3ce:	701a      	strb	r2, [r3, #0]
					  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800d3d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800d3da:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800d3de:	2bc7      	cmp	r3, #199	; 0xc7
 800d3e0:	dde7      	ble.n	800d3b2 <Start_DATA_LOGGING+0x1626>
					  }
					  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800d3e2:	4b6a      	ldr	r3, [pc, #424]	; (800d58c <Start_DATA_LOGGING+0x1800>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800d3ea:	2264      	movs	r2, #100	; 0x64
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f00a fa0d 	bl	801780c <osMessagePut>
		  			  }
					  break;
 800d3f2:	e01d      	b.n	800d430 <Start_DATA_LOGGING+0x16a4>

				  case LOCAL_SYSTEM:
		  			  if(DATA_RECEIVED[0]==MY_TCU_ID)
 800d3f4:	4b66      	ldr	r3, [pc, #408]	; (800d590 <Start_DATA_LOGGING+0x1804>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	d11b      	bne.n	800d434 <Start_DATA_LOGGING+0x16a8>
		  			  {
			  			  notification = ulTaskNotifyTake(0,5000);
 800d3fc:	f241 3188 	movw	r1, #5000	; 0x1388
 800d400:	2000      	movs	r0, #0
 800d402:	f00c fbc7 	bl	8019b94 <ulTaskNotifyTake>
 800d406:	4603      	mov	r3, r0
 800d408:	461a      	mov	r2, r3
 800d40a:	4b5e      	ldr	r3, [pc, #376]	; (800d584 <Start_DATA_LOGGING+0x17f8>)
 800d40c:	601a      	str	r2, [r3, #0]
			  			  if( (notification>=0))
 800d40e:	4b5d      	ldr	r3, [pc, #372]	; (800d584 <Start_DATA_LOGGING+0x17f8>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	db0e      	blt.n	800d434 <Start_DATA_LOGGING+0x16a8>
			  			  {
			  			  notification =0;
 800d416:	4b5b      	ldr	r3, [pc, #364]	; (800d584 <Start_DATA_LOGGING+0x17f8>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
			  			  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800d41c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800d420:	2364      	movs	r3, #100	; 0x64
 800d422:	22c8      	movs	r2, #200	; 0xc8
 800d424:	485b      	ldr	r0, [pc, #364]	; (800d594 <Start_DATA_LOGGING+0x1808>)
 800d426:	f008 fcb3 	bl	8015d90 <HAL_UART_Transmit>
			  			  }
		  			  }

					  break;
 800d42a:	e003      	b.n	800d434 <Start_DATA_LOGGING+0x16a8>
				  }
			  }
 800d42c:	bf00      	nop
 800d42e:	e002      	b.n	800d436 <Start_DATA_LOGGING+0x16aa>
					  break;
 800d430:	bf00      	nop
 800d432:	e000      	b.n	800d436 <Start_DATA_LOGGING+0x16aa>
					  break;
 800d434:	bf00      	nop
			  if(NUMBER_OF_SYSTEMS == DATA_SIZE_FOR_4SYS)
 800d436:	4b58      	ldr	r3, [pc, #352]	; (800d598 <Start_DATA_LOGGING+0x180c>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2bc8      	cmp	r3, #200	; 0xc8
 800d43c:	f040 82a9 	bne.w	800d992 <Start_DATA_LOGGING+0x1c06>
			  {
				  memset(DATA_FOR_SLAVE,0xFF,50);
 800d440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d444:	2232      	movs	r2, #50	; 0x32
 800d446:	21ff      	movs	r1, #255	; 0xff
 800d448:	4618      	mov	r0, r3
 800d44a:	f00d fee2 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800d44e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d452:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d456:	2202      	movs	r2, #2
 800d458:	701a      	strb	r2, [r3, #0]
				  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800d45a:	4b43      	ldr	r3, [pc, #268]	; (800d568 <Start_DATA_LOGGING+0x17dc>)
 800d45c:	781a      	ldrb	r2, [r3, #0]
 800d45e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d462:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d466:	705a      	strb	r2, [r3, #1]
				  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800d468:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d46c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d470:	22ca      	movs	r2, #202	; 0xca
 800d472:	709a      	strb	r2, [r3, #2]
				  slavemsg = osPoolAlloc(slavesendpool);
 800d474:	4b3d      	ldr	r3, [pc, #244]	; (800d56c <Start_DATA_LOGGING+0x17e0>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4618      	mov	r0, r3
 800d47a:	f00a f8fa 	bl	8017672 <osPoolAlloc>
 800d47e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
				  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800d482:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d486:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d48a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d48e:	461c      	mov	r4, r3
 800d490:	4694      	mov	ip, r2
 800d492:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800d496:	4665      	mov	r5, ip
 800d498:	4626      	mov	r6, r4
 800d49a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d49c:	6028      	str	r0, [r5, #0]
 800d49e:	6069      	str	r1, [r5, #4]
 800d4a0:	60aa      	str	r2, [r5, #8]
 800d4a2:	60eb      	str	r3, [r5, #12]
 800d4a4:	3410      	adds	r4, #16
 800d4a6:	f10c 0c10 	add.w	ip, ip, #16
 800d4aa:	4574      	cmp	r4, lr
 800d4ac:	d1f3      	bne.n	800d496 <Start_DATA_LOGGING+0x170a>
 800d4ae:	4662      	mov	r2, ip
 800d4b0:	4623      	mov	r3, r4
 800d4b2:	881b      	ldrh	r3, [r3, #0]
 800d4b4:	8013      	strh	r3, [r2, #0]
				  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800d4b6:	4b2e      	ldr	r3, [pc, #184]	; (800d570 <Start_DATA_LOGGING+0x17e4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800d4be:	2264      	movs	r2, #100	; 0x64
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f00a f9a3 	bl	801780c <osMessagePut>

				  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800d4c6:	4b2b      	ldr	r3, [pc, #172]	; (800d574 <Start_DATA_LOGGING+0x17e8>)
 800d4c8:	6819      	ldr	r1, [r3, #0]
 800d4ca:	463b      	mov	r3, r7
 800d4cc:	f641 3258 	movw	r2, #7000	; 0x1b58
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f00a f9db 	bl	801788c <osMessageGet>
 800d4d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d4da:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800d4de:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800d4e2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  if(dataofslaveevt.status == osEventMessage)
 800d4e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d4ec:	2b10      	cmp	r3, #16
 800d4ee:	d123      	bne.n	800d538 <Start_DATA_LOGGING+0x17ac>
				  {
					  dataofslavemsg = dataofslaveevt.value.p;
 800d4f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d4f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800d4f8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d4fc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d500:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d504:	4614      	mov	r4, r2
 800d506:	461e      	mov	r6, r3
 800d508:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800d50c:	4635      	mov	r5, r6
 800d50e:	4623      	mov	r3, r4
 800d510:	6818      	ldr	r0, [r3, #0]
 800d512:	6859      	ldr	r1, [r3, #4]
 800d514:	689a      	ldr	r2, [r3, #8]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d51a:	3410      	adds	r4, #16
 800d51c:	3610      	adds	r6, #16
 800d51e:	4564      	cmp	r4, ip
 800d520:	d1f4      	bne.n	800d50c <Start_DATA_LOGGING+0x1780>
 800d522:	4632      	mov	r2, r6
 800d524:	4623      	mov	r3, r4
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	8013      	strh	r3, [r2, #0]
					  osPoolFree(dataofslavepool, dataofslavemsg);
 800d52a:	4b13      	ldr	r3, [pc, #76]	; (800d578 <Start_DATA_LOGGING+0x17ec>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800d532:	4618      	mov	r0, r3
 800d534:	f00a f901 	bl	801773a <osPoolFree>
				  }

				  memset(DATA_TO_SEND,0x00,BUFFER_SIZE_ALL);
 800d538:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d53c:	22c8      	movs	r2, #200	; 0xc8
 800d53e:	2100      	movs	r1, #0
 800d540:	4618      	mov	r0, r3
 800d542:	f00d fe66 	bl	801b212 <memset>
				  DATA_TO_SEND[0] = MODEM_BIT;
 800d546:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d54a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d54e:	2201      	movs	r2, #1
 800d550:	701a      	strb	r2, [r3, #0]
				  DATA_TO_SEND[1] = MODEM_REPLY_BIT;
 800d552:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d556:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d55a:	2204      	movs	r2, #4
 800d55c:	705a      	strb	r2, [r3, #1]
	  			  for(int i=0;i<48;i++)
 800d55e:	2300      	movs	r3, #0
 800d560:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800d564:	e02c      	b.n	800d5c0 <Start_DATA_LOGGING+0x1834>
 800d566:	bf00      	nop
 800d568:	20001f54 	.word	0x20001f54
 800d56c:	200015e4 	.word	0x200015e4
 800d570:	20001e30 	.word	0x20001e30
 800d574:	20001e48 	.word	0x20001e48
 800d578:	200015dc 	.word	0x200015dc
 800d57c:	20001718 	.word	0x20001718
 800d580:	20001f5c 	.word	0x20001f5c
 800d584:	20002b40 	.word	0x20002b40
 800d588:	200015c8 	.word	0x200015c8
 800d58c:	20001e1c 	.word	0x20001e1c
 800d590:	20002b44 	.word	0x20002b44
 800d594:	20001bac 	.word	0x20001bac
 800d598:	20001e93 	.word	0x20001e93
	  			  {
	  				  DATA_TO_SEND[i+2] = DATA_RECEIVED[i];
 800d59c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800d5a0:	3302      	adds	r3, #2
 800d5a2:	49d3      	ldr	r1, [pc, #844]	; (800d8f0 <Start_DATA_LOGGING+0x1b64>)
 800d5a4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800d5a8:	440a      	add	r2, r1
 800d5aa:	7811      	ldrb	r1, [r2, #0]
 800d5ac:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d5b0:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800d5b4:	54d1      	strb	r1, [r2, r3]
	  			  for(int i=0;i<48;i++)
 800d5b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800d5c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800d5c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d5c6:	dde9      	ble.n	800d59c <Start_DATA_LOGGING+0x1810>
	  			  }
	  			  for(int i =50;i<92;i++)
 800d5c8:	2332      	movs	r3, #50	; 0x32
 800d5ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800d5ce:	e015      	b.n	800d5fc <Start_DATA_LOGGING+0x1870>
	  			  {
	  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-49];
 800d5d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d5d4:	3b31      	subs	r3, #49	; 0x31
 800d5d6:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d5da:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800d5de:	5cd1      	ldrb	r1, [r2, r3]
 800d5e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d5e4:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d5e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d5ec:	4413      	add	r3, r2
 800d5ee:	460a      	mov	r2, r1
 800d5f0:	701a      	strb	r2, [r3, #0]
	  			  for(int i =50;i<92;i++)
 800d5f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800d5fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d600:	2b5b      	cmp	r3, #91	; 0x5b
 800d602:	dde5      	ble.n	800d5d0 <Start_DATA_LOGGING+0x1844>
	  			  }
				  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800d604:	f107 031c 	add.w	r3, r7, #28
 800d608:	2232      	movs	r2, #50	; 0x32
 800d60a:	2100      	movs	r1, #0
 800d60c:	4618      	mov	r0, r3
 800d60e:	f00d fe00 	bl	801b212 <memset>
				  memset(DATA_FOR_SLAVE,0xFF,50);
 800d612:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d616:	2232      	movs	r2, #50	; 0x32
 800d618:	21ff      	movs	r1, #255	; 0xff
 800d61a:	4618      	mov	r0, r3
 800d61c:	f00d fdf9 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800d620:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d624:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d628:	2202      	movs	r2, #2
 800d62a:	701a      	strb	r2, [r3, #0]
				  DATA_FOR_SLAVE[1] = ID_S_PRESENT[1];
 800d62c:	4bb1      	ldr	r3, [pc, #708]	; (800d8f4 <Start_DATA_LOGGING+0x1b68>)
 800d62e:	785a      	ldrb	r2, [r3, #1]
 800d630:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d634:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d638:	705a      	strb	r2, [r3, #1]
				  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800d63a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d63e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d642:	22ca      	movs	r2, #202	; 0xca
 800d644:	709a      	strb	r2, [r3, #2]
				  slavemsg = osPoolAlloc(slavesendpool);
 800d646:	4bac      	ldr	r3, [pc, #688]	; (800d8f8 <Start_DATA_LOGGING+0x1b6c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f00a f811 	bl	8017672 <osPoolAlloc>
 800d650:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
				  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800d654:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d658:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d65c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d660:	461c      	mov	r4, r3
 800d662:	4694      	mov	ip, r2
 800d664:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800d668:	4665      	mov	r5, ip
 800d66a:	4626      	mov	r6, r4
 800d66c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d66e:	6028      	str	r0, [r5, #0]
 800d670:	6069      	str	r1, [r5, #4]
 800d672:	60aa      	str	r2, [r5, #8]
 800d674:	60eb      	str	r3, [r5, #12]
 800d676:	3410      	adds	r4, #16
 800d678:	f10c 0c10 	add.w	ip, ip, #16
 800d67c:	4574      	cmp	r4, lr
 800d67e:	d1f3      	bne.n	800d668 <Start_DATA_LOGGING+0x18dc>
 800d680:	4662      	mov	r2, ip
 800d682:	4623      	mov	r3, r4
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	8013      	strh	r3, [r2, #0]
				  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800d688:	4b9c      	ldr	r3, [pc, #624]	; (800d8fc <Start_DATA_LOGGING+0x1b70>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800d690:	2264      	movs	r2, #100	; 0x64
 800d692:	4618      	mov	r0, r3
 800d694:	f00a f8ba 	bl	801780c <osMessagePut>

				  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800d698:	4b99      	ldr	r3, [pc, #612]	; (800d900 <Start_DATA_LOGGING+0x1b74>)
 800d69a:	6819      	ldr	r1, [r3, #0]
 800d69c:	463b      	mov	r3, r7
 800d69e:	f641 3258 	movw	r2, #7000	; 0x1b58
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f00a f8f2 	bl	801788c <osMessageGet>
 800d6a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d6ac:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800d6b0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800d6b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  if(dataofslaveevt.status == osEventMessage)
 800d6ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d6be:	2b10      	cmp	r3, #16
 800d6c0:	d123      	bne.n	800d70a <Start_DATA_LOGGING+0x197e>
				  {
					  dataofslavemsg = dataofslaveevt.value.p;
 800d6c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d6c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800d6ca:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d6ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d6d2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d6d6:	4614      	mov	r4, r2
 800d6d8:	461e      	mov	r6, r3
 800d6da:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800d6de:	4635      	mov	r5, r6
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	6859      	ldr	r1, [r3, #4]
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6ec:	3410      	adds	r4, #16
 800d6ee:	3610      	adds	r6, #16
 800d6f0:	4564      	cmp	r4, ip
 800d6f2:	d1f4      	bne.n	800d6de <Start_DATA_LOGGING+0x1952>
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	4623      	mov	r3, r4
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	8013      	strh	r3, [r2, #0]
					  osPoolFree(dataofslavepool, dataofslavemsg);
 800d6fc:	4b81      	ldr	r3, [pc, #516]	; (800d904 <Start_DATA_LOGGING+0x1b78>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800d704:	4618      	mov	r0, r3
 800d706:	f00a f818 	bl	801773a <osPoolFree>
				  }
	  			  for(int i =92;i<134;i++)
 800d70a:	235c      	movs	r3, #92	; 0x5c
 800d70c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800d710:	e015      	b.n	800d73e <Start_DATA_LOGGING+0x19b2>
	  			  {
	  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-91];
 800d712:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d716:	3b5b      	subs	r3, #91	; 0x5b
 800d718:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d71c:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800d720:	5cd1      	ldrb	r1, [r2, r3]
 800d722:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d726:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d72a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d72e:	4413      	add	r3, r2
 800d730:	460a      	mov	r2, r1
 800d732:	701a      	strb	r2, [r3, #0]
	  			  for(int i =92;i<134;i++)
 800d734:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d738:	3301      	adds	r3, #1
 800d73a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800d73e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d742:	2b85      	cmp	r3, #133	; 0x85
 800d744:	dde5      	ble.n	800d712 <Start_DATA_LOGGING+0x1986>
	  			  }
				  memset(DATA_RECEIVED_FROM_SLAVE,0x00,50);
 800d746:	f107 031c 	add.w	r3, r7, #28
 800d74a:	2232      	movs	r2, #50	; 0x32
 800d74c:	2100      	movs	r1, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f00d fd5f 	bl	801b212 <memset>
				  memset(DATA_FOR_SLAVE,0xFF,50);
 800d754:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d758:	2232      	movs	r2, #50	; 0x32
 800d75a:	21ff      	movs	r1, #255	; 0xff
 800d75c:	4618      	mov	r0, r3
 800d75e:	f00d fd58 	bl	801b212 <memset>
				  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800d762:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d766:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d76a:	2202      	movs	r2, #2
 800d76c:	701a      	strb	r2, [r3, #0]
				  DATA_FOR_SLAVE[1] = ID_S_PRESENT[2];
 800d76e:	4b61      	ldr	r3, [pc, #388]	; (800d8f4 <Start_DATA_LOGGING+0x1b68>)
 800d770:	789a      	ldrb	r2, [r3, #2]
 800d772:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d776:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d77a:	705a      	strb	r2, [r3, #1]
				  DATA_FOR_SLAVE[2] = GIVE_DATA;
 800d77c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d780:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d784:	22ca      	movs	r2, #202	; 0xca
 800d786:	709a      	strb	r2, [r3, #2]
				  slavemsg = osPoolAlloc(slavesendpool);
 800d788:	4b5b      	ldr	r3, [pc, #364]	; (800d8f8 <Start_DATA_LOGGING+0x1b6c>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f009 ff70 	bl	8017672 <osPoolAlloc>
 800d792:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
				  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800d796:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d79a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d79e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d7a2:	461c      	mov	r4, r3
 800d7a4:	4694      	mov	ip, r2
 800d7a6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800d7aa:	4665      	mov	r5, ip
 800d7ac:	4626      	mov	r6, r4
 800d7ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d7b0:	6028      	str	r0, [r5, #0]
 800d7b2:	6069      	str	r1, [r5, #4]
 800d7b4:	60aa      	str	r2, [r5, #8]
 800d7b6:	60eb      	str	r3, [r5, #12]
 800d7b8:	3410      	adds	r4, #16
 800d7ba:	f10c 0c10 	add.w	ip, ip, #16
 800d7be:	4574      	cmp	r4, lr
 800d7c0:	d1f3      	bne.n	800d7aa <Start_DATA_LOGGING+0x1a1e>
 800d7c2:	4662      	mov	r2, ip
 800d7c4:	4623      	mov	r3, r4
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	8013      	strh	r3, [r2, #0]
				  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800d7ca:	4b4c      	ldr	r3, [pc, #304]	; (800d8fc <Start_DATA_LOGGING+0x1b70>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800d7d2:	2264      	movs	r2, #100	; 0x64
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f00a f819 	bl	801780c <osMessagePut>

				  dataofslaveevt = osMessageGet(DATA_OF_SLAVE_qHandle, 7000);
 800d7da:	4b49      	ldr	r3, [pc, #292]	; (800d900 <Start_DATA_LOGGING+0x1b74>)
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	463b      	mov	r3, r7
 800d7e0:	f641 3258 	movw	r2, #7000	; 0x1b58
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f00a f851 	bl	801788c <osMessageGet>
 800d7ea:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d7ee:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 800d7f2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800d7f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  if(dataofslaveevt.status == osEventMessage)
 800d7fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d800:	2b10      	cmp	r3, #16
 800d802:	d123      	bne.n	800d84c <Start_DATA_LOGGING+0x1ac0>
				  {
					  dataofslavemsg = dataofslaveevt.value.p;
 800d804:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d808:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					  memcpy(DATA_RECEIVED_FROM_SLAVE,dataofslavemsg->DATA_FROM_SLAVE_t,50);
 800d80c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d810:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d814:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800d818:	4614      	mov	r4, r2
 800d81a:	461e      	mov	r6, r3
 800d81c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800d820:	4635      	mov	r5, r6
 800d822:	4623      	mov	r3, r4
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	6859      	ldr	r1, [r3, #4]
 800d828:	689a      	ldr	r2, [r3, #8]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d82e:	3410      	adds	r4, #16
 800d830:	3610      	adds	r6, #16
 800d832:	4564      	cmp	r4, ip
 800d834:	d1f4      	bne.n	800d820 <Start_DATA_LOGGING+0x1a94>
 800d836:	4632      	mov	r2, r6
 800d838:	4623      	mov	r3, r4
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	8013      	strh	r3, [r2, #0]
					  osPoolFree(dataofslavepool, dataofslavemsg);
 800d83e:	4b31      	ldr	r3, [pc, #196]	; (800d904 <Start_DATA_LOGGING+0x1b78>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800d846:	4618      	mov	r0, r3
 800d848:	f009 ff77 	bl	801773a <osPoolFree>
				  }
	  			  for(int i =134;i<176;i++)
 800d84c:	2386      	movs	r3, #134	; 0x86
 800d84e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800d852:	e015      	b.n	800d880 <Start_DATA_LOGGING+0x1af4>
	  			  {
	  				  DATA_TO_SEND[i] = DATA_RECEIVED_FROM_SLAVE[i-133];
 800d854:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d858:	3b85      	subs	r3, #133	; 0x85
 800d85a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800d85e:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800d862:	5cd1      	ldrb	r1, [r2, r3]
 800d864:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d868:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d86c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d870:	4413      	add	r3, r2
 800d872:	460a      	mov	r2, r1
 800d874:	701a      	strb	r2, [r3, #0]
	  			  for(int i =134;i<176;i++)
 800d876:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d87a:	3301      	adds	r3, #1
 800d87c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800d880:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800d884:	2baf      	cmp	r3, #175	; 0xaf
 800d886:	dde5      	ble.n	800d854 <Start_DATA_LOGGING+0x1ac8>
	  			  }
				  CRC_VALUE_FOR_SENDING_DATA = HAL_CRC_Calculate(&hcrc,(uint32_t*) DATA_TO_SEND,(BUFFER_SIZE_ALL-1));
 800d888:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d88c:	22c7      	movs	r2, #199	; 0xc7
 800d88e:	4619      	mov	r1, r3
 800d890:	481d      	ldr	r0, [pc, #116]	; (800d908 <Start_DATA_LOGGING+0x1b7c>)
 800d892:	f003 fa83 	bl	8010d9c <HAL_CRC_Calculate>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
				  DATA_TO_SEND[(BUFFER_SIZE_ALL-1)] = CRC_VALUE_FOR_SENDING_DATA;
 800d89c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d8a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d8a4:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 800d8a8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
				  switch(WHOM_TO_GIVE_DATA)
 800d8ac:	4b17      	ldr	r3, [pc, #92]	; (800d90c <Start_DATA_LOGGING+0x1b80>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d002      	beq.n	800d8ba <Start_DATA_LOGGING+0x1b2e>
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d050      	beq.n	800d95a <Start_DATA_LOGGING+0x1bce>
 800d8b8:	e070      	b.n	800d99c <Start_DATA_LOGGING+0x1c10>
					  {

					  case MODEM_SYSTEM:
			  			  notification = ulTaskNotifyTake(0,5000);
 800d8ba:	f241 3188 	movw	r1, #5000	; 0x1388
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f00c f968 	bl	8019b94 <ulTaskNotifyTake>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	4b11      	ldr	r3, [pc, #68]	; (800d910 <Start_DATA_LOGGING+0x1b84>)
 800d8ca:	601a      	str	r2, [r3, #0]
			  			  if( (notification>=0))
 800d8cc:	4b10      	ldr	r3, [pc, #64]	; (800d910 <Start_DATA_LOGGING+0x1b84>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	db60      	blt.n	800d996 <Start_DATA_LOGGING+0x1c0a>
			  			  {
			  			  notification =0;
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <Start_DATA_LOGGING+0x1b84>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	601a      	str	r2, [r3, #0]
						  lorasendmsg = osPoolAlloc(lorasendpool);
 800d8da:	4b0e      	ldr	r3, [pc, #56]	; (800d914 <Start_DATA_LOGGING+0x1b88>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f009 fec7 	bl	8017672 <osPoolAlloc>
 800d8e4:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800d8ee:	e027      	b.n	800d940 <Start_DATA_LOGGING+0x1bb4>
 800d8f0:	20002b44 	.word	0x20002b44
 800d8f4:	20001f54 	.word	0x20001f54
 800d8f8:	200015e4 	.word	0x200015e4
 800d8fc:	20001e30 	.word	0x20001e30
 800d900:	20001e48 	.word	0x20001e48
 800d904:	200015dc 	.word	0x200015dc
 800d908:	20001718 	.word	0x20001718
 800d90c:	20001f5c 	.word	0x20001f5c
 800d910:	20002b40 	.word	0x20002b40
 800d914:	200015c8 	.word	0x200015c8
						  {
							  lorasendmsg->LORA_SEND_DATA[i] = DATA_TO_SEND[i];
 800d918:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800d91c:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800d920:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d924:	4413      	add	r3, r2
 800d926:	7819      	ldrb	r1, [r3, #0]
 800d928:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800d92c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d930:	4413      	add	r3, r2
 800d932:	460a      	mov	r2, r1
 800d934:	701a      	strb	r2, [r3, #0]
						  for(int i =0;i<BUFFER_SIZE_ALL;i++)
 800d936:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d93a:	3301      	adds	r3, #1
 800d93c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800d940:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d944:	2bc7      	cmp	r3, #199	; 0xc7
 800d946:	dde7      	ble.n	800d918 <Start_DATA_LOGGING+0x1b8c>
						  }
						  osMessagePut(LORA_SEND_qHandle,(uint32_t) lorasendmsg,100);
 800d948:	4b1a      	ldr	r3, [pc, #104]	; (800d9b4 <Start_DATA_LOGGING+0x1c28>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800d950:	2264      	movs	r2, #100	; 0x64
 800d952:	4618      	mov	r0, r3
 800d954:	f009 ff5a 	bl	801780c <osMessagePut>
			  			  }

						  break;
 800d958:	e01d      	b.n	800d996 <Start_DATA_LOGGING+0x1c0a>

					  case LOCAL_SYSTEM:
			  			  if(DATA_RECEIVED[0]==MY_TCU_ID)
 800d95a:	4b17      	ldr	r3, [pc, #92]	; (800d9b8 <Start_DATA_LOGGING+0x1c2c>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b04      	cmp	r3, #4
 800d960:	d11b      	bne.n	800d99a <Start_DATA_LOGGING+0x1c0e>
			  			  {
				  			  notification = ulTaskNotifyTake(0,5000);
 800d962:	f241 3188 	movw	r1, #5000	; 0x1388
 800d966:	2000      	movs	r0, #0
 800d968:	f00c f914 	bl	8019b94 <ulTaskNotifyTake>
 800d96c:	4603      	mov	r3, r0
 800d96e:	461a      	mov	r2, r3
 800d970:	4b12      	ldr	r3, [pc, #72]	; (800d9bc <Start_DATA_LOGGING+0x1c30>)
 800d972:	601a      	str	r2, [r3, #0]
				  			  if( (notification>=0))
 800d974:	4b11      	ldr	r3, [pc, #68]	; (800d9bc <Start_DATA_LOGGING+0x1c30>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	db0e      	blt.n	800d99a <Start_DATA_LOGGING+0x1c0e>
				  			  {
				  			  notification =0;
 800d97c:	4b0f      	ldr	r3, [pc, #60]	; (800d9bc <Start_DATA_LOGGING+0x1c30>)
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
			  			  HAL_UART_Transmit(&huart6, DATA_TO_SEND, 200, 100);
 800d982:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800d986:	2364      	movs	r3, #100	; 0x64
 800d988:	22c8      	movs	r2, #200	; 0xc8
 800d98a:	480d      	ldr	r0, [pc, #52]	; (800d9c0 <Start_DATA_LOGGING+0x1c34>)
 800d98c:	f008 fa00 	bl	8015d90 <HAL_UART_Transmit>
				  			  }
			  			  }

						  break;
 800d990:	e003      	b.n	800d99a <Start_DATA_LOGGING+0x1c0e>
					  }
			  }
 800d992:	bf00      	nop
 800d994:	e002      	b.n	800d99c <Start_DATA_LOGGING+0x1c10>
						  break;
 800d996:	bf00      	nop
 800d998:	e000      	b.n	800d99c <Start_DATA_LOGGING+0x1c10>
						  break;
 800d99a:	bf00      	nop
			  state =0;
 800d99c:	4b09      	ldr	r3, [pc, #36]	; (800d9c4 <Start_DATA_LOGGING+0x1c38>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	601a      	str	r2, [r3, #0]
//		  if(I_AM == I_AM_SLAVE)
//		  {
//			  state =0;
//		  }
	  }
		  state =0;
 800d9a2:	4b08      	ldr	r3, [pc, #32]	; (800d9c4 <Start_DATA_LOGGING+0x1c38>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	601a      	str	r2, [r3, #0]

	  break;
 800d9a8:	bf00      	nop
	  }
    osDelay(125);
 800d9aa:	207d      	movs	r0, #125	; 0x7d
 800d9ac:	f009 fd3b 	bl	8017426 <osDelay>
	  switch(state)
 800d9b0:	f7fe b9f5 	b.w	800bd9e <Start_DATA_LOGGING+0x12>
 800d9b4:	20001e1c 	.word	0x20001e1c
 800d9b8:	20002b44 	.word	0x20002b44
 800d9bc:	20002b40 	.word	0x20002b40
 800d9c0:	20001bac 	.word	0x20001bac
 800d9c4:	20002b3c 	.word	0x20002b3c

0800d9c8 <Start_CURRENT_PROCESS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CURRENT_PROCESS */
void Start_CURRENT_PROCESS(void const * argument)
{
 800d9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ca:	f5ad 4dcc 	sub.w	sp, sp, #26112	; 0x6600
 800d9ce:	b081      	sub	sp, #4
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800d9d6:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 800d9da:	6018      	str	r0, [r3, #0]

	static uint8_t CHANNEL_DATA[32]={0};
	uint8_t TEMP_DATA[40];
	uint16_t ADC_READING[16];
	float	ADC_RAEDING_VOLTS[16];
	int j =0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f246 52fc 	movw	r2, #26108	; 0x65fc
 800d9e2:	443a      	add	r2, r7
 800d9e4:	6013      	str	r3, [r2, #0]
	float CURRENT[16];
	uint8_t CURRENT_8BIT[32];
	float HS_TABLE_CURRENT[200][16];
	float FINAL_CURRENT[16] = {0};
 800d9e6:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800d9ea:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	2340      	movs	r3, #64	; 0x40
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	f00d fc0c 	bl	801b212 <memset>
	DATA_PROCESS *datap_msg;
	uint8_t CLOSE_CURRENT_VALUES[50];
	DUTY_Q	*dutymsg;
	osEvent dutyevt,evtcurr;
	static float OP_DUTY[16];
	float AVG_buffer_curr[200][16]={0};
 800d9fa:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800d9fe:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800da02:	4618      	mov	r0, r3
 800da04:	f44f 5348 	mov.w	r3, #12800	; 0x3200
 800da08:	461a      	mov	r2, r3
 800da0a:	2100      	movs	r1, #0
 800da0c:	f00d fc01 	bl	801b212 <memset>
	static int m =0;
	float AVG_CURRENT[16] = {0};
 800da10:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800da14:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 800da18:	4618      	mov	r0, r3
 800da1a:	2340      	movs	r3, #64	; 0x40
 800da1c:	461a      	mov	r2, r3
 800da1e:	2100      	movs	r1, #0
 800da20:	f00d fbf7 	bl	801b212 <memset>


  /* Infinite loop */
  for(;;)
  {
	  dutyevt = osMessageGet(DUTY_Q_qHandle, 0);
 800da24:	4b84      	ldr	r3, [pc, #528]	; (800dc38 <Start_CURRENT_PROCESS+0x270>)
 800da26:	6819      	ldr	r1, [r3, #0]
 800da28:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800da2c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800da30:	2200      	movs	r2, #0
 800da32:	4618      	mov	r0, r3
 800da34:	f009 ff2a 	bl	801788c <osMessageGet>
	  if(dutyevt.status == osEventMessage)
 800da38:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800da3c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b10      	cmp	r3, #16
 800da44:	d141      	bne.n	800daca <Start_CURRENT_PROCESS+0x102>
	  {
		  dutymsg = dutyevt.value.p;
 800da46:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800da4a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	f246 52cc 	movw	r2, #26060	; 0x65cc
 800da54:	443a      	add	r2, r7
 800da56:	6013      	str	r3, [r2, #0]
		  for(int i =0;i<16;i++)
 800da58:	2300      	movs	r3, #0
 800da5a:	f246 52f8 	movw	r2, #26104	; 0x65f8
 800da5e:	443a      	add	r2, r7
 800da60:	6013      	str	r3, [r2, #0]
 800da62:	e023      	b.n	800daac <Start_CURRENT_PROCESS+0xe4>
		  {
			  OP_DUTY[i] = (((float)(dutymsg->DUTY_t[i]))/(float)10000);
 800da64:	f246 53cc 	movw	r3, #26060	; 0x65cc
 800da68:	443b      	add	r3, r7
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f246 52f8 	movw	r2, #26104	; 0x65f8
 800da70:	443a      	add	r2, r7
 800da72:	6812      	ldr	r2, [r2, #0]
 800da74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800da78:	ee07 3a90 	vmov	s15, r3
 800da7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da80:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dc3c <Start_CURRENT_PROCESS+0x274>
 800da84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da88:	4a6d      	ldr	r2, [pc, #436]	; (800dc40 <Start_CURRENT_PROCESS+0x278>)
 800da8a:	f246 53f8 	movw	r3, #26104	; 0x65f8
 800da8e:	443b      	add	r3, r7
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	edc3 7a00 	vstr	s15, [r3]
		  for(int i =0;i<16;i++)
 800da9a:	f246 53f8 	movw	r3, #26104	; 0x65f8
 800da9e:	443b      	add	r3, r7
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3301      	adds	r3, #1
 800daa4:	f246 52f8 	movw	r2, #26104	; 0x65f8
 800daa8:	443a      	add	r2, r7
 800daaa:	6013      	str	r3, [r2, #0]
 800daac:	f246 53f8 	movw	r3, #26104	; 0x65f8
 800dab0:	443b      	add	r3, r7
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b0f      	cmp	r3, #15
 800dab6:	ddd5      	ble.n	800da64 <Start_CURRENT_PROCESS+0x9c>
		  }
		  osPoolFree(dutypool, dutymsg);
 800dab8:	4b62      	ldr	r3, [pc, #392]	; (800dc44 <Start_CURRENT_PROCESS+0x27c>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f246 52cc 	movw	r2, #26060	; 0x65cc
 800dac0:	443a      	add	r2, r7
 800dac2:	6811      	ldr	r1, [r2, #0]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f009 fe38 	bl	801773a <osPoolFree>
	  }
	  evtcurr = osMessageGet(CURRENT_P_qHandle, 0);
 800daca:	4b5f      	ldr	r3, [pc, #380]	; (800dc48 <Start_CURRENT_PROCESS+0x280>)
 800dacc:	6819      	ldr	r1, [r3, #0]
 800dace:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800dad2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800dad6:	2200      	movs	r2, #0
 800dad8:	4618      	mov	r0, r3
 800dada:	f009 fed7 	bl	801788c <osMessageGet>
	  if(evtcurr.status == osEventMessage)
 800dade:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800dae2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b10      	cmp	r3, #16
 800daea:	f040 8411 	bne.w	800e310 <Start_CURRENT_PROCESS+0x948>
	  {
		  msgcurr = evtcurr.value.p;
 800daee:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800daf2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f246 52c8 	movw	r2, #26056	; 0x65c8
 800dafc:	443a      	add	r2, r7
 800dafe:	6013      	str	r3, [r2, #0]
		  for(int i =0;i<40;i++)
 800db00:	2300      	movs	r3, #0
 800db02:	f246 52f4 	movw	r2, #26100	; 0x65f4
 800db06:	443a      	add	r2, r7
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	e01d      	b.n	800db48 <Start_CURRENT_PROCESS+0x180>
	  {
			  TEMP_DATA[i]  = msgcurr->CURRENT_P_DATA[i];
 800db0c:	f246 53c8 	movw	r3, #26056	; 0x65c8
 800db10:	443b      	add	r3, r7
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f246 52f4 	movw	r2, #26100	; 0x65f4
 800db18:	443a      	add	r2, r7
 800db1a:	6812      	ldr	r2, [r2, #0]
 800db1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db20:	b2d9      	uxtb	r1, r3
 800db22:	f246 5294 	movw	r2, #26004	; 0x6594
 800db26:	443a      	add	r2, r7
 800db28:	f246 53f4 	movw	r3, #26100	; 0x65f4
 800db2c:	443b      	add	r3, r7
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4413      	add	r3, r2
 800db32:	460a      	mov	r2, r1
 800db34:	701a      	strb	r2, [r3, #0]
		  for(int i =0;i<40;i++)
 800db36:	f246 53f4 	movw	r3, #26100	; 0x65f4
 800db3a:	443b      	add	r3, r7
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	3301      	adds	r3, #1
 800db40:	f246 52f4 	movw	r2, #26100	; 0x65f4
 800db44:	443a      	add	r2, r7
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	f246 53f4 	movw	r3, #26100	; 0x65f4
 800db4c:	443b      	add	r3, r7
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b27      	cmp	r3, #39	; 0x27
 800db52:	dddb      	ble.n	800db0c <Start_CURRENT_PROCESS+0x144>
	  }
		  osPoolFree(currppool, msgcurr);
 800db54:	4b3d      	ldr	r3, [pc, #244]	; (800dc4c <Start_CURRENT_PROCESS+0x284>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f246 52c8 	movw	r2, #26056	; 0x65c8
 800db5c:	443a      	add	r2, r7
 800db5e:	6811      	ldr	r1, [r2, #0]
 800db60:	4618      	mov	r0, r3
 800db62:	f009 fdea 	bl	801773a <osPoolFree>
		  if(TEMP_DATA[0] == ADC_12_CH_DATA)
 800db66:	f246 5394 	movw	r3, #26004	; 0x6594
 800db6a:	443b      	add	r3, r7
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2bc0      	cmp	r3, #192	; 0xc0
 800db70:	d126      	bne.n	800dbc0 <Start_CURRENT_PROCESS+0x1f8>
		  {
			  for(int i =0;i<26;i++)
 800db72:	2300      	movs	r3, #0
 800db74:	f246 52f0 	movw	r2, #26096	; 0x65f0
 800db78:	443a      	add	r2, r7
 800db7a:	6013      	str	r3, [r2, #0]
 800db7c:	e01a      	b.n	800dbb4 <Start_CURRENT_PROCESS+0x1ec>
			  {
				  CHANNEL_DATA[i] = TEMP_DATA[i+4];
 800db7e:	f246 53f0 	movw	r3, #26096	; 0x65f0
 800db82:	443b      	add	r3, r7
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3304      	adds	r3, #4
 800db88:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800db8c:	443b      	add	r3, r7
 800db8e:	f813 1c6c 	ldrb.w	r1, [r3, #-108]
 800db92:	4a2f      	ldr	r2, [pc, #188]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800db94:	f246 53f0 	movw	r3, #26096	; 0x65f0
 800db98:	443b      	add	r3, r7
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4413      	add	r3, r2
 800db9e:	460a      	mov	r2, r1
 800dba0:	701a      	strb	r2, [r3, #0]
			  for(int i =0;i<26;i++)
 800dba2:	f246 53f0 	movw	r3, #26096	; 0x65f0
 800dba6:	443b      	add	r3, r7
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	f246 52f0 	movw	r2, #26096	; 0x65f0
 800dbb0:	443a      	add	r2, r7
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	f246 53f0 	movw	r3, #26096	; 0x65f0
 800dbb8:	443b      	add	r3, r7
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b19      	cmp	r3, #25
 800dbbe:	ddde      	ble.n	800db7e <Start_CURRENT_PROCESS+0x1b6>
			  }
		  }
		  if(TEMP_DATA[36] == ADC_13_CH_DATA)
 800dbc0:	f246 53b8 	movw	r3, #26040	; 0x65b8
 800dbc4:	443b      	add	r3, r7
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2bd0      	cmp	r3, #208	; 0xd0
 800dbca:	d10b      	bne.n	800dbe4 <Start_CURRENT_PROCESS+0x21c>
		  {
			  CHANNEL_DATA[26]=TEMP_DATA[30];
 800dbcc:	f246 53b2 	movw	r3, #26034	; 0x65b2
 800dbd0:	443b      	add	r3, r7
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	4b1e      	ldr	r3, [pc, #120]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800dbd6:	769a      	strb	r2, [r3, #26]
			  CHANNEL_DATA[27] = TEMP_DATA[31];
 800dbd8:	f246 53b3 	movw	r3, #26035	; 0x65b3
 800dbdc:	443b      	add	r3, r7
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	4b1b      	ldr	r3, [pc, #108]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800dbe2:	76da      	strb	r2, [r3, #27]
		  }
		  if(TEMP_DATA[37] == ADC_14_CH_DATA)
 800dbe4:	f246 53b9 	movw	r3, #26041	; 0x65b9
 800dbe8:	443b      	add	r3, r7
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2be0      	cmp	r3, #224	; 0xe0
 800dbee:	d10b      	bne.n	800dc08 <Start_CURRENT_PROCESS+0x240>
		  {
			  CHANNEL_DATA[28]=TEMP_DATA[32];
 800dbf0:	f246 53b4 	movw	r3, #26036	; 0x65b4
 800dbf4:	443b      	add	r3, r7
 800dbf6:	781a      	ldrb	r2, [r3, #0]
 800dbf8:	4b15      	ldr	r3, [pc, #84]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800dbfa:	771a      	strb	r2, [r3, #28]
			  CHANNEL_DATA[29] = TEMP_DATA[33];
 800dbfc:	f246 53b5 	movw	r3, #26037	; 0x65b5
 800dc00:	443b      	add	r3, r7
 800dc02:	781a      	ldrb	r2, [r3, #0]
 800dc04:	4b12      	ldr	r3, [pc, #72]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800dc06:	775a      	strb	r2, [r3, #29]
		  }
		  if(TEMP_DATA[38] == ADC_15_CH_DATA)
 800dc08:	f246 53ba 	movw	r3, #26042	; 0x65ba
 800dc0c:	443b      	add	r3, r7
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2bf0      	cmp	r3, #240	; 0xf0
 800dc12:	d10b      	bne.n	800dc2c <Start_CURRENT_PROCESS+0x264>
		  {
			  CHANNEL_DATA[30]=TEMP_DATA[34];
 800dc14:	f246 53b6 	movw	r3, #26038	; 0x65b6
 800dc18:	443b      	add	r3, r7
 800dc1a:	781a      	ldrb	r2, [r3, #0]
 800dc1c:	4b0c      	ldr	r3, [pc, #48]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800dc1e:	779a      	strb	r2, [r3, #30]
			  CHANNEL_DATA[31] = TEMP_DATA[35];
 800dc20:	f246 53b7 	movw	r3, #26039	; 0x65b7
 800dc24:	443b      	add	r3, r7
 800dc26:	781a      	ldrb	r2, [r3, #0]
 800dc28:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <Start_CURRENT_PROCESS+0x288>)
 800dc2a:	77da      	strb	r2, [r3, #31]
		  }


			for(int i =0;i<16;i++)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f246 52ec 	movw	r2, #26092	; 0x65ec
 800dc32:	443a      	add	r2, r7
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	e089      	b.n	800dd4c <Start_CURRENT_PROCESS+0x384>
 800dc38:	20001e60 	.word	0x20001e60
 800dc3c:	461c4000 	.word	0x461c4000
 800dc40:	20002b78 	.word	0x20002b78
 800dc44:	20001634 	.word	0x20001634
 800dc48:	20001e64 	.word	0x20001e64
 800dc4c:	2000162c 	.word	0x2000162c
 800dc50:	20002bb8 	.word	0x20002bb8
			{
			ADC_READING[i] = ((((((uint16_t)CHANNEL_DATA[j])<<8)&0xFF00)|((((uint16_t)CHANNEL_DATA[j+1]))&0x00FF))&0x0FFF);
 800dc54:	4ab2      	ldr	r2, [pc, #712]	; (800df20 <Start_CURRENT_PROCESS+0x558>)
 800dc56:	f246 53fc 	movw	r3, #26108	; 0x65fc
 800dc5a:	443b      	add	r3, r7
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4413      	add	r3, r2
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	021b      	lsls	r3, r3, #8
 800dc64:	b21a      	sxth	r2, r3
 800dc66:	f246 53fc 	movw	r3, #26108	; 0x65fc
 800dc6a:	443b      	add	r3, r7
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	49ab      	ldr	r1, [pc, #684]	; (800df20 <Start_CURRENT_PROCESS+0x558>)
 800dc72:	5ccb      	ldrb	r3, [r1, r3]
 800dc74:	b21b      	sxth	r3, r3
 800dc76:	4313      	orrs	r3, r2
 800dc78:	b21b      	sxth	r3, r3
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dc86:	443b      	add	r3, r7
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800dc90:	443b      	add	r3, r7
 800dc92:	f823 2c8c 	strh.w	r2, [r3, #-140]
			j=j+2;
 800dc96:	f246 53fc 	movw	r3, #26108	; 0x65fc
 800dc9a:	443b      	add	r3, r7
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3302      	adds	r3, #2
 800dca0:	f246 52fc 	movw	r2, #26108	; 0x65fc
 800dca4:	443a      	add	r2, r7
 800dca6:	6013      	str	r3, [r2, #0]
			ADC_RAEDING_VOLTS[i] = ((ADC_READING[i]*3.3)/4096)-(OFFSET/100);
 800dca8:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dcac:	443b      	add	r3, r7
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800dcb6:	443b      	add	r3, r7
 800dcb8:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 800dcbc:	ee07 3a90 	vmov	s15, r3
 800dcc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dcc4:	ed9f 6b92 	vldr	d6, [pc, #584]	; 800df10 <Start_CURRENT_PROCESS+0x548>
 800dcc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dccc:	ed9f 5b92 	vldr	d5, [pc, #584]	; 800df18 <Start_CURRENT_PROCESS+0x550>
 800dcd0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800dcd4:	4b93      	ldr	r3, [pc, #588]	; (800df24 <Start_CURRENT_PROCESS+0x55c>)
 800dcd6:	ed93 7a00 	vldr	s14, [r3]
 800dcda:	eddf 5a93 	vldr	s11, [pc, #588]	; 800df28 <Start_CURRENT_PROCESS+0x560>
 800dcde:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800dce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dce6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dcea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dcee:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dcf2:	443b      	add	r3, r7
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800dcfc:	443b      	add	r3, r7
 800dcfe:	3bcc      	subs	r3, #204	; 0xcc
 800dd00:	edc3 7a00 	vstr	s15, [r3]

			CURRENT[i] = ((ADC_RAEDING_VOLTS[i])/(float)0.05);
 800dd04:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dd08:	443b      	add	r3, r7
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800dd12:	443b      	add	r3, r7
 800dd14:	3bcc      	subs	r3, #204	; 0xcc
 800dd16:	ed93 7a00 	vldr	s14, [r3]
 800dd1a:	eddf 6a84 	vldr	s13, [pc, #528]	; 800df2c <Start_CURRENT_PROCESS+0x564>
 800dd1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dd22:	f507 43cc 	add.w	r3, r7, #26112	; 0x6600
 800dd26:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800dd2a:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dd2e:	443b      	add	r3, r7
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	edc3 7a00 	vstr	s15, [r3]
			for(int i =0;i<16;i++)
 800dd3a:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dd3e:	443b      	add	r3, r7
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	3301      	adds	r3, #1
 800dd44:	f246 52ec 	movw	r2, #26092	; 0x65ec
 800dd48:	443a      	add	r2, r7
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	f246 53ec 	movw	r3, #26092	; 0x65ec
 800dd50:	443b      	add	r3, r7
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b0f      	cmp	r3, #15
 800dd56:	f77f af7d 	ble.w	800dc54 <Start_CURRENT_PROCESS+0x28c>

			}
			memset(CHANNEL_DATA,0,sizeof(CHANNEL_DATA));
 800dd5a:	2220      	movs	r2, #32
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	4870      	ldr	r0, [pc, #448]	; (800df20 <Start_CURRENT_PROCESS+0x558>)
 800dd60:	f00d fa57 	bl	801b212 <memset>

			j=0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	f246 52fc 	movw	r2, #26108	; 0x65fc
 800dd6a:	443a      	add	r2, r7
 800dd6c:	6013      	str	r3, [r2, #0]


			for(int n =0;n<16;n++)
 800dd6e:	2300      	movs	r3, #0
 800dd70:	f246 52e8 	movw	r2, #26088	; 0x65e8
 800dd74:	443a      	add	r2, r7
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	e03d      	b.n	800ddf6 <Start_CURRENT_PROCESS+0x42e>
			{
				if((ADC_READING[n]>330)&&(ADC_READING[n]<2330))
 800dd7a:	f246 53e8 	movw	r3, #26088	; 0x65e8
 800dd7e:	443b      	add	r3, r7
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800dd88:	443b      	add	r3, r7
 800dd8a:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 800dd8e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800dd92:	d927      	bls.n	800dde4 <Start_CURRENT_PROCESS+0x41c>
 800dd94:	f246 53e8 	movw	r3, #26088	; 0x65e8
 800dd98:	443b      	add	r3, r7
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800dda2:	443b      	add	r3, r7
 800dda4:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 800dda8:	f640 1219 	movw	r2, #2329	; 0x919
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d819      	bhi.n	800dde4 <Start_CURRENT_PROCESS+0x41c>
				{
			      AVG_buffer_curr[m][n] = CURRENT[n];
 800ddb0:	4b5f      	ldr	r3, [pc, #380]	; (800df30 <Start_CURRENT_PROCESS+0x568>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f507 42cc 	add.w	r2, r7, #26112	; 0x6600
 800ddb8:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 800ddbc:	f246 52e8 	movw	r2, #26088	; 0x65e8
 800ddc0:	443a      	add	r2, r7
 800ddc2:	6812      	ldr	r2, [r2, #0]
 800ddc4:	0092      	lsls	r2, r2, #2
 800ddc6:	440a      	add	r2, r1
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 800ddce:	f5a1 61b7 	sub.w	r1, r1, #1464	; 0x5b8
 800ddd2:	0118      	lsls	r0, r3, #4
 800ddd4:	f246 53e8 	movw	r3, #26088	; 0x65e8
 800ddd8:	443b      	add	r3, r7
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4403      	add	r3, r0
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	440b      	add	r3, r1
 800dde2:	601a      	str	r2, [r3, #0]
			for(int n =0;n<16;n++)
 800dde4:	f246 53e8 	movw	r3, #26088	; 0x65e8
 800dde8:	443b      	add	r3, r7
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3301      	adds	r3, #1
 800ddee:	f246 52e8 	movw	r2, #26088	; 0x65e8
 800ddf2:	443a      	add	r2, r7
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	f246 53e8 	movw	r3, #26088	; 0x65e8
 800ddfa:	443b      	add	r3, r7
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b0f      	cmp	r3, #15
 800de00:	ddbb      	ble.n	800dd7a <Start_CURRENT_PROCESS+0x3b2>
				}
			}
			m++;
 800de02:	4b4b      	ldr	r3, [pc, #300]	; (800df30 <Start_CURRENT_PROCESS+0x568>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3301      	adds	r3, #1
 800de08:	4a49      	ldr	r2, [pc, #292]	; (800df30 <Start_CURRENT_PROCESS+0x568>)
 800de0a:	6013      	str	r3, [r2, #0]
			  if(m>=200)
 800de0c:	4b48      	ldr	r3, [pc, #288]	; (800df30 <Start_CURRENT_PROCESS+0x568>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2bc7      	cmp	r3, #199	; 0xc7
 800de12:	dd02      	ble.n	800de1a <Start_CURRENT_PROCESS+0x452>
			  {
				  m=0;
 800de14:	4b46      	ldr	r3, [pc, #280]	; (800df30 <Start_CURRENT_PROCESS+0x568>)
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
			  }

			for(int p =0;p<16;p++)
 800de1a:	2300      	movs	r3, #0
 800de1c:	f246 52e4 	movw	r2, #26084	; 0x65e4
 800de20:	443a      	add	r2, r7
 800de22:	6013      	str	r3, [r2, #0]
 800de24:	e065      	b.n	800def2 <Start_CURRENT_PROCESS+0x52a>
			{
				for(int q =0;q<200;q++)
 800de26:	2300      	movs	r3, #0
 800de28:	f246 52e0 	movw	r2, #26080	; 0x65e0
 800de2c:	443a      	add	r2, r7
 800de2e:	6013      	str	r3, [r2, #0]
 800de30:	e034      	b.n	800de9c <Start_CURRENT_PROCESS+0x4d4>
				{
					AVG_CURRENT[p] = AVG_CURRENT[p] + AVG_buffer_curr[q][p];
 800de32:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800de36:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800de3a:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800de3e:	443b      	add	r3, r7
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	ed93 7a00 	vldr	s14, [r3]
 800de4a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800de4e:	f5a3 62b7 	sub.w	r2, r3, #1464	; 0x5b8
 800de52:	f246 53e0 	movw	r3, #26080	; 0x65e0
 800de56:	443b      	add	r3, r7
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	0119      	lsls	r1, r3, #4
 800de5c:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800de60:	443b      	add	r3, r7
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	440b      	add	r3, r1
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	edd3 7a00 	vldr	s15, [r3]
 800de6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de72:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800de76:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800de7a:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800de7e:	443b      	add	r3, r7
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	edc3 7a00 	vstr	s15, [r3]
				for(int q =0;q<200;q++)
 800de8a:	f246 53e0 	movw	r3, #26080	; 0x65e0
 800de8e:	443b      	add	r3, r7
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	f246 52e0 	movw	r2, #26080	; 0x65e0
 800de98:	443a      	add	r2, r7
 800de9a:	6013      	str	r3, [r2, #0]
 800de9c:	f246 53e0 	movw	r3, #26080	; 0x65e0
 800dea0:	443b      	add	r3, r7
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2bc7      	cmp	r3, #199	; 0xc7
 800dea6:	ddc4      	ble.n	800de32 <Start_CURRENT_PROCESS+0x46a>
				}
				AVG_CURRENT[p] = AVG_CURRENT[p]/20;
 800dea8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800deac:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800deb0:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800deb4:	443b      	add	r3, r7
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	ed93 7a00 	vldr	s14, [r3]
 800dec0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800dec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dec8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800decc:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800ded0:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800ded4:	443b      	add	r3, r7
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	edc3 7a00 	vstr	s15, [r3]
			for(int p =0;p<16;p++)
 800dee0:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800dee4:	443b      	add	r3, r7
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	f246 52e4 	movw	r2, #26084	; 0x65e4
 800deee:	443a      	add	r2, r7
 800def0:	6013      	str	r3, [r2, #0]
 800def2:	f246 53e4 	movw	r3, #26084	; 0x65e4
 800def6:	443b      	add	r3, r7
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b0f      	cmp	r3, #15
 800defc:	dd93      	ble.n	800de26 <Start_CURRENT_PROCESS+0x45e>
			}


			  k=0;
 800defe:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <Start_CURRENT_PROCESS+0x56c>)
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
						  for(int i =0;i<16;i++)
 800df04:	2300      	movs	r3, #0
 800df06:	f246 52dc 	movw	r2, #26076	; 0x65dc
 800df0a:	443a      	add	r2, r7
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	e05a      	b.n	800dfc6 <Start_CURRENT_PROCESS+0x5fe>
 800df10:	66666666 	.word	0x66666666
 800df14:	400a6666 	.word	0x400a6666
 800df18:	00000000 	.word	0x00000000
 800df1c:	40b00000 	.word	0x40b00000
 800df20:	20002bb8 	.word	0x20002bb8
 800df24:	20000048 	.word	0x20000048
 800df28:	42c80000 	.word	0x42c80000
 800df2c:	3d4ccccd 	.word	0x3d4ccccd
 800df30:	20002bd8 	.word	0x20002bd8
 800df34:	20002bdc 	.word	0x20002bdc
						  {
							  CURRENT_8BIT[k] = ((((int)AVG_CURRENT[i]) >>8)&0x00FF);
 800df38:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800df3c:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800df40:	f246 53dc 	movw	r3, #26076	; 0x65dc
 800df44:	443b      	add	r3, r7
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	edd3 7a00 	vldr	s15, [r3]
 800df50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df54:	ee17 3a90 	vmov	r3, s15
 800df58:	121a      	asrs	r2, r3, #8
 800df5a:	4ba6      	ldr	r3, [pc, #664]	; (800e1f4 <Start_CURRENT_PROCESS+0x82c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	b2d1      	uxtb	r1, r2
 800df60:	f507 42cc 	add.w	r2, r7, #26112	; 0x6600
 800df64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800df68:	54d1      	strb	r1, [r2, r3]
							  CURRENT_8BIT[k+1] = ((int)AVG_CURRENT[i])&0x00FF;
 800df6a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800df6e:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800df72:	f246 53dc 	movw	r3, #26076	; 0x65dc
 800df76:	443b      	add	r3, r7
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	edd3 7a00 	vldr	s15, [r3]
 800df82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df86:	edc7 7a00 	vstr	s15, [r7]
 800df8a:	4b9a      	ldr	r3, [pc, #616]	; (800e1f4 <Start_CURRENT_PROCESS+0x82c>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3301      	adds	r3, #1
 800df90:	7839      	ldrb	r1, [r7, #0]
 800df92:	f507 42cc 	add.w	r2, r7, #26112	; 0x6600
 800df96:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800df9a:	54d1      	strb	r1, [r2, r3]
							  k=k+2;
 800df9c:	4b95      	ldr	r3, [pc, #596]	; (800e1f4 <Start_CURRENT_PROCESS+0x82c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3302      	adds	r3, #2
 800dfa2:	4a94      	ldr	r2, [pc, #592]	; (800e1f4 <Start_CURRENT_PROCESS+0x82c>)
 800dfa4:	6013      	str	r3, [r2, #0]
							  if(k==32)
 800dfa6:	4b93      	ldr	r3, [pc, #588]	; (800e1f4 <Start_CURRENT_PROCESS+0x82c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	d102      	bne.n	800dfb4 <Start_CURRENT_PROCESS+0x5ec>
							  {
								  k=0;
 800dfae:	4b91      	ldr	r3, [pc, #580]	; (800e1f4 <Start_CURRENT_PROCESS+0x82c>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	601a      	str	r2, [r3, #0]
						  for(int i =0;i<16;i++)
 800dfb4:	f246 53dc 	movw	r3, #26076	; 0x65dc
 800dfb8:	443b      	add	r3, r7
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	f246 52dc 	movw	r2, #26076	; 0x65dc
 800dfc2:	443a      	add	r2, r7
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	f246 53dc 	movw	r3, #26076	; 0x65dc
 800dfca:	443b      	add	r3, r7
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b0f      	cmp	r3, #15
 800dfd0:	ddb2      	ble.n	800df38 <Start_CURRENT_PROCESS+0x570>
							  }
						  }

						if(LOOP_RUNNING == CLOSE_LOOP)
 800dfd2:	4b89      	ldr	r3, [pc, #548]	; (800e1f8 <Start_CURRENT_PROCESS+0x830>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	f040 8093 	bne.w	800e102 <Start_CURRENT_PROCESS+0x73a>
						{
							clcurrmsg = osMailAlloc(closecurrmail, 100);
 800dfdc:	4b87      	ldr	r3, [pc, #540]	; (800e1fc <Start_CURRENT_PROCESS+0x834>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2164      	movs	r1, #100	; 0x64
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f009 fd1e 	bl	8017a24 <osMailAlloc>
 800dfe8:	f246 53c4 	movw	r3, #26052	; 0x65c4
 800dfec:	443b      	add	r3, r7
 800dfee:	6018      	str	r0, [r3, #0]
							wificurrmsg = osMailAlloc(wificurrmail,100);
 800dff0:	4b83      	ldr	r3, [pc, #524]	; (800e200 <Start_CURRENT_PROCESS+0x838>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2164      	movs	r1, #100	; 0x64
 800dff6:	4618      	mov	r0, r3
 800dff8:	f009 fd14 	bl	8017a24 <osMailAlloc>
 800dffc:	f246 53c0 	movw	r3, #26048	; 0x65c0
 800e000:	443b      	add	r3, r7
 800e002:	6018      	str	r0, [r3, #0]
							CLOSE_CURRENT_VALUES[0] = MY_TCU_ID;
 800e004:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800e008:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e00c:	2204      	movs	r2, #4
 800e00e:	701a      	strb	r2, [r3, #0]
							CLOSE_CURRENT_VALUES[1] = DATA_TYPE_CURRENT;
 800e010:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800e014:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e018:	220c      	movs	r2, #12
 800e01a:	705a      	strb	r2, [r3, #1]
							for(int i =0;i<32;i++)
 800e01c:	2300      	movs	r3, #0
 800e01e:	f246 52d8 	movw	r2, #26072	; 0x65d8
 800e022:	443a      	add	r2, r7
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	e01c      	b.n	800e062 <Start_CURRENT_PROCESS+0x69a>
							{
								CLOSE_CURRENT_VALUES[i+2] = CURRENT_8BIT[i];
 800e028:	f246 53d8 	movw	r3, #26072	; 0x65d8
 800e02c:	443b      	add	r3, r7
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	3302      	adds	r3, #2
 800e032:	f507 42cc 	add.w	r2, r7, #26112	; 0x6600
 800e036:	f5a2 7196 	sub.w	r1, r2, #300	; 0x12c
 800e03a:	f246 52d8 	movw	r2, #26072	; 0x65d8
 800e03e:	443a      	add	r2, r7
 800e040:	6812      	ldr	r2, [r2, #0]
 800e042:	440a      	add	r2, r1
 800e044:	7811      	ldrb	r1, [r2, #0]
 800e046:	f507 5258 	add.w	r2, r7, #13824	; 0x3600
 800e04a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800e04e:	54d1      	strb	r1, [r2, r3]
							for(int i =0;i<32;i++)
 800e050:	f246 53d8 	movw	r3, #26072	; 0x65d8
 800e054:	443b      	add	r3, r7
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3301      	adds	r3, #1
 800e05a:	f246 52d8 	movw	r2, #26072	; 0x65d8
 800e05e:	443a      	add	r2, r7
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	f246 53d8 	movw	r3, #26072	; 0x65d8
 800e066:	443b      	add	r3, r7
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b1f      	cmp	r3, #31
 800e06c:	dddc      	ble.n	800e028 <Start_CURRENT_PROCESS+0x660>
							}
							memcpy(clcurrmsg->CLOSE_CURRENT_DATA,CLOSE_CURRENT_VALUES,50);
 800e06e:	f246 53c4 	movw	r3, #26052	; 0x65c4
 800e072:	443b      	add	r3, r7
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f507 5258 	add.w	r2, r7, #13824	; 0x3600
 800e07a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800e07e:	4614      	mov	r4, r2
 800e080:	469c      	mov	ip, r3
 800e082:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800e086:	4665      	mov	r5, ip
 800e088:	4626      	mov	r6, r4
 800e08a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e08c:	6028      	str	r0, [r5, #0]
 800e08e:	6069      	str	r1, [r5, #4]
 800e090:	60aa      	str	r2, [r5, #8]
 800e092:	60eb      	str	r3, [r5, #12]
 800e094:	3410      	adds	r4, #16
 800e096:	f10c 0c10 	add.w	ip, ip, #16
 800e09a:	4574      	cmp	r4, lr
 800e09c:	d1f3      	bne.n	800e086 <Start_CURRENT_PROCESS+0x6be>
 800e09e:	4662      	mov	r2, ip
 800e0a0:	4623      	mov	r3, r4
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	8013      	strh	r3, [r2, #0]
							osMailPut(closecurrmail, clcurrmsg);
 800e0a6:	4b55      	ldr	r3, [pc, #340]	; (800e1fc <Start_CURRENT_PROCESS+0x834>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f246 52c4 	movw	r2, #26052	; 0x65c4
 800e0ae:	443a      	add	r2, r7
 800e0b0:	6811      	ldr	r1, [r2, #0]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f009 fccc 	bl	8017a50 <osMailPut>
							memcpy(wificurrmsg->CURR_DATA_FOR_WIFI,CLOSE_CURRENT_VALUES,50);
 800e0b8:	f246 53c0 	movw	r3, #26048	; 0x65c0
 800e0bc:	443b      	add	r3, r7
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f507 5258 	add.w	r2, r7, #13824	; 0x3600
 800e0c4:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	469c      	mov	ip, r3
 800e0cc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800e0d0:	4665      	mov	r5, ip
 800e0d2:	4626      	mov	r6, r4
 800e0d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e0d6:	6028      	str	r0, [r5, #0]
 800e0d8:	6069      	str	r1, [r5, #4]
 800e0da:	60aa      	str	r2, [r5, #8]
 800e0dc:	60eb      	str	r3, [r5, #12]
 800e0de:	3410      	adds	r4, #16
 800e0e0:	f10c 0c10 	add.w	ip, ip, #16
 800e0e4:	4574      	cmp	r4, lr
 800e0e6:	d1f3      	bne.n	800e0d0 <Start_CURRENT_PROCESS+0x708>
 800e0e8:	4662      	mov	r2, ip
 800e0ea:	4623      	mov	r3, r4
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	8013      	strh	r3, [r2, #0]
							osMailPut(wificurrmail, wificurrmsg);
 800e0f0:	4b43      	ldr	r3, [pc, #268]	; (800e200 <Start_CURRENT_PROCESS+0x838>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f246 52c0 	movw	r2, #26048	; 0x65c0
 800e0f8:	443a      	add	r2, r7
 800e0fa:	6811      	ldr	r1, [r2, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f009 fca7 	bl	8017a50 <osMailPut>
						}
						if(LOOP_RUNNING == OPEN_LOOP)
 800e102:	4b3d      	ldr	r3, [pc, #244]	; (800e1f8 <Start_CURRENT_PROCESS+0x830>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b02      	cmp	r3, #2
 800e108:	f040 80e6 	bne.w	800e2d8 <Start_CURRENT_PROCESS+0x910>
						{
							  datap_msg = osPoolAlloc(datappool);
 800e10c:	4b3d      	ldr	r3, [pc, #244]	; (800e204 <Start_CURRENT_PROCESS+0x83c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	f009 faae 	bl	8017672 <osPoolAlloc>
 800e116:	f246 53bc 	movw	r3, #26044	; 0x65bc
 800e11a:	443b      	add	r3, r7
 800e11c:	6018      	str	r0, [r3, #0]
							  wificurrmsg = osMailAlloc(wificurrmail,100);
 800e11e:	4b38      	ldr	r3, [pc, #224]	; (800e200 <Start_CURRENT_PROCESS+0x838>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2164      	movs	r1, #100	; 0x64
 800e124:	4618      	mov	r0, r3
 800e126:	f009 fc7d 	bl	8017a24 <osMailAlloc>
 800e12a:	f246 53c0 	movw	r3, #26048	; 0x65c0
 800e12e:	443b      	add	r3, r7
 800e130:	6018      	str	r0, [r3, #0]
							  for(int i =0;i<16;i++)
 800e132:	2300      	movs	r3, #0
 800e134:	f246 52d4 	movw	r2, #26068	; 0x65d4
 800e138:	443a      	add	r2, r7
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	e02e      	b.n	800e19c <Start_CURRENT_PROCESS+0x7d4>
							  {
								  datap_msg->DATA_PROCESS_DATA[i]=(int)((AVG_CURRENT[i])*OP_DUTY[i]);
 800e13e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800e142:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 800e146:	f246 53d4 	movw	r3, #26068	; 0x65d4
 800e14a:	443b      	add	r3, r7
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	ed93 7a00 	vldr	s14, [r3]
 800e156:	4a2c      	ldr	r2, [pc, #176]	; (800e208 <Start_CURRENT_PROCESS+0x840>)
 800e158:	f246 53d4 	movw	r3, #26068	; 0x65d4
 800e15c:	443b      	add	r3, r7
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	edd3 7a00 	vldr	s15, [r3]
 800e168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e16c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e170:	ee17 3a90 	vmov	r3, s15
 800e174:	b299      	uxth	r1, r3
 800e176:	f246 53bc 	movw	r3, #26044	; 0x65bc
 800e17a:	443b      	add	r3, r7
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f246 52d4 	movw	r2, #26068	; 0x65d4
 800e182:	443a      	add	r2, r7
 800e184:	6812      	ldr	r2, [r2, #0]
 800e186:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
							  for(int i =0;i<16;i++)
 800e18a:	f246 53d4 	movw	r3, #26068	; 0x65d4
 800e18e:	443b      	add	r3, r7
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3301      	adds	r3, #1
 800e194:	f246 52d4 	movw	r2, #26068	; 0x65d4
 800e198:	443a      	add	r2, r7
 800e19a:	6013      	str	r3, [r2, #0]
 800e19c:	f246 53d4 	movw	r3, #26068	; 0x65d4
 800e1a0:	443b      	add	r3, r7
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b0f      	cmp	r3, #15
 800e1a6:	ddca      	ble.n	800e13e <Start_CURRENT_PROCESS+0x776>
							  }
							  osMessagePut(DATA_PROCESS_qHandle, (uint32_t)datap_msg,100);
 800e1a8:	4b18      	ldr	r3, [pc, #96]	; (800e20c <Start_CURRENT_PROCESS+0x844>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f246 52bc 	movw	r2, #26044	; 0x65bc
 800e1b0:	443a      	add	r2, r7
 800e1b2:	6811      	ldr	r1, [r2, #0]
 800e1b4:	2264      	movs	r2, #100	; 0x64
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f009 fb28 	bl	801780c <osMessagePut>
								clcurrmsg = osMailAlloc(closecurrmail, 100);
 800e1bc:	4b0f      	ldr	r3, [pc, #60]	; (800e1fc <Start_CURRENT_PROCESS+0x834>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2164      	movs	r1, #100	; 0x64
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f009 fc2e 	bl	8017a24 <osMailAlloc>
 800e1c8:	f246 53c4 	movw	r3, #26052	; 0x65c4
 800e1cc:	443b      	add	r3, r7
 800e1ce:	6018      	str	r0, [r3, #0]
								CLOSE_CURRENT_VALUES[0] = MY_TCU_ID;
 800e1d0:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800e1d4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e1d8:	2204      	movs	r2, #4
 800e1da:	701a      	strb	r2, [r3, #0]
								CLOSE_CURRENT_VALUES[1] = DATA_TYPE_CURRENT;
 800e1dc:	f507 5358 	add.w	r3, r7, #13824	; 0x3600
 800e1e0:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e1e4:	220c      	movs	r2, #12
 800e1e6:	705a      	strb	r2, [r3, #1]
								for(int i =0;i<32;i++)
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f246 52d0 	movw	r2, #26064	; 0x65d0
 800e1ee:	443a      	add	r2, r7
 800e1f0:	6013      	str	r3, [r2, #0]
 800e1f2:	e02a      	b.n	800e24a <Start_CURRENT_PROCESS+0x882>
 800e1f4:	20002bdc 	.word	0x20002bdc
 800e1f8:	20001f58 	.word	0x20001f58
 800e1fc:	200015f0 	.word	0x200015f0
 800e200:	20001600 	.word	0x20001600
 800e204:	20001624 	.word	0x20001624
 800e208:	20002b78 	.word	0x20002b78
 800e20c:	20001e2c 	.word	0x20001e2c
								{
									CLOSE_CURRENT_VALUES[i+2] = CURRENT_8BIT[i];
 800e210:	f246 53d0 	movw	r3, #26064	; 0x65d0
 800e214:	443b      	add	r3, r7
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	3302      	adds	r3, #2
 800e21a:	f507 42cc 	add.w	r2, r7, #26112	; 0x6600
 800e21e:	f5a2 7196 	sub.w	r1, r2, #300	; 0x12c
 800e222:	f246 52d0 	movw	r2, #26064	; 0x65d0
 800e226:	443a      	add	r2, r7
 800e228:	6812      	ldr	r2, [r2, #0]
 800e22a:	440a      	add	r2, r1
 800e22c:	7811      	ldrb	r1, [r2, #0]
 800e22e:	f507 5258 	add.w	r2, r7, #13824	; 0x3600
 800e232:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800e236:	54d1      	strb	r1, [r2, r3]
								for(int i =0;i<32;i++)
 800e238:	f246 53d0 	movw	r3, #26064	; 0x65d0
 800e23c:	443b      	add	r3, r7
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3301      	adds	r3, #1
 800e242:	f246 52d0 	movw	r2, #26064	; 0x65d0
 800e246:	443a      	add	r2, r7
 800e248:	6013      	str	r3, [r2, #0]
 800e24a:	f246 53d0 	movw	r3, #26064	; 0x65d0
 800e24e:	443b      	add	r3, r7
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b1f      	cmp	r3, #31
 800e254:	dddc      	ble.n	800e210 <Start_CURRENT_PROCESS+0x848>
								}
								memcpy(clcurrmsg->CLOSE_CURRENT_DATA,CLOSE_CURRENT_VALUES,50);
 800e256:	f246 53c4 	movw	r3, #26052	; 0x65c4
 800e25a:	443b      	add	r3, r7
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f507 5258 	add.w	r2, r7, #13824	; 0x3600
 800e262:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800e266:	4614      	mov	r4, r2
 800e268:	469c      	mov	ip, r3
 800e26a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800e26e:	4665      	mov	r5, ip
 800e270:	4626      	mov	r6, r4
 800e272:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e274:	6028      	str	r0, [r5, #0]
 800e276:	6069      	str	r1, [r5, #4]
 800e278:	60aa      	str	r2, [r5, #8]
 800e27a:	60eb      	str	r3, [r5, #12]
 800e27c:	3410      	adds	r4, #16
 800e27e:	f10c 0c10 	add.w	ip, ip, #16
 800e282:	4574      	cmp	r4, lr
 800e284:	d1f3      	bne.n	800e26e <Start_CURRENT_PROCESS+0x8a6>
 800e286:	4662      	mov	r2, ip
 800e288:	4623      	mov	r3, r4
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	8013      	strh	r3, [r2, #0]
								memcpy(wificurrmsg->CURR_DATA_FOR_WIFI,CLOSE_CURRENT_VALUES,50);
 800e28e:	f246 53c0 	movw	r3, #26048	; 0x65c0
 800e292:	443b      	add	r3, r7
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f507 5258 	add.w	r2, r7, #13824	; 0x3600
 800e29a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800e29e:	4614      	mov	r4, r2
 800e2a0:	469c      	mov	ip, r3
 800e2a2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800e2a6:	4665      	mov	r5, ip
 800e2a8:	4626      	mov	r6, r4
 800e2aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e2ac:	6028      	str	r0, [r5, #0]
 800e2ae:	6069      	str	r1, [r5, #4]
 800e2b0:	60aa      	str	r2, [r5, #8]
 800e2b2:	60eb      	str	r3, [r5, #12]
 800e2b4:	3410      	adds	r4, #16
 800e2b6:	f10c 0c10 	add.w	ip, ip, #16
 800e2ba:	4574      	cmp	r4, lr
 800e2bc:	d1f3      	bne.n	800e2a6 <Start_CURRENT_PROCESS+0x8de>
 800e2be:	4662      	mov	r2, ip
 800e2c0:	4623      	mov	r3, r4
 800e2c2:	881b      	ldrh	r3, [r3, #0]
 800e2c4:	8013      	strh	r3, [r2, #0]
								osMailPut(wificurrmail, wificurrmsg);
 800e2c6:	4b15      	ldr	r3, [pc, #84]	; (800e31c <Start_CURRENT_PROCESS+0x954>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f246 52c0 	movw	r2, #26048	; 0x65c0
 800e2ce:	443a      	add	r2, r7
 800e2d0:	6811      	ldr	r1, [r2, #0]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f009 fbbc 	bl	8017a50 <osMailPut>
						}


		memset(AVG_CURRENT,0,sizeof(AVG_CURRENT));
 800e2d8:	4b11      	ldr	r3, [pc, #68]	; (800e320 <Start_CURRENT_PROCESS+0x958>)
 800e2da:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800e2de:	443b      	add	r3, r7
 800e2e0:	2240      	movs	r2, #64	; 0x40
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f00c ff94 	bl	801b212 <memset>
		memset(FINAL_CURRENT,0,sizeof(FINAL_CURRENT));
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	; (800e324 <Start_CURRENT_PROCESS+0x95c>)
 800e2ec:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800e2f0:	443b      	add	r3, r7
 800e2f2:	2240      	movs	r2, #64	; 0x40
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f00c ff8b 	bl	801b212 <memset>
		memset(HS_TABLE_CURRENT,0,sizeof(HS_TABLE_CURRENT));
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <Start_CURRENT_PROCESS+0x960>)
 800e2fe:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800e302:	443b      	add	r3, r7
 800e304:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 800e308:	2100      	movs	r1, #0
 800e30a:	4618      	mov	r0, r3
 800e30c:	f00c ff81 	bl	801b212 <memset>
	  }
	  osDelay(1);
 800e310:	2001      	movs	r0, #1
 800e312:	f009 f888 	bl	8017426 <osDelay>
	  dutyevt = osMessageGet(DUTY_Q_qHandle, 0);
 800e316:	f7ff bb85 	b.w	800da24 <Start_CURRENT_PROCESS+0x5c>
 800e31a:	bf00      	nop
 800e31c:	20001600 	.word	0x20001600
 800e320:	ffff9a08 	.word	0xffff9a08
 800e324:	ffffcc94 	.word	0xffffcc94
 800e328:	ffffccd4 	.word	0xffffccd4

0800e32c <Start_PID_REGULATION>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_PID_REGULATION */
void Start_PID_REGULATION(void const * argument)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b090      	sub	sp, #64	; 0x40
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
	CURRENT_LIMIT_Q *currlmsg;

	osEvent pidevt,currlevt;

	static float DUTY_DATA[16];
	int whole_current_value =1;
 800e334:	2301      	movs	r3, #1
 800e336:	63fb      	str	r3, [r7, #60]	; 0x3c
	static int state =0,x=0,y=0;

	PCA9685_SoftwareReset();
 800e338:	f7f3 fc1a 	bl	8001b70 <PCA9685_SoftwareReset>
	PCA9685_SetPwmFrequency(50);
 800e33c:	2032      	movs	r0, #50	; 0x32
 800e33e:	f7f3 fc63 	bl	8001c08 <PCA9685_SetPwmFrequency>
	PCA9685_AutoIncrement(1);
 800e342:	2001      	movs	r0, #1
 800e344:	f7f3 fc4e 	bl	8001be4 <PCA9685_AutoIncrement>
  /* Infinite loop */
  for(;;)
  {
	  currlevt = osMessageGet(CURRENT_LIMIT_Q_qHandle, 0);
 800e348:	4b72      	ldr	r3, [pc, #456]	; (800e514 <Start_PID_REGULATION+0x1e8>)
 800e34a:	6819      	ldr	r1, [r3, #0]
 800e34c:	f107 030c 	add.w	r3, r7, #12
 800e350:	2200      	movs	r2, #0
 800e352:	4618      	mov	r0, r3
 800e354:	f009 fa9a 	bl	801788c <osMessageGet>
	  if(currlevt.status == osEventMessage)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b10      	cmp	r3, #16
 800e35c:	d10f      	bne.n	800e37e <Start_PID_REGULATION+0x52>
	  {
		  currlmsg = currlevt.value.p;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	62bb      	str	r3, [r7, #40]	; 0x28
		  current_limit_value = currlmsg->CURRENT_LIMIT_DATA;
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	4b6b      	ldr	r3, [pc, #428]	; (800e518 <Start_PID_REGULATION+0x1ec>)
 800e36a:	601a      	str	r2, [r3, #0]
		  whole_current_value = currlmsg->WHOLE_CURRENT_DATA;
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	63fb      	str	r3, [r7, #60]	; 0x3c
		  osPoolFree(currlimitpool, currlmsg);
 800e372:	4b6a      	ldr	r3, [pc, #424]	; (800e51c <Start_PID_REGULATION+0x1f0>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e378:	4618      	mov	r0, r3
 800e37a:	f009 f9de 	bl	801773a <osPoolFree>
	  }

	  pidevt = osMessageGet(PID_DATA_qHandle, 0);
 800e37e:	4b68      	ldr	r3, [pc, #416]	; (800e520 <Start_PID_REGULATION+0x1f4>)
 800e380:	6819      	ldr	r1, [r3, #0]
 800e382:	f107 0318 	add.w	r3, r7, #24
 800e386:	2200      	movs	r2, #0
 800e388:	4618      	mov	r0, r3
 800e38a:	f009 fa7f 	bl	801788c <osMessageGet>
	  if(pidevt.status == osEventMessage)
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	2b10      	cmp	r3, #16
 800e392:	f040 80ba 	bne.w	800e50a <Start_PID_REGULATION+0x1de>
	  {

		  pidmsg = pidevt.value.p;
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
		  for(int i =0;i<16;i++)
 800e39a:	2300      	movs	r3, #0
 800e39c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e39e:	e020      	b.n	800e3e2 <Start_PID_REGULATION+0xb6>
		  {
			  DUTY_DATA[i] = pidmsg->PID_DATA_t[i];
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e3a8:	ee07 3a90 	vmov	s15, r3
 800e3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3b0:	4a5c      	ldr	r2, [pc, #368]	; (800e524 <Start_PID_REGULATION+0x1f8>)
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	edc3 7a00 	vstr	s15, [r3]
			  DUTY_DATA[i] = DUTY_DATA[i]/(float)1000;
 800e3bc:	4a59      	ldr	r2, [pc, #356]	; (800e524 <Start_PID_REGULATION+0x1f8>)
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	ed93 7a00 	vldr	s14, [r3]
 800e3c8:	eddf 6a57 	vldr	s13, [pc, #348]	; 800e528 <Start_PID_REGULATION+0x1fc>
 800e3cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3d0:	4a54      	ldr	r2, [pc, #336]	; (800e524 <Start_PID_REGULATION+0x1f8>)
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	edc3 7a00 	vstr	s15, [r3]
		  for(int i =0;i<16;i++)
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	3301      	adds	r3, #1
 800e3e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	2b0f      	cmp	r3, #15
 800e3e6:	dddb      	ble.n	800e3a0 <Start_PID_REGULATION+0x74>
		  }
		  osPoolFree(pidpool, pidmsg);
 800e3e8:	4b50      	ldr	r3, [pc, #320]	; (800e52c <Start_PID_REGULATION+0x200>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f009 f9a3 	bl	801773a <osPoolFree>

			  PCA9685_SoftwareReset();
 800e3f4:	f7f3 fbbc 	bl	8001b70 <PCA9685_SoftwareReset>
			  PCA9685_SetPwmFrequency(50);
 800e3f8:	2032      	movs	r0, #50	; 0x32
 800e3fa:	f7f3 fc05 	bl	8001c08 <PCA9685_SetPwmFrequency>
			  PCA9685_AutoIncrement(1);
 800e3fe:	2001      	movs	r0, #1
 800e400:	f7f3 fbf0 	bl	8001be4 <PCA9685_AutoIncrement>

			  if(whole_current_value>current_limit_value)
 800e404:	4b44      	ldr	r3, [pc, #272]	; (800e518 <Start_PID_REGULATION+0x1ec>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e40a:	429a      	cmp	r2, r3
 800e40c:	dd61      	ble.n	800e4d2 <Start_PID_REGULATION+0x1a6>
			  {
		 	  switch(state)
 800e40e:	4b48      	ldr	r3, [pc, #288]	; (800e530 <Start_PID_REGULATION+0x204>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d002      	beq.n	800e41c <Start_PID_REGULATION+0xf0>
 800e416:	2b01      	cmp	r3, #1
 800e418:	d02d      	beq.n	800e476 <Start_PID_REGULATION+0x14a>
 800e41a:	e05b      	b.n	800e4d4 <Start_PID_REGULATION+0x1a8>
		 	  {
		 	  case 0:
		 		  for(int i =0;i<8;i++)
 800e41c:	2300      	movs	r3, #0
 800e41e:	637b      	str	r3, [r7, #52]	; 0x34
 800e420:	e022      	b.n	800e468 <Start_PID_REGULATION+0x13c>
		 		  {
		 		  x = i*2;
 800e422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e424:	005b      	lsls	r3, r3, #1
 800e426:	4a43      	ldr	r2, [pc, #268]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e428:	6013      	str	r3, [r2, #0]
		 		  y = x+1;
 800e42a:	4b42      	ldr	r3, [pc, #264]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	4a41      	ldr	r2, [pc, #260]	; (800e538 <Start_PID_REGULATION+0x20c>)
 800e432:	6013      	str	r3, [r2, #0]
		 		 PCA9685_SetDuty(x, DUTY_DATA[x]);
 800e434:	4b3f      	ldr	r3, [pc, #252]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	4b3e      	ldr	r3, [pc, #248]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4939      	ldr	r1, [pc, #228]	; (800e524 <Start_PID_REGULATION+0x1f8>)
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	440b      	add	r3, r1
 800e444:	edd3 7a00 	vldr	s15, [r3]
 800e448:	eeb0 0a67 	vmov.f32	s0, s15
 800e44c:	4610      	mov	r0, r2
 800e44e:	f7f3 fcd7 	bl	8001e00 <PCA9685_SetDuty>
		 		 PCA9685_SetDuty(y,0);
 800e452:	4b39      	ldr	r3, [pc, #228]	; (800e538 <Start_PID_REGULATION+0x20c>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	b2db      	uxtb	r3, r3
 800e458:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800e53c <Start_PID_REGULATION+0x210>
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7f3 fccf 	bl	8001e00 <PCA9685_SetDuty>
		 		  for(int i =0;i<8;i++)
 800e462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e464:	3301      	adds	r3, #1
 800e466:	637b      	str	r3, [r7, #52]	; 0x34
 800e468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46a:	2b07      	cmp	r3, #7
 800e46c:	ddd9      	ble.n	800e422 <Start_PID_REGULATION+0xf6>
		 		  }
		 		  state =1;
 800e46e:	4b30      	ldr	r3, [pc, #192]	; (800e530 <Start_PID_REGULATION+0x204>)
 800e470:	2201      	movs	r2, #1
 800e472:	601a      	str	r2, [r3, #0]
		 		  break;
 800e474:	e02e      	b.n	800e4d4 <Start_PID_REGULATION+0x1a8>
		 	  case 1:
		 		  for(int i =0;i<8;i++)
 800e476:	2300      	movs	r3, #0
 800e478:	633b      	str	r3, [r7, #48]	; 0x30
 800e47a:	e023      	b.n	800e4c4 <Start_PID_REGULATION+0x198>
		 		  {

		 		  x = (i*2)+1;
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	3301      	adds	r3, #1
 800e482:	4a2c      	ldr	r2, [pc, #176]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e484:	6013      	str	r3, [r2, #0]
		 		  y = x-1;
 800e486:	4b2b      	ldr	r3, [pc, #172]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3b01      	subs	r3, #1
 800e48c:	4a2a      	ldr	r2, [pc, #168]	; (800e538 <Start_PID_REGULATION+0x20c>)
 800e48e:	6013      	str	r3, [r2, #0]
		 		 PCA9685_SetDuty(x, DUTY_DATA[x]);
 800e490:	4b28      	ldr	r3, [pc, #160]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	b2da      	uxtb	r2, r3
 800e496:	4b27      	ldr	r3, [pc, #156]	; (800e534 <Start_PID_REGULATION+0x208>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4922      	ldr	r1, [pc, #136]	; (800e524 <Start_PID_REGULATION+0x1f8>)
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	440b      	add	r3, r1
 800e4a0:	edd3 7a00 	vldr	s15, [r3]
 800e4a4:	eeb0 0a67 	vmov.f32	s0, s15
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	f7f3 fca9 	bl	8001e00 <PCA9685_SetDuty>
		 		 PCA9685_SetDuty(y,0);
 800e4ae:	4b22      	ldr	r3, [pc, #136]	; (800e538 <Start_PID_REGULATION+0x20c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800e53c <Start_PID_REGULATION+0x210>
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7f3 fca1 	bl	8001e00 <PCA9685_SetDuty>
		 		  for(int i =0;i<8;i++)
 800e4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c6:	2b07      	cmp	r3, #7
 800e4c8:	ddd8      	ble.n	800e47c <Start_PID_REGULATION+0x150>
		 		  }
		 		  state =0;
 800e4ca:	4b19      	ldr	r3, [pc, #100]	; (800e530 <Start_PID_REGULATION+0x204>)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	601a      	str	r2, [r3, #0]
		 		  break;
 800e4d0:	e000      	b.n	800e4d4 <Start_PID_REGULATION+0x1a8>

		 	  }
			  }
 800e4d2:	bf00      	nop
			  if(whole_current_value<current_limit_value)
 800e4d4:	4b10      	ldr	r3, [pc, #64]	; (800e518 <Start_PID_REGULATION+0x1ec>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	da15      	bge.n	800e50a <Start_PID_REGULATION+0x1de>
			  {
				  for(int i =0;i<16;i++)
 800e4de:	2300      	movs	r3, #0
 800e4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4e2:	e00f      	b.n	800e504 <Start_PID_REGULATION+0x1d8>
				  {
				 		 PCA9685_SetDuty(i, DUTY_DATA[i]);
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	490e      	ldr	r1, [pc, #56]	; (800e524 <Start_PID_REGULATION+0x1f8>)
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	440b      	add	r3, r1
 800e4f0:	edd3 7a00 	vldr	s15, [r3]
 800e4f4:	eeb0 0a67 	vmov.f32	s0, s15
 800e4f8:	4610      	mov	r0, r2
 800e4fa:	f7f3 fc81 	bl	8001e00 <PCA9685_SetDuty>
				  for(int i =0;i<16;i++)
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	3301      	adds	r3, #1
 800e502:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	2b0f      	cmp	r3, #15
 800e508:	ddec      	ble.n	800e4e4 <Start_PID_REGULATION+0x1b8>
				  }
			  }
	  }


    osDelay(1);
 800e50a:	2001      	movs	r0, #1
 800e50c:	f008 ff8b 	bl	8017426 <osDelay>
	  currlevt = osMessageGet(CURRENT_LIMIT_Q_qHandle, 0);
 800e510:	e71a      	b.n	800e348 <Start_PID_REGULATION+0x1c>
 800e512:	bf00      	nop
 800e514:	20001e6c 	.word	0x20001e6c
 800e518:	20000014 	.word	0x20000014
 800e51c:	20001618 	.word	0x20001618
 800e520:	20001e68 	.word	0x20001e68
 800e524:	20002be0 	.word	0x20002be0
 800e528:	447a0000 	.word	0x447a0000
 800e52c:	20001628 	.word	0x20001628
 800e530:	20002c20 	.word	0x20002c20
 800e534:	20002c24 	.word	0x20002c24
 800e538:	20002c28 	.word	0x20002c28
 800e53c:	00000000 	.word	0x00000000

0800e540 <Start_DATA_LOG_FLASH>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DATA_LOG_FLASH */
void Start_DATA_LOG_FLASH(void const * argument)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b09c      	sub	sp, #112	; 0x70
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	uint8_t DATA_TO_LOG[56];
	const uint32_t increment = 0x38;
 800e548:	2338      	movs	r3, #56	; 0x38
 800e54a:	66bb      	str	r3, [r7, #104]	; 0x68
	static uint32_t address_to_write = STARTING_ADD_REC_DATA;
	static uint32_t address_to_erase = STARTING_ADD_REC_DATA;
  /* Infinite loop */
  for(;;)
  {
	logevt = osMessageGet(FLASH_LOGGINGHandle, 0);
 800e54c:	4b39      	ldr	r3, [pc, #228]	; (800e634 <Start_DATA_LOG_FLASH+0xf4>)
 800e54e:	6819      	ldr	r1, [r3, #0]
 800e550:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e554:	2200      	movs	r2, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f009 f998 	bl	801788c <osMessageGet>
	if(logevt.status == osEventMessage)
 800e55c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e55e:	2b10      	cmp	r3, #16
 800e560:	d161      	bne.n	800e626 <Start_DATA_LOG_FLASH+0xe6>
	{
		logmsg = logevt.value.p;
 800e562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e564:	667b      	str	r3, [r7, #100]	; 0x64
		for(int i =6;i<56;i++)
 800e566:	2306      	movs	r3, #6
 800e568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e56a:	e00c      	b.n	800e586 <Start_DATA_LOG_FLASH+0x46>
		{
			DATA_TO_LOG[i] = logmsg->FLASH_DATA_LOGG[i-6];
 800e56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e56e:	3b06      	subs	r3, #6
 800e570:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e572:	5cd1      	ldrb	r1, [r2, r3]
 800e574:	f107 0208 	add.w	r2, r7, #8
 800e578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e57a:	4413      	add	r3, r2
 800e57c:	460a      	mov	r2, r1
 800e57e:	701a      	strb	r2, [r3, #0]
		for(int i =6;i<56;i++)
 800e580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e582:	3301      	adds	r3, #1
 800e584:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e588:	2b37      	cmp	r3, #55	; 0x37
 800e58a:	ddef      	ble.n	800e56c <Start_DATA_LOG_FLASH+0x2c>
		}
		osPoolFree(flashlogpool,logmsg);
 800e58c:	4b2a      	ldr	r3, [pc, #168]	; (800e638 <Start_DATA_LOG_FLASH+0xf8>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e592:	4618      	mov	r0, r3
 800e594:	f009 f8d1 	bl	801773a <osPoolFree>

		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800e598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e59c:	2200      	movs	r2, #0
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4826      	ldr	r0, [pc, #152]	; (800e63c <Start_DATA_LOG_FLASH+0xfc>)
 800e5a2:	f005 fcf5 	bl	8013f90 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800e5a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4823      	ldr	r0, [pc, #140]	; (800e63c <Start_DATA_LOG_FLASH+0xfc>)
 800e5b0:	f005 fdd0 	bl	8014154 <HAL_RTC_GetDate>
		DATA_TO_LOG[0] = gDate.Date;
 800e5b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e5b8:	723b      	strb	r3, [r7, #8]
		DATA_TO_LOG[1] = gDate.Month;
 800e5ba:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800e5be:	727b      	strb	r3, [r7, #9]
		DATA_TO_LOG[2] = gDate.Year;
 800e5c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e5c4:	72bb      	strb	r3, [r7, #10]
		DATA_TO_LOG[3] = gTime.Hours;
 800e5c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e5ca:	72fb      	strb	r3, [r7, #11]
		DATA_TO_LOG[4] = gTime.Minutes;
 800e5cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e5d0:	733b      	strb	r3, [r7, #12]
		DATA_TO_LOG[5] = gTime.Seconds;
 800e5d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e5d6:	737b      	strb	r3, [r7, #13]

		  SLAVE_Write_Data(address_to_write, (char*)DATA_TO_LOG,56);
 800e5d8:	4b19      	ldr	r3, [pc, #100]	; (800e640 <Start_DATA_LOG_FLASH+0x100>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f107 0308 	add.w	r3, r7, #8
 800e5e2:	2238      	movs	r2, #56	; 0x38
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f7f2 faf5 	bl	8000bd4 <SLAVE_Write_Data>
		  address_to_write = address_to_write + increment;
 800e5ea:	4b15      	ldr	r3, [pc, #84]	; (800e640 <Start_DATA_LOG_FLASH+0x100>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5f0:	4413      	add	r3, r2
 800e5f2:	4a13      	ldr	r2, [pc, #76]	; (800e640 <Start_DATA_LOG_FLASH+0x100>)
 800e5f4:	6013      	str	r3, [r2, #0]
		  if(address_to_write >= ENDING_ADD_REC_DATA)
 800e5f6:	4b12      	ldr	r3, [pc, #72]	; (800e640 <Start_DATA_LOG_FLASH+0x100>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d311      	bcc.n	800e626 <Start_DATA_LOG_FLASH+0xe6>
		  {
			  while(address_to_erase>=ENDING_ADD_REC_DATA)
 800e602:	e00a      	b.n	800e61a <Start_DATA_LOG_FLASH+0xda>
			  {
			  SLAVE_Erase_4K(address_to_erase);
 800e604:	4b0f      	ldr	r3, [pc, #60]	; (800e644 <Start_DATA_LOG_FLASH+0x104>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4618      	mov	r0, r3
 800e60a:	f7f2 fab5 	bl	8000b78 <SLAVE_Erase_4K>
			  address_to_erase = address_to_erase+ 0x00001000;
 800e60e:	4b0d      	ldr	r3, [pc, #52]	; (800e644 <Start_DATA_LOG_FLASH+0x104>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e616:	4a0b      	ldr	r2, [pc, #44]	; (800e644 <Start_DATA_LOG_FLASH+0x104>)
 800e618:	6013      	str	r3, [r2, #0]
			  while(address_to_erase>=ENDING_ADD_REC_DATA)
 800e61a:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <Start_DATA_LOG_FLASH+0x104>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800e622:	4293      	cmp	r3, r2
 800e624:	d2ee      	bcs.n	800e604 <Start_DATA_LOG_FLASH+0xc4>
			  }
		  }
	}
    osDelay(log_interval);
 800e626:	4b08      	ldr	r3, [pc, #32]	; (800e648 <Start_DATA_LOG_FLASH+0x108>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f008 fefb 	bl	8017426 <osDelay>
	logevt = osMessageGet(FLASH_LOGGINGHandle, 0);
 800e630:	e78c      	b.n	800e54c <Start_DATA_LOG_FLASH+0xc>
 800e632:	bf00      	nop
 800e634:	20001e74 	.word	0x20001e74
 800e638:	200015d0 	.word	0x200015d0
 800e63c:	200017f4 	.word	0x200017f4
 800e640:	2000004c 	.word	0x2000004c
 800e644:	20000050 	.word	0x20000050
 800e648:	2000000c 	.word	0x2000000c

0800e64c <Start_FLASH_READ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_FLASH_READ */
void Start_FLASH_READ(void const * argument)
{
 800e64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e64e:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 800e652:	af00      	add	r7, sp, #0
 800e654:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e658:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800e65c:	6018      	str	r0, [r3, #0]
	uint32_t read_from_address;
	static uint32_t increment = 0xC4;
  /* Infinite loop */
  for(;;)
  {
	  freadevt = osMessageGet(FLASH_READ_qHandle, 0);
 800e65e:	4b9d      	ldr	r3, [pc, #628]	; (800e8d4 <Start_FLASH_READ+0x288>)
 800e660:	6819      	ldr	r1, [r3, #0]
 800e662:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800e666:	2200      	movs	r2, #0
 800e668:	4618      	mov	r0, r3
 800e66a:	f009 f90f 	bl	801788c <osMessageGet>
	  if(freadevt.status == osEventMessage)
 800e66e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800e672:	2b10      	cmp	r3, #16
 800e674:	f040 83a0 	bne.w	800edb8 <Start_FLASH_READ+0x76c>
	  {
		  freadmsg = freadevt.value.p;
 800e678:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800e67c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
		  READ_FROM = freadmsg->FLASH_READ_DATA[0];
 800e680:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
		  osPoolFree(flashreadpool, freadmsg);
 800e68a:	4b93      	ldr	r3, [pc, #588]	; (800e8d8 <Start_FLASH_READ+0x28c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 800e692:	4618      	mov	r0, r3
 800e694:	f009 f851 	bl	801773a <osPoolFree>
		  switch(READ_FROM)
 800e698:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 800e69c:	2bbe      	cmp	r3, #190	; 0xbe
 800e69e:	d008      	beq.n	800e6b2 <Start_FLASH_READ+0x66>
 800e6a0:	2bbe      	cmp	r3, #190	; 0xbe
 800e6a2:	f300 838a 	bgt.w	800edba <Start_FLASH_READ+0x76e>
 800e6a6:	2bb0      	cmp	r3, #176	; 0xb0
 800e6a8:	d06e      	beq.n	800e788 <Start_FLASH_READ+0x13c>
 800e6aa:	2bb9      	cmp	r3, #185	; 0xb9
 800e6ac:	f000 812c 	beq.w	800e908 <Start_FLASH_READ+0x2bc>
 800e6b0:	e383      	b.n	800edba <Start_FLASH_READ+0x76e>
		  {

		  case FETCH_ENNG_MODE:
			  read_from_address = STARTING_ADD_OF_ENGG_MODE;
 800e6b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6b6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
			  SLAVE_Read_Data(read_from_address, (char*)DATA_FROM_FLASH,200);
 800e6ba:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800e6be:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800e6c2:	22c8      	movs	r2, #200	; 0xc8
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f2 face 	bl	8000c66 <SLAVE_Read_Data>
			  DATA_FROM_FLASH[0] = MODEM_BIT;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
			  DATA_FROM_FLASH[1] = MODEM_REPLY_BIT;
 800e6d0:	2304      	movs	r3, #4
 800e6d2:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
			  DATA_FROM_FLASH[2] = MY_TCU_ID;
 800e6d6:	2304      	movs	r3, #4
 800e6d8:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
			  DATA_FROM_FLASH[5] = TEMP_SIZE_UPDATE;
 800e6dc:	4b7f      	ldr	r3, [pc, #508]	; (800e8dc <Start_FLASH_READ+0x290>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	f887 31d5 	strb.w	r3, [r7, #469]	; 0x1d5
			  DATA_FROM_FLASH[29] = RADIO_ERROR_DATA_t;
 800e6e4:	23b1      	movs	r3, #177	; 0xb1
 800e6e6:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
			  DATA_FROM_FLASH[30] = LORA_ERROR_DATA;
 800e6ea:	4b7d      	ldr	r3, [pc, #500]	; (800e8e0 <Start_FLASH_READ+0x294>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
			  DATA_FROM_FLASH[31] = TCU_ERROR_DATA_t;
 800e6f2:	23b2      	movs	r3, #178	; 0xb2
 800e6f4:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
			  DATA_FROM_FLASH[32] = TCU_ERROR_DATA_FLASH;
 800e6f8:	4b7a      	ldr	r3, [pc, #488]	; (800e8e4 <Start_FLASH_READ+0x298>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f887 31f0 	strb.w	r3, [r7, #496]	; 0x1f0
			  DATA_FROM_FLASH[33] = TCU_ERROR_DATA_PWM;
 800e700:	4b79      	ldr	r3, [pc, #484]	; (800e8e8 <Start_FLASH_READ+0x29c>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	f887 31f1 	strb.w	r3, [r7, #497]	; 0x1f1
			  DATA_FROM_FLASH[34] = SDA_ERROR_DATA_t;
 800e708:	23b3      	movs	r3, #179	; 0xb3
 800e70a:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
			  DATA_FROM_FLASH[35] = SDA_ERROR_DATA;
 800e70e:	4b77      	ldr	r3, [pc, #476]	; (800e8ec <Start_FLASH_READ+0x2a0>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3

			  CRC_VALUE_OF_SENDING_DATA = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_FROM_FLASH,199);
 800e716:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e71a:	22c7      	movs	r2, #199	; 0xc7
 800e71c:	4619      	mov	r1, r3
 800e71e:	4874      	ldr	r0, [pc, #464]	; (800e8f0 <Start_FLASH_READ+0x2a4>)
 800e720:	f002 fb3c 	bl	8010d9c <HAL_CRC_Calculate>
 800e724:	4603      	mov	r3, r0
 800e726:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
			  DATA_FROM_FLASH[199] = CRC_VALUE_OF_SENDING_DATA;
 800e72a:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 800e72e:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297

			  switch(WHOM_TO_GIVE_DATA)
 800e732:	4b70      	ldr	r3, [pc, #448]	; (800e8f4 <Start_FLASH_READ+0x2a8>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d002      	beq.n	800e740 <Start_FLASH_READ+0xf4>
 800e73a:	2b02      	cmp	r3, #2
 800e73c:	d01a      	beq.n	800e774 <Start_FLASH_READ+0x128>
			  case LOCAL_SYSTEM:
				  HAL_UART_Transmit(&huart6, DATA_FROM_FLASH, 200,1000);
				  break;
			  }

			  break;
 800e73e:	e33c      	b.n	800edba <Start_FLASH_READ+0x76e>
				  loramsg = osPoolAlloc(lorasendpool);
 800e740:	4b6d      	ldr	r3, [pc, #436]	; (800e8f8 <Start_FLASH_READ+0x2ac>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4618      	mov	r0, r3
 800e746:	f008 ff94 	bl	8017672 <osPoolAlloc>
 800e74a:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
				  memcpy(loramsg->LORA_SEND_DATA,DATA_FROM_FLASH,200);
 800e74e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800e752:	4618      	mov	r0, r3
 800e754:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e758:	22c8      	movs	r2, #200	; 0xc8
 800e75a:	4619      	mov	r1, r3
 800e75c:	f00c fd4b 	bl	801b1f6 <memcpy>
				  osMessagePut(LORA_SEND_qHandle, (uint32_t)loramsg,1000);
 800e760:	4b66      	ldr	r3, [pc, #408]	; (800e8fc <Start_FLASH_READ+0x2b0>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 800e768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e76c:	4618      	mov	r0, r3
 800e76e:	f009 f84d 	bl	801780c <osMessagePut>
				  break;
 800e772:	e008      	b.n	800e786 <Start_FLASH_READ+0x13a>
				  HAL_UART_Transmit(&huart6, DATA_FROM_FLASH, 200,1000);
 800e774:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800e778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e77c:	22c8      	movs	r2, #200	; 0xc8
 800e77e:	4860      	ldr	r0, [pc, #384]	; (800e900 <Start_FLASH_READ+0x2b4>)
 800e780:	f007 fb06 	bl	8015d90 <HAL_UART_Transmit>
				  break;
 800e784:	bf00      	nop
			  break;
 800e786:	e318      	b.n	800edba <Start_FLASH_READ+0x76e>

		  case FETCH_DATA_REC:
			  read_from_address = STARTING_ADD_REC_DATA;
 800e788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e78c:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

			  while(read_from_address>=ENDING_ADD_REC_DATA)
 800e790:	e097      	b.n	800e8c2 <Start_FLASH_READ+0x276>
			  {
				  SLAVE_Read_Data(read_from_address, (char*)DATA_FROM_FLASH,196);
 800e792:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800e796:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800e79a:	22c4      	movs	r2, #196	; 0xc4
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7f2 fa62 	bl	8000c66 <SLAVE_Read_Data>
				  REC_DATA[0] = MODEM_BIT;
 800e7a2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e7a6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	701a      	strb	r2, [r3, #0]
				  REC_DATA[1] = MODEM_REPLY_BIT;
 800e7ae:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e7b2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800e7b6:	2204      	movs	r2, #4
 800e7b8:	705a      	strb	r2, [r3, #1]
				  REC_DATA[2] = MY_TCU_ID;
 800e7ba:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e7be:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800e7c2:	2204      	movs	r2, #4
 800e7c4:	709a      	strb	r2, [r3, #2]

				  for(int i =0;i<196;i++)
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800e7cc:	e012      	b.n	800e7f4 <Start_FLASH_READ+0x1a8>
				  {
					  REC_DATA[i+3] = (uint8_t)DATA_FROM_FLASH[i];
 800e7ce:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800e7d2:	3303      	adds	r3, #3
 800e7d4:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800e7d8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800e7dc:	440a      	add	r2, r1
 800e7de:	7811      	ldrb	r1, [r2, #0]
 800e7e0:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800e7e4:	f5a2 7220 	sub.w	r2, r2, #640	; 0x280
 800e7e8:	54d1      	strb	r1, [r2, r3]
				  for(int i =0;i<196;i++)
 800e7ea:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800e7f4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800e7f8:	2bc3      	cmp	r3, #195	; 0xc3
 800e7fa:	dde8      	ble.n	800e7ce <Start_FLASH_READ+0x182>
				  }
					CRC_VALUE_OF_SENDING_DATA = HAL_CRC_Calculate(&hcrc, (uint32_t*)REC_DATA,199);
 800e7fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e800:	22c7      	movs	r2, #199	; 0xc7
 800e802:	4619      	mov	r1, r3
 800e804:	483a      	ldr	r0, [pc, #232]	; (800e8f0 <Start_FLASH_READ+0x2a4>)
 800e806:	f002 fac9 	bl	8010d9c <HAL_CRC_Calculate>
 800e80a:	4603      	mov	r3, r0
 800e80c:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
					REC_DATA[199] = CRC_VALUE_OF_SENDING_DATA;
 800e810:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e814:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800e818:	f897 22ae 	ldrb.w	r2, [r7, #686]	; 0x2ae
 800e81c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
					switch(WHOM_TO_GIVE_DATA)
 800e820:	4b34      	ldr	r3, [pc, #208]	; (800e8f4 <Start_FLASH_READ+0x2a8>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d002      	beq.n	800e82e <Start_FLASH_READ+0x1e2>
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d033      	beq.n	800e894 <Start_FLASH_READ+0x248>
 800e82c:	e042      	b.n	800e8b4 <Start_FLASH_READ+0x268>
					{
					case MODEM_SYSTEM:
					loramsg = osPoolAlloc(lorasendpool);
 800e82e:	4b32      	ldr	r3, [pc, #200]	; (800e8f8 <Start_FLASH_READ+0x2ac>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4618      	mov	r0, r3
 800e834:	f008 ff1d 	bl	8017672 <osPoolAlloc>
 800e838:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
					for(int i =0;i<200;i++)
 800e83c:	2300      	movs	r3, #0
 800e83e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800e842:	e013      	b.n	800e86c <Start_FLASH_READ+0x220>
					{
					loramsg->LORA_SEND_DATA[i] = REC_DATA[i];
 800e844:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e848:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 800e84c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800e850:	4413      	add	r3, r2
 800e852:	7819      	ldrb	r1, [r3, #0]
 800e854:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800e858:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800e85c:	4413      	add	r3, r2
 800e85e:	460a      	mov	r2, r1
 800e860:	701a      	strb	r2, [r3, #0]
					for(int i =0;i<200;i++)
 800e862:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800e866:	3301      	adds	r3, #1
 800e868:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800e86c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800e870:	2bc7      	cmp	r3, #199	; 0xc7
 800e872:	dde7      	ble.n	800e844 <Start_FLASH_READ+0x1f8>
					}
					osMessagePut(LORA_SEND_qHandle, (uint32_t)loramsg,100);
 800e874:	4b21      	ldr	r3, [pc, #132]	; (800e8fc <Start_FLASH_READ+0x2b0>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 800e87c:	2264      	movs	r2, #100	; 0x64
 800e87e:	4618      	mov	r0, r3
 800e880:	f008 ffc4 	bl	801780c <osMessagePut>
					memset(DATA_FROM_FLASH,0,200);
 800e884:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e888:	22c8      	movs	r2, #200	; 0xc8
 800e88a:	2100      	movs	r1, #0
 800e88c:	4618      	mov	r0, r3
 800e88e:	f00c fcc0 	bl	801b212 <memset>

					break;
 800e892:	e00f      	b.n	800e8b4 <Start_FLASH_READ+0x268>
					case LOCAL_SYSTEM:
					HAL_UART_Transmit(&huart6, REC_DATA, 200,1000);
 800e894:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e89c:	22c8      	movs	r2, #200	; 0xc8
 800e89e:	4818      	ldr	r0, [pc, #96]	; (800e900 <Start_FLASH_READ+0x2b4>)
 800e8a0:	f007 fa76 	bl	8015d90 <HAL_UART_Transmit>
					memset(DATA_FROM_FLASH,0,200);
 800e8a4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e8a8:	22c8      	movs	r2, #200	; 0xc8
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f00c fcb0 	bl	801b212 <memset>

					break;
 800e8b2:	bf00      	nop
					}
					read_from_address = read_from_address+increment;
 800e8b4:	4b13      	ldr	r3, [pc, #76]	; (800e904 <Start_FLASH_READ+0x2b8>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800e8bc:	4413      	add	r3, r2
 800e8be:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
			  while(read_from_address>=ENDING_ADD_REC_DATA)
 800e8c2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800e8c6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	f4bf af61 	bcs.w	800e792 <Start_FLASH_READ+0x146>

			  }
			  break;
 800e8d0:	e273      	b.n	800edba <Start_FLASH_READ+0x76e>
 800e8d2:	bf00      	nop
 800e8d4:	20001e78 	.word	0x20001e78
 800e8d8:	20001608 	.word	0x20001608
 800e8dc:	20001e90 	.word	0x20001e90
 800e8e0:	20000011 	.word	0x20000011
 800e8e4:	20000012 	.word	0x20000012
 800e8e8:	20000013 	.word	0x20000013
 800e8ec:	20000010 	.word	0x20000010
 800e8f0:	20001718 	.word	0x20001718
 800e8f4:	20001f5c 	.word	0x20001f5c
 800e8f8:	200015c8 	.word	0x200015c8
 800e8fc:	20001e1c 	.word	0x20001e1c
 800e900:	20001bac 	.word	0x20001bac
 800e904:	20000054 	.word	0x20000054

		  case FETCH_BIST:
			  DATA_OF_BIST[0] = MODEM_BIT;
 800e908:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e90c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e910:	2201      	movs	r2, #1
 800e912:	701a      	strb	r2, [r3, #0]
			  DATA_OF_BIST[1] = MODEM_REPLY_BIT;
 800e914:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e918:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e91c:	2204      	movs	r2, #4
 800e91e:	705a      	strb	r2, [r3, #1]
			  DATA_OF_BIST[2] = MY_TCU_ID;
 800e920:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e924:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e928:	2204      	movs	r2, #4
 800e92a:	709a      	strb	r2, [r3, #2]
			  DATA_OF_BIST[3] = FETCH_BIST;
 800e92c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e930:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e934:	22b9      	movs	r2, #185	; 0xb9
 800e936:	70da      	strb	r2, [r3, #3]
			  DATA_OF_BIST[26] = RADIO_ERROR_DATA_t;
 800e938:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e93c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e940:	22b1      	movs	r2, #177	; 0xb1
 800e942:	769a      	strb	r2, [r3, #26]
			  DATA_OF_BIST[27] = LORA_ERROR_DATA;
 800e944:	4bd6      	ldr	r3, [pc, #856]	; (800eca0 <Start_FLASH_READ+0x654>)
 800e946:	781a      	ldrb	r2, [r3, #0]
 800e948:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e94c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e950:	76da      	strb	r2, [r3, #27]
			  DATA_OF_BIST[28] = TCU_ERROR_DATA_t;
 800e952:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e956:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e95a:	22b2      	movs	r2, #178	; 0xb2
 800e95c:	771a      	strb	r2, [r3, #28]
			  DATA_OF_BIST[29] = TCU_ERROR_DATA_FLASH;
 800e95e:	4bd1      	ldr	r3, [pc, #836]	; (800eca4 <Start_FLASH_READ+0x658>)
 800e960:	781a      	ldrb	r2, [r3, #0]
 800e962:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e966:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e96a:	775a      	strb	r2, [r3, #29]
			  DATA_OF_BIST[30] = TCU_ERROR_DATA_PWM;
 800e96c:	4bce      	ldr	r3, [pc, #824]	; (800eca8 <Start_FLASH_READ+0x65c>)
 800e96e:	781a      	ldrb	r2, [r3, #0]
 800e970:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e974:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e978:	779a      	strb	r2, [r3, #30]
			  DATA_OF_BIST[31] = SDA_ERROR_DATA_t;
 800e97a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e97e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e982:	22b3      	movs	r2, #179	; 0xb3
 800e984:	77da      	strb	r2, [r3, #31]
			  DATA_OF_BIST[32] = SDA_ERROR_DATA;
 800e986:	4bc9      	ldr	r3, [pc, #804]	; (800ecac <Start_FLASH_READ+0x660>)
 800e988:	781a      	ldrb	r2, [r3, #0]
 800e98a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e98e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e992:	f883 2020 	strb.w	r2, [r3, #32]

			  memset(DATA_FOR_SLAVE,0xFF,50);
 800e996:	f107 030c 	add.w	r3, r7, #12
 800e99a:	2232      	movs	r2, #50	; 0x32
 800e99c:	21ff      	movs	r1, #255	; 0xff
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f00c fc37 	bl	801b212 <memset>
			  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800e9a4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e9a8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800e9ac:	2202      	movs	r2, #2
 800e9ae:	701a      	strb	r2, [r3, #0]
			  DATA_FOR_SLAVE[1] = ID_S_PRESENT[0];
 800e9b0:	4bbf      	ldr	r3, [pc, #764]	; (800ecb0 <Start_FLASH_READ+0x664>)
 800e9b2:	781a      	ldrb	r2, [r3, #0]
 800e9b4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e9b8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800e9bc:	705a      	strb	r2, [r3, #1]
			  DATA_FOR_SLAVE[2] = FETCH_BIST;
 800e9be:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e9c2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800e9c6:	22b9      	movs	r2, #185	; 0xb9
 800e9c8:	709a      	strb	r2, [r3, #2]
			  slavemsg = osPoolAlloc(slavesendpool);
 800e9ca:	4bba      	ldr	r3, [pc, #744]	; (800ecb4 <Start_FLASH_READ+0x668>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f008 fe4f 	bl	8017672 <osPoolAlloc>
 800e9d4:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
			  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800e9d8:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800e9dc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800e9e0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800e9e4:	461c      	mov	r4, r3
 800e9e6:	4694      	mov	ip, r2
 800e9e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800e9ec:	4665      	mov	r5, ip
 800e9ee:	4626      	mov	r6, r4
 800e9f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e9f2:	6028      	str	r0, [r5, #0]
 800e9f4:	6069      	str	r1, [r5, #4]
 800e9f6:	60aa      	str	r2, [r5, #8]
 800e9f8:	60eb      	str	r3, [r5, #12]
 800e9fa:	3410      	adds	r4, #16
 800e9fc:	f10c 0c10 	add.w	ip, ip, #16
 800ea00:	4574      	cmp	r4, lr
 800ea02:	d1f3      	bne.n	800e9ec <Start_FLASH_READ+0x3a0>
 800ea04:	4662      	mov	r2, ip
 800ea06:	4623      	mov	r3, r4
 800ea08:	881b      	ldrh	r3, [r3, #0]
 800ea0a:	8013      	strh	r3, [r2, #0]
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800ea0c:	4baa      	ldr	r3, [pc, #680]	; (800ecb8 <Start_FLASH_READ+0x66c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f8d7 12a4 	ldr.w	r1, [r7, #676]	; 0x2a4
 800ea14:	2264      	movs	r2, #100	; 0x64
 800ea16:	4618      	mov	r0, r3
 800ea18:	f008 fef8 	bl	801780c <osMessagePut>

			  osDelay(2000);
 800ea1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ea20:	f008 fd01 	bl	8017426 <osDelay>
			  DATA_OF_BIST[105] = BIST_DATA[0];
 800ea24:	4ba5      	ldr	r3, [pc, #660]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea26:	781a      	ldrb	r2, [r3, #0]
 800ea28:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			  DATA_OF_BIST[106] = BIST_DATA[1];
 800ea34:	4ba1      	ldr	r3, [pc, #644]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea36:	785a      	ldrb	r2, [r3, #1]
 800ea38:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			  DATA_OF_BIST[107] = BIST_DATA[2];
 800ea44:	4b9d      	ldr	r3, [pc, #628]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea46:	789a      	ldrb	r2, [r3, #2]
 800ea48:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea4c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea50:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			  DATA_OF_BIST[108] = BIST_DATA[3];
 800ea54:	4b99      	ldr	r3, [pc, #612]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea56:	78da      	ldrb	r2, [r3, #3]
 800ea58:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea60:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			  DATA_OF_BIST[109] = BIST_DATA[4];
 800ea64:	4b95      	ldr	r3, [pc, #596]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea66:	791a      	ldrb	r2, [r3, #4]
 800ea68:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea70:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			  DATA_OF_BIST[110] = BIST_DATA[5];
 800ea74:	4b91      	ldr	r3, [pc, #580]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea76:	795a      	ldrb	r2, [r3, #5]
 800ea78:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea80:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			  DATA_OF_BIST[111] = BIST_DATA[6];
 800ea84:	4b8d      	ldr	r3, [pc, #564]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea86:	799a      	ldrb	r2, [r3, #6]
 800ea88:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea8c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ea90:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			  DATA_OF_BIST[112] = BIST_DATA[7];
 800ea94:	4b89      	ldr	r3, [pc, #548]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ea96:	79da      	ldrb	r2, [r3, #7]
 800ea98:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ea9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eaa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
			  DATA_OF_BIST[113] = BIST_DATA[8];
 800eaa4:	4b85      	ldr	r3, [pc, #532]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eaa6:	7a1a      	ldrb	r2, [r3, #8]
 800eaa8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eaac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eab0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			  memset(BIST_DATA,0,10);
 800eab4:	220a      	movs	r2, #10
 800eab6:	2100      	movs	r1, #0
 800eab8:	4880      	ldr	r0, [pc, #512]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eaba:	f00c fbaa 	bl	801b212 <memset>

			  memset(DATA_FOR_SLAVE,0xFF,50);
 800eabe:	f107 030c 	add.w	r3, r7, #12
 800eac2:	2232      	movs	r2, #50	; 0x32
 800eac4:	21ff      	movs	r1, #255	; 0xff
 800eac6:	4618      	mov	r0, r3
 800eac8:	f00c fba3 	bl	801b212 <memset>
			  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800eacc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ead0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ead4:	2202      	movs	r2, #2
 800ead6:	701a      	strb	r2, [r3, #0]
			  DATA_FOR_SLAVE[1] = ID_S_PRESENT[1];
 800ead8:	4b75      	ldr	r3, [pc, #468]	; (800ecb0 <Start_FLASH_READ+0x664>)
 800eada:	785a      	ldrb	r2, [r3, #1]
 800eadc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eae0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800eae4:	705a      	strb	r2, [r3, #1]
			  DATA_FOR_SLAVE[2] = FETCH_BIST;
 800eae6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eaea:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800eaee:	22b9      	movs	r2, #185	; 0xb9
 800eaf0:	709a      	strb	r2, [r3, #2]
			  slavemsg = osPoolAlloc(slavesendpool);
 800eaf2:	4b70      	ldr	r3, [pc, #448]	; (800ecb4 <Start_FLASH_READ+0x668>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f008 fdbb 	bl	8017672 <osPoolAlloc>
 800eafc:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
			  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800eb00:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800eb04:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb08:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800eb0c:	461c      	mov	r4, r3
 800eb0e:	4694      	mov	ip, r2
 800eb10:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800eb14:	4665      	mov	r5, ip
 800eb16:	4626      	mov	r6, r4
 800eb18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eb1a:	6028      	str	r0, [r5, #0]
 800eb1c:	6069      	str	r1, [r5, #4]
 800eb1e:	60aa      	str	r2, [r5, #8]
 800eb20:	60eb      	str	r3, [r5, #12]
 800eb22:	3410      	adds	r4, #16
 800eb24:	f10c 0c10 	add.w	ip, ip, #16
 800eb28:	4574      	cmp	r4, lr
 800eb2a:	d1f3      	bne.n	800eb14 <Start_FLASH_READ+0x4c8>
 800eb2c:	4662      	mov	r2, ip
 800eb2e:	4623      	mov	r3, r4
 800eb30:	881b      	ldrh	r3, [r3, #0]
 800eb32:	8013      	strh	r3, [r2, #0]
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800eb34:	4b60      	ldr	r3, [pc, #384]	; (800ecb8 <Start_FLASH_READ+0x66c>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f8d7 12a4 	ldr.w	r1, [r7, #676]	; 0x2a4
 800eb3c:	2264      	movs	r2, #100	; 0x64
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f008 fe64 	bl	801780c <osMessagePut>

			  osDelay(2000);
 800eb44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800eb48:	f008 fc6d 	bl	8017426 <osDelay>
			  DATA_OF_BIST[114] = BIST_DATA[0];
 800eb4c:	4b5b      	ldr	r3, [pc, #364]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eb4e:	781a      	ldrb	r2, [r3, #0]
 800eb50:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eb58:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			  DATA_OF_BIST[115] = BIST_DATA[1];
 800eb5c:	4b57      	ldr	r3, [pc, #348]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eb5e:	785a      	ldrb	r2, [r3, #1]
 800eb60:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eb68:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
			  DATA_OF_BIST[116] = BIST_DATA[2];
 800eb6c:	4b53      	ldr	r3, [pc, #332]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eb6e:	789a      	ldrb	r2, [r3, #2]
 800eb70:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eb78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
			  DATA_OF_BIST[117] = BIST_DATA[3];
 800eb7c:	4b4f      	ldr	r3, [pc, #316]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eb7e:	78da      	ldrb	r2, [r3, #3]
 800eb80:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eb88:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			  DATA_OF_BIST[118] = BIST_DATA[4];
 800eb8c:	4b4b      	ldr	r3, [pc, #300]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eb8e:	791a      	ldrb	r2, [r3, #4]
 800eb90:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eb98:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			  DATA_OF_BIST[119] = BIST_DATA[5];
 800eb9c:	4b47      	ldr	r3, [pc, #284]	; (800ecbc <Start_FLASH_READ+0x670>)
 800eb9e:	795a      	ldrb	r2, [r3, #5]
 800eba0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eba4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800eba8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
			  DATA_OF_BIST[120] = BIST_DATA[6];
 800ebac:	4b43      	ldr	r3, [pc, #268]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ebae:	799a      	ldrb	r2, [r3, #6]
 800ebb0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ebb4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ebb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			  DATA_OF_BIST[121] = BIST_DATA[7];
 800ebbc:	4b3f      	ldr	r3, [pc, #252]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ebbe:	79da      	ldrb	r2, [r3, #7]
 800ebc0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ebc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ebc8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
			  DATA_OF_BIST[122] = BIST_DATA[8];
 800ebcc:	4b3b      	ldr	r3, [pc, #236]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ebce:	7a1a      	ldrb	r2, [r3, #8]
 800ebd0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ebd4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ebd8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			  memset(BIST_DATA,0,10);
 800ebdc:	220a      	movs	r2, #10
 800ebde:	2100      	movs	r1, #0
 800ebe0:	4836      	ldr	r0, [pc, #216]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ebe2:	f00c fb16 	bl	801b212 <memset>

			  memset(DATA_FOR_SLAVE,0xFF,50);
 800ebe6:	f107 030c 	add.w	r3, r7, #12
 800ebea:	2232      	movs	r2, #50	; 0x32
 800ebec:	21ff      	movs	r1, #255	; 0xff
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f00c fb0f 	bl	801b212 <memset>
			  DATA_FOR_SLAVE[0] = MASTER_BIT;
 800ebf4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ebf8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	701a      	strb	r2, [r3, #0]
			  DATA_FOR_SLAVE[1] = ID_S_PRESENT[2];
 800ec00:	4b2b      	ldr	r3, [pc, #172]	; (800ecb0 <Start_FLASH_READ+0x664>)
 800ec02:	789a      	ldrb	r2, [r3, #2]
 800ec04:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ec08:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ec0c:	705a      	strb	r2, [r3, #1]
			  DATA_FOR_SLAVE[2] = FETCH_BIST;
 800ec0e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ec12:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ec16:	22b9      	movs	r2, #185	; 0xb9
 800ec18:	709a      	strb	r2, [r3, #2]
			  slavemsg = osPoolAlloc(slavesendpool);
 800ec1a:	4b26      	ldr	r3, [pc, #152]	; (800ecb4 <Start_FLASH_READ+0x668>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f008 fd27 	bl	8017672 <osPoolAlloc>
 800ec24:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
			  memcpy(slavemsg->SLAVE_DATA,DATA_FOR_SLAVE,50);
 800ec28:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800ec2c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ec30:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ec34:	461c      	mov	r4, r3
 800ec36:	4694      	mov	ip, r2
 800ec38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800ec3c:	4665      	mov	r5, ip
 800ec3e:	4626      	mov	r6, r4
 800ec40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec42:	6028      	str	r0, [r5, #0]
 800ec44:	6069      	str	r1, [r5, #4]
 800ec46:	60aa      	str	r2, [r5, #8]
 800ec48:	60eb      	str	r3, [r5, #12]
 800ec4a:	3410      	adds	r4, #16
 800ec4c:	f10c 0c10 	add.w	ip, ip, #16
 800ec50:	4574      	cmp	r4, lr
 800ec52:	d1f3      	bne.n	800ec3c <Start_FLASH_READ+0x5f0>
 800ec54:	4662      	mov	r2, ip
 800ec56:	4623      	mov	r3, r4
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	8013      	strh	r3, [r2, #0]
			  osMessagePut(SLAVE_SEND_qHandle, (uint32_t)slavemsg,100);
 800ec5c:	4b16      	ldr	r3, [pc, #88]	; (800ecb8 <Start_FLASH_READ+0x66c>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f8d7 12a4 	ldr.w	r1, [r7, #676]	; 0x2a4
 800ec64:	2264      	movs	r2, #100	; 0x64
 800ec66:	4618      	mov	r0, r3
 800ec68:	f008 fdd0 	bl	801780c <osMessagePut>

			  osDelay(2000);
 800ec6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ec70:	f008 fbd9 	bl	8017426 <osDelay>
			  DATA_OF_BIST[123] = BIST_DATA[0];
 800ec74:	4b11      	ldr	r3, [pc, #68]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ec76:	781a      	ldrb	r2, [r3, #0]
 800ec78:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ec7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ec80:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
			  DATA_OF_BIST[124] = BIST_DATA[1];
 800ec84:	4b0d      	ldr	r3, [pc, #52]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ec86:	785a      	ldrb	r2, [r3, #1]
 800ec88:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ec8c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ec90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			  DATA_OF_BIST[125] = BIST_DATA[2];
 800ec94:	4b09      	ldr	r3, [pc, #36]	; (800ecbc <Start_FLASH_READ+0x670>)
 800ec96:	789a      	ldrb	r2, [r3, #2]
 800ec98:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ec9c:	e010      	b.n	800ecc0 <Start_FLASH_READ+0x674>
 800ec9e:	bf00      	nop
 800eca0:	20000011 	.word	0x20000011
 800eca4:	20000012 	.word	0x20000012
 800eca8:	20000013 	.word	0x20000013
 800ecac:	20000010 	.word	0x20000010
 800ecb0:	20001f54 	.word	0x20001f54
 800ecb4:	200015e4 	.word	0x200015e4
 800ecb8:	20001e30 	.word	0x20001e30
 800ecbc:	20001fa8 	.word	0x20001fa8
 800ecc0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ecc4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			  DATA_OF_BIST[126] = BIST_DATA[3];
 800ecc8:	4b3e      	ldr	r3, [pc, #248]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ecca:	78da      	ldrb	r2, [r3, #3]
 800eccc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ecd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ecd4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			  DATA_OF_BIST[127] = BIST_DATA[4];
 800ecd8:	4b3a      	ldr	r3, [pc, #232]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ecda:	791a      	ldrb	r2, [r3, #4]
 800ecdc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ece0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ece4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			  DATA_OF_BIST[128] = BIST_DATA[5];
 800ece8:	4b36      	ldr	r3, [pc, #216]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ecea:	795a      	ldrb	r2, [r3, #5]
 800ecec:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ecf0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ecf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			  DATA_OF_BIST[129] = BIST_DATA[6];
 800ecf8:	4b32      	ldr	r3, [pc, #200]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ecfa:	799a      	ldrb	r2, [r3, #6]
 800ecfc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ed00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ed04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			  DATA_OF_BIST[130] = BIST_DATA[7];
 800ed08:	4b2e      	ldr	r3, [pc, #184]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ed0a:	79da      	ldrb	r2, [r3, #7]
 800ed0c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ed10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ed14:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			  DATA_OF_BIST[131] = BIST_DATA[8];
 800ed18:	4b2a      	ldr	r3, [pc, #168]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ed1a:	7a1a      	ldrb	r2, [r3, #8]
 800ed1c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ed20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ed24:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			  memset(BIST_DATA,0,10);
 800ed28:	220a      	movs	r2, #10
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	4825      	ldr	r0, [pc, #148]	; (800edc4 <Start_FLASH_READ+0x778>)
 800ed2e:	f00c fa70 	bl	801b212 <memset>

			  CRC_VALUE_OF_SENDING_DATA = HAL_CRC_Calculate(&hcrc, (uint32_t*)DATA_OF_BIST,199);
 800ed32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed36:	22c7      	movs	r2, #199	; 0xc7
 800ed38:	4619      	mov	r1, r3
 800ed3a:	4823      	ldr	r0, [pc, #140]	; (800edc8 <Start_FLASH_READ+0x77c>)
 800ed3c:	f002 f82e 	bl	8010d9c <HAL_CRC_Calculate>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
			  DATA_OF_BIST[199] = CRC_VALUE_OF_SENDING_DATA;
 800ed46:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ed4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ed4e:	f897 22ae 	ldrb.w	r2, [r7, #686]	; 0x2ae
 800ed52:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
			  osThreadSuspend(DATA_LOGGINGHandle);
 800ed56:	4b1d      	ldr	r3, [pc, #116]	; (800edcc <Start_FLASH_READ+0x780>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f008 ff3f 	bl	8017bde <osThreadSuspend>
			  switch(WHOM_TO_GIVE_DATA)
 800ed60:	4b1b      	ldr	r3, [pc, #108]	; (800edd0 <Start_FLASH_READ+0x784>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d002      	beq.n	800ed6e <Start_FLASH_READ+0x722>
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d01c      	beq.n	800eda6 <Start_FLASH_READ+0x75a>
				  break;
			  case LOCAL_SYSTEM:
				  HAL_UART_Transmit(&huart6, DATA_OF_BIST, 200,100);
				  break;
			  }
			  break;
 800ed6c:	e025      	b.n	800edba <Start_FLASH_READ+0x76e>
				  loramsg = osPoolAlloc(lorasendpool);
 800ed6e:	4b19      	ldr	r3, [pc, #100]	; (800edd4 <Start_FLASH_READ+0x788>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f008 fc7d 	bl	8017672 <osPoolAlloc>
 800ed78:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
				  memcpy(loramsg->LORA_SEND_DATA,DATA_OF_BIST,BUFFER_SIZE_ALL);
 800ed7c:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800ed80:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ed84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800ed88:	4610      	mov	r0, r2
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	23c8      	movs	r3, #200	; 0xc8
 800ed8e:	461a      	mov	r2, r3
 800ed90:	f00c fa31 	bl	801b1f6 <memcpy>
				  osMessagePut(LORA_SEND_qHandle, (uint32_t)loramsg,100);
 800ed94:	4b10      	ldr	r3, [pc, #64]	; (800edd8 <Start_FLASH_READ+0x78c>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 800ed9c:	2264      	movs	r2, #100	; 0x64
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f008 fd34 	bl	801780c <osMessagePut>
				  break;
 800eda4:	e007      	b.n	800edb6 <Start_FLASH_READ+0x76a>
				  HAL_UART_Transmit(&huart6, DATA_OF_BIST, 200,100);
 800eda6:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800edaa:	2364      	movs	r3, #100	; 0x64
 800edac:	22c8      	movs	r2, #200	; 0xc8
 800edae:	480b      	ldr	r0, [pc, #44]	; (800eddc <Start_FLASH_READ+0x790>)
 800edb0:	f006 ffee 	bl	8015d90 <HAL_UART_Transmit>
				  break;
 800edb4:	bf00      	nop
			  break;
 800edb6:	e000      	b.n	800edba <Start_FLASH_READ+0x76e>
			  osThreadResume(DATA_LOGGINGHandle);
		  }
	  }
 800edb8:	bf00      	nop
    osDelay(1);
 800edba:	2001      	movs	r0, #1
 800edbc:	f008 fb33 	bl	8017426 <osDelay>
	  freadevt = osMessageGet(FLASH_READ_qHandle, 0);
 800edc0:	e44d      	b.n	800e65e <Start_FLASH_READ+0x12>
 800edc2:	bf00      	nop
 800edc4:	20001fa8 	.word	0x20001fa8
 800edc8:	20001718 	.word	0x20001718
 800edcc:	20001e00 	.word	0x20001e00
 800edd0:	20001f5c 	.word	0x20001f5c
 800edd4:	200015c8 	.word	0x200015c8
 800edd8:	20001e1c 	.word	0x20001e1c
 800eddc:	20001bac 	.word	0x20001bac

0800ede0 <Start_WIFI_SEND>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_WIFI_SEND */
void Start_WIFI_SEND(void const * argument)
{
 800ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ede2:	b09b      	sub	sp, #108	; 0x6c
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]

	uint8_t DATA_FOR_WIFI[50];
  /* Infinite loop */
  for(;;)
  {
	if((I_AM == I_AM_MASTER))
 800ede8:	4b60      	ldr	r3, [pc, #384]	; (800ef6c <Start_WIFI_SEND+0x18c>)
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	2b0a      	cmp	r3, #10
 800edee:	d10f      	bne.n	800ee10 <Start_WIFI_SEND+0x30>
	{
	givememsg = osPoolAlloc(givepool);
 800edf0:	4b5f      	ldr	r3, [pc, #380]	; (800ef70 <Start_WIFI_SEND+0x190>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f008 fc3c 	bl	8017672 <osPoolAlloc>
 800edfa:	6678      	str	r0, [r7, #100]	; 0x64
	givememsg->GIVE_ME_t = I_AM_WIFI;
 800edfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edfe:	2299      	movs	r2, #153	; 0x99
 800ee00:	701a      	strb	r2, [r3, #0]
	osMessagePut(GIVE_ME_qHandle, (uint32_t)givememsg,100);
 800ee02:	4b5c      	ldr	r3, [pc, #368]	; (800ef74 <Start_WIFI_SEND+0x194>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ee08:	2264      	movs	r2, #100	; 0x64
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f008 fcfe 	bl	801780c <osMessagePut>
	}

	tempevt = osMailGet(wifitempmail, 0);
 800ee10:	4b59      	ldr	r3, [pc, #356]	; (800ef78 <Start_WIFI_SEND+0x198>)
 800ee12:	6819      	ldr	r1, [r3, #0]
 800ee14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ee18:	2200      	movs	r2, #0
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f008 fe56 	bl	8017acc <osMailGet>
	if(tempevt.status == osEventMail)
 800ee20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee22:	2b20      	cmp	r3, #32
 800ee24:	d148      	bne.n	800eeb8 <Start_WIFI_SEND+0xd8>
	{
	wifitempmsg = tempevt.value.p;
 800ee26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee28:	663b      	str	r3, [r7, #96]	; 0x60
	memcpy(DATA_FOR_WIFI,wifitempmsg->TEMP_DATA_FOR_WIFI,50);
 800ee2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee2c:	461c      	mov	r4, r3
 800ee2e:	f107 060c 	add.w	r6, r7, #12
 800ee32:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800ee36:	4635      	mov	r5, r6
 800ee38:	4623      	mov	r3, r4
 800ee3a:	6818      	ldr	r0, [r3, #0]
 800ee3c:	6859      	ldr	r1, [r3, #4]
 800ee3e:	689a      	ldr	r2, [r3, #8]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee44:	3410      	adds	r4, #16
 800ee46:	3610      	adds	r6, #16
 800ee48:	4564      	cmp	r4, ip
 800ee4a:	d1f4      	bne.n	800ee36 <Start_WIFI_SEND+0x56>
 800ee4c:	4632      	mov	r2, r6
 800ee4e:	4623      	mov	r3, r4
 800ee50:	881b      	ldrh	r3, [r3, #0]
 800ee52:	8013      	strh	r3, [r2, #0]
	osMailFree(wifitempmail, wifitempmsg);
 800ee54:	4b48      	ldr	r3, [pc, #288]	; (800ef78 <Start_WIFI_SEND+0x198>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f008 feaa 	bl	8017bb4 <osMailFree>
	HAL_UART_Transmit(&huart4, DATA_FOR_WIFI, 50,1000);
 800ee60:	f107 010c 	add.w	r1, r7, #12
 800ee64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee68:	2232      	movs	r2, #50	; 0x32
 800ee6a:	4844      	ldr	r0, [pc, #272]	; (800ef7c <Start_WIFI_SEND+0x19c>)
 800ee6c:	f006 ff90 	bl	8015d90 <HAL_UART_Transmit>
	logmsg = osPoolAlloc(flashlogpool);
 800ee70:	4b43      	ldr	r3, [pc, #268]	; (800ef80 <Start_WIFI_SEND+0x1a0>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f008 fbfc 	bl	8017672 <osPoolAlloc>
 800ee7a:	65f8      	str	r0, [r7, #92]	; 0x5c
	memcpy(logmsg->FLASH_DATA_LOGG,DATA_FOR_WIFI,50);
 800ee7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee7e:	f107 040c 	add.w	r4, r7, #12
 800ee82:	469c      	mov	ip, r3
 800ee84:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800ee88:	4665      	mov	r5, ip
 800ee8a:	4626      	mov	r6, r4
 800ee8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ee8e:	6028      	str	r0, [r5, #0]
 800ee90:	6069      	str	r1, [r5, #4]
 800ee92:	60aa      	str	r2, [r5, #8]
 800ee94:	60eb      	str	r3, [r5, #12]
 800ee96:	3410      	adds	r4, #16
 800ee98:	f10c 0c10 	add.w	ip, ip, #16
 800ee9c:	4574      	cmp	r4, lr
 800ee9e:	d1f3      	bne.n	800ee88 <Start_WIFI_SEND+0xa8>
 800eea0:	4662      	mov	r2, ip
 800eea2:	4623      	mov	r3, r4
 800eea4:	881b      	ldrh	r3, [r3, #0]
 800eea6:	8013      	strh	r3, [r2, #0]
	osMessagePut(FLASH_LOGGINGHandle, (uint32_t)logmsg,1000);
 800eea8:	4b36      	ldr	r3, [pc, #216]	; (800ef84 <Start_WIFI_SEND+0x1a4>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800eeae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f008 fcaa 	bl	801780c <osMessagePut>
	}

	osDelay(300);
 800eeb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eebc:	f008 fab3 	bl	8017426 <osDelay>

	currevt = osMailGet(wificurrmail, 0);
 800eec0:	4b31      	ldr	r3, [pc, #196]	; (800ef88 <Start_WIFI_SEND+0x1a8>)
 800eec2:	6819      	ldr	r1, [r3, #0]
 800eec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eec8:	2200      	movs	r2, #0
 800eeca:	4618      	mov	r0, r3
 800eecc:	f008 fdfe 	bl	8017acc <osMailGet>
	if(currevt.status == osEventMail)
 800eed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed2:	2b20      	cmp	r3, #32
 800eed4:	d188      	bne.n	800ede8 <Start_WIFI_SEND+0x8>
	{
	wificurrmsg = currevt.value.p;
 800eed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eed8:	65bb      	str	r3, [r7, #88]	; 0x58
	memcpy(DATA_FOR_WIFI,wificurrmsg->CURR_DATA_FOR_WIFI,50);
 800eeda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eedc:	461c      	mov	r4, r3
 800eede:	f107 060c 	add.w	r6, r7, #12
 800eee2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800eee6:	4635      	mov	r5, r6
 800eee8:	4623      	mov	r3, r4
 800eeea:	6818      	ldr	r0, [r3, #0]
 800eeec:	6859      	ldr	r1, [r3, #4]
 800eeee:	689a      	ldr	r2, [r3, #8]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eef4:	3410      	adds	r4, #16
 800eef6:	3610      	adds	r6, #16
 800eef8:	4564      	cmp	r4, ip
 800eefa:	d1f4      	bne.n	800eee6 <Start_WIFI_SEND+0x106>
 800eefc:	4632      	mov	r2, r6
 800eefe:	4623      	mov	r3, r4
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	8013      	strh	r3, [r2, #0]
	osMailFree(wificurrmail, wificurrmsg);
 800ef04:	4b20      	ldr	r3, [pc, #128]	; (800ef88 <Start_WIFI_SEND+0x1a8>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f008 fe52 	bl	8017bb4 <osMailFree>
	HAL_UART_Transmit(&huart4, DATA_FOR_WIFI, 50,1000);
 800ef10:	f107 010c 	add.w	r1, r7, #12
 800ef14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef18:	2232      	movs	r2, #50	; 0x32
 800ef1a:	4818      	ldr	r0, [pc, #96]	; (800ef7c <Start_WIFI_SEND+0x19c>)
 800ef1c:	f006 ff38 	bl	8015d90 <HAL_UART_Transmit>
	logmsg = osPoolAlloc(flashlogpool);
 800ef20:	4b17      	ldr	r3, [pc, #92]	; (800ef80 <Start_WIFI_SEND+0x1a0>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f008 fba4 	bl	8017672 <osPoolAlloc>
 800ef2a:	65f8      	str	r0, [r7, #92]	; 0x5c
	memcpy(logmsg->FLASH_DATA_LOGG,DATA_FOR_WIFI,50);
 800ef2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef2e:	f107 040c 	add.w	r4, r7, #12
 800ef32:	469c      	mov	ip, r3
 800ef34:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800ef38:	4665      	mov	r5, ip
 800ef3a:	4626      	mov	r6, r4
 800ef3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ef3e:	6028      	str	r0, [r5, #0]
 800ef40:	6069      	str	r1, [r5, #4]
 800ef42:	60aa      	str	r2, [r5, #8]
 800ef44:	60eb      	str	r3, [r5, #12]
 800ef46:	3410      	adds	r4, #16
 800ef48:	f10c 0c10 	add.w	ip, ip, #16
 800ef4c:	4574      	cmp	r4, lr
 800ef4e:	d1f3      	bne.n	800ef38 <Start_WIFI_SEND+0x158>
 800ef50:	4662      	mov	r2, ip
 800ef52:	4623      	mov	r3, r4
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	8013      	strh	r3, [r2, #0]
	osMessagePut(FLASH_LOGGINGHandle, (uint32_t)logmsg,1000);
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <Start_WIFI_SEND+0x1a4>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ef5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef62:	4618      	mov	r0, r3
 800ef64:	f008 fc52 	bl	801780c <osMessagePut>
	if((I_AM == I_AM_MASTER))
 800ef68:	e73e      	b.n	800ede8 <Start_WIFI_SEND+0x8>
 800ef6a:	bf00      	nop
 800ef6c:	20000009 	.word	0x20000009
 800ef70:	20001614 	.word	0x20001614
 800ef74:	20001e3c 	.word	0x20001e3c
 800ef78:	200015f8 	.word	0x200015f8
 800ef7c:	2000198c 	.word	0x2000198c
 800ef80:	200015d0 	.word	0x200015d0
 800ef84:	20001e74 	.word	0x20001e74
 800ef88:	20001600 	.word	0x20001600

0800ef8c <Start_PROFILE_START>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_PROFILE_START */
void Start_PROFILE_START(void const * argument)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b096      	sub	sp, #88	; 0x58
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
	static int COUNT=0;
	static uint8_t CURRENT_PROFILE[50]={0};
  /* Infinite loop */
  for(;;)
  {
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800ef94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ef98:	2200      	movs	r2, #0
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4869      	ldr	r0, [pc, #420]	; (800f144 <Start_PROFILE_START+0x1b8>)
 800ef9e:	f004 fff7 	bl	8013f90 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800efa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efa6:	2200      	movs	r2, #0
 800efa8:	4619      	mov	r1, r3
 800efaa:	4866      	ldr	r0, [pc, #408]	; (800f144 <Start_PROFILE_START+0x1b8>)
 800efac:	f005 f8d2 	bl	8014154 <HAL_RTC_GetDate>
		DATE = gDate.Date;
 800efb0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800efb4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		MONTH = gDate.Month;
 800efb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800efbc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		YEAR = gDate.Year;
 800efc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efc4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		HOUR = gTime.Hours;
 800efc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800efcc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		MINUTE = gTime.Minutes;
 800efd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		SECOND = gTime.Seconds;
 800efd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800efdc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		if(YEAR>=CURRENT_PROFILE[42])
 800efe0:	4b59      	ldr	r3, [pc, #356]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800efe2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800efe6:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800efea:	429a      	cmp	r2, r3
 800efec:	f0c0 80a4 	bcc.w	800f138 <Start_PROFILE_START+0x1ac>
		{
			if(MONTH>=CURRENT_PROFILE[41])
 800eff0:	4b55      	ldr	r3, [pc, #340]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800eff2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800eff6:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 800effa:	429a      	cmp	r2, r3
 800effc:	f0c0 809c 	bcc.w	800f138 <Start_PROFILE_START+0x1ac>
			{
				if(DATE>=CURRENT_PROFILE[40])
 800f000:	4b51      	ldr	r3, [pc, #324]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f006:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800f00a:	429a      	cmp	r2, r3
 800f00c:	f0c0 8094 	bcc.w	800f138 <Start_PROFILE_START+0x1ac>
				{
					if(HOUR>=CURRENT_PROFILE[43])
 800f010:	4b4d      	ldr	r3, [pc, #308]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f012:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f016:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f01a:	429a      	cmp	r2, r3
 800f01c:	f0c0 808c 	bcc.w	800f138 <Start_PROFILE_START+0x1ac>
					{
						if(MINUTE>=CURRENT_PROFILE[44])
 800f020:	4b49      	ldr	r3, [pc, #292]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f022:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f026:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800f02a:	429a      	cmp	r2, r3
 800f02c:	f0c0 8084 	bcc.w	800f138 <Start_PROFILE_START+0x1ac>
						{
							if(SECOND>=CURRENT_PROFILE[45])
 800f030:	4b45      	ldr	r3, [pc, #276]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f036:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d37c      	bcc.n	800f138 <Start_PROFILE_START+0x1ac>
							{
						    if(COUNT <=PROFILE_COUNT)
 800f03e:	4b43      	ldr	r3, [pc, #268]	; (800f14c <Start_PROFILE_START+0x1c0>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	4b42      	ldr	r3, [pc, #264]	; (800f150 <Start_PROFILE_START+0x1c4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	429a      	cmp	r2, r3
 800f04a:	db75      	blt.n	800f138 <Start_PROFILE_START+0x1ac>
						    {
							j=4;
 800f04c:	4b41      	ldr	r3, [pc, #260]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f04e:	2204      	movs	r2, #4
 800f050:	601a      	str	r2, [r3, #0]
							for(int i =0;i<16;i++)
 800f052:	2300      	movs	r3, #0
 800f054:	657b      	str	r3, [r7, #84]	; 0x54
 800f056:	e023      	b.n	800f0a0 <Start_PROFILE_START+0x114>
							{
								SETPOINT_t[i] = (((((uint16_t)CURRENT_PROFILE[j])<<8)&0xFF00)|((((uint16_t)CURRENT_PROFILE[j+1]))&0x00FF));
 800f058:	4b3e      	ldr	r3, [pc, #248]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a3a      	ldr	r2, [pc, #232]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f05e:	5cd3      	ldrb	r3, [r2, r3]
 800f060:	021b      	lsls	r3, r3, #8
 800f062:	b21a      	sxth	r2, r3
 800f064:	4b3b      	ldr	r3, [pc, #236]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3301      	adds	r3, #1
 800f06a:	4937      	ldr	r1, [pc, #220]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f06c:	5ccb      	ldrb	r3, [r1, r3]
 800f06e:	b21b      	sxth	r3, r3
 800f070:	4313      	orrs	r3, r2
 800f072:	b21b      	sxth	r3, r3
 800f074:	b29a      	uxth	r2, r3
 800f076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f078:	005b      	lsls	r3, r3, #1
 800f07a:	3358      	adds	r3, #88	; 0x58
 800f07c:	443b      	add	r3, r7
 800f07e:	f823 2c50 	strh.w	r2, [r3, #-80]
								j =j+2;
 800f082:	4b34      	ldr	r3, [pc, #208]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3302      	adds	r3, #2
 800f088:	4a32      	ldr	r2, [pc, #200]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f08a:	6013      	str	r3, [r2, #0]
								if(j ==36)
 800f08c:	4b31      	ldr	r3, [pc, #196]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b24      	cmp	r3, #36	; 0x24
 800f092:	d102      	bne.n	800f09a <Start_PROFILE_START+0x10e>
								{
								j =4;
 800f094:	4b2f      	ldr	r3, [pc, #188]	; (800f154 <Start_PROFILE_START+0x1c8>)
 800f096:	2204      	movs	r2, #4
 800f098:	601a      	str	r2, [r3, #0]
							for(int i =0;i<16;i++)
 800f09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f09c:	3301      	adds	r3, #1
 800f09e:	657b      	str	r3, [r7, #84]	; 0x54
 800f0a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0a2:	2b0f      	cmp	r3, #15
 800f0a4:	ddd8      	ble.n	800f058 <Start_PROFILE_START+0xcc>
								}
							}
							sp_msg = osPoolAlloc(sppool);
 800f0a6:	4b2c      	ldr	r3, [pc, #176]	; (800f158 <Start_PROFILE_START+0x1cc>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f008 fae1 	bl	8017672 <osPoolAlloc>
 800f0b0:	6438      	str	r0, [r7, #64]	; 0x40
							for(int i =0;i<16;i++)
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	653b      	str	r3, [r7, #80]	; 0x50
 800f0b6:	e00c      	b.n	800f0d2 <Start_PROFILE_START+0x146>
							{
							sp_msg->SETPOINT_t[i] = SETPOINT_t[i];
 800f0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	3358      	adds	r3, #88	; 0x58
 800f0be:	443b      	add	r3, r7
 800f0c0:	f833 1c50 	ldrh.w	r1, [r3, #-80]
 800f0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
							for(int i =0;i<16;i++)
 800f0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	653b      	str	r3, [r7, #80]	; 0x50
 800f0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d4:	2b0f      	cmp	r3, #15
 800f0d6:	ddef      	ble.n	800f0b8 <Start_PROFILE_START+0x12c>
							}
							osMessagePut(SETPOINT_qHandle, (uint32_t)sp_msg,100);
 800f0d8:	4b20      	ldr	r3, [pc, #128]	; (800f15c <Start_PROFILE_START+0x1d0>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0de:	2264      	movs	r2, #100	; 0x64
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f008 fb93 	bl	801780c <osMessagePut>
							for(int k =0;k<50;k++)
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0ea:	e011      	b.n	800f110 <Start_PROFILE_START+0x184>
							{
							CURRENT_PROFILE[k] = PROFILES[z][k];
 800f0ec:	4b1c      	ldr	r3, [pc, #112]	; (800f160 <Start_PROFILE_START+0x1d4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a1c      	ldr	r2, [pc, #112]	; (800f164 <Start_PROFILE_START+0x1d8>)
 800f0f2:	2132      	movs	r1, #50	; 0x32
 800f0f4:	fb01 f303 	mul.w	r3, r1, r3
 800f0f8:	441a      	add	r2, r3
 800f0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0fc:	4413      	add	r3, r2
 800f0fe:	7819      	ldrb	r1, [r3, #0]
 800f100:	4a11      	ldr	r2, [pc, #68]	; (800f148 <Start_PROFILE_START+0x1bc>)
 800f102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f104:	4413      	add	r3, r2
 800f106:	460a      	mov	r2, r1
 800f108:	701a      	strb	r2, [r3, #0]
							for(int k =0;k<50;k++)
 800f10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f10c:	3301      	adds	r3, #1
 800f10e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f112:	2b31      	cmp	r3, #49	; 0x31
 800f114:	ddea      	ble.n	800f0ec <Start_PROFILE_START+0x160>
							}
							z=z+1;
 800f116:	4b12      	ldr	r3, [pc, #72]	; (800f160 <Start_PROFILE_START+0x1d4>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3301      	adds	r3, #1
 800f11c:	4a10      	ldr	r2, [pc, #64]	; (800f160 <Start_PROFILE_START+0x1d4>)
 800f11e:	6013      	str	r3, [r2, #0]
							COUNT = COUNT+1;
 800f120:	4b0b      	ldr	r3, [pc, #44]	; (800f150 <Start_PROFILE_START+0x1c4>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	3301      	adds	r3, #1
 800f126:	4a0a      	ldr	r2, [pc, #40]	; (800f150 <Start_PROFILE_START+0x1c4>)
 800f128:	6013      	str	r3, [r2, #0]
							if(z==50)
 800f12a:	4b0d      	ldr	r3, [pc, #52]	; (800f160 <Start_PROFILE_START+0x1d4>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b32      	cmp	r3, #50	; 0x32
 800f130:	d102      	bne.n	800f138 <Start_PROFILE_START+0x1ac>
							{
								z=0;
 800f132:	4b0b      	ldr	r3, [pc, #44]	; (800f160 <Start_PROFILE_START+0x1d4>)
 800f134:	2200      	movs	r2, #0
 800f136:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
		}
    osDelay(500);
 800f138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f13c:	f008 f973 	bl	8017426 <osDelay>
		HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800f140:	e728      	b.n	800ef94 <Start_PROFILE_START+0x8>
 800f142:	bf00      	nop
 800f144:	200017f4 	.word	0x200017f4
 800f148:	20002c2c 	.word	0x20002c2c
 800f14c:	20002978 	.word	0x20002978
 800f150:	20002c60 	.word	0x20002c60
 800f154:	20000058 	.word	0x20000058
 800f158:	20001630 	.word	0x20001630
 800f15c:	20001e34 	.word	0x20001e34
 800f160:	20002c64 	.word	0x20002c64
 800f164:	20001fb4 	.word	0x20001fb4

0800f168 <TCU_SDA_TIMER_CALL>:
  /* USER CODE END Start_PROFILE_START */
}

/* TCU_SDA_TIMER_CALL function */
void TCU_SDA_TIMER_CALL(void const * argument)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TCU_SDA_TIMER_CALL */
	NO_DUTY = 1;
 800f170:	4b07      	ldr	r3, [pc, #28]	; (800f190 <TCU_SDA_TIMER_CALL+0x28>)
 800f172:	2201      	movs	r2, #1
 800f174:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,SET);
 800f176:	2201      	movs	r2, #1
 800f178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f17c:	4805      	ldr	r0, [pc, #20]	; (800f194 <TCU_SDA_TIMER_CALL+0x2c>)
 800f17e:	f002 fd75 	bl	8011c6c <HAL_GPIO_WritePin>
	SDA_ERROR_DATA = 1;
 800f182:	4b05      	ldr	r3, [pc, #20]	; (800f198 <TCU_SDA_TIMER_CALL+0x30>)
 800f184:	2201      	movs	r2, #1
 800f186:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TCU_SDA_TIMER_CALL */
}
 800f188:	bf00      	nop
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20001f60 	.word	0x20001f60
 800f194:	40021000 	.word	0x40021000
 800f198:	20000010 	.word	0x20000010

0800f19c <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */

  /* USER CODE END Callback02 */
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a04      	ldr	r2, [pc, #16]	; (800f1d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d101      	bne.n	800f1c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800f1c2:	f001 f857 	bl	8010274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	40001400 	.word	0x40001400

0800f1d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f1d8:	b672      	cpsid	i
}
 800f1da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f1dc:	e7fe      	b.n	800f1dc <Error_Handler+0x8>
	...

0800f1e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800f1e6:	4b11      	ldr	r3, [pc, #68]	; (800f22c <HAL_MspInit+0x4c>)
 800f1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ea:	4a10      	ldr	r2, [pc, #64]	; (800f22c <HAL_MspInit+0x4c>)
 800f1ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1f0:	6413      	str	r3, [r2, #64]	; 0x40
 800f1f2:	4b0e      	ldr	r3, [pc, #56]	; (800f22c <HAL_MspInit+0x4c>)
 800f1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1fa:	607b      	str	r3, [r7, #4]
 800f1fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f1fe:	4b0b      	ldr	r3, [pc, #44]	; (800f22c <HAL_MspInit+0x4c>)
 800f200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f202:	4a0a      	ldr	r2, [pc, #40]	; (800f22c <HAL_MspInit+0x4c>)
 800f204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f208:	6453      	str	r3, [r2, #68]	; 0x44
 800f20a:	4b08      	ldr	r3, [pc, #32]	; (800f22c <HAL_MspInit+0x4c>)
 800f20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f20e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800f216:	2200      	movs	r2, #0
 800f218:	210f      	movs	r1, #15
 800f21a:	f06f 0001 	mvn.w	r0, #1
 800f21e:	f001 fd2f 	bl	8010c80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f222:	bf00      	nop
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	40023800 	.word	0x40023800

0800f230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08e      	sub	sp, #56	; 0x38
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f23c:	2200      	movs	r2, #0
 800f23e:	601a      	str	r2, [r3, #0]
 800f240:	605a      	str	r2, [r3, #4]
 800f242:	609a      	str	r2, [r3, #8]
 800f244:	60da      	str	r2, [r3, #12]
 800f246:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a4b      	ldr	r2, [pc, #300]	; (800f37c <HAL_ADC_MspInit+0x14c>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d124      	bne.n	800f29c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f252:	4b4b      	ldr	r3, [pc, #300]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f256:	4a4a      	ldr	r2, [pc, #296]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f25c:	6453      	str	r3, [r2, #68]	; 0x44
 800f25e:	4b48      	ldr	r3, [pc, #288]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f266:	623b      	str	r3, [r7, #32]
 800f268:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f26a:	4b45      	ldr	r3, [pc, #276]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f26e:	4a44      	ldr	r2, [pc, #272]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f270:	f043 0301 	orr.w	r3, r3, #1
 800f274:	6313      	str	r3, [r2, #48]	; 0x30
 800f276:	4b42      	ldr	r3, [pc, #264]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	61fb      	str	r3, [r7, #28]
 800f280:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f282:	2302      	movs	r3, #2
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f286:	2303      	movs	r3, #3
 800f288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f28a:	2300      	movs	r3, #0
 800f28c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f292:	4619      	mov	r1, r3
 800f294:	483b      	ldr	r0, [pc, #236]	; (800f384 <HAL_ADC_MspInit+0x154>)
 800f296:	f002 fb25 	bl	80118e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800f29a:	e06b      	b.n	800f374 <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a39      	ldr	r2, [pc, #228]	; (800f388 <HAL_ADC_MspInit+0x158>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d124      	bne.n	800f2f0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f2a6:	4b36      	ldr	r3, [pc, #216]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2aa:	4a35      	ldr	r2, [pc, #212]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f2b0:	6453      	str	r3, [r2, #68]	; 0x44
 800f2b2:	4b33      	ldr	r3, [pc, #204]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2ba:	61bb      	str	r3, [r7, #24]
 800f2bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2be:	4b30      	ldr	r3, [pc, #192]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c2:	4a2f      	ldr	r2, [pc, #188]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2c4:	f043 0301 	orr.w	r3, r3, #1
 800f2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ca:	4b2d      	ldr	r3, [pc, #180]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	617b      	str	r3, [r7, #20]
 800f2d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f2da:	2303      	movs	r3, #3
 800f2dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4826      	ldr	r0, [pc, #152]	; (800f384 <HAL_ADC_MspInit+0x154>)
 800f2ea:	f002 fafb 	bl	80118e4 <HAL_GPIO_Init>
}
 800f2ee:	e041      	b.n	800f374 <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC3)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a25      	ldr	r2, [pc, #148]	; (800f38c <HAL_ADC_MspInit+0x15c>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d13c      	bne.n	800f374 <HAL_ADC_MspInit+0x144>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f2fa:	4b21      	ldr	r3, [pc, #132]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2fe:	4a20      	ldr	r2, [pc, #128]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f304:	6453      	str	r3, [r2, #68]	; 0x44
 800f306:	4b1e      	ldr	r3, [pc, #120]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f30a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f30e:	613b      	str	r3, [r7, #16]
 800f310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800f312:	4b1b      	ldr	r3, [pc, #108]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f316:	4a1a      	ldr	r2, [pc, #104]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f318:	f043 0320 	orr.w	r3, r3, #32
 800f31c:	6313      	str	r3, [r2, #48]	; 0x30
 800f31e:	4b18      	ldr	r3, [pc, #96]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f322:	f003 0320 	and.w	r3, r3, #32
 800f326:	60fb      	str	r3, [r7, #12]
 800f328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f32a:	4b15      	ldr	r3, [pc, #84]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f32e:	4a14      	ldr	r2, [pc, #80]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f330:	f043 0301 	orr.w	r3, r3, #1
 800f334:	6313      	str	r3, [r2, #48]	; 0x30
 800f336:	4b12      	ldr	r3, [pc, #72]	; (800f380 <HAL_ADC_MspInit+0x150>)
 800f338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	60bb      	str	r3, [r7, #8]
 800f340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR_TEMP_Pin|HS_R_Pin|HS_L_Pin;
 800f342:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800f346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f348:	2303      	movs	r3, #3
 800f34a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f34c:	2300      	movs	r3, #0
 800f34e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f354:	4619      	mov	r1, r3
 800f356:	480e      	ldr	r0, [pc, #56]	; (800f390 <HAL_ADC_MspInit+0x160>)
 800f358:	f002 fac4 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AMBIENT_ADC_Pin;
 800f35c:	2308      	movs	r3, #8
 800f35e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f360:	2303      	movs	r3, #3
 800f362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f364:	2300      	movs	r3, #0
 800f366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AMBIENT_ADC_GPIO_Port, &GPIO_InitStruct);
 800f368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f36c:	4619      	mov	r1, r3
 800f36e:	4805      	ldr	r0, [pc, #20]	; (800f384 <HAL_ADC_MspInit+0x154>)
 800f370:	f002 fab8 	bl	80118e4 <HAL_GPIO_Init>
}
 800f374:	bf00      	nop
 800f376:	3738      	adds	r7, #56	; 0x38
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	40012000 	.word	0x40012000
 800f380:	40023800 	.word	0x40023800
 800f384:	40020000 	.word	0x40020000
 800f388:	40012100 	.word	0x40012100
 800f38c:	40012200 	.word	0x40012200
 800f390:	40021400 	.word	0x40021400

0800f394 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a0a      	ldr	r2, [pc, #40]	; (800f3cc <HAL_CRC_MspInit+0x38>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d10b      	bne.n	800f3be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f3a6:	4b0a      	ldr	r3, [pc, #40]	; (800f3d0 <HAL_CRC_MspInit+0x3c>)
 800f3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3aa:	4a09      	ldr	r2, [pc, #36]	; (800f3d0 <HAL_CRC_MspInit+0x3c>)
 800f3ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f3b0:	6313      	str	r3, [r2, #48]	; 0x30
 800f3b2:	4b07      	ldr	r3, [pc, #28]	; (800f3d0 <HAL_CRC_MspInit+0x3c>)
 800f3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800f3be:	bf00      	nop
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	40023000 	.word	0x40023000
 800f3d0:	40023800 	.word	0x40023800

0800f3d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b0b0      	sub	sp, #192	; 0xc0
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	605a      	str	r2, [r3, #4]
 800f3e6:	609a      	str	r2, [r3, #8]
 800f3e8:	60da      	str	r2, [r3, #12]
 800f3ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f3ec:	f107 031c 	add.w	r3, r7, #28
 800f3f0:	2290      	movs	r2, #144	; 0x90
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f00b ff0c 	bl	801b212 <memset>
  if(hi2c->Instance==I2C1)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4a55      	ldr	r2, [pc, #340]	; (800f554 <HAL_I2C_MspInit+0x180>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d13e      	bne.n	800f482 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800f404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f408:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800f40a:	2300      	movs	r3, #0
 800f40c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f410:	f107 031c 	add.w	r3, r7, #28
 800f414:	4618      	mov	r0, r3
 800f416:	f004 f875 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800f420:	f7ff fed8 	bl	800f1d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f424:	4b4c      	ldr	r3, [pc, #304]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f428:	4a4b      	ldr	r2, [pc, #300]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f42a:	f043 0302 	orr.w	r3, r3, #2
 800f42e:	6313      	str	r3, [r2, #48]	; 0x30
 800f430:	4b49      	ldr	r3, [pc, #292]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f434:	f003 0302 	and.w	r3, r3, #2
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f43c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f444:	2312      	movs	r3, #18
 800f446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f44a:	2301      	movs	r3, #1
 800f44c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f450:	2303      	movs	r3, #3
 800f452:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f456:	2304      	movs	r3, #4
 800f458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f45c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f460:	4619      	mov	r1, r3
 800f462:	483e      	ldr	r0, [pc, #248]	; (800f55c <HAL_I2C_MspInit+0x188>)
 800f464:	f002 fa3e 	bl	80118e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f468:	4b3b      	ldr	r3, [pc, #236]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46c:	4a3a      	ldr	r2, [pc, #232]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f46e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f472:	6413      	str	r3, [r2, #64]	; 0x40
 800f474:	4b38      	ldr	r3, [pc, #224]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f47c:	617b      	str	r3, [r7, #20]
 800f47e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800f480:	e063      	b.n	800f54a <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C2)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a36      	ldr	r2, [pc, #216]	; (800f560 <HAL_I2C_MspInit+0x18c>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d15e      	bne.n	800f54a <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800f48c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f490:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800f492:	2300      	movs	r3, #0
 800f494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f498:	f107 031c 	add.w	r3, r7, #28
 800f49c:	4618      	mov	r0, r3
 800f49e:	f004 f831 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d001      	beq.n	800f4ac <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 800f4a8:	f7ff fe94 	bl	800f1d4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800f4ac:	4b2a      	ldr	r3, [pc, #168]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b0:	4a29      	ldr	r2, [pc, #164]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f4b2:	f043 0320 	orr.w	r3, r3, #32
 800f4b6:	6313      	str	r3, [r2, #48]	; 0x30
 800f4b8:	4b27      	ldr	r3, [pc, #156]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4bc:	f003 0320 	and.w	r3, r3, #32
 800f4c0:	613b      	str	r3, [r7, #16]
 800f4c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f4c4:	4b24      	ldr	r3, [pc, #144]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4c8:	4a23      	ldr	r2, [pc, #140]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f4ca:	f043 0302 	orr.w	r3, r3, #2
 800f4ce:	6313      	str	r3, [r2, #48]	; 0x30
 800f4d0:	4b21      	ldr	r3, [pc, #132]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d4:	f003 0302 	and.w	r3, r3, #2
 800f4d8:	60fb      	str	r3, [r7, #12]
 800f4da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin;
 800f4dc:	2302      	movs	r3, #2
 800f4de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f4e2:	2312      	movs	r3, #18
 800f4e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4ee:	2303      	movs	r3, #3
 800f4f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f4f4:	2304      	movs	r3, #4
 800f4f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 800f4fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f4fe:	4619      	mov	r1, r3
 800f500:	4818      	ldr	r0, [pc, #96]	; (800f564 <HAL_I2C_MspInit+0x190>)
 800f502:	f002 f9ef 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SDA_Pin;
 800f506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f50a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f50e:	2312      	movs	r3, #18
 800f510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f514:	2300      	movs	r3, #0
 800f516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f51a:	2303      	movs	r3, #3
 800f51c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800f520:	2304      	movs	r3, #4
 800f522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 800f526:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f52a:	4619      	mov	r1, r3
 800f52c:	480b      	ldr	r0, [pc, #44]	; (800f55c <HAL_I2C_MspInit+0x188>)
 800f52e:	f002 f9d9 	bl	80118e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800f532:	4b09      	ldr	r3, [pc, #36]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f536:	4a08      	ldr	r2, [pc, #32]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f53c:	6413      	str	r3, [r2, #64]	; 0x40
 800f53e:	4b06      	ldr	r3, [pc, #24]	; (800f558 <HAL_I2C_MspInit+0x184>)
 800f540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f546:	60bb      	str	r3, [r7, #8]
 800f548:	68bb      	ldr	r3, [r7, #8]
}
 800f54a:	bf00      	nop
 800f54c:	37c0      	adds	r7, #192	; 0xc0
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	40005400 	.word	0x40005400
 800f558:	40023800 	.word	0x40023800
 800f55c:	40020400 	.word	0x40020400
 800f560:	40005800 	.word	0x40005800
 800f564:	40021400 	.word	0x40021400

0800f568 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b0a6      	sub	sp, #152	; 0x98
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f570:	f107 0308 	add.w	r3, r7, #8
 800f574:	2290      	movs	r2, #144	; 0x90
 800f576:	2100      	movs	r1, #0
 800f578:	4618      	mov	r0, r3
 800f57a:	f00b fe4a 	bl	801b212 <memset>
  if(hrtc->Instance==RTC)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a0e      	ldr	r2, [pc, #56]	; (800f5bc <HAL_RTC_MspInit+0x54>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d114      	bne.n	800f5b2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800f588:	2320      	movs	r3, #32
 800f58a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800f58c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f590:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f592:	f107 0308 	add.w	r3, r7, #8
 800f596:	4618      	mov	r0, r3
 800f598:	f003 ffb4 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800f5a2:	f7ff fe17 	bl	800f1d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800f5a6:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <HAL_RTC_MspInit+0x58>)
 800f5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5aa:	4a05      	ldr	r2, [pc, #20]	; (800f5c0 <HAL_RTC_MspInit+0x58>)
 800f5ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800f5b2:	bf00      	nop
 800f5b4:	3798      	adds	r7, #152	; 0x98
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	40002800 	.word	0x40002800
 800f5c0:	40023800 	.word	0x40023800

0800f5c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b08e      	sub	sp, #56	; 0x38
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f5cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	605a      	str	r2, [r3, #4]
 800f5d6:	609a      	str	r2, [r3, #8]
 800f5d8:	60da      	str	r2, [r3, #12]
 800f5da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a5b      	ldr	r2, [pc, #364]	; (800f750 <HAL_SPI_MspInit+0x18c>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d128      	bne.n	800f638 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f5e6:	4b5b      	ldr	r3, [pc, #364]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5ea:	4a5a      	ldr	r2, [pc, #360]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f5ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f5f0:	6453      	str	r3, [r2, #68]	; 0x44
 800f5f2:	4b58      	ldr	r3, [pc, #352]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f5fa:	623b      	str	r3, [r7, #32]
 800f5fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5fe:	4b55      	ldr	r3, [pc, #340]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f602:	4a54      	ldr	r2, [pc, #336]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f604:	f043 0301 	orr.w	r3, r3, #1
 800f608:	6313      	str	r3, [r2, #48]	; 0x30
 800f60a:	4b52      	ldr	r3, [pc, #328]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f60e:	f003 0301 	and.w	r3, r3, #1
 800f612:	61fb      	str	r3, [r7, #28]
 800f614:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 800f616:	23e0      	movs	r3, #224	; 0xe0
 800f618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f61a:	2302      	movs	r3, #2
 800f61c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f61e:	2300      	movs	r3, #0
 800f620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f622:	2303      	movs	r3, #3
 800f624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f626:	2305      	movs	r3, #5
 800f628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f62a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f62e:	4619      	mov	r1, r3
 800f630:	4849      	ldr	r0, [pc, #292]	; (800f758 <HAL_SPI_MspInit+0x194>)
 800f632:	f002 f957 	bl	80118e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800f636:	e087      	b.n	800f748 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI3)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a47      	ldr	r2, [pc, #284]	; (800f75c <HAL_SPI_MspInit+0x198>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d155      	bne.n	800f6ee <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f642:	4b44      	ldr	r3, [pc, #272]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f646:	4a43      	ldr	r2, [pc, #268]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f64c:	6413      	str	r3, [r2, #64]	; 0x40
 800f64e:	4b41      	ldr	r3, [pc, #260]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f656:	61bb      	str	r3, [r7, #24]
 800f658:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f65a:	4b3e      	ldr	r3, [pc, #248]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f65e:	4a3d      	ldr	r2, [pc, #244]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f660:	f043 0302 	orr.w	r3, r3, #2
 800f664:	6313      	str	r3, [r2, #48]	; 0x30
 800f666:	4b3b      	ldr	r3, [pc, #236]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f66a:	f003 0302 	and.w	r3, r3, #2
 800f66e:	617b      	str	r3, [r7, #20]
 800f670:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f672:	4b38      	ldr	r3, [pc, #224]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f676:	4a37      	ldr	r2, [pc, #220]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f678:	f043 0304 	orr.w	r3, r3, #4
 800f67c:	6313      	str	r3, [r2, #48]	; 0x30
 800f67e:	4b35      	ldr	r3, [pc, #212]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f682:	f003 0304 	and.w	r3, r3, #4
 800f686:	613b      	str	r3, [r7, #16]
 800f688:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LORA_MOSI_Pin;
 800f68a:	2304      	movs	r3, #4
 800f68c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f68e:	2302      	movs	r3, #2
 800f690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f692:	2300      	movs	r3, #0
 800f694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f696:	2303      	movs	r3, #3
 800f698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800f69a:	2307      	movs	r3, #7
 800f69c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LORA_MOSI_GPIO_Port, &GPIO_InitStruct);
 800f69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	482e      	ldr	r0, [pc, #184]	; (800f760 <HAL_SPI_MspInit+0x19c>)
 800f6a6:	f002 f91d 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LORA_MISO_Pin;
 800f6aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f6bc:	2306      	movs	r3, #6
 800f6be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LORA_MISO_GPIO_Port, &GPIO_InitStruct);
 800f6c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	4827      	ldr	r0, [pc, #156]	; (800f764 <HAL_SPI_MspInit+0x1a0>)
 800f6c8:	f002 f90c 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 800f6cc:	2308      	movs	r3, #8
 800f6ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f6dc:	2306      	movs	r3, #6
 800f6de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 800f6e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	481e      	ldr	r0, [pc, #120]	; (800f760 <HAL_SPI_MspInit+0x19c>)
 800f6e8:	f002 f8fc 	bl	80118e4 <HAL_GPIO_Init>
}
 800f6ec:	e02c      	b.n	800f748 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI4)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a1d      	ldr	r2, [pc, #116]	; (800f768 <HAL_SPI_MspInit+0x1a4>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d127      	bne.n	800f748 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800f6f8:	4b16      	ldr	r3, [pc, #88]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fc:	4a15      	ldr	r2, [pc, #84]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f6fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f702:	6453      	str	r3, [r2, #68]	; 0x44
 800f704:	4b13      	ldr	r3, [pc, #76]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800f710:	4b10      	ldr	r3, [pc, #64]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f714:	4a0f      	ldr	r2, [pc, #60]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f716:	f043 0310 	orr.w	r3, r3, #16
 800f71a:	6313      	str	r3, [r2, #48]	; 0x30
 800f71c:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <HAL_SPI_MspInit+0x190>)
 800f71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f720:	f003 0310 	and.w	r3, r3, #16
 800f724:	60bb      	str	r3, [r7, #8]
 800f726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CURRENT_SCK_Pin|CURRENT_MISO_Pin|CURRENT_MOSI_Pin;
 800f728:	2364      	movs	r3, #100	; 0x64
 800f72a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f72c:	2302      	movs	r3, #2
 800f72e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f730:	2300      	movs	r3, #0
 800f732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f734:	2303      	movs	r3, #3
 800f736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800f738:	2305      	movs	r3, #5
 800f73a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f73c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f740:	4619      	mov	r1, r3
 800f742:	480a      	ldr	r0, [pc, #40]	; (800f76c <HAL_SPI_MspInit+0x1a8>)
 800f744:	f002 f8ce 	bl	80118e4 <HAL_GPIO_Init>
}
 800f748:	bf00      	nop
 800f74a:	3738      	adds	r7, #56	; 0x38
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	40013000 	.word	0x40013000
 800f754:	40023800 	.word	0x40023800
 800f758:	40020000 	.word	0x40020000
 800f75c:	40003c00 	.word	0x40003c00
 800f760:	40020400 	.word	0x40020400
 800f764:	40020800 	.word	0x40020800
 800f768:	40013400 	.word	0x40013400
 800f76c:	40021000 	.word	0x40021000

0800f770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f770:	b480      	push	{r7}
 800f772:	b085      	sub	sp, #20
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a0a      	ldr	r2, [pc, #40]	; (800f7a8 <HAL_TIM_Base_MspInit+0x38>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d10b      	bne.n	800f79a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f782:	4b0a      	ldr	r3, [pc, #40]	; (800f7ac <HAL_TIM_Base_MspInit+0x3c>)
 800f784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f786:	4a09      	ldr	r2, [pc, #36]	; (800f7ac <HAL_TIM_Base_MspInit+0x3c>)
 800f788:	f043 0304 	orr.w	r3, r3, #4
 800f78c:	6413      	str	r3, [r2, #64]	; 0x40
 800f78e:	4b07      	ldr	r3, [pc, #28]	; (800f7ac <HAL_TIM_Base_MspInit+0x3c>)
 800f790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f792:	f003 0304 	and.w	r3, r3, #4
 800f796:	60fb      	str	r3, [r7, #12]
 800f798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800f79a:	bf00      	nop
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	40000800 	.word	0x40000800
 800f7ac:	40023800 	.word	0x40023800

0800f7b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b0ba      	sub	sp, #232	; 0xe8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f7bc:	2200      	movs	r2, #0
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	605a      	str	r2, [r3, #4]
 800f7c2:	609a      	str	r2, [r3, #8]
 800f7c4:	60da      	str	r2, [r3, #12]
 800f7c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f7c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f7cc:	2290      	movs	r2, #144	; 0x90
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f00b fd1e 	bl	801b212 <memset>
  if(huart->Instance==UART4)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4aa6      	ldr	r2, [pc, #664]	; (800fa74 <HAL_UART_MspInit+0x2c4>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	f040 8096 	bne.w	800f90e <HAL_UART_MspInit+0x15e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800f7e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7e6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f7ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f003 fe86 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 800f7fe:	f7ff fce9 	bl	800f1d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800f802:	4b9d      	ldr	r3, [pc, #628]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f806:	4a9c      	ldr	r2, [pc, #624]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f80c:	6413      	str	r3, [r2, #64]	; 0x40
 800f80e:	4b9a      	ldr	r3, [pc, #616]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f816:	643b      	str	r3, [r7, #64]	; 0x40
 800f818:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f81a:	4b97      	ldr	r3, [pc, #604]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f81e:	4a96      	ldr	r2, [pc, #600]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f820:	f043 0301 	orr.w	r3, r3, #1
 800f824:	6313      	str	r3, [r2, #48]	; 0x30
 800f826:	4b94      	ldr	r3, [pc, #592]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f832:	4b91      	ldr	r3, [pc, #580]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f836:	4a90      	ldr	r2, [pc, #576]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f838:	f043 0308 	orr.w	r3, r3, #8
 800f83c:	6313      	str	r3, [r2, #48]	; 0x30
 800f83e:	4b8e      	ldr	r3, [pc, #568]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f842:	f003 0308 	and.w	r3, r3, #8
 800f846:	63bb      	str	r3, [r7, #56]	; 0x38
 800f848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin;
 800f84a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f84e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f852:	2302      	movs	r3, #2
 800f854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f858:	2300      	movs	r3, #0
 800f85a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f85e:	2303      	movs	r3, #3
 800f860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800f864:	2306      	movs	r3, #6
 800f866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(ESP_TX_GPIO_Port, &GPIO_InitStruct);
 800f86a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f86e:	4619      	mov	r1, r3
 800f870:	4882      	ldr	r0, [pc, #520]	; (800fa7c <HAL_UART_MspInit+0x2cc>)
 800f872:	f002 f837 	bl	80118e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_RX_Pin;
 800f876:	2302      	movs	r3, #2
 800f878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f87c:	2302      	movs	r3, #2
 800f87e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f882:	2302      	movs	r3, #2
 800f884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f888:	2303      	movs	r3, #3
 800f88a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800f88e:	2308      	movs	r3, #8
 800f890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(ESP_RX_GPIO_Port, &GPIO_InitStruct);
 800f894:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f898:	4619      	mov	r1, r3
 800f89a:	4879      	ldr	r0, [pc, #484]	; (800fa80 <HAL_UART_MspInit+0x2d0>)
 800f89c:	f002 f822 	bl	80118e4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800f8a0:	4b78      	ldr	r3, [pc, #480]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8a2:	4a79      	ldr	r2, [pc, #484]	; (800fa88 <HAL_UART_MspInit+0x2d8>)
 800f8a4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800f8a6:	4b77      	ldr	r3, [pc, #476]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f8ac:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f8ae:	4b75      	ldr	r3, [pc, #468]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f8b4:	4b73      	ldr	r3, [pc, #460]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f8ba:	4b72      	ldr	r3, [pc, #456]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f8c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f8c2:	4b70      	ldr	r3, [pc, #448]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f8c8:	4b6e      	ldr	r3, [pc, #440]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800f8ce:	4b6d      	ldr	r3, [pc, #436]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f8d4:	4b6b      	ldr	r3, [pc, #428]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f8da:	4b6a      	ldr	r3, [pc, #424]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800f8e0:	4868      	ldr	r0, [pc, #416]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8e2:	f001 fbf5 	bl	80110d0 <HAL_DMA_Init>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 800f8ec:	f7ff fc72 	bl	800f1d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a64      	ldr	r2, [pc, #400]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8f4:	675a      	str	r2, [r3, #116]	; 0x74
 800f8f6:	4a63      	ldr	r2, [pc, #396]	; (800fa84 <HAL_UART_MspInit+0x2d4>)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	2105      	movs	r1, #5
 800f900:	2034      	movs	r0, #52	; 0x34
 800f902:	f001 f9bd 	bl	8010c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800f906:	2034      	movs	r0, #52	; 0x34
 800f908:	f001 f9d6 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800f90c:	e27c      	b.n	800fe08 <HAL_UART_MspInit+0x658>
  else if(huart->Instance==UART5)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a5e      	ldr	r2, [pc, #376]	; (800fa8c <HAL_UART_MspInit+0x2dc>)
 800f914:	4293      	cmp	r3, r2
 800f916:	f040 80c1 	bne.w	800fa9c <HAL_UART_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800f91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f91e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800f920:	2300      	movs	r3, #0
 800f922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f926:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f92a:	4618      	mov	r0, r3
 800f92c:	f003 fdea 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <HAL_UART_MspInit+0x18a>
      Error_Handler();
 800f936:	f7ff fc4d 	bl	800f1d4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800f93a:	4b4f      	ldr	r3, [pc, #316]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93e:	4a4e      	ldr	r2, [pc, #312]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f944:	6413      	str	r3, [r2, #64]	; 0x40
 800f946:	4b4c      	ldr	r3, [pc, #304]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f94e:	637b      	str	r3, [r7, #52]	; 0x34
 800f950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f952:	4b49      	ldr	r3, [pc, #292]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f956:	4a48      	ldr	r2, [pc, #288]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f958:	f043 0304 	orr.w	r3, r3, #4
 800f95c:	6313      	str	r3, [r2, #48]	; 0x30
 800f95e:	4b46      	ldr	r3, [pc, #280]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f962:	f003 0304 	and.w	r3, r3, #4
 800f966:	633b      	str	r3, [r7, #48]	; 0x30
 800f968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f96a:	4b43      	ldr	r3, [pc, #268]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96e:	4a42      	ldr	r2, [pc, #264]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f970:	f043 0308 	orr.w	r3, r3, #8
 800f974:	6313      	str	r3, [r2, #48]	; 0x30
 800f976:	4b40      	ldr	r3, [pc, #256]	; (800fa78 <HAL_UART_MspInit+0x2c8>)
 800f978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f97a:	f003 0308 	and.w	r3, r3, #8
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = SLAVE_DE_Pin;
 800f982:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f98a:	2302      	movs	r3, #2
 800f98c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f990:	2300      	movs	r3, #0
 800f992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f996:	2303      	movs	r3, #3
 800f998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 800f99c:	2307      	movs	r3, #7
 800f99e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SLAVE_DE_GPIO_Port, &GPIO_InitStruct);
 800f9a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	4839      	ldr	r0, [pc, #228]	; (800fa90 <HAL_UART_MspInit+0x2e0>)
 800f9aa:	f001 ff9b 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SLAVE_TX_Pin;
 800f9ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9b6:	2302      	movs	r3, #2
 800f9b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9c2:	2303      	movs	r3, #3
 800f9c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800f9c8:	2308      	movs	r3, #8
 800f9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SLAVE_TX_GPIO_Port, &GPIO_InitStruct);
 800f9ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	482e      	ldr	r0, [pc, #184]	; (800fa90 <HAL_UART_MspInit+0x2e0>)
 800f9d6:	f001 ff85 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SLAVE_RX_Pin;
 800f9da:	2304      	movs	r3, #4
 800f9dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800f9f2:	2308      	movs	r3, #8
 800f9f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SLAVE_RX_GPIO_Port, &GPIO_InitStruct);
 800f9f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	4820      	ldr	r0, [pc, #128]	; (800fa80 <HAL_UART_MspInit+0x2d0>)
 800fa00:	f001 ff70 	bl	80118e4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800fa04:	4b23      	ldr	r3, [pc, #140]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa06:	4a24      	ldr	r2, [pc, #144]	; (800fa98 <HAL_UART_MspInit+0x2e8>)
 800fa08:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800fa0a:	4b22      	ldr	r3, [pc, #136]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fa10:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fa12:	4b20      	ldr	r3, [pc, #128]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fa18:	4b1e      	ldr	r3, [pc, #120]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800fa1e:	4b1d      	ldr	r3, [pc, #116]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa24:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fa26:	4b1b      	ldr	r3, [pc, #108]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fa2c:	4b19      	ldr	r3, [pc, #100]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800fa32:	4b18      	ldr	r3, [pc, #96]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800fa38:	4b16      	ldr	r3, [pc, #88]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fa3e:	4b15      	ldr	r3, [pc, #84]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800fa44:	4813      	ldr	r0, [pc, #76]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa46:	f001 fb43 	bl	80110d0 <HAL_DMA_Init>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 800fa50:	f7ff fbc0 	bl	800f1d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a0f      	ldr	r2, [pc, #60]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa58:	675a      	str	r2, [r3, #116]	; 0x74
 800fa5a:	4a0e      	ldr	r2, [pc, #56]	; (800fa94 <HAL_UART_MspInit+0x2e4>)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800fa60:	2200      	movs	r2, #0
 800fa62:	2105      	movs	r1, #5
 800fa64:	2035      	movs	r0, #53	; 0x35
 800fa66:	f001 f90b 	bl	8010c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800fa6a:	2035      	movs	r0, #53	; 0x35
 800fa6c:	f001 f924 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
}
 800fa70:	e1ca      	b.n	800fe08 <HAL_UART_MspInit+0x658>
 800fa72:	bf00      	nop
 800fa74:	40004c00 	.word	0x40004c00
 800fa78:	40023800 	.word	0x40023800
 800fa7c:	40020000 	.word	0x40020000
 800fa80:	40020c00 	.word	0x40020c00
 800fa84:	20001c34 	.word	0x20001c34
 800fa88:	40026040 	.word	0x40026040
 800fa8c:	40005000 	.word	0x40005000
 800fa90:	40020800 	.word	0x40020800
 800fa94:	20001c94 	.word	0x20001c94
 800fa98:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a79      	ldr	r2, [pc, #484]	; (800fc88 <HAL_UART_MspInit+0x4d8>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	f040 80ac 	bne.w	800fc00 <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800faa8:	2340      	movs	r3, #64	; 0x40
 800faaa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800faac:	2300      	movs	r3, #0
 800faae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fab6:	4618      	mov	r0, r3
 800fab8:	f003 fd24 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <HAL_UART_MspInit+0x316>
      Error_Handler();
 800fac2:	f7ff fb87 	bl	800f1d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800fac6:	4b71      	ldr	r3, [pc, #452]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faca:	4a70      	ldr	r2, [pc, #448]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800facc:	f043 0310 	orr.w	r3, r3, #16
 800fad0:	6453      	str	r3, [r2, #68]	; 0x44
 800fad2:	4b6e      	ldr	r3, [pc, #440]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad6:	f003 0310 	and.w	r3, r3, #16
 800fada:	62bb      	str	r3, [r7, #40]	; 0x28
 800fadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fade:	4b6b      	ldr	r3, [pc, #428]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae2:	4a6a      	ldr	r2, [pc, #424]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fae4:	f043 0302 	orr.w	r3, r3, #2
 800fae8:	6313      	str	r3, [r2, #48]	; 0x30
 800faea:	4b68      	ldr	r3, [pc, #416]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800faec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faee:	f003 0302 	and.w	r3, r3, #2
 800faf2:	627b      	str	r3, [r7, #36]	; 0x24
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800faf6:	4b65      	ldr	r3, [pc, #404]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800faf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fafa:	4a64      	ldr	r2, [pc, #400]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fafc:	f043 0301 	orr.w	r3, r3, #1
 800fb00:	6313      	str	r3, [r2, #48]	; 0x30
 800fb02:	4b62      	ldr	r3, [pc, #392]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	623b      	str	r3, [r7, #32]
 800fb0c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SDA_RX_Pin;
 800fb0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb16:	2302      	movs	r3, #2
 800fb18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fb1c:	2302      	movs	r3, #2
 800fb1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb22:	2303      	movs	r3, #3
 800fb24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800fb28:	2304      	movs	r3, #4
 800fb2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SDA_RX_GPIO_Port, &GPIO_InitStruct);
 800fb2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fb32:	4619      	mov	r1, r3
 800fb34:	4856      	ldr	r0, [pc, #344]	; (800fc90 <HAL_UART_MspInit+0x4e0>)
 800fb36:	f001 fed5 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_DE_Pin;
 800fb3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb42:	2302      	movs	r3, #2
 800fb44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800fb54:	2307      	movs	r3, #7
 800fb56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SDA_DE_GPIO_Port, &GPIO_InitStruct);
 800fb5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fb5e:	4619      	mov	r1, r3
 800fb60:	484c      	ldr	r0, [pc, #304]	; (800fc94 <HAL_UART_MspInit+0x4e4>)
 800fb62:	f001 febf 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_TX_Pin;
 800fb66:	2340      	movs	r3, #64	; 0x40
 800fb68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb6c:	2302      	movs	r3, #2
 800fb6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb72:	2300      	movs	r3, #0
 800fb74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb78:	2303      	movs	r3, #3
 800fb7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800fb7e:	2307      	movs	r3, #7
 800fb80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SDA_TX_GPIO_Port, &GPIO_InitStruct);
 800fb84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4841      	ldr	r0, [pc, #260]	; (800fc90 <HAL_UART_MspInit+0x4e0>)
 800fb8c:	f001 feaa 	bl	80118e4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800fb90:	4b41      	ldr	r3, [pc, #260]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fb92:	4a42      	ldr	r2, [pc, #264]	; (800fc9c <HAL_UART_MspInit+0x4ec>)
 800fb94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800fb96:	4b40      	ldr	r3, [pc, #256]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fb98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fb9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fb9e:	4b3e      	ldr	r3, [pc, #248]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fba4:	4b3c      	ldr	r3, [pc, #240]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800fbaa:	4b3b      	ldr	r3, [pc, #236]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fbb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fbb2:	4b39      	ldr	r3, [pc, #228]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fbb8:	4b37      	ldr	r3, [pc, #220]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800fbbe:	4b36      	ldr	r3, [pc, #216]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800fbc4:	4b34      	ldr	r3, [pc, #208]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fbca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fbcc:	4b32      	ldr	r3, [pc, #200]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800fbd2:	4831      	ldr	r0, [pc, #196]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbd4:	f001 fa7c 	bl	80110d0 <HAL_DMA_Init>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <HAL_UART_MspInit+0x432>
      Error_Handler();
 800fbde:	f7ff faf9 	bl	800f1d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a2c      	ldr	r2, [pc, #176]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbe6:	675a      	str	r2, [r3, #116]	; 0x74
 800fbe8:	4a2b      	ldr	r2, [pc, #172]	; (800fc98 <HAL_UART_MspInit+0x4e8>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800fbee:	2200      	movs	r2, #0
 800fbf0:	2105      	movs	r1, #5
 800fbf2:	2025      	movs	r0, #37	; 0x25
 800fbf4:	f001 f844 	bl	8010c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800fbf8:	2025      	movs	r0, #37	; 0x25
 800fbfa:	f001 f85d 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
}
 800fbfe:	e103      	b.n	800fe08 <HAL_UART_MspInit+0x658>
  else if(huart->Instance==USART3)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a26      	ldr	r2, [pc, #152]	; (800fca0 <HAL_UART_MspInit+0x4f0>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d14e      	bne.n	800fca8 <HAL_UART_MspInit+0x4f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800fc0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc0e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800fc10:	2300      	movs	r3, #0
 800fc12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fc16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f003 fc72 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <HAL_UART_MspInit+0x47a>
      Error_Handler();
 800fc26:	f7ff fad5 	bl	800f1d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800fc2a:	4b18      	ldr	r3, [pc, #96]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc2e:	4a17      	ldr	r2, [pc, #92]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fc30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fc34:	6413      	str	r3, [r2, #64]	; 0x40
 800fc36:	4b15      	ldr	r3, [pc, #84]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc3e:	61fb      	str	r3, [r7, #28]
 800fc40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800fc42:	4b12      	ldr	r3, [pc, #72]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc46:	4a11      	ldr	r2, [pc, #68]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fc48:	f043 0308 	orr.w	r3, r3, #8
 800fc4c:	6313      	str	r3, [r2, #48]	; 0x30
 800fc4e:	4b0f      	ldr	r3, [pc, #60]	; (800fc8c <HAL_UART_MspInit+0x4dc>)
 800fc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc52:	f003 0308 	and.w	r3, r3, #8
 800fc56:	61bb      	str	r3, [r7, #24]
 800fc58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800fc5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fc5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc62:	2302      	movs	r3, #2
 800fc64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc6e:	2303      	movs	r3, #3
 800fc70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800fc74:	2307      	movs	r3, #7
 800fc76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fc7a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fc7e:	4619      	mov	r1, r3
 800fc80:	4808      	ldr	r0, [pc, #32]	; (800fca4 <HAL_UART_MspInit+0x4f4>)
 800fc82:	f001 fe2f 	bl	80118e4 <HAL_GPIO_Init>
}
 800fc86:	e0bf      	b.n	800fe08 <HAL_UART_MspInit+0x658>
 800fc88:	40011000 	.word	0x40011000
 800fc8c:	40023800 	.word	0x40023800
 800fc90:	40020400 	.word	0x40020400
 800fc94:	40020000 	.word	0x40020000
 800fc98:	20001cf4 	.word	0x20001cf4
 800fc9c:	40026440 	.word	0x40026440
 800fca0:	40004800 	.word	0x40004800
 800fca4:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a58      	ldr	r2, [pc, #352]	; (800fe10 <HAL_UART_MspInit+0x660>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	f040 80aa 	bne.w	800fe08 <HAL_UART_MspInit+0x658>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800fcb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fcb8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fcc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f003 fc1d 	bl	8013504 <HAL_RCCEx_PeriphCLKConfig>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d001      	beq.n	800fcd4 <HAL_UART_MspInit+0x524>
      Error_Handler();
 800fcd0:	f7ff fa80 	bl	800f1d4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800fcd4:	4b4f      	ldr	r3, [pc, #316]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fcd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd8:	4a4e      	ldr	r2, [pc, #312]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fcda:	f043 0320 	orr.w	r3, r3, #32
 800fcde:	6453      	str	r3, [r2, #68]	; 0x44
 800fce0:	4b4c      	ldr	r3, [pc, #304]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fce4:	f003 0320 	and.w	r3, r3, #32
 800fce8:	617b      	str	r3, [r7, #20]
 800fcea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fcec:	4b49      	ldr	r3, [pc, #292]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fcee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcf0:	4a48      	ldr	r2, [pc, #288]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fcf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcf6:	6313      	str	r3, [r2, #48]	; 0x30
 800fcf8:	4b46      	ldr	r3, [pc, #280]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd00:	613b      	str	r3, [r7, #16]
 800fd02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fd04:	4b43      	ldr	r3, [pc, #268]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd08:	4a42      	ldr	r2, [pc, #264]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fd0a:	f043 0304 	orr.w	r3, r3, #4
 800fd0e:	6313      	str	r3, [r2, #48]	; 0x30
 800fd10:	4b40      	ldr	r3, [pc, #256]	; (800fe14 <HAL_UART_MspInit+0x664>)
 800fd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd14:	f003 0304 	and.w	r3, r3, #4
 800fd18:	60fb      	str	r3, [r7, #12]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MODEM_DE_Pin;
 800fd1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd24:	2302      	movs	r3, #2
 800fd26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd30:	2303      	movs	r3, #3
 800fd32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800fd36:	2308      	movs	r3, #8
 800fd38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(MODEM_DE_GPIO_Port, &GPIO_InitStruct);
 800fd3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fd40:	4619      	mov	r1, r3
 800fd42:	4835      	ldr	r0, [pc, #212]	; (800fe18 <HAL_UART_MspInit+0x668>)
 800fd44:	f001 fdce 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MODEM_TX_Pin;
 800fd48:	2340      	movs	r3, #64	; 0x40
 800fd4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd4e:	2302      	movs	r3, #2
 800fd50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd54:	2300      	movs	r3, #0
 800fd56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd5a:	2303      	movs	r3, #3
 800fd5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800fd60:	2308      	movs	r3, #8
 800fd62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(MODEM_TX_GPIO_Port, &GPIO_InitStruct);
 800fd66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	482b      	ldr	r0, [pc, #172]	; (800fe1c <HAL_UART_MspInit+0x66c>)
 800fd6e:	f001 fdb9 	bl	80118e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MODEM_RX_Pin;
 800fd72:	2380      	movs	r3, #128	; 0x80
 800fd74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd78:	2302      	movs	r3, #2
 800fd7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd7e:	2302      	movs	r3, #2
 800fd80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd84:	2303      	movs	r3, #3
 800fd86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800fd8a:	2308      	movs	r3, #8
 800fd8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(MODEM_RX_GPIO_Port, &GPIO_InitStruct);
 800fd90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fd94:	4619      	mov	r1, r3
 800fd96:	4821      	ldr	r0, [pc, #132]	; (800fe1c <HAL_UART_MspInit+0x66c>)
 800fd98:	f001 fda4 	bl	80118e4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800fd9c:	4b20      	ldr	r3, [pc, #128]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fd9e:	4a21      	ldr	r2, [pc, #132]	; (800fe24 <HAL_UART_MspInit+0x674>)
 800fda0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800fda2:	4b1f      	ldr	r3, [pc, #124]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fda4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800fda8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fdaa:	4b1d      	ldr	r3, [pc, #116]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fdb0:	4b1b      	ldr	r3, [pc, #108]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800fdb6:	4b1a      	ldr	r3, [pc, #104]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fdbc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fdbe:	4b18      	ldr	r3, [pc, #96]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fdc4:	4b16      	ldr	r3, [pc, #88]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800fdca:	4b15      	ldr	r3, [pc, #84]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800fdd0:	4b13      	ldr	r3, [pc, #76]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fdd6:	4b12      	ldr	r3, [pc, #72]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800fddc:	4810      	ldr	r0, [pc, #64]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdde:	f001 f977 	bl	80110d0 <HAL_DMA_Init>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <HAL_UART_MspInit+0x63c>
      Error_Handler();
 800fde8:	f7ff f9f4 	bl	800f1d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	4a0c      	ldr	r2, [pc, #48]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdf0:	675a      	str	r2, [r3, #116]	; 0x74
 800fdf2:	4a0b      	ldr	r2, [pc, #44]	; (800fe20 <HAL_UART_MspInit+0x670>)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2105      	movs	r1, #5
 800fdfc:	2047      	movs	r0, #71	; 0x47
 800fdfe:	f000 ff3f 	bl	8010c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800fe02:	2047      	movs	r0, #71	; 0x47
 800fe04:	f000 ff58 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
}
 800fe08:	bf00      	nop
 800fe0a:	37e8      	adds	r7, #232	; 0xe8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	40011400 	.word	0x40011400
 800fe14:	40023800 	.word	0x40023800
 800fe18:	40021800 	.word	0x40021800
 800fe1c:	40020800 	.word	0x40020800
 800fe20:	20001d54 	.word	0x20001d54
 800fe24:	40026428 	.word	0x40026428

0800fe28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b08e      	sub	sp, #56	; 0x38
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800fe30:	2300      	movs	r3, #0
 800fe32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800fe34:	2300      	movs	r3, #0
 800fe36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800fe38:	4b33      	ldr	r3, [pc, #204]	; (800ff08 <HAL_InitTick+0xe0>)
 800fe3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe3c:	4a32      	ldr	r2, [pc, #200]	; (800ff08 <HAL_InitTick+0xe0>)
 800fe3e:	f043 0320 	orr.w	r3, r3, #32
 800fe42:	6413      	str	r3, [r2, #64]	; 0x40
 800fe44:	4b30      	ldr	r3, [pc, #192]	; (800ff08 <HAL_InitTick+0xe0>)
 800fe46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe48:	f003 0320 	and.w	r3, r3, #32
 800fe4c:	60fb      	str	r3, [r7, #12]
 800fe4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800fe50:	f107 0210 	add.w	r2, r7, #16
 800fe54:	f107 0314 	add.w	r3, r7, #20
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f003 fb20 	bl	80134a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800fe60:	6a3b      	ldr	r3, [r7, #32]
 800fe62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d103      	bne.n	800fe72 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800fe6a:	f003 faf1 	bl	8013450 <HAL_RCC_GetPCLK1Freq>
 800fe6e:	6378      	str	r0, [r7, #52]	; 0x34
 800fe70:	e004      	b.n	800fe7c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800fe72:	f003 faed 	bl	8013450 <HAL_RCC_GetPCLK1Freq>
 800fe76:	4603      	mov	r3, r0
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800fe7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe7e:	4a23      	ldr	r2, [pc, #140]	; (800ff0c <HAL_InitTick+0xe4>)
 800fe80:	fba2 2303 	umull	r2, r3, r2, r3
 800fe84:	0c9b      	lsrs	r3, r3, #18
 800fe86:	3b01      	subs	r3, #1
 800fe88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800fe8a:	4b21      	ldr	r3, [pc, #132]	; (800ff10 <HAL_InitTick+0xe8>)
 800fe8c:	4a21      	ldr	r2, [pc, #132]	; (800ff14 <HAL_InitTick+0xec>)
 800fe8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800fe90:	4b1f      	ldr	r3, [pc, #124]	; (800ff10 <HAL_InitTick+0xe8>)
 800fe92:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fe96:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800fe98:	4a1d      	ldr	r2, [pc, #116]	; (800ff10 <HAL_InitTick+0xe8>)
 800fe9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800fe9e:	4b1c      	ldr	r3, [pc, #112]	; (800ff10 <HAL_InitTick+0xe8>)
 800fea0:	2200      	movs	r2, #0
 800fea2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fea4:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <HAL_InitTick+0xe8>)
 800fea6:	2200      	movs	r2, #0
 800fea8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800feaa:	4b19      	ldr	r3, [pc, #100]	; (800ff10 <HAL_InitTick+0xe8>)
 800feac:	2200      	movs	r2, #0
 800feae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800feb0:	4817      	ldr	r0, [pc, #92]	; (800ff10 <HAL_InitTick+0xe8>)
 800feb2:	f005 f9bf 	bl	8015234 <HAL_TIM_Base_Init>
 800feb6:	4603      	mov	r3, r0
 800feb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800febc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d11b      	bne.n	800fefc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800fec4:	4812      	ldr	r0, [pc, #72]	; (800ff10 <HAL_InitTick+0xe8>)
 800fec6:	f005 faa5 	bl	8015414 <HAL_TIM_Base_Start_IT>
 800feca:	4603      	mov	r3, r0
 800fecc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800fed0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d111      	bne.n	800fefc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800fed8:	2037      	movs	r0, #55	; 0x37
 800feda:	f000 feed 	bl	8010cb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b0f      	cmp	r3, #15
 800fee2:	d808      	bhi.n	800fef6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800fee4:	2200      	movs	r2, #0
 800fee6:	6879      	ldr	r1, [r7, #4]
 800fee8:	2037      	movs	r0, #55	; 0x37
 800feea:	f000 fec9 	bl	8010c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800feee:	4a0a      	ldr	r2, [pc, #40]	; (800ff18 <HAL_InitTick+0xf0>)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	e002      	b.n	800fefc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800fef6:	2301      	movs	r3, #1
 800fef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800fefc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3738      	adds	r7, #56	; 0x38
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	40023800 	.word	0x40023800
 800ff0c:	431bde83 	.word	0x431bde83
 800ff10:	20002c68 	.word	0x20002c68
 800ff14:	40001400 	.word	0x40001400
 800ff18:	20000060 	.word	0x20000060

0800ff1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ff20:	e7fe      	b.n	800ff20 <NMI_Handler+0x4>
	...

0800ff24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 800ff28:	4814      	ldr	r0, [pc, #80]	; (800ff7c <HardFault_Handler+0x58>)
 800ff2a:	f002 fe05 	bl	8012b38 <HAL_IWDG_Refresh>
	SLAVE_Read_Data(STARTING_ADD_OF_ENGG_MODE,DATA_FROM_FLASH,200);
 800ff2e:	22c8      	movs	r2, #200	; 0xc8
 800ff30:	4913      	ldr	r1, [pc, #76]	; (800ff80 <HardFault_Handler+0x5c>)
 800ff32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ff36:	f7f0 fe96 	bl	8000c66 <SLAVE_Read_Data>
	HAL_IWDG_Refresh(&hiwdg);
 800ff3a:	4810      	ldr	r0, [pc, #64]	; (800ff7c <HardFault_Handler+0x58>)
 800ff3c:	f002 fdfc 	bl	8012b38 <HAL_IWDG_Refresh>
	if((DATA_FROM_FLASH[193]>=0)&&(DATA_FROM_FLASH[193]<=255))
	{
	DATA_FROM_FLASH[192] = 1;
 800ff40:	4b0f      	ldr	r3, [pc, #60]	; (800ff80 <HardFault_Handler+0x5c>)
 800ff42:	2201      	movs	r2, #1
 800ff44:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	DATA_FROM_FLASH[193] = DATA_FROM_FLASH[193] + 1;
 800ff48:	4b0d      	ldr	r3, [pc, #52]	; (800ff80 <HardFault_Handler+0x5c>)
 800ff4a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ff4e:	3301      	adds	r3, #1
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	4b0b      	ldr	r3, [pc, #44]	; (800ff80 <HardFault_Handler+0x5c>)
 800ff54:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	else
	{
		DATA_FROM_FLASH[192] = 1;
		DATA_FROM_FLASH[193] = 1;
	}
	HAL_IWDG_Refresh(&hiwdg);
 800ff58:	4808      	ldr	r0, [pc, #32]	; (800ff7c <HardFault_Handler+0x58>)
 800ff5a:	f002 fded 	bl	8012b38 <HAL_IWDG_Refresh>
	SLAVE_Erase_4K(STARTING_ADD_OF_ENGG_MODE);
 800ff5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ff62:	f7f0 fe09 	bl	8000b78 <SLAVE_Erase_4K>
	SLAVE_Write_Data(STARTING_ADD_OF_ENGG_MODE, (char*)DATA_FROM_FLASH,200);
 800ff66:	22c8      	movs	r2, #200	; 0xc8
 800ff68:	4905      	ldr	r1, [pc, #20]	; (800ff80 <HardFault_Handler+0x5c>)
 800ff6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ff6e:	f7f0 fe31 	bl	8000bd4 <SLAVE_Write_Data>
	HAL_IWDG_Refresh(&hiwdg);
 800ff72:	4802      	ldr	r0, [pc, #8]	; (800ff7c <HardFault_Handler+0x58>)
 800ff74:	f002 fde0 	bl	8012b38 <HAL_IWDG_Refresh>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ff78:	e7fe      	b.n	800ff78 <HardFault_Handler+0x54>
 800ff7a:	bf00      	nop
 800ff7c:	200017e4 	.word	0x200017e4
 800ff80:	20002cb4 	.word	0x20002cb4

0800ff84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ff88:	e7fe      	b.n	800ff88 <MemManage_Handler+0x4>

0800ff8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ff8e:	e7fe      	b.n	800ff8e <BusFault_Handler+0x4>

0800ff90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ff90:	b480      	push	{r7}
 800ff92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ff94:	e7fe      	b.n	800ff94 <UsageFault_Handler+0x4>

0800ff96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ff96:	b480      	push	{r7}
 800ff98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ff9a:	bf00      	nop
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr

0800ffa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800ffa8:	4802      	ldr	r0, [pc, #8]	; (800ffb4 <DMA1_Stream0_IRQHandler+0x10>)
 800ffaa:	f001 fa31 	bl	8011410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
// vTaskNotifyGiveFromISR(SLAVE_REC_MASHandle, pdFALSE);
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800ffae:	bf00      	nop
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	20001c94 	.word	0x20001c94

0800ffb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800ffbc:	4802      	ldr	r0, [pc, #8]	; (800ffc8 <DMA1_Stream2_IRQHandler+0x10>)
 800ffbe:	f001 fa27 	bl	8011410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
// vTaskNotifyGiveFromISR(WIFI_RECEIVEHandle, pdFALSE);
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800ffc2:	bf00      	nop
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20001c34 	.word	0x20001c34

0800ffcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ffd0:	4802      	ldr	r0, [pc, #8]	; (800ffdc <USART1_IRQHandler+0x10>)
 800ffd2:	f005 ffa5 	bl	8015f20 <HAL_UART_IRQHandler>
////   portYIELD_FROM_ISR(checkIfYieldRequired);
//
//	  vTaskNotifyGiveFromISR(SDA_RECEIVEHandle, pdFALSE);
//  }
  /* USER CODE END USART1_IRQn 1 */
}
 800ffd6:	bf00      	nop
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	20001a9c 	.word	0x20001a9c

0800ffe0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ffe4:	4802      	ldr	r0, [pc, #8]	; (800fff0 <UART4_IRQHandler+0x10>)
 800ffe6:	f005 ff9b 	bl	8015f20 <HAL_UART_IRQHandler>
////  checkIfYieldRequired = xTaskResumeFromISR(WIFI_RECEIVEHandle);
////    portYIELD_FROM_ISR(checkIfYieldRequired);
//	  vTaskNotifyGiveFromISR(WIFI_RECEIVEHandle, pdFALSE);
//  }
  /* USER CODE END UART4_IRQn 1 */
}
 800ffea:	bf00      	nop
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	2000198c 	.word	0x2000198c

0800fff4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800fff8:	4802      	ldr	r0, [pc, #8]	; (8010004 <UART5_IRQHandler+0x10>)
 800fffa:	f005 ff91 	bl	8015f20 <HAL_UART_IRQHandler>
////	    portYIELD_FROM_ISR(checkIfYieldRequired);
//	  vTaskNotifyGiveFromISR(SLAVE_REC_MASHandle, pdFALSE);
//  }

  /* USER CODE END UART5_IRQn 1 */
}
 800fffe:	bf00      	nop
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20001a14 	.word	0x20001a14

08010008 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801000c:	4802      	ldr	r0, [pc, #8]	; (8010018 <TIM7_IRQHandler+0x10>)
 801000e:	f005 fa79 	bl	8015504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8010012:	bf00      	nop
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	20002c68 	.word	0x20002c68

0801001c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8010020:	4802      	ldr	r0, [pc, #8]	; (801002c <DMA2_Stream1_IRQHandler+0x10>)
 8010022:	f001 f9f5 	bl	8011410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
 // vTaskNotifyGiveFromISR(RCU_RECEIVEHandle, pdFALSE);
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8010026:	bf00      	nop
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20001d54 	.word	0x20001d54

08010030 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8010034:	4802      	ldr	r0, [pc, #8]	; (8010040 <DMA2_Stream2_IRQHandler+0x10>)
 8010036:	f001 f9eb 	bl	8011410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
 // vTaskNotifyGiveFromISR(SDA_RECEIVEHandle, pdFALSE);
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 801003a:	bf00      	nop
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	20001cf4 	.word	0x20001cf4

08010044 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8010048:	4802      	ldr	r0, [pc, #8]	; (8010054 <USART6_IRQHandler+0x10>)
 801004a:	f005 ff69 	bl	8015f20 <HAL_UART_IRQHandler>
////  checkIfYieldRequired = xTaskResumeFromISR(RCU_RECEIVEHandle);
////    portYIELD_FROM_ISR(checkIfYieldRequired);
//	  vTaskNotifyGiveFromISR(RCU_RECEIVEHandle, pdFALSE);
//  }
  /* USER CODE END USART6_IRQn 1 */
}
 801004e:	bf00      	nop
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	20001bac 	.word	0x20001bac

08010058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010058:	b480      	push	{r7}
 801005a:	af00      	add	r7, sp, #0
	return 1;
 801005c:	2301      	movs	r3, #1
}
 801005e:	4618      	mov	r0, r3
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <_kill>:

int _kill(int pid, int sig)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8010072:	f00a ff9d 	bl	801afb0 <__errno>
 8010076:	4603      	mov	r3, r0
 8010078:	2216      	movs	r2, #22
 801007a:	601a      	str	r2, [r3, #0]
	return -1;
 801007c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010080:	4618      	mov	r0, r3
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <_exit>:

void _exit (int status)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8010090:	f04f 31ff 	mov.w	r1, #4294967295
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7ff ffe7 	bl	8010068 <_kill>
	while (1) {}		/* Make sure we hang here */
 801009a:	e7fe      	b.n	801009a <_exit+0x12>

0801009c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80100a8:	2300      	movs	r3, #0
 80100aa:	617b      	str	r3, [r7, #20]
 80100ac:	e00a      	b.n	80100c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80100ae:	f3af 8000 	nop.w
 80100b2:	4601      	mov	r1, r0
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	1c5a      	adds	r2, r3, #1
 80100b8:	60ba      	str	r2, [r7, #8]
 80100ba:	b2ca      	uxtb	r2, r1
 80100bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	3301      	adds	r3, #1
 80100c2:	617b      	str	r3, [r7, #20]
 80100c4:	697a      	ldr	r2, [r7, #20]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	dbf0      	blt.n	80100ae <_read+0x12>
	}

return len;
 80100cc:	687b      	ldr	r3, [r7, #4]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3718      	adds	r7, #24
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b086      	sub	sp, #24
 80100da:	af00      	add	r7, sp, #0
 80100dc:	60f8      	str	r0, [r7, #12]
 80100de:	60b9      	str	r1, [r7, #8]
 80100e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80100e2:	2300      	movs	r3, #0
 80100e4:	617b      	str	r3, [r7, #20]
 80100e6:	e009      	b.n	80100fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	60ba      	str	r2, [r7, #8]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f1 ff4f 	bl	8001f94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	3301      	adds	r3, #1
 80100fa:	617b      	str	r3, [r7, #20]
 80100fc:	697a      	ldr	r2, [r7, #20]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	429a      	cmp	r2, r3
 8010102:	dbf1      	blt.n	80100e8 <_write+0x12>
	}
	return len;
 8010104:	687b      	ldr	r3, [r7, #4]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3718      	adds	r7, #24
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <_close>:

int _close(int file)
{
 801010e:	b480      	push	{r7}
 8010110:	b083      	sub	sp, #12
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
	return -1;
 8010116:	f04f 33ff 	mov.w	r3, #4294967295
}
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr

08010126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010126:	b480      	push	{r7}
 8010128:	b083      	sub	sp, #12
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010136:	605a      	str	r2, [r3, #4]
	return 0;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <_isatty>:

int _isatty(int file)
{
 8010146:	b480      	push	{r7}
 8010148:	b083      	sub	sp, #12
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
	return 1;
 801014e:	2301      	movs	r3, #1
}
 8010150:	4618      	mov	r0, r3
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
	return 0;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3714      	adds	r7, #20
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr
	...

08010178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010180:	4a14      	ldr	r2, [pc, #80]	; (80101d4 <_sbrk+0x5c>)
 8010182:	4b15      	ldr	r3, [pc, #84]	; (80101d8 <_sbrk+0x60>)
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801018c:	4b13      	ldr	r3, [pc, #76]	; (80101dc <_sbrk+0x64>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d102      	bne.n	801019a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010194:	4b11      	ldr	r3, [pc, #68]	; (80101dc <_sbrk+0x64>)
 8010196:	4a12      	ldr	r2, [pc, #72]	; (80101e0 <_sbrk+0x68>)
 8010198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801019a:	4b10      	ldr	r3, [pc, #64]	; (80101dc <_sbrk+0x64>)
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4413      	add	r3, r2
 80101a2:	693a      	ldr	r2, [r7, #16]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d207      	bcs.n	80101b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80101a8:	f00a ff02 	bl	801afb0 <__errno>
 80101ac:	4603      	mov	r3, r0
 80101ae:	220c      	movs	r2, #12
 80101b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80101b2:	f04f 33ff 	mov.w	r3, #4294967295
 80101b6:	e009      	b.n	80101cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80101b8:	4b08      	ldr	r3, [pc, #32]	; (80101dc <_sbrk+0x64>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80101be:	4b07      	ldr	r3, [pc, #28]	; (80101dc <_sbrk+0x64>)
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4413      	add	r3, r2
 80101c6:	4a05      	ldr	r2, [pc, #20]	; (80101dc <_sbrk+0x64>)
 80101c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80101ca:	68fb      	ldr	r3, [r7, #12]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3718      	adds	r7, #24
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	20080000 	.word	0x20080000
 80101d8:	00000400 	.word	0x00000400
 80101dc:	20002d7c 	.word	0x20002d7c
 80101e0:	20040040 	.word	0x20040040

080101e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80101e4:	b480      	push	{r7}
 80101e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80101e8:	4b06      	ldr	r3, [pc, #24]	; (8010204 <SystemInit+0x20>)
 80101ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101ee:	4a05      	ldr	r2, [pc, #20]	; (8010204 <SystemInit+0x20>)
 80101f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80101f8:	bf00      	nop
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	e000ed00 	.word	0xe000ed00

08010208 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8010208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801020c:	480d      	ldr	r0, [pc, #52]	; (8010244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801020e:	490e      	ldr	r1, [pc, #56]	; (8010248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010210:	4a0e      	ldr	r2, [pc, #56]	; (801024c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010214:	e002      	b.n	801021c <LoopCopyDataInit>

08010216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801021a:	3304      	adds	r3, #4

0801021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010220:	d3f9      	bcc.n	8010216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010222:	4a0b      	ldr	r2, [pc, #44]	; (8010250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010224:	4c0b      	ldr	r4, [pc, #44]	; (8010254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010228:	e001      	b.n	801022e <LoopFillZerobss>

0801022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801022c:	3204      	adds	r2, #4

0801022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010230:	d3fb      	bcc.n	801022a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010232:	f7ff ffd7 	bl	80101e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010236:	f00a ffb7 	bl	801b1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801023a:	f7f2 f855 	bl	80022e8 <main>
  bx  lr    
 801023e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010240:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8010244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010248:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 801024c:	080225a8 	.word	0x080225a8
  ldr r2, =_sbss
 8010250:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8010254:	20040040 	.word	0x20040040

08010258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010258:	e7fe      	b.n	8010258 <ADC_IRQHandler>

0801025a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801025e:	2003      	movs	r0, #3
 8010260:	f000 fd03 	bl	8010c6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010264:	200f      	movs	r0, #15
 8010266:	f7ff fddf 	bl	800fe28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801026a:	f7fe ffb9 	bl	800f1e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	bd80      	pop	{r7, pc}

08010274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010274:	b480      	push	{r7}
 8010276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010278:	4b06      	ldr	r3, [pc, #24]	; (8010294 <HAL_IncTick+0x20>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	461a      	mov	r2, r3
 801027e:	4b06      	ldr	r3, [pc, #24]	; (8010298 <HAL_IncTick+0x24>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4413      	add	r3, r2
 8010284:	4a04      	ldr	r2, [pc, #16]	; (8010298 <HAL_IncTick+0x24>)
 8010286:	6013      	str	r3, [r2, #0]
}
 8010288:	bf00      	nop
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	20000064 	.word	0x20000064
 8010298:	20002d80 	.word	0x20002d80

0801029c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801029c:	b480      	push	{r7}
 801029e:	af00      	add	r7, sp, #0
  return uwTick;
 80102a0:	4b03      	ldr	r3, [pc, #12]	; (80102b0 <HAL_GetTick+0x14>)
 80102a2:	681b      	ldr	r3, [r3, #0]
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	46bd      	mov	sp, r7
 80102a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop
 80102b0:	20002d80 	.word	0x20002d80

080102b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80102bc:	2300      	movs	r3, #0
 80102be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e031      	b.n	801032e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d109      	bne.n	80102e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7fe ffac 	bl	800f230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ea:	f003 0310 	and.w	r3, r3, #16
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d116      	bne.n	8010320 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80102f6:	4b10      	ldr	r3, [pc, #64]	; (8010338 <HAL_ADC_Init+0x84>)
 80102f8:	4013      	ands	r3, r2
 80102fa:	f043 0202 	orr.w	r2, r3, #2
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fb0a 	bl	801091c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010312:	f023 0303 	bic.w	r3, r3, #3
 8010316:	f043 0201 	orr.w	r2, r3, #1
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	641a      	str	r2, [r3, #64]	; 0x40
 801031e:	e001      	b.n	8010324 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010320:	2301      	movs	r3, #1
 8010322:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801032c:	7bfb      	ldrb	r3, [r7, #15]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	ffffeefd 	.word	0xffffeefd

0801033c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8010344:	2300      	movs	r3, #0
 8010346:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801034e:	2b01      	cmp	r3, #1
 8010350:	d101      	bne.n	8010356 <HAL_ADC_Start+0x1a>
 8010352:	2302      	movs	r3, #2
 8010354:	e0ad      	b.n	80104b2 <HAL_ADC_Start+0x176>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2201      	movs	r2, #1
 801035a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	f003 0301 	and.w	r3, r3, #1
 8010368:	2b01      	cmp	r3, #1
 801036a:	d018      	beq.n	801039e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	689a      	ldr	r2, [r3, #8]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f042 0201 	orr.w	r2, r2, #1
 801037a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801037c:	4b50      	ldr	r3, [pc, #320]	; (80104c0 <HAL_ADC_Start+0x184>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a50      	ldr	r2, [pc, #320]	; (80104c4 <HAL_ADC_Start+0x188>)
 8010382:	fba2 2303 	umull	r2, r3, r2, r3
 8010386:	0c9a      	lsrs	r2, r3, #18
 8010388:	4613      	mov	r3, r2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	4413      	add	r3, r2
 801038e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8010390:	e002      	b.n	8010398 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3b01      	subs	r3, #1
 8010396:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d1f9      	bne.n	8010392 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	f003 0301 	and.w	r3, r3, #1
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d175      	bne.n	8010498 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80103b0:	4b45      	ldr	r3, [pc, #276]	; (80104c8 <HAL_ADC_Start+0x18c>)
 80103b2:	4013      	ands	r3, r2
 80103b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d007      	beq.n	80103da <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80103d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80103e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103e6:	d106      	bne.n	80103f6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103ec:	f023 0206 	bic.w	r2, r3, #6
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	645a      	str	r2, [r3, #68]	; 0x44
 80103f4:	e002      	b.n	80103fc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801040c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 801040e:	4b2f      	ldr	r3, [pc, #188]	; (80104cc <HAL_ADC_Start+0x190>)
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	f003 031f 	and.w	r3, r3, #31
 8010416:	2b00      	cmp	r3, #0
 8010418:	d10f      	bne.n	801043a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010424:	2b00      	cmp	r3, #0
 8010426:	d143      	bne.n	80104b0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	689a      	ldr	r2, [r3, #8]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010436:	609a      	str	r2, [r3, #8]
 8010438:	e03a      	b.n	80104b0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a24      	ldr	r2, [pc, #144]	; (80104d0 <HAL_ADC_Start+0x194>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d10e      	bne.n	8010462 <HAL_ADC_Start+0x126>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801044e:	2b00      	cmp	r3, #0
 8010450:	d107      	bne.n	8010462 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010460:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8010462:	4b1a      	ldr	r3, [pc, #104]	; (80104cc <HAL_ADC_Start+0x190>)
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f003 0310 	and.w	r3, r3, #16
 801046a:	2b00      	cmp	r3, #0
 801046c:	d120      	bne.n	80104b0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4a18      	ldr	r2, [pc, #96]	; (80104d4 <HAL_ADC_Start+0x198>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d11b      	bne.n	80104b0 <HAL_ADC_Start+0x174>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010482:	2b00      	cmp	r3, #0
 8010484:	d114      	bne.n	80104b0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689a      	ldr	r2, [r3, #8]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010494:	609a      	str	r2, [r3, #8]
 8010496:	e00b      	b.n	80104b0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801049c:	f043 0210 	orr.w	r2, r3, #16
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a8:	f043 0201 	orr.w	r2, r3, #1
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3714      	adds	r7, #20
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	2000005c 	.word	0x2000005c
 80104c4:	431bde83 	.word	0x431bde83
 80104c8:	fffff8fe 	.word	0xfffff8fe
 80104cc:	40012300 	.word	0x40012300
 80104d0:	40012000 	.word	0x40012000
 80104d4:	40012200 	.word	0x40012200

080104d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d101      	bne.n	80104ee <HAL_ADC_Stop+0x16>
 80104ea:	2302      	movs	r3, #2
 80104ec:	e01f      	b.n	801052e <HAL_ADC_Stop+0x56>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2201      	movs	r2, #1
 80104f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	689a      	ldr	r2, [r3, #8]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f022 0201 	bic.w	r2, r2, #1
 8010504:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	f003 0301 	and.w	r3, r3, #1
 8010510:	2b00      	cmp	r3, #0
 8010512:	d107      	bne.n	8010524 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010518:	4b08      	ldr	r3, [pc, #32]	; (801053c <HAL_ADC_Stop+0x64>)
 801051a:	4013      	ands	r3, r2
 801051c:	f043 0201 	orr.w	r2, r3, #1
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	ffffeefe 	.word	0xffffeefe

08010540 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801054a:	2300      	movs	r3, #0
 801054c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	689b      	ldr	r3, [r3, #8]
 8010554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801055c:	d113      	bne.n	8010586 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	689b      	ldr	r3, [r3, #8]
 8010564:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8010568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801056c:	d10b      	bne.n	8010586 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	f043 0220 	orr.w	r2, r3, #32
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e063      	b.n	801064e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8010586:	f7ff fe89 	bl	801029c <HAL_GetTick>
 801058a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 801058c:	e021      	b.n	80105d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010594:	d01d      	beq.n	80105d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d007      	beq.n	80105ac <HAL_ADC_PollForConversion+0x6c>
 801059c:	f7ff fe7e 	bl	801029c <HAL_GetTick>
 80105a0:	4602      	mov	r2, r0
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	1ad3      	subs	r3, r2, r3
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d212      	bcs.n	80105d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f003 0302 	and.w	r3, r3, #2
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	d00b      	beq.n	80105d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105be:	f043 0204 	orr.w	r2, r3, #4
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80105ce:	2303      	movs	r3, #3
 80105d0:	e03d      	b.n	801064e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 0302 	and.w	r3, r3, #2
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d1d6      	bne.n	801058e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f06f 0212 	mvn.w	r2, #18
 80105e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010600:	2b00      	cmp	r3, #0
 8010602:	d123      	bne.n	801064c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010608:	2b00      	cmp	r3, #0
 801060a:	d11f      	bne.n	801064c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010612:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010616:	2b00      	cmp	r3, #0
 8010618:	d006      	beq.n	8010628 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010624:	2b00      	cmp	r3, #0
 8010626:	d111      	bne.n	801064c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801062c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801063c:	2b00      	cmp	r3, #0
 801063e:	d105      	bne.n	801064c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010644:	f043 0201 	orr.w	r2, r3, #1
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8010656:	b480      	push	{r7}
 8010658:	b083      	sub	sp, #12
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8010664:	4618      	mov	r0, r3
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8010670:	b480      	push	{r7}
 8010672:	b085      	sub	sp, #20
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010684:	2b01      	cmp	r3, #1
 8010686:	d101      	bne.n	801068c <HAL_ADC_ConfigChannel+0x1c>
 8010688:	2302      	movs	r3, #2
 801068a:	e136      	b.n	80108fa <HAL_ADC_ConfigChannel+0x28a>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2201      	movs	r2, #1
 8010690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b09      	cmp	r3, #9
 801069a:	d93a      	bls.n	8010712 <HAL_ADC_ConfigChannel+0xa2>
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106a4:	d035      	beq.n	8010712 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	68d9      	ldr	r1, [r3, #12]
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	461a      	mov	r2, r3
 80106b4:	4613      	mov	r3, r2
 80106b6:	005b      	lsls	r3, r3, #1
 80106b8:	4413      	add	r3, r2
 80106ba:	3b1e      	subs	r3, #30
 80106bc:	2207      	movs	r2, #7
 80106be:	fa02 f303 	lsl.w	r3, r2, r3
 80106c2:	43da      	mvns	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	400a      	ands	r2, r1
 80106ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a8d      	ldr	r2, [pc, #564]	; (8010908 <HAL_ADC_ConfigChannel+0x298>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d10a      	bne.n	80106ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	68d9      	ldr	r1, [r3, #12]
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	061a      	lsls	r2, r3, #24
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	430a      	orrs	r2, r1
 80106e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80106ea:	e035      	b.n	8010758 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	68d9      	ldr	r1, [r3, #12]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	689a      	ldr	r2, [r3, #8]
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	4618      	mov	r0, r3
 80106fe:	4603      	mov	r3, r0
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	4403      	add	r3, r0
 8010704:	3b1e      	subs	r3, #30
 8010706:	409a      	lsls	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	430a      	orrs	r2, r1
 801070e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010710:	e022      	b.n	8010758 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	6919      	ldr	r1, [r3, #16]
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	b29b      	uxth	r3, r3
 801071e:	461a      	mov	r2, r3
 8010720:	4613      	mov	r3, r2
 8010722:	005b      	lsls	r3, r3, #1
 8010724:	4413      	add	r3, r2
 8010726:	2207      	movs	r2, #7
 8010728:	fa02 f303 	lsl.w	r3, r2, r3
 801072c:	43da      	mvns	r2, r3
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	400a      	ands	r2, r1
 8010734:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6919      	ldr	r1, [r3, #16]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	689a      	ldr	r2, [r3, #8]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	b29b      	uxth	r3, r3
 8010746:	4618      	mov	r0, r3
 8010748:	4603      	mov	r3, r0
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4403      	add	r3, r0
 801074e:	409a      	lsls	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	430a      	orrs	r2, r1
 8010756:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	2b06      	cmp	r3, #6
 801075e:	d824      	bhi.n	80107aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	4613      	mov	r3, r2
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	4413      	add	r3, r2
 8010770:	3b05      	subs	r3, #5
 8010772:	221f      	movs	r2, #31
 8010774:	fa02 f303 	lsl.w	r3, r2, r3
 8010778:	43da      	mvns	r2, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	400a      	ands	r2, r1
 8010780:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	b29b      	uxth	r3, r3
 801078e:	4618      	mov	r0, r3
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	4613      	mov	r3, r2
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4413      	add	r3, r2
 801079a:	3b05      	subs	r3, #5
 801079c:	fa00 f203 	lsl.w	r2, r0, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	430a      	orrs	r2, r1
 80107a6:	635a      	str	r2, [r3, #52]	; 0x34
 80107a8:	e04c      	b.n	8010844 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	2b0c      	cmp	r3, #12
 80107b0:	d824      	bhi.n	80107fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	4613      	mov	r3, r2
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	4413      	add	r3, r2
 80107c2:	3b23      	subs	r3, #35	; 0x23
 80107c4:	221f      	movs	r2, #31
 80107c6:	fa02 f303 	lsl.w	r3, r2, r3
 80107ca:	43da      	mvns	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	400a      	ands	r2, r1
 80107d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	4618      	mov	r0, r3
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	4613      	mov	r3, r2
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	4413      	add	r3, r2
 80107ec:	3b23      	subs	r3, #35	; 0x23
 80107ee:	fa00 f203 	lsl.w	r2, r0, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	430a      	orrs	r2, r1
 80107f8:	631a      	str	r2, [r3, #48]	; 0x30
 80107fa:	e023      	b.n	8010844 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	685a      	ldr	r2, [r3, #4]
 8010806:	4613      	mov	r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4413      	add	r3, r2
 801080c:	3b41      	subs	r3, #65	; 0x41
 801080e:	221f      	movs	r2, #31
 8010810:	fa02 f303 	lsl.w	r3, r2, r3
 8010814:	43da      	mvns	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	400a      	ands	r2, r1
 801081c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	b29b      	uxth	r3, r3
 801082a:	4618      	mov	r0, r3
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	4613      	mov	r3, r2
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	4413      	add	r3, r2
 8010836:	3b41      	subs	r3, #65	; 0x41
 8010838:	fa00 f203 	lsl.w	r2, r0, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	430a      	orrs	r2, r1
 8010842:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	4a30      	ldr	r2, [pc, #192]	; (801090c <HAL_ADC_ConfigChannel+0x29c>)
 801084a:	4293      	cmp	r3, r2
 801084c:	d10a      	bne.n	8010864 <HAL_ADC_ConfigChannel+0x1f4>
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010856:	d105      	bne.n	8010864 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8010858:	4b2d      	ldr	r3, [pc, #180]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	4a2c      	ldr	r2, [pc, #176]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 801085e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8010862:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a28      	ldr	r2, [pc, #160]	; (801090c <HAL_ADC_ConfigChannel+0x29c>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d10f      	bne.n	801088e <HAL_ADC_ConfigChannel+0x21e>
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b12      	cmp	r3, #18
 8010874:	d10b      	bne.n	801088e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8010876:	4b26      	ldr	r3, [pc, #152]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	4a25      	ldr	r2, [pc, #148]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 801087c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010880:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8010882:	4b23      	ldr	r3, [pc, #140]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	4a22      	ldr	r2, [pc, #136]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 8010888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801088c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a1e      	ldr	r2, [pc, #120]	; (801090c <HAL_ADC_ConfigChannel+0x29c>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d12b      	bne.n	80108f0 <HAL_ADC_ConfigChannel+0x280>
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a1a      	ldr	r2, [pc, #104]	; (8010908 <HAL_ADC_ConfigChannel+0x298>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d003      	beq.n	80108aa <HAL_ADC_ConfigChannel+0x23a>
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b11      	cmp	r3, #17
 80108a8:	d122      	bne.n	80108f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80108aa:	4b19      	ldr	r3, [pc, #100]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	4a18      	ldr	r2, [pc, #96]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 80108b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80108b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80108b6:	4b16      	ldr	r3, [pc, #88]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	4a15      	ldr	r2, [pc, #84]	; (8010910 <HAL_ADC_ConfigChannel+0x2a0>)
 80108bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80108c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a10      	ldr	r2, [pc, #64]	; (8010908 <HAL_ADC_ConfigChannel+0x298>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d111      	bne.n	80108f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80108cc:	4b11      	ldr	r3, [pc, #68]	; (8010914 <HAL_ADC_ConfigChannel+0x2a4>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a11      	ldr	r2, [pc, #68]	; (8010918 <HAL_ADC_ConfigChannel+0x2a8>)
 80108d2:	fba2 2303 	umull	r2, r3, r2, r3
 80108d6:	0c9a      	lsrs	r2, r3, #18
 80108d8:	4613      	mov	r3, r2
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	4413      	add	r3, r2
 80108de:	005b      	lsls	r3, r3, #1
 80108e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80108e2:	e002      	b.n	80108ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1f9      	bne.n	80108e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3714      	adds	r7, #20
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	10000012 	.word	0x10000012
 801090c:	40012000 	.word	0x40012000
 8010910:	40012300 	.word	0x40012300
 8010914:	2000005c 	.word	0x2000005c
 8010918:	431bde83 	.word	0x431bde83

0801091c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8010924:	4b78      	ldr	r3, [pc, #480]	; (8010b08 <ADC_Init+0x1ec>)
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	4a77      	ldr	r2, [pc, #476]	; (8010b08 <ADC_Init+0x1ec>)
 801092a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 801092e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8010930:	4b75      	ldr	r3, [pc, #468]	; (8010b08 <ADC_Init+0x1ec>)
 8010932:	685a      	ldr	r2, [r3, #4]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	4973      	ldr	r1, [pc, #460]	; (8010b08 <ADC_Init+0x1ec>)
 801093a:	4313      	orrs	r3, r2
 801093c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	685a      	ldr	r2, [r3, #4]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801094c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	6859      	ldr	r1, [r3, #4]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	021a      	lsls	r2, r3, #8
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	430a      	orrs	r2, r1
 8010960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	685a      	ldr	r2, [r3, #4]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6859      	ldr	r1, [r3, #4]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	689a      	ldr	r2, [r3, #8]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	430a      	orrs	r2, r1
 8010982:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	689a      	ldr	r2, [r3, #8]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	6899      	ldr	r1, [r3, #8]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	68da      	ldr	r2, [r3, #12]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	430a      	orrs	r2, r1
 80109a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109aa:	4a58      	ldr	r2, [pc, #352]	; (8010b0c <ADC_Init+0x1f0>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d022      	beq.n	80109f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	689a      	ldr	r2, [r3, #8]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80109be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	6899      	ldr	r1, [r3, #8]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	430a      	orrs	r2, r1
 80109d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	689a      	ldr	r2, [r3, #8]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80109e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	6899      	ldr	r1, [r3, #8]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	430a      	orrs	r2, r1
 80109f2:	609a      	str	r2, [r3, #8]
 80109f4:	e00f      	b.n	8010a16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	689a      	ldr	r2, [r3, #8]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	689a      	ldr	r2, [r3, #8]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010a14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	689a      	ldr	r2, [r3, #8]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f022 0202 	bic.w	r2, r2, #2
 8010a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6899      	ldr	r1, [r3, #8]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	005a      	lsls	r2, r3, #1
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	430a      	orrs	r2, r1
 8010a38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d01b      	beq.n	8010a7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	685a      	ldr	r2, [r3, #4]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	6859      	ldr	r1, [r3, #4]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6e:	3b01      	subs	r3, #1
 8010a70:	035a      	lsls	r2, r3, #13
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	430a      	orrs	r2, r1
 8010a78:	605a      	str	r2, [r3, #4]
 8010a7a:	e007      	b.n	8010a8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	69db      	ldr	r3, [r3, #28]
 8010aa6:	3b01      	subs	r3, #1
 8010aa8:	051a      	lsls	r2, r3, #20
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	430a      	orrs	r2, r1
 8010ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	689a      	ldr	r2, [r3, #8]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	6899      	ldr	r1, [r3, #8]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ace:	025a      	lsls	r2, r3, #9
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	430a      	orrs	r2, r1
 8010ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	689a      	ldr	r2, [r3, #8]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	6899      	ldr	r1, [r3, #8]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	695b      	ldr	r3, [r3, #20]
 8010af2:	029a      	lsls	r2, r3, #10
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	430a      	orrs	r2, r1
 8010afa:	609a      	str	r2, [r3, #8]
}
 8010afc:	bf00      	nop
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr
 8010b08:	40012300 	.word	0x40012300
 8010b0c:	0f000001 	.word	0x0f000001

08010b10 <__NVIC_SetPriorityGrouping>:
{
 8010b10:	b480      	push	{r7}
 8010b12:	b085      	sub	sp, #20
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f003 0307 	and.w	r3, r3, #7
 8010b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b20:	4b0b      	ldr	r3, [pc, #44]	; (8010b50 <__NVIC_SetPriorityGrouping+0x40>)
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010b2c:	4013      	ands	r3, r2
 8010b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010b38:	4b06      	ldr	r3, [pc, #24]	; (8010b54 <__NVIC_SetPriorityGrouping+0x44>)
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010b3e:	4a04      	ldr	r2, [pc, #16]	; (8010b50 <__NVIC_SetPriorityGrouping+0x40>)
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	60d3      	str	r3, [r2, #12]
}
 8010b44:	bf00      	nop
 8010b46:	3714      	adds	r7, #20
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr
 8010b50:	e000ed00 	.word	0xe000ed00
 8010b54:	05fa0000 	.word	0x05fa0000

08010b58 <__NVIC_GetPriorityGrouping>:
{
 8010b58:	b480      	push	{r7}
 8010b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b5c:	4b04      	ldr	r3, [pc, #16]	; (8010b70 <__NVIC_GetPriorityGrouping+0x18>)
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	0a1b      	lsrs	r3, r3, #8
 8010b62:	f003 0307 	and.w	r3, r3, #7
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	e000ed00 	.word	0xe000ed00

08010b74 <__NVIC_EnableIRQ>:
{
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	db0b      	blt.n	8010b9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b86:	79fb      	ldrb	r3, [r7, #7]
 8010b88:	f003 021f 	and.w	r2, r3, #31
 8010b8c:	4907      	ldr	r1, [pc, #28]	; (8010bac <__NVIC_EnableIRQ+0x38>)
 8010b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b92:	095b      	lsrs	r3, r3, #5
 8010b94:	2001      	movs	r0, #1
 8010b96:	fa00 f202 	lsl.w	r2, r0, r2
 8010b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010b9e:	bf00      	nop
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	e000e100 	.word	0xe000e100

08010bb0 <__NVIC_SetPriority>:
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b083      	sub	sp, #12
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	6039      	str	r1, [r7, #0]
 8010bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	db0a      	blt.n	8010bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	b2da      	uxtb	r2, r3
 8010bc8:	490c      	ldr	r1, [pc, #48]	; (8010bfc <__NVIC_SetPriority+0x4c>)
 8010bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bce:	0112      	lsls	r2, r2, #4
 8010bd0:	b2d2      	uxtb	r2, r2
 8010bd2:	440b      	add	r3, r1
 8010bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010bd8:	e00a      	b.n	8010bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	4908      	ldr	r1, [pc, #32]	; (8010c00 <__NVIC_SetPriority+0x50>)
 8010be0:	79fb      	ldrb	r3, [r7, #7]
 8010be2:	f003 030f 	and.w	r3, r3, #15
 8010be6:	3b04      	subs	r3, #4
 8010be8:	0112      	lsls	r2, r2, #4
 8010bea:	b2d2      	uxtb	r2, r2
 8010bec:	440b      	add	r3, r1
 8010bee:	761a      	strb	r2, [r3, #24]
}
 8010bf0:	bf00      	nop
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr
 8010bfc:	e000e100 	.word	0xe000e100
 8010c00:	e000ed00 	.word	0xe000ed00

08010c04 <NVIC_EncodePriority>:
{
 8010c04:	b480      	push	{r7}
 8010c06:	b089      	sub	sp, #36	; 0x24
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f003 0307 	and.w	r3, r3, #7
 8010c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	f1c3 0307 	rsb	r3, r3, #7
 8010c1e:	2b04      	cmp	r3, #4
 8010c20:	bf28      	it	cs
 8010c22:	2304      	movcs	r3, #4
 8010c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	3304      	adds	r3, #4
 8010c2a:	2b06      	cmp	r3, #6
 8010c2c:	d902      	bls.n	8010c34 <NVIC_EncodePriority+0x30>
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	3b03      	subs	r3, #3
 8010c32:	e000      	b.n	8010c36 <NVIC_EncodePriority+0x32>
 8010c34:	2300      	movs	r3, #0
 8010c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c38:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c42:	43da      	mvns	r2, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	401a      	ands	r2, r3
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	fa01 f303 	lsl.w	r3, r1, r3
 8010c56:	43d9      	mvns	r1, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c5c:	4313      	orrs	r3, r2
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3724      	adds	r7, #36	; 0x24
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c6a:	b580      	push	{r7, lr}
 8010c6c:	b082      	sub	sp, #8
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7ff ff4c 	bl	8010b10 <__NVIC_SetPriorityGrouping>
}
 8010c78:	bf00      	nop
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	4603      	mov	r3, r0
 8010c88:	60b9      	str	r1, [r7, #8]
 8010c8a:	607a      	str	r2, [r7, #4]
 8010c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010c92:	f7ff ff61 	bl	8010b58 <__NVIC_GetPriorityGrouping>
 8010c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	68b9      	ldr	r1, [r7, #8]
 8010c9c:	6978      	ldr	r0, [r7, #20]
 8010c9e:	f7ff ffb1 	bl	8010c04 <NVIC_EncodePriority>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ca8:	4611      	mov	r1, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ff ff80 	bl	8010bb0 <__NVIC_SetPriority>
}
 8010cb0:	bf00      	nop
 8010cb2:	3718      	adds	r7, #24
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ff ff54 	bl	8010b74 <__NVIC_EnableIRQ>
}
 8010ccc:	bf00      	nop
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d101      	bne.n	8010ce6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e054      	b.n	8010d90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	7f5b      	ldrb	r3, [r3, #29]
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d105      	bne.n	8010cfc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7fe fb4c 	bl	800f394 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2202      	movs	r2, #2
 8010d00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	791b      	ldrb	r3, [r3, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d10c      	bne.n	8010d24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4a22      	ldr	r2, [pc, #136]	; (8010d98 <HAL_CRC_Init+0xc4>)
 8010d10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	689a      	ldr	r2, [r3, #8]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f022 0218 	bic.w	r2, r2, #24
 8010d20:	609a      	str	r2, [r3, #8]
 8010d22:	e00c      	b.n	8010d3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6899      	ldr	r1, [r3, #8]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f948 	bl	8010fc4 <HAL_CRCEx_Polynomial_Set>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e028      	b.n	8010d90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	795b      	ldrb	r3, [r3, #5]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d105      	bne.n	8010d52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d4e:	611a      	str	r2, [r3, #16]
 8010d50:	e004      	b.n	8010d5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	6912      	ldr	r2, [r2, #16]
 8010d5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	695a      	ldr	r2, [r3, #20]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	430a      	orrs	r2, r1
 8010d70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	699a      	ldr	r2, [r3, #24]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	430a      	orrs	r2, r1
 8010d86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8010d8e:	2300      	movs	r3, #0
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	04c11db7 	.word	0x04c11db7

08010d9c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b086      	sub	sp, #24
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8010da8:	2300      	movs	r3, #0
 8010daa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2202      	movs	r2, #2
 8010db0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	689a      	ldr	r2, [r3, #8]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f042 0201 	orr.w	r2, r2, #1
 8010dc0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	6a1b      	ldr	r3, [r3, #32]
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	d006      	beq.n	8010dd8 <HAL_CRC_Calculate+0x3c>
 8010dca:	2b03      	cmp	r3, #3
 8010dcc:	d829      	bhi.n	8010e22 <HAL_CRC_Calculate+0x86>
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d019      	beq.n	8010e06 <HAL_CRC_Calculate+0x6a>
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d01e      	beq.n	8010e14 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8010dd6:	e024      	b.n	8010e22 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8010dd8:	2300      	movs	r3, #0
 8010dda:	617b      	str	r3, [r7, #20]
 8010ddc:	e00a      	b.n	8010df4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	68ba      	ldr	r2, [r7, #8]
 8010de4:	441a      	add	r2, r3
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	6812      	ldr	r2, [r2, #0]
 8010dec:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	3301      	adds	r3, #1
 8010df2:	617b      	str	r3, [r7, #20]
 8010df4:	697a      	ldr	r2, [r7, #20]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d3f0      	bcc.n	8010dde <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	613b      	str	r3, [r7, #16]
      break;
 8010e04:	e00e      	b.n	8010e24 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	68b9      	ldr	r1, [r7, #8]
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f000 f812 	bl	8010e34 <CRC_Handle_8>
 8010e10:	6138      	str	r0, [r7, #16]
      break;
 8010e12:	e007      	b.n	8010e24 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	68b9      	ldr	r1, [r7, #8]
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f000 f899 	bl	8010f50 <CRC_Handle_16>
 8010e1e:	6138      	str	r0, [r7, #16]
      break;
 8010e20:	e000      	b.n	8010e24 <HAL_CRC_Calculate+0x88>
      break;
 8010e22:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2201      	movs	r2, #1
 8010e28:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8010e2a:	693b      	ldr	r3, [r7, #16]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3718      	adds	r7, #24
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b089      	sub	sp, #36	; 0x24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8010e40:	2300      	movs	r3, #0
 8010e42:	61fb      	str	r3, [r7, #28]
 8010e44:	e023      	b.n	8010e8e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	3301      	adds	r3, #1
 8010e58:	68b9      	ldr	r1, [r7, #8]
 8010e5a:	440b      	add	r3, r1
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8010e60:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	3302      	adds	r3, #2
 8010e68:	68b9      	ldr	r1, [r7, #8]
 8010e6a:	440b      	add	r3, r1
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8010e70:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	3303      	adds	r3, #3
 8010e78:	68b9      	ldr	r1, [r7, #8]
 8010e7a:	440b      	add	r3, r1
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8010e84:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8010e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	61fb      	str	r3, [r7, #28]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	089b      	lsrs	r3, r3, #2
 8010e92:	69fa      	ldr	r2, [r7, #28]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d3d6      	bcc.n	8010e46 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f003 0303 	and.w	r3, r3, #3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d04d      	beq.n	8010f3e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f003 0303 	and.w	r3, r3, #3
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d107      	bne.n	8010ebc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	6812      	ldr	r2, [r2, #0]
 8010eb8:	781b      	ldrb	r3, [r3, #0]
 8010eba:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f003 0303 	and.w	r3, r3, #3
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	d116      	bne.n	8010ef4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	4413      	add	r3, r2
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	021b      	lsls	r3, r3, #8
 8010ed2:	b21a      	sxth	r2, r3
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	3301      	adds	r3, #1
 8010eda:	68b9      	ldr	r1, [r7, #8]
 8010edc:	440b      	add	r3, r1
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	b21b      	sxth	r3, r3
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	b21b      	sxth	r3, r3
 8010ee6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	8b7a      	ldrh	r2, [r7, #26]
 8010ef2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f003 0303 	and.w	r3, r3, #3
 8010efa:	2b03      	cmp	r3, #3
 8010efc:	d11f      	bne.n	8010f3e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	68ba      	ldr	r2, [r7, #8]
 8010f04:	4413      	add	r3, r2
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	021b      	lsls	r3, r3, #8
 8010f0a:	b21a      	sxth	r2, r3
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	3301      	adds	r3, #1
 8010f12:	68b9      	ldr	r1, [r7, #8]
 8010f14:	440b      	add	r3, r1
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	b21b      	sxth	r3, r3
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	b21b      	sxth	r3, r3
 8010f1e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	8b7a      	ldrh	r2, [r7, #26]
 8010f2a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	3302      	adds	r3, #2
 8010f32:	68ba      	ldr	r2, [r7, #8]
 8010f34:	4413      	add	r3, r2
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	6812      	ldr	r2, [r2, #0]
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	681b      	ldr	r3, [r3, #0]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3724      	adds	r7, #36	; 0x24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b087      	sub	sp, #28
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	617b      	str	r3, [r7, #20]
 8010f60:	e013      	b.n	8010f8a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	4413      	add	r3, r2
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	041a      	lsls	r2, r3, #16
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	3302      	adds	r3, #2
 8010f74:	68b9      	ldr	r1, [r7, #8]
 8010f76:	440b      	add	r3, r1
 8010f78:	881b      	ldrh	r3, [r3, #0]
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	430a      	orrs	r2, r1
 8010f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	3301      	adds	r3, #1
 8010f88:	617b      	str	r3, [r7, #20]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	085b      	lsrs	r3, r3, #1
 8010f8e:	697a      	ldr	r2, [r7, #20]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d3e6      	bcc.n	8010f62 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f003 0301 	and.w	r3, r3, #1
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d009      	beq.n	8010fb2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	4413      	add	r3, r2
 8010fac:	881a      	ldrh	r2, [r3, #0]
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	681b      	ldr	r3, [r3, #0]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	371c      	adds	r7, #28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr

08010fc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b087      	sub	sp, #28
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010fd4:	231f      	movs	r3, #31
 8010fd6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8010fd8:	bf00      	nop
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	1e5a      	subs	r2, r3, #1
 8010fde:	613a      	str	r2, [r7, #16]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d009      	beq.n	8010ff8 <HAL_CRCEx_Polynomial_Set+0x34>
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	f003 031f 	and.w	r3, r3, #31
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	fa22 f303 	lsr.w	r3, r2, r3
 8010ff0:	f003 0301 	and.w	r3, r3, #1
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d0f0      	beq.n	8010fda <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2b18      	cmp	r3, #24
 8010ffc:	d846      	bhi.n	801108c <HAL_CRCEx_Polynomial_Set+0xc8>
 8010ffe:	a201      	add	r2, pc, #4	; (adr r2, 8011004 <HAL_CRCEx_Polynomial_Set+0x40>)
 8011000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011004:	08011093 	.word	0x08011093
 8011008:	0801108d 	.word	0x0801108d
 801100c:	0801108d 	.word	0x0801108d
 8011010:	0801108d 	.word	0x0801108d
 8011014:	0801108d 	.word	0x0801108d
 8011018:	0801108d 	.word	0x0801108d
 801101c:	0801108d 	.word	0x0801108d
 8011020:	0801108d 	.word	0x0801108d
 8011024:	08011081 	.word	0x08011081
 8011028:	0801108d 	.word	0x0801108d
 801102c:	0801108d 	.word	0x0801108d
 8011030:	0801108d 	.word	0x0801108d
 8011034:	0801108d 	.word	0x0801108d
 8011038:	0801108d 	.word	0x0801108d
 801103c:	0801108d 	.word	0x0801108d
 8011040:	0801108d 	.word	0x0801108d
 8011044:	08011075 	.word	0x08011075
 8011048:	0801108d 	.word	0x0801108d
 801104c:	0801108d 	.word	0x0801108d
 8011050:	0801108d 	.word	0x0801108d
 8011054:	0801108d 	.word	0x0801108d
 8011058:	0801108d 	.word	0x0801108d
 801105c:	0801108d 	.word	0x0801108d
 8011060:	0801108d 	.word	0x0801108d
 8011064:	08011069 	.word	0x08011069
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	2b06      	cmp	r3, #6
 801106c:	d913      	bls.n	8011096 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 801106e:	2301      	movs	r3, #1
 8011070:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011072:	e010      	b.n	8011096 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	2b07      	cmp	r3, #7
 8011078:	d90f      	bls.n	801109a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 801107a:	2301      	movs	r3, #1
 801107c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801107e:	e00c      	b.n	801109a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	2b0f      	cmp	r3, #15
 8011084:	d90b      	bls.n	801109e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8011086:	2301      	movs	r3, #1
 8011088:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801108a:	e008      	b.n	801109e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 801108c:	2301      	movs	r3, #1
 801108e:	75fb      	strb	r3, [r7, #23]
      break;
 8011090:	e006      	b.n	80110a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8011092:	bf00      	nop
 8011094:	e004      	b.n	80110a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8011096:	bf00      	nop
 8011098:	e002      	b.n	80110a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801109a:	bf00      	nop
 801109c:	e000      	b.n	80110a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801109e:	bf00      	nop
  }
  if (status == HAL_OK)
 80110a0:	7dfb      	ldrb	r3, [r7, #23]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10d      	bne.n	80110c2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	f023 0118 	bic.w	r1, r3, #24
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	430a      	orrs	r2, r1
 80110c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80110c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	371c      	adds	r7, #28
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b086      	sub	sp, #24
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80110d8:	2300      	movs	r3, #0
 80110da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80110dc:	f7ff f8de 	bl	801029c <HAL_GetTick>
 80110e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d101      	bne.n	80110ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80110e8:	2301      	movs	r3, #1
 80110ea:	e099      	b.n	8011220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2202      	movs	r2, #2
 80110f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f022 0201 	bic.w	r2, r2, #1
 801110a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801110c:	e00f      	b.n	801112e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801110e:	f7ff f8c5 	bl	801029c <HAL_GetTick>
 8011112:	4602      	mov	r2, r0
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	1ad3      	subs	r3, r2, r3
 8011118:	2b05      	cmp	r3, #5
 801111a:	d908      	bls.n	801112e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2220      	movs	r2, #32
 8011120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2203      	movs	r2, #3
 8011126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801112a:	2303      	movs	r3, #3
 801112c:	e078      	b.n	8011220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 0301 	and.w	r3, r3, #1
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1e8      	bne.n	801110e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011144:	697a      	ldr	r2, [r7, #20]
 8011146:	4b38      	ldr	r3, [pc, #224]	; (8011228 <HAL_DMA_Init+0x158>)
 8011148:	4013      	ands	r3, r2
 801114a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685a      	ldr	r2, [r3, #4]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	699b      	ldr	r3, [r3, #24]
 801116c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801117a:	697a      	ldr	r2, [r7, #20]
 801117c:	4313      	orrs	r3, r2
 801117e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011184:	2b04      	cmp	r3, #4
 8011186:	d107      	bne.n	8011198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011190:	4313      	orrs	r3, r2
 8011192:	697a      	ldr	r2, [r7, #20]
 8011194:	4313      	orrs	r3, r2
 8011196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	697a      	ldr	r2, [r7, #20]
 801119e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	695b      	ldr	r3, [r3, #20]
 80111a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	f023 0307 	bic.w	r3, r3, #7
 80111ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b4:	697a      	ldr	r2, [r7, #20]
 80111b6:	4313      	orrs	r3, r2
 80111b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111be:	2b04      	cmp	r3, #4
 80111c0:	d117      	bne.n	80111f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	4313      	orrs	r3, r2
 80111ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00e      	beq.n	80111f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fb09 	bl	80117ec <DMA_CheckFifoParam>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d008      	beq.n	80111f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2240      	movs	r2, #64	; 0x40
 80111e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2201      	movs	r2, #1
 80111ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80111ee:	2301      	movs	r3, #1
 80111f0:	e016      	b.n	8011220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	697a      	ldr	r2, [r7, #20]
 80111f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 fac0 	bl	8011780 <DMA_CalcBaseAndBitshift>
 8011200:	4603      	mov	r3, r0
 8011202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011208:	223f      	movs	r2, #63	; 0x3f
 801120a:	409a      	lsls	r2, r3
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2201      	movs	r2, #1
 801121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801121e:	2300      	movs	r3, #0
}
 8011220:	4618      	mov	r0, r3
 8011222:	3718      	adds	r7, #24
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	e010803f 	.word	0xe010803f

0801122c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801124a:	2b01      	cmp	r3, #1
 801124c:	d101      	bne.n	8011252 <HAL_DMA_Start_IT+0x26>
 801124e:	2302      	movs	r3, #2
 8011250:	e048      	b.n	80112e4 <HAL_DMA_Start_IT+0xb8>
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2201      	movs	r2, #1
 8011256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b01      	cmp	r3, #1
 8011264:	d137      	bne.n	80112d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2202      	movs	r2, #2
 801126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	2200      	movs	r2, #0
 8011272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	68b9      	ldr	r1, [r7, #8]
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f000 fa52 	bl	8011724 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011284:	223f      	movs	r2, #63	; 0x3f
 8011286:	409a      	lsls	r2, r3
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f042 0216 	orr.w	r2, r2, #22
 801129a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	695a      	ldr	r2, [r3, #20]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80112aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d007      	beq.n	80112c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f042 0208 	orr.w	r2, r2, #8
 80112c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f042 0201 	orr.w	r2, r2, #1
 80112d2:	601a      	str	r2, [r3, #0]
 80112d4:	e005      	b.n	80112e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80112de:	2302      	movs	r3, #2
 80112e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3718      	adds	r7, #24
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80112fa:	f7fe ffcf 	bl	801029c <HAL_GetTick>
 80112fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011306:	b2db      	uxtb	r3, r3
 8011308:	2b02      	cmp	r3, #2
 801130a:	d008      	beq.n	801131e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2280      	movs	r2, #128	; 0x80
 8011310:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801131a:	2301      	movs	r3, #1
 801131c:	e052      	b.n	80113c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f022 0216 	bic.w	r2, r2, #22
 801132c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	695a      	ldr	r2, [r3, #20]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801133c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011342:	2b00      	cmp	r3, #0
 8011344:	d103      	bne.n	801134e <HAL_DMA_Abort+0x62>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801134a:	2b00      	cmp	r3, #0
 801134c:	d007      	beq.n	801135e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f022 0208 	bic.w	r2, r2, #8
 801135c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f022 0201 	bic.w	r2, r2, #1
 801136c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801136e:	e013      	b.n	8011398 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011370:	f7fe ff94 	bl	801029c <HAL_GetTick>
 8011374:	4602      	mov	r2, r0
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	2b05      	cmp	r3, #5
 801137c:	d90c      	bls.n	8011398 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2220      	movs	r2, #32
 8011382:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2203      	movs	r2, #3
 8011388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8011394:	2303      	movs	r3, #3
 8011396:	e015      	b.n	80113c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f003 0301 	and.w	r3, r3, #1
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d1e4      	bne.n	8011370 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113aa:	223f      	movs	r2, #63	; 0x3f
 80113ac:	409a      	lsls	r2, r3
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2201      	movs	r2, #1
 80113b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80113c2:	2300      	movs	r3, #0
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3710      	adds	r7, #16
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d004      	beq.n	80113ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2280      	movs	r2, #128	; 0x80
 80113e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e00c      	b.n	8011404 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2205      	movs	r2, #5
 80113ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f022 0201 	bic.w	r2, r2, #1
 8011400:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	370c      	adds	r7, #12
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b086      	sub	sp, #24
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8011418:	2300      	movs	r3, #0
 801141a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 801141c:	4b8e      	ldr	r3, [pc, #568]	; (8011658 <HAL_DMA_IRQHandler+0x248>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a8e      	ldr	r2, [pc, #568]	; (801165c <HAL_DMA_IRQHandler+0x24c>)
 8011422:	fba2 2303 	umull	r2, r3, r2, r3
 8011426:	0a9b      	lsrs	r3, r3, #10
 8011428:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801142e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801143a:	2208      	movs	r2, #8
 801143c:	409a      	lsls	r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	4013      	ands	r3, r2
 8011442:	2b00      	cmp	r3, #0
 8011444:	d01a      	beq.n	801147c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f003 0304 	and.w	r3, r3, #4
 8011450:	2b00      	cmp	r3, #0
 8011452:	d013      	beq.n	801147c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f022 0204 	bic.w	r2, r2, #4
 8011462:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011468:	2208      	movs	r2, #8
 801146a:	409a      	lsls	r2, r3
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011474:	f043 0201 	orr.w	r2, r3, #1
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011480:	2201      	movs	r2, #1
 8011482:	409a      	lsls	r2, r3
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	4013      	ands	r3, r2
 8011488:	2b00      	cmp	r3, #0
 801148a:	d012      	beq.n	80114b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00b      	beq.n	80114b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801149e:	2201      	movs	r2, #1
 80114a0:	409a      	lsls	r2, r3
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114aa:	f043 0202 	orr.w	r2, r3, #2
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114b6:	2204      	movs	r2, #4
 80114b8:	409a      	lsls	r2, r3
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	4013      	ands	r3, r2
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d012      	beq.n	80114e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f003 0302 	and.w	r3, r3, #2
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00b      	beq.n	80114e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114d4:	2204      	movs	r2, #4
 80114d6:	409a      	lsls	r2, r3
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114e0:	f043 0204 	orr.w	r2, r3, #4
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114ec:	2210      	movs	r2, #16
 80114ee:	409a      	lsls	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4013      	ands	r3, r2
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d043      	beq.n	8011580 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f003 0308 	and.w	r3, r3, #8
 8011502:	2b00      	cmp	r3, #0
 8011504:	d03c      	beq.n	8011580 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801150a:	2210      	movs	r2, #16
 801150c:	409a      	lsls	r2, r3
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801151c:	2b00      	cmp	r3, #0
 801151e:	d018      	beq.n	8011552 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801152a:	2b00      	cmp	r3, #0
 801152c:	d108      	bne.n	8011540 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011532:	2b00      	cmp	r3, #0
 8011534:	d024      	beq.n	8011580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	4798      	blx	r3
 801153e:	e01f      	b.n	8011580 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011544:	2b00      	cmp	r3, #0
 8011546:	d01b      	beq.n	8011580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	4798      	blx	r3
 8011550:	e016      	b.n	8011580 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801155c:	2b00      	cmp	r3, #0
 801155e:	d107      	bne.n	8011570 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f022 0208 	bic.w	r2, r2, #8
 801156e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011574:	2b00      	cmp	r3, #0
 8011576:	d003      	beq.n	8011580 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011584:	2220      	movs	r2, #32
 8011586:	409a      	lsls	r2, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	4013      	ands	r3, r2
 801158c:	2b00      	cmp	r3, #0
 801158e:	f000 808f 	beq.w	80116b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f003 0310 	and.w	r3, r3, #16
 801159c:	2b00      	cmp	r3, #0
 801159e:	f000 8087 	beq.w	80116b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115a6:	2220      	movs	r2, #32
 80115a8:	409a      	lsls	r2, r3
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	2b05      	cmp	r3, #5
 80115b8:	d136      	bne.n	8011628 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f022 0216 	bic.w	r2, r2, #22
 80115c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	695a      	ldr	r2, [r3, #20]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80115d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d103      	bne.n	80115ea <HAL_DMA_IRQHandler+0x1da>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d007      	beq.n	80115fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f022 0208 	bic.w	r2, r2, #8
 80115f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115fe:	223f      	movs	r2, #63	; 0x3f
 8011600:	409a      	lsls	r2, r3
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2201      	movs	r2, #1
 801160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801161a:	2b00      	cmp	r3, #0
 801161c:	d07e      	beq.n	801171c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	4798      	blx	r3
        }
        return;
 8011626:	e079      	b.n	801171c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011632:	2b00      	cmp	r3, #0
 8011634:	d01d      	beq.n	8011672 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011640:	2b00      	cmp	r3, #0
 8011642:	d10d      	bne.n	8011660 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011648:	2b00      	cmp	r3, #0
 801164a:	d031      	beq.n	80116b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	4798      	blx	r3
 8011654:	e02c      	b.n	80116b0 <HAL_DMA_IRQHandler+0x2a0>
 8011656:	bf00      	nop
 8011658:	2000005c 	.word	0x2000005c
 801165c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011664:	2b00      	cmp	r3, #0
 8011666:	d023      	beq.n	80116b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	4798      	blx	r3
 8011670:	e01e      	b.n	80116b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801167c:	2b00      	cmp	r3, #0
 801167e:	d10f      	bne.n	80116a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f022 0210 	bic.w	r2, r2, #16
 801168e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2201      	movs	r2, #1
 8011694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d003      	beq.n	80116b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d032      	beq.n	801171e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116bc:	f003 0301 	and.w	r3, r3, #1
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d022      	beq.n	801170a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2205      	movs	r2, #5
 80116c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f022 0201 	bic.w	r2, r2, #1
 80116da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	3301      	adds	r3, #1
 80116e0:	60bb      	str	r3, [r7, #8]
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d307      	bcc.n	80116f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f003 0301 	and.w	r3, r3, #1
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1f2      	bne.n	80116dc <HAL_DMA_IRQHandler+0x2cc>
 80116f6:	e000      	b.n	80116fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80116f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2201      	movs	r2, #1
 80116fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d005      	beq.n	801171e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	4798      	blx	r3
 801171a:	e000      	b.n	801171e <HAL_DMA_IRQHandler+0x30e>
        return;
 801171c:	bf00      	nop
    }
  }
}
 801171e:	3718      	adds	r7, #24
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011740:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	2b40      	cmp	r3, #64	; 0x40
 8011750:	d108      	bne.n	8011764 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	68ba      	ldr	r2, [r7, #8]
 8011760:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011762:	e007      	b.n	8011774 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	68ba      	ldr	r2, [r7, #8]
 801176a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	60da      	str	r2, [r3, #12]
}
 8011774:	bf00      	nop
 8011776:	3714      	adds	r7, #20
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	b2db      	uxtb	r3, r3
 801178e:	3b10      	subs	r3, #16
 8011790:	4a13      	ldr	r2, [pc, #76]	; (80117e0 <DMA_CalcBaseAndBitshift+0x60>)
 8011792:	fba2 2303 	umull	r2, r3, r2, r3
 8011796:	091b      	lsrs	r3, r3, #4
 8011798:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801179a:	4a12      	ldr	r2, [pc, #72]	; (80117e4 <DMA_CalcBaseAndBitshift+0x64>)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4413      	add	r3, r2
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	461a      	mov	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2b03      	cmp	r3, #3
 80117ac:	d908      	bls.n	80117c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	4b0c      	ldr	r3, [pc, #48]	; (80117e8 <DMA_CalcBaseAndBitshift+0x68>)
 80117b6:	4013      	ands	r3, r2
 80117b8:	1d1a      	adds	r2, r3, #4
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	659a      	str	r2, [r3, #88]	; 0x58
 80117be:	e006      	b.n	80117ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	461a      	mov	r2, r3
 80117c6:	4b08      	ldr	r3, [pc, #32]	; (80117e8 <DMA_CalcBaseAndBitshift+0x68>)
 80117c8:	4013      	ands	r3, r2
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3714      	adds	r7, #20
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	aaaaaaab 	.word	0xaaaaaaab
 80117e4:	0802070c 	.word	0x0802070c
 80117e8:	fffffc00 	.word	0xfffffc00

080117ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b085      	sub	sp, #20
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80117f4:	2300      	movs	r3, #0
 80117f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	699b      	ldr	r3, [r3, #24]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d11f      	bne.n	8011846 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2b03      	cmp	r3, #3
 801180a:	d856      	bhi.n	80118ba <DMA_CheckFifoParam+0xce>
 801180c:	a201      	add	r2, pc, #4	; (adr r2, 8011814 <DMA_CheckFifoParam+0x28>)
 801180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011812:	bf00      	nop
 8011814:	08011825 	.word	0x08011825
 8011818:	08011837 	.word	0x08011837
 801181c:	08011825 	.word	0x08011825
 8011820:	080118bb 	.word	0x080118bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801182c:	2b00      	cmp	r3, #0
 801182e:	d046      	beq.n	80118be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011830:	2301      	movs	r3, #1
 8011832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011834:	e043      	b.n	80118be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801183e:	d140      	bne.n	80118c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011840:	2301      	movs	r3, #1
 8011842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011844:	e03d      	b.n	80118c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	699b      	ldr	r3, [r3, #24]
 801184a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801184e:	d121      	bne.n	8011894 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	2b03      	cmp	r3, #3
 8011854:	d837      	bhi.n	80118c6 <DMA_CheckFifoParam+0xda>
 8011856:	a201      	add	r2, pc, #4	; (adr r2, 801185c <DMA_CheckFifoParam+0x70>)
 8011858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801185c:	0801186d 	.word	0x0801186d
 8011860:	08011873 	.word	0x08011873
 8011864:	0801186d 	.word	0x0801186d
 8011868:	08011885 	.word	0x08011885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801186c:	2301      	movs	r3, #1
 801186e:	73fb      	strb	r3, [r7, #15]
      break;
 8011870:	e030      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801187a:	2b00      	cmp	r3, #0
 801187c:	d025      	beq.n	80118ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801187e:	2301      	movs	r3, #1
 8011880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011882:	e022      	b.n	80118ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801188c:	d11f      	bne.n	80118ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801188e:	2301      	movs	r3, #1
 8011890:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011892:	e01c      	b.n	80118ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	2b02      	cmp	r3, #2
 8011898:	d903      	bls.n	80118a2 <DMA_CheckFifoParam+0xb6>
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2b03      	cmp	r3, #3
 801189e:	d003      	beq.n	80118a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80118a0:	e018      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80118a2:	2301      	movs	r3, #1
 80118a4:	73fb      	strb	r3, [r7, #15]
      break;
 80118a6:	e015      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d00e      	beq.n	80118d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	73fb      	strb	r3, [r7, #15]
      break;
 80118b8:	e00b      	b.n	80118d2 <DMA_CheckFifoParam+0xe6>
      break;
 80118ba:	bf00      	nop
 80118bc:	e00a      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      break;
 80118be:	bf00      	nop
 80118c0:	e008      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      break;
 80118c2:	bf00      	nop
 80118c4:	e006      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      break;
 80118c6:	bf00      	nop
 80118c8:	e004      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      break;
 80118ca:	bf00      	nop
 80118cc:	e002      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80118ce:	bf00      	nop
 80118d0:	e000      	b.n	80118d4 <DMA_CheckFifoParam+0xe8>
      break;
 80118d2:	bf00      	nop
    }
  } 
  
  return status; 
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop

080118e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b089      	sub	sp, #36	; 0x24
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80118ee:	2300      	movs	r3, #0
 80118f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80118f2:	2300      	movs	r3, #0
 80118f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80118f6:	2300      	movs	r3, #0
 80118f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80118fa:	2300      	movs	r3, #0
 80118fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80118fe:	2300      	movs	r3, #0
 8011900:	61fb      	str	r3, [r7, #28]
 8011902:	e175      	b.n	8011bf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8011904:	2201      	movs	r2, #1
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	fa02 f303 	lsl.w	r3, r2, r3
 801190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	697a      	ldr	r2, [r7, #20]
 8011914:	4013      	ands	r3, r2
 8011916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011918:	693a      	ldr	r2, [r7, #16]
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	429a      	cmp	r2, r3
 801191e:	f040 8164 	bne.w	8011bea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	f003 0303 	and.w	r3, r3, #3
 801192a:	2b01      	cmp	r3, #1
 801192c:	d005      	beq.n	801193a <HAL_GPIO_Init+0x56>
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	f003 0303 	and.w	r3, r3, #3
 8011936:	2b02      	cmp	r3, #2
 8011938:	d130      	bne.n	801199c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	005b      	lsls	r3, r3, #1
 8011944:	2203      	movs	r2, #3
 8011946:	fa02 f303 	lsl.w	r3, r2, r3
 801194a:	43db      	mvns	r3, r3
 801194c:	69ba      	ldr	r2, [r7, #24]
 801194e:	4013      	ands	r3, r2
 8011950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	68da      	ldr	r2, [r3, #12]
 8011956:	69fb      	ldr	r3, [r7, #28]
 8011958:	005b      	lsls	r3, r3, #1
 801195a:	fa02 f303 	lsl.w	r3, r2, r3
 801195e:	69ba      	ldr	r2, [r7, #24]
 8011960:	4313      	orrs	r3, r2
 8011962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	69ba      	ldr	r2, [r7, #24]
 8011968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011970:	2201      	movs	r2, #1
 8011972:	69fb      	ldr	r3, [r7, #28]
 8011974:	fa02 f303 	lsl.w	r3, r2, r3
 8011978:	43db      	mvns	r3, r3
 801197a:	69ba      	ldr	r2, [r7, #24]
 801197c:	4013      	ands	r3, r2
 801197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	091b      	lsrs	r3, r3, #4
 8011986:	f003 0201 	and.w	r2, r3, #1
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	fa02 f303 	lsl.w	r3, r2, r3
 8011990:	69ba      	ldr	r2, [r7, #24]
 8011992:	4313      	orrs	r3, r2
 8011994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	f003 0303 	and.w	r3, r3, #3
 80119a4:	2b03      	cmp	r3, #3
 80119a6:	d017      	beq.n	80119d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	2203      	movs	r2, #3
 80119b4:	fa02 f303 	lsl.w	r3, r2, r3
 80119b8:	43db      	mvns	r3, r3
 80119ba:	69ba      	ldr	r2, [r7, #24]
 80119bc:	4013      	ands	r3, r2
 80119be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	689a      	ldr	r2, [r3, #8]
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	fa02 f303 	lsl.w	r3, r2, r3
 80119cc:	69ba      	ldr	r2, [r7, #24]
 80119ce:	4313      	orrs	r3, r2
 80119d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	69ba      	ldr	r2, [r7, #24]
 80119d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	f003 0303 	and.w	r3, r3, #3
 80119e0:	2b02      	cmp	r3, #2
 80119e2:	d123      	bne.n	8011a2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	08da      	lsrs	r2, r3, #3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3208      	adds	r2, #8
 80119ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	f003 0307 	and.w	r3, r3, #7
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	220f      	movs	r2, #15
 80119fc:	fa02 f303 	lsl.w	r3, r2, r3
 8011a00:	43db      	mvns	r3, r3
 8011a02:	69ba      	ldr	r2, [r7, #24]
 8011a04:	4013      	ands	r3, r2
 8011a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	691a      	ldr	r2, [r3, #16]
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	f003 0307 	and.w	r3, r3, #7
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	fa02 f303 	lsl.w	r3, r2, r3
 8011a18:	69ba      	ldr	r2, [r7, #24]
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	08da      	lsrs	r2, r3, #3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	3208      	adds	r2, #8
 8011a26:	69b9      	ldr	r1, [r7, #24]
 8011a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	2203      	movs	r2, #3
 8011a38:	fa02 f303 	lsl.w	r3, r2, r3
 8011a3c:	43db      	mvns	r3, r3
 8011a3e:	69ba      	ldr	r2, [r7, #24]
 8011a40:	4013      	ands	r3, r2
 8011a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	f003 0203 	and.w	r2, r3, #3
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	fa02 f303 	lsl.w	r3, r2, r3
 8011a54:	69ba      	ldr	r2, [r7, #24]
 8011a56:	4313      	orrs	r3, r2
 8011a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	69ba      	ldr	r2, [r7, #24]
 8011a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	f000 80be 	beq.w	8011bea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a6e:	4b66      	ldr	r3, [pc, #408]	; (8011c08 <HAL_GPIO_Init+0x324>)
 8011a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a72:	4a65      	ldr	r2, [pc, #404]	; (8011c08 <HAL_GPIO_Init+0x324>)
 8011a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a78:	6453      	str	r3, [r2, #68]	; 0x44
 8011a7a:	4b63      	ldr	r3, [pc, #396]	; (8011c08 <HAL_GPIO_Init+0x324>)
 8011a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8011a86:	4a61      	ldr	r2, [pc, #388]	; (8011c0c <HAL_GPIO_Init+0x328>)
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	089b      	lsrs	r3, r3, #2
 8011a8c:	3302      	adds	r3, #2
 8011a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	f003 0303 	and.w	r3, r3, #3
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	220f      	movs	r2, #15
 8011a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8011aa2:	43db      	mvns	r3, r3
 8011aa4:	69ba      	ldr	r2, [r7, #24]
 8011aa6:	4013      	ands	r3, r2
 8011aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4a58      	ldr	r2, [pc, #352]	; (8011c10 <HAL_GPIO_Init+0x32c>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d037      	beq.n	8011b22 <HAL_GPIO_Init+0x23e>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	4a57      	ldr	r2, [pc, #348]	; (8011c14 <HAL_GPIO_Init+0x330>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d031      	beq.n	8011b1e <HAL_GPIO_Init+0x23a>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	4a56      	ldr	r2, [pc, #344]	; (8011c18 <HAL_GPIO_Init+0x334>)
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	d02b      	beq.n	8011b1a <HAL_GPIO_Init+0x236>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4a55      	ldr	r2, [pc, #340]	; (8011c1c <HAL_GPIO_Init+0x338>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d025      	beq.n	8011b16 <HAL_GPIO_Init+0x232>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	4a54      	ldr	r2, [pc, #336]	; (8011c20 <HAL_GPIO_Init+0x33c>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d01f      	beq.n	8011b12 <HAL_GPIO_Init+0x22e>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	4a53      	ldr	r2, [pc, #332]	; (8011c24 <HAL_GPIO_Init+0x340>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d019      	beq.n	8011b0e <HAL_GPIO_Init+0x22a>
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4a52      	ldr	r2, [pc, #328]	; (8011c28 <HAL_GPIO_Init+0x344>)
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d013      	beq.n	8011b0a <HAL_GPIO_Init+0x226>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4a51      	ldr	r2, [pc, #324]	; (8011c2c <HAL_GPIO_Init+0x348>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d00d      	beq.n	8011b06 <HAL_GPIO_Init+0x222>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	4a50      	ldr	r2, [pc, #320]	; (8011c30 <HAL_GPIO_Init+0x34c>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d007      	beq.n	8011b02 <HAL_GPIO_Init+0x21e>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4a4f      	ldr	r2, [pc, #316]	; (8011c34 <HAL_GPIO_Init+0x350>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d101      	bne.n	8011afe <HAL_GPIO_Init+0x21a>
 8011afa:	2309      	movs	r3, #9
 8011afc:	e012      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011afe:	230a      	movs	r3, #10
 8011b00:	e010      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b02:	2308      	movs	r3, #8
 8011b04:	e00e      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b06:	2307      	movs	r3, #7
 8011b08:	e00c      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b0a:	2306      	movs	r3, #6
 8011b0c:	e00a      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b0e:	2305      	movs	r3, #5
 8011b10:	e008      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b12:	2304      	movs	r3, #4
 8011b14:	e006      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b16:	2303      	movs	r3, #3
 8011b18:	e004      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	e002      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b1e:	2301      	movs	r3, #1
 8011b20:	e000      	b.n	8011b24 <HAL_GPIO_Init+0x240>
 8011b22:	2300      	movs	r3, #0
 8011b24:	69fa      	ldr	r2, [r7, #28]
 8011b26:	f002 0203 	and.w	r2, r2, #3
 8011b2a:	0092      	lsls	r2, r2, #2
 8011b2c:	4093      	lsls	r3, r2
 8011b2e:	69ba      	ldr	r2, [r7, #24]
 8011b30:	4313      	orrs	r3, r2
 8011b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8011b34:	4935      	ldr	r1, [pc, #212]	; (8011c0c <HAL_GPIO_Init+0x328>)
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	089b      	lsrs	r3, r3, #2
 8011b3a:	3302      	adds	r3, #2
 8011b3c:	69ba      	ldr	r2, [r7, #24]
 8011b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011b42:	4b3d      	ldr	r3, [pc, #244]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011b44:	689b      	ldr	r3, [r3, #8]
 8011b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	43db      	mvns	r3, r3
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	4013      	ands	r3, r2
 8011b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8011b5e:	69ba      	ldr	r2, [r7, #24]
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	4313      	orrs	r3, r2
 8011b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011b66:	4a34      	ldr	r2, [pc, #208]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011b6c:	4b32      	ldr	r3, [pc, #200]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	43db      	mvns	r3, r3
 8011b76:	69ba      	ldr	r2, [r7, #24]
 8011b78:	4013      	ands	r3, r2
 8011b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d003      	beq.n	8011b90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8011b88:	69ba      	ldr	r2, [r7, #24]
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011b90:	4a29      	ldr	r2, [pc, #164]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8011b96:	4b28      	ldr	r3, [pc, #160]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	43db      	mvns	r3, r3
 8011ba0:	69ba      	ldr	r2, [r7, #24]
 8011ba2:	4013      	ands	r3, r2
 8011ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d003      	beq.n	8011bba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8011bb2:	69ba      	ldr	r2, [r7, #24]
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	4313      	orrs	r3, r2
 8011bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011bba:	4a1f      	ldr	r2, [pc, #124]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011bc0:	4b1d      	ldr	r3, [pc, #116]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	43db      	mvns	r3, r3
 8011bca:	69ba      	ldr	r2, [r7, #24]
 8011bcc:	4013      	ands	r3, r2
 8011bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d003      	beq.n	8011be4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8011bdc:	69ba      	ldr	r2, [r7, #24]
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	4313      	orrs	r3, r2
 8011be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011be4:	4a14      	ldr	r2, [pc, #80]	; (8011c38 <HAL_GPIO_Init+0x354>)
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8011bea:	69fb      	ldr	r3, [r7, #28]
 8011bec:	3301      	adds	r3, #1
 8011bee:	61fb      	str	r3, [r7, #28]
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	2b0f      	cmp	r3, #15
 8011bf4:	f67f ae86 	bls.w	8011904 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8011bf8:	bf00      	nop
 8011bfa:	bf00      	nop
 8011bfc:	3724      	adds	r7, #36	; 0x24
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr
 8011c06:	bf00      	nop
 8011c08:	40023800 	.word	0x40023800
 8011c0c:	40013800 	.word	0x40013800
 8011c10:	40020000 	.word	0x40020000
 8011c14:	40020400 	.word	0x40020400
 8011c18:	40020800 	.word	0x40020800
 8011c1c:	40020c00 	.word	0x40020c00
 8011c20:	40021000 	.word	0x40021000
 8011c24:	40021400 	.word	0x40021400
 8011c28:	40021800 	.word	0x40021800
 8011c2c:	40021c00 	.word	0x40021c00
 8011c30:	40022000 	.word	0x40022000
 8011c34:	40022400 	.word	0x40022400
 8011c38:	40013c00 	.word	0x40013c00

08011c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b085      	sub	sp, #20
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	460b      	mov	r3, r1
 8011c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	691a      	ldr	r2, [r3, #16]
 8011c4c:	887b      	ldrh	r3, [r7, #2]
 8011c4e:	4013      	ands	r3, r2
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d002      	beq.n	8011c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011c54:	2301      	movs	r3, #1
 8011c56:	73fb      	strb	r3, [r7, #15]
 8011c58:	e001      	b.n	8011c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3714      	adds	r7, #20
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	807b      	strh	r3, [r7, #2]
 8011c78:	4613      	mov	r3, r2
 8011c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011c7c:	787b      	ldrb	r3, [r7, #1]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d003      	beq.n	8011c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011c82:	887a      	ldrh	r2, [r7, #2]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8011c88:	e003      	b.n	8011c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8011c8a:	887b      	ldrh	r3, [r7, #2]
 8011c8c:	041a      	lsls	r2, r3, #16
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	619a      	str	r2, [r3, #24]
}
 8011c92:	bf00      	nop
 8011c94:	370c      	adds	r7, #12
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011c9e:	b480      	push	{r7}
 8011ca0:	b085      	sub	sp, #20
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	695b      	ldr	r3, [r3, #20]
 8011cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011cb0:	887a      	ldrh	r2, [r7, #2]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	4013      	ands	r3, r2
 8011cb6:	041a      	lsls	r2, r3, #16
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	43d9      	mvns	r1, r3
 8011cbc:	887b      	ldrh	r3, [r7, #2]
 8011cbe:	400b      	ands	r3, r1
 8011cc0:	431a      	orrs	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	619a      	str	r2, [r3, #24]
}
 8011cc6:	bf00      	nop
 8011cc8:	3714      	adds	r7, #20
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr
	...

08011cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e07f      	b.n	8011de6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d106      	bne.n	8011d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7fd fb6a 	bl	800f3d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2224      	movs	r2, #36	; 0x24
 8011d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f022 0201 	bic.w	r2, r2, #1
 8011d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	685a      	ldr	r2, [r3, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011d24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	689a      	ldr	r2, [r3, #8]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011d34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d107      	bne.n	8011d4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	689a      	ldr	r2, [r3, #8]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011d4a:	609a      	str	r2, [r3, #8]
 8011d4c:	e006      	b.n	8011d5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	689a      	ldr	r2, [r3, #8]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011d5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	2b02      	cmp	r3, #2
 8011d62:	d104      	bne.n	8011d6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	6859      	ldr	r1, [r3, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	4b1d      	ldr	r3, [pc, #116]	; (8011df0 <HAL_I2C_Init+0x11c>)
 8011d7a:	430b      	orrs	r3, r1
 8011d7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	68da      	ldr	r2, [r3, #12]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011d8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	691a      	ldr	r2, [r3, #16]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	695b      	ldr	r3, [r3, #20]
 8011d96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	699b      	ldr	r3, [r3, #24]
 8011d9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	430a      	orrs	r2, r1
 8011da6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	69d9      	ldr	r1, [r3, #28]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a1a      	ldr	r2, [r3, #32]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	430a      	orrs	r2, r1
 8011db6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f042 0201 	orr.w	r2, r2, #1
 8011dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2220      	movs	r2, #32
 8011dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	02008000 	.word	0x02008000

08011df4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b088      	sub	sp, #32
 8011df8:	af02      	add	r7, sp, #8
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	607a      	str	r2, [r7, #4]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	460b      	mov	r3, r1
 8011e02:	817b      	strh	r3, [r7, #10]
 8011e04:	4613      	mov	r3, r2
 8011e06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	2b20      	cmp	r3, #32
 8011e12:	f040 80da 	bne.w	8011fca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d101      	bne.n	8011e24 <HAL_I2C_Master_Transmit+0x30>
 8011e20:	2302      	movs	r3, #2
 8011e22:	e0d3      	b.n	8011fcc <HAL_I2C_Master_Transmit+0x1d8>
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011e2c:	f7fe fa36 	bl	801029c <HAL_GetTick>
 8011e30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	2319      	movs	r3, #25
 8011e38:	2201      	movs	r2, #1
 8011e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f000 fbc6 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d001      	beq.n	8011e4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	e0be      	b.n	8011fcc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2221      	movs	r2, #33	; 0x21
 8011e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2210      	movs	r2, #16
 8011e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2200      	movs	r2, #0
 8011e62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	893a      	ldrh	r2, [r7, #8]
 8011e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	2200      	movs	r2, #0
 8011e74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	2bff      	cmp	r3, #255	; 0xff
 8011e7e:	d90e      	bls.n	8011e9e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	22ff      	movs	r2, #255	; 0xff
 8011e84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	8979      	ldrh	r1, [r7, #10]
 8011e8e:	4b51      	ldr	r3, [pc, #324]	; (8011fd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f000 fd36 	bl	8012908 <I2C_TransferConfig>
 8011e9c:	e06c      	b.n	8011f78 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	8979      	ldrh	r1, [r7, #10]
 8011eb0:	4b48      	ldr	r3, [pc, #288]	; (8011fd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f000 fd25 	bl	8012908 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8011ebe:	e05b      	b.n	8011f78 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011ec0:	697a      	ldr	r2, [r7, #20]
 8011ec2:	6a39      	ldr	r1, [r7, #32]
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f000 fbc3 	bl	8012650 <I2C_WaitOnTXISFlagUntilTimeout>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d001      	beq.n	8011ed4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e07b      	b.n	8011fcc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed8:	781a      	ldrb	r2, [r3, #0]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ee4:	1c5a      	adds	r2, r3, #1
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011efc:	3b01      	subs	r3, #1
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d034      	beq.n	8011f78 <HAL_I2C_Master_Transmit+0x184>
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d130      	bne.n	8011f78 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	9300      	str	r3, [sp, #0]
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	2180      	movs	r1, #128	; 0x80
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f000 fb55 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d001      	beq.n	8011f30 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	e04d      	b.n	8011fcc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	2bff      	cmp	r3, #255	; 0xff
 8011f38:	d90e      	bls.n	8011f58 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	22ff      	movs	r2, #255	; 0xff
 8011f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	8979      	ldrh	r1, [r7, #10]
 8011f48:	2300      	movs	r3, #0
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011f50:	68f8      	ldr	r0, [r7, #12]
 8011f52:	f000 fcd9 	bl	8012908 <I2C_TransferConfig>
 8011f56:	e00f      	b.n	8011f78 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f66:	b2da      	uxtb	r2, r3
 8011f68:	8979      	ldrh	r1, [r7, #10]
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f000 fcc8 	bl	8012908 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d19e      	bne.n	8011ec0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011f82:	697a      	ldr	r2, [r7, #20]
 8011f84:	6a39      	ldr	r1, [r7, #32]
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f000 fba2 	bl	80126d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d001      	beq.n	8011f96 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8011f92:	2301      	movs	r3, #1
 8011f94:	e01a      	b.n	8011fcc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2220      	movs	r2, #32
 8011f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	6859      	ldr	r1, [r3, #4]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	4b0b      	ldr	r3, [pc, #44]	; (8011fd8 <HAL_I2C_Master_Transmit+0x1e4>)
 8011faa:	400b      	ands	r3, r1
 8011fac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2220      	movs	r2, #32
 8011fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	e000      	b.n	8011fcc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8011fca:	2302      	movs	r3, #2
  }
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	80002000 	.word	0x80002000
 8011fd8:	fe00e800 	.word	0xfe00e800

08011fdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b088      	sub	sp, #32
 8011fe0:	af02      	add	r7, sp, #8
 8011fe2:	60f8      	str	r0, [r7, #12]
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	461a      	mov	r2, r3
 8011fea:	4603      	mov	r3, r0
 8011fec:	817b      	strh	r3, [r7, #10]
 8011fee:	460b      	mov	r3, r1
 8011ff0:	813b      	strh	r3, [r7, #8]
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	2b20      	cmp	r3, #32
 8012000:	f040 80f9 	bne.w	80121f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d002      	beq.n	8012010 <HAL_I2C_Mem_Write+0x34>
 801200a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801200c:	2b00      	cmp	r3, #0
 801200e:	d105      	bne.n	801201c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012016:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8012018:	2301      	movs	r3, #1
 801201a:	e0ed      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012022:	2b01      	cmp	r3, #1
 8012024:	d101      	bne.n	801202a <HAL_I2C_Mem_Write+0x4e>
 8012026:	2302      	movs	r3, #2
 8012028:	e0e6      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2201      	movs	r2, #1
 801202e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012032:	f7fe f933 	bl	801029c <HAL_GetTick>
 8012036:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	2319      	movs	r3, #25
 801203e:	2201      	movs	r2, #1
 8012040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f000 fac3 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d001      	beq.n	8012054 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8012050:	2301      	movs	r3, #1
 8012052:	e0d1      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2221      	movs	r2, #33	; 0x21
 8012058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2240      	movs	r2, #64	; 0x40
 8012060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	6a3a      	ldr	r2, [r7, #32]
 801206e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801207c:	88f8      	ldrh	r0, [r7, #6]
 801207e:	893a      	ldrh	r2, [r7, #8]
 8012080:	8979      	ldrh	r1, [r7, #10]
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	4603      	mov	r3, r0
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f9d3 	bl	8012438 <I2C_RequestMemoryWrite>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d005      	beq.n	80120a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2200      	movs	r2, #0
 801209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80120a0:	2301      	movs	r3, #1
 80120a2:	e0a9      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	2bff      	cmp	r3, #255	; 0xff
 80120ac:	d90e      	bls.n	80120cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	22ff      	movs	r2, #255	; 0xff
 80120b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	8979      	ldrh	r1, [r7, #10]
 80120bc:	2300      	movs	r3, #0
 80120be:	9300      	str	r3, [sp, #0]
 80120c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f000 fc1f 	bl	8012908 <I2C_TransferConfig>
 80120ca:	e00f      	b.n	80120ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	8979      	ldrh	r1, [r7, #10]
 80120de:	2300      	movs	r3, #0
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f000 fc0e 	bl	8012908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80120ec:	697a      	ldr	r2, [r7, #20]
 80120ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f000 faad 	bl	8012650 <I2C_WaitOnTXISFlagUntilTimeout>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d001      	beq.n	8012100 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80120fc:	2301      	movs	r3, #1
 80120fe:	e07b      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	781a      	ldrb	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012110:	1c5a      	adds	r2, r3, #1
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801211a:	b29b      	uxth	r3, r3
 801211c:	3b01      	subs	r3, #1
 801211e:	b29a      	uxth	r2, r3
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012128:	3b01      	subs	r3, #1
 801212a:	b29a      	uxth	r2, r3
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012134:	b29b      	uxth	r3, r3
 8012136:	2b00      	cmp	r3, #0
 8012138:	d034      	beq.n	80121a4 <HAL_I2C_Mem_Write+0x1c8>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801213e:	2b00      	cmp	r3, #0
 8012140:	d130      	bne.n	80121a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012148:	2200      	movs	r2, #0
 801214a:	2180      	movs	r1, #128	; 0x80
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f000 fa3f 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d001      	beq.n	801215c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8012158:	2301      	movs	r3, #1
 801215a:	e04d      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012160:	b29b      	uxth	r3, r3
 8012162:	2bff      	cmp	r3, #255	; 0xff
 8012164:	d90e      	bls.n	8012184 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	22ff      	movs	r2, #255	; 0xff
 801216a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012170:	b2da      	uxtb	r2, r3
 8012172:	8979      	ldrh	r1, [r7, #10]
 8012174:	2300      	movs	r3, #0
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 fbc3 	bl	8012908 <I2C_TransferConfig>
 8012182:	e00f      	b.n	80121a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012188:	b29a      	uxth	r2, r3
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012192:	b2da      	uxtb	r2, r3
 8012194:	8979      	ldrh	r1, [r7, #10]
 8012196:	2300      	movs	r3, #0
 8012198:	9300      	str	r3, [sp, #0]
 801219a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	f000 fbb2 	bl	8012908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d19e      	bne.n	80120ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80121ae:	697a      	ldr	r2, [r7, #20]
 80121b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f000 fa8c 	bl	80126d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d001      	beq.n	80121c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80121be:	2301      	movs	r3, #1
 80121c0:	e01a      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2220      	movs	r2, #32
 80121c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	6859      	ldr	r1, [r3, #4]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	681a      	ldr	r2, [r3, #0]
 80121d4:	4b0a      	ldr	r3, [pc, #40]	; (8012200 <HAL_I2C_Mem_Write+0x224>)
 80121d6:	400b      	ands	r3, r1
 80121d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2220      	movs	r2, #32
 80121de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2200      	movs	r2, #0
 80121e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2200      	movs	r2, #0
 80121ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e000      	b.n	80121f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80121f6:	2302      	movs	r3, #2
  }
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3718      	adds	r7, #24
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	fe00e800 	.word	0xfe00e800

08012204 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b088      	sub	sp, #32
 8012208:	af02      	add	r7, sp, #8
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	4608      	mov	r0, r1
 801220e:	4611      	mov	r1, r2
 8012210:	461a      	mov	r2, r3
 8012212:	4603      	mov	r3, r0
 8012214:	817b      	strh	r3, [r7, #10]
 8012216:	460b      	mov	r3, r1
 8012218:	813b      	strh	r3, [r7, #8]
 801221a:	4613      	mov	r3, r2
 801221c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b20      	cmp	r3, #32
 8012228:	f040 80fd 	bne.w	8012426 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <HAL_I2C_Mem_Read+0x34>
 8012232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012234:	2b00      	cmp	r3, #0
 8012236:	d105      	bne.n	8012244 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801223e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8012240:	2301      	movs	r3, #1
 8012242:	e0f1      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801224a:	2b01      	cmp	r3, #1
 801224c:	d101      	bne.n	8012252 <HAL_I2C_Mem_Read+0x4e>
 801224e:	2302      	movs	r3, #2
 8012250:	e0ea      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2201      	movs	r2, #1
 8012256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801225a:	f7fe f81f 	bl	801029c <HAL_GetTick>
 801225e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	9300      	str	r3, [sp, #0]
 8012264:	2319      	movs	r3, #25
 8012266:	2201      	movs	r2, #1
 8012268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f000 f9af 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d001      	beq.n	801227c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8012278:	2301      	movs	r3, #1
 801227a:	e0d5      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2222      	movs	r2, #34	; 0x22
 8012280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2240      	movs	r2, #64	; 0x40
 8012288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2200      	movs	r2, #0
 8012290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6a3a      	ldr	r2, [r7, #32]
 8012296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801229c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2200      	movs	r2, #0
 80122a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80122a4:	88f8      	ldrh	r0, [r7, #6]
 80122a6:	893a      	ldrh	r2, [r7, #8]
 80122a8:	8979      	ldrh	r1, [r7, #10]
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	4603      	mov	r3, r0
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f000 f913 	bl	80124e0 <I2C_RequestMemoryRead>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d005      	beq.n	80122cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2200      	movs	r2, #0
 80122c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e0ad      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	2bff      	cmp	r3, #255	; 0xff
 80122d4:	d90e      	bls.n	80122f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	22ff      	movs	r2, #255	; 0xff
 80122da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122e0:	b2da      	uxtb	r2, r3
 80122e2:	8979      	ldrh	r1, [r7, #10]
 80122e4:	4b52      	ldr	r3, [pc, #328]	; (8012430 <HAL_I2C_Mem_Read+0x22c>)
 80122e6:	9300      	str	r3, [sp, #0]
 80122e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 fb0b 	bl	8012908 <I2C_TransferConfig>
 80122f2:	e00f      	b.n	8012314 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012302:	b2da      	uxtb	r2, r3
 8012304:	8979      	ldrh	r1, [r7, #10]
 8012306:	4b4a      	ldr	r3, [pc, #296]	; (8012430 <HAL_I2C_Mem_Read+0x22c>)
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	f000 fafa 	bl	8012908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	9300      	str	r3, [sp, #0]
 8012318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231a:	2200      	movs	r2, #0
 801231c:	2104      	movs	r1, #4
 801231e:	68f8      	ldr	r0, [r7, #12]
 8012320:	f000 f956 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d001      	beq.n	801232e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801232a:	2301      	movs	r3, #1
 801232c:	e07c      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012338:	b2d2      	uxtb	r2, r2
 801233a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012340:	1c5a      	adds	r2, r3, #1
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801234a:	3b01      	subs	r3, #1
 801234c:	b29a      	uxth	r2, r3
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012356:	b29b      	uxth	r3, r3
 8012358:	3b01      	subs	r3, #1
 801235a:	b29a      	uxth	r2, r3
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012364:	b29b      	uxth	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d034      	beq.n	80123d4 <HAL_I2C_Mem_Read+0x1d0>
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801236e:	2b00      	cmp	r3, #0
 8012370:	d130      	bne.n	80123d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	9300      	str	r3, [sp, #0]
 8012376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012378:	2200      	movs	r2, #0
 801237a:	2180      	movs	r1, #128	; 0x80
 801237c:	68f8      	ldr	r0, [r7, #12]
 801237e:	f000 f927 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 8012382:	4603      	mov	r3, r0
 8012384:	2b00      	cmp	r3, #0
 8012386:	d001      	beq.n	801238c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8012388:	2301      	movs	r3, #1
 801238a:	e04d      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012390:	b29b      	uxth	r3, r3
 8012392:	2bff      	cmp	r3, #255	; 0xff
 8012394:	d90e      	bls.n	80123b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	22ff      	movs	r2, #255	; 0xff
 801239a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	8979      	ldrh	r1, [r7, #10]
 80123a4:	2300      	movs	r3, #0
 80123a6:	9300      	str	r3, [sp, #0]
 80123a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80123ac:	68f8      	ldr	r0, [r7, #12]
 80123ae:	f000 faab 	bl	8012908 <I2C_TransferConfig>
 80123b2:	e00f      	b.n	80123d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	8979      	ldrh	r1, [r7, #10]
 80123c6:	2300      	movs	r3, #0
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f000 fa9a 	bl	8012908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80123d8:	b29b      	uxth	r3, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d19a      	bne.n	8012314 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80123de:	697a      	ldr	r2, [r7, #20]
 80123e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123e2:	68f8      	ldr	r0, [r7, #12]
 80123e4:	f000 f974 	bl	80126d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d001      	beq.n	80123f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80123ee:	2301      	movs	r3, #1
 80123f0:	e01a      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2220      	movs	r2, #32
 80123f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	6859      	ldr	r1, [r3, #4]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	4b0b      	ldr	r3, [pc, #44]	; (8012434 <HAL_I2C_Mem_Read+0x230>)
 8012406:	400b      	ands	r3, r1
 8012408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2220      	movs	r2, #32
 801240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2200      	movs	r2, #0
 8012416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2200      	movs	r2, #0
 801241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012422:	2300      	movs	r3, #0
 8012424:	e000      	b.n	8012428 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8012426:	2302      	movs	r3, #2
  }
}
 8012428:	4618      	mov	r0, r3
 801242a:	3718      	adds	r7, #24
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	80002400 	.word	0x80002400
 8012434:	fe00e800 	.word	0xfe00e800

08012438 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af02      	add	r7, sp, #8
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	4608      	mov	r0, r1
 8012442:	4611      	mov	r1, r2
 8012444:	461a      	mov	r2, r3
 8012446:	4603      	mov	r3, r0
 8012448:	817b      	strh	r3, [r7, #10]
 801244a:	460b      	mov	r3, r1
 801244c:	813b      	strh	r3, [r7, #8]
 801244e:	4613      	mov	r3, r2
 8012450:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8012452:	88fb      	ldrh	r3, [r7, #6]
 8012454:	b2da      	uxtb	r2, r3
 8012456:	8979      	ldrh	r1, [r7, #10]
 8012458:	4b20      	ldr	r3, [pc, #128]	; (80124dc <I2C_RequestMemoryWrite+0xa4>)
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012460:	68f8      	ldr	r0, [r7, #12]
 8012462:	f000 fa51 	bl	8012908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012466:	69fa      	ldr	r2, [r7, #28]
 8012468:	69b9      	ldr	r1, [r7, #24]
 801246a:	68f8      	ldr	r0, [r7, #12]
 801246c:	f000 f8f0 	bl	8012650 <I2C_WaitOnTXISFlagUntilTimeout>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8012476:	2301      	movs	r3, #1
 8012478:	e02c      	b.n	80124d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801247a:	88fb      	ldrh	r3, [r7, #6]
 801247c:	2b01      	cmp	r3, #1
 801247e:	d105      	bne.n	801248c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012480:	893b      	ldrh	r3, [r7, #8]
 8012482:	b2da      	uxtb	r2, r3
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	629a      	str	r2, [r3, #40]	; 0x28
 801248a:	e015      	b.n	80124b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801248c:	893b      	ldrh	r3, [r7, #8]
 801248e:	0a1b      	lsrs	r3, r3, #8
 8012490:	b29b      	uxth	r3, r3
 8012492:	b2da      	uxtb	r2, r3
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801249a:	69fa      	ldr	r2, [r7, #28]
 801249c:	69b9      	ldr	r1, [r7, #24]
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f000 f8d6 	bl	8012650 <I2C_WaitOnTXISFlagUntilTimeout>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d001      	beq.n	80124ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80124aa:	2301      	movs	r3, #1
 80124ac:	e012      	b.n	80124d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80124ae:	893b      	ldrh	r3, [r7, #8]
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80124b8:	69fb      	ldr	r3, [r7, #28]
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	2200      	movs	r2, #0
 80124c0:	2180      	movs	r1, #128	; 0x80
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f000 f884 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d001      	beq.n	80124d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80124ce:	2301      	movs	r3, #1
 80124d0:	e000      	b.n	80124d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	80002000 	.word	0x80002000

080124e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af02      	add	r7, sp, #8
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	4608      	mov	r0, r1
 80124ea:	4611      	mov	r1, r2
 80124ec:	461a      	mov	r2, r3
 80124ee:	4603      	mov	r3, r0
 80124f0:	817b      	strh	r3, [r7, #10]
 80124f2:	460b      	mov	r3, r1
 80124f4:	813b      	strh	r3, [r7, #8]
 80124f6:	4613      	mov	r3, r2
 80124f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80124fa:	88fb      	ldrh	r3, [r7, #6]
 80124fc:	b2da      	uxtb	r2, r3
 80124fe:	8979      	ldrh	r1, [r7, #10]
 8012500:	4b20      	ldr	r3, [pc, #128]	; (8012584 <I2C_RequestMemoryRead+0xa4>)
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	2300      	movs	r3, #0
 8012506:	68f8      	ldr	r0, [r7, #12]
 8012508:	f000 f9fe 	bl	8012908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	69b9      	ldr	r1, [r7, #24]
 8012510:	68f8      	ldr	r0, [r7, #12]
 8012512:	f000 f89d 	bl	8012650 <I2C_WaitOnTXISFlagUntilTimeout>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d001      	beq.n	8012520 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801251c:	2301      	movs	r3, #1
 801251e:	e02c      	b.n	801257a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012520:	88fb      	ldrh	r3, [r7, #6]
 8012522:	2b01      	cmp	r3, #1
 8012524:	d105      	bne.n	8012532 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012526:	893b      	ldrh	r3, [r7, #8]
 8012528:	b2da      	uxtb	r2, r3
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	629a      	str	r2, [r3, #40]	; 0x28
 8012530:	e015      	b.n	801255e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8012532:	893b      	ldrh	r3, [r7, #8]
 8012534:	0a1b      	lsrs	r3, r3, #8
 8012536:	b29b      	uxth	r3, r3
 8012538:	b2da      	uxtb	r2, r3
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012540:	69fa      	ldr	r2, [r7, #28]
 8012542:	69b9      	ldr	r1, [r7, #24]
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f000 f883 	bl	8012650 <I2C_WaitOnTXISFlagUntilTimeout>
 801254a:	4603      	mov	r3, r0
 801254c:	2b00      	cmp	r3, #0
 801254e:	d001      	beq.n	8012554 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8012550:	2301      	movs	r3, #1
 8012552:	e012      	b.n	801257a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012554:	893b      	ldrh	r3, [r7, #8]
 8012556:	b2da      	uxtb	r2, r3
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	2200      	movs	r2, #0
 8012566:	2140      	movs	r1, #64	; 0x40
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f000 f831 	bl	80125d0 <I2C_WaitOnFlagUntilTimeout>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d001      	beq.n	8012578 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8012574:	2301      	movs	r3, #1
 8012576:	e000      	b.n	801257a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8012578:	2300      	movs	r3, #0
}
 801257a:	4618      	mov	r0, r3
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	80002000 	.word	0x80002000

08012588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	699b      	ldr	r3, [r3, #24]
 8012596:	f003 0302 	and.w	r3, r3, #2
 801259a:	2b02      	cmp	r3, #2
 801259c:	d103      	bne.n	80125a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2200      	movs	r2, #0
 80125a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	699b      	ldr	r3, [r3, #24]
 80125ac:	f003 0301 	and.w	r3, r3, #1
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	d007      	beq.n	80125c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	699a      	ldr	r2, [r3, #24]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f042 0201 	orr.w	r2, r2, #1
 80125c2:	619a      	str	r2, [r3, #24]
  }
}
 80125c4:	bf00      	nop
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	603b      	str	r3, [r7, #0]
 80125dc:	4613      	mov	r3, r2
 80125de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80125e0:	e022      	b.n	8012628 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e8:	d01e      	beq.n	8012628 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125ea:	f7fd fe57 	bl	801029c <HAL_GetTick>
 80125ee:	4602      	mov	r2, r0
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d302      	bcc.n	8012600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d113      	bne.n	8012628 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012604:	f043 0220 	orr.w	r2, r3, #32
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2220      	movs	r2, #32
 8012610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2200      	movs	r2, #0
 8012620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8012624:	2301      	movs	r3, #1
 8012626:	e00f      	b.n	8012648 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	699a      	ldr	r2, [r3, #24]
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	4013      	ands	r3, r2
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	429a      	cmp	r2, r3
 8012636:	bf0c      	ite	eq
 8012638:	2301      	moveq	r3, #1
 801263a:	2300      	movne	r3, #0
 801263c:	b2db      	uxtb	r3, r3
 801263e:	461a      	mov	r2, r3
 8012640:	79fb      	ldrb	r3, [r7, #7]
 8012642:	429a      	cmp	r2, r3
 8012644:	d0cd      	beq.n	80125e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801265c:	e02c      	b.n	80126b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	68b9      	ldr	r1, [r7, #8]
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f000 f870 	bl	8012748 <I2C_IsErrorOccurred>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801266e:	2301      	movs	r3, #1
 8012670:	e02a      	b.n	80126c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012678:	d01e      	beq.n	80126b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801267a:	f7fd fe0f 	bl	801029c <HAL_GetTick>
 801267e:	4602      	mov	r2, r0
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	68ba      	ldr	r2, [r7, #8]
 8012686:	429a      	cmp	r2, r3
 8012688:	d302      	bcc.n	8012690 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d113      	bne.n	80126b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012694:	f043 0220 	orr.w	r2, r3, #32
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2220      	movs	r2, #32
 80126a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80126b4:	2301      	movs	r3, #1
 80126b6:	e007      	b.n	80126c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	f003 0302 	and.w	r3, r3, #2
 80126c2:	2b02      	cmp	r3, #2
 80126c4:	d1cb      	bne.n	801265e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80126c6:	2300      	movs	r3, #0
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80126dc:	e028      	b.n	8012730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	68b9      	ldr	r1, [r7, #8]
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f000 f830 	bl	8012748 <I2C_IsErrorOccurred>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d001      	beq.n	80126f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80126ee:	2301      	movs	r3, #1
 80126f0:	e026      	b.n	8012740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80126f2:	f7fd fdd3 	bl	801029c <HAL_GetTick>
 80126f6:	4602      	mov	r2, r0
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	68ba      	ldr	r2, [r7, #8]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d302      	bcc.n	8012708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d113      	bne.n	8012730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801270c:	f043 0220 	orr.w	r2, r3, #32
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2220      	movs	r2, #32
 8012718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2200      	movs	r2, #0
 8012720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2200      	movs	r2, #0
 8012728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801272c:	2301      	movs	r3, #1
 801272e:	e007      	b.n	8012740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	699b      	ldr	r3, [r3, #24]
 8012736:	f003 0320 	and.w	r3, r3, #32
 801273a:	2b20      	cmp	r3, #32
 801273c:	d1cf      	bne.n	80126de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	3710      	adds	r7, #16
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b08a      	sub	sp, #40	; 0x28
 801274c:	af00      	add	r7, sp, #0
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	699b      	ldr	r3, [r3, #24]
 8012760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012762:	2300      	movs	r3, #0
 8012764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801276a:	69bb      	ldr	r3, [r7, #24]
 801276c:	f003 0310 	and.w	r3, r3, #16
 8012770:	2b00      	cmp	r3, #0
 8012772:	d068      	beq.n	8012846 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2210      	movs	r2, #16
 801277a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801277c:	e049      	b.n	8012812 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012784:	d045      	beq.n	8012812 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012786:	f7fd fd89 	bl	801029c <HAL_GetTick>
 801278a:	4602      	mov	r2, r0
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	1ad3      	subs	r3, r2, r3
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	429a      	cmp	r2, r3
 8012794:	d302      	bcc.n	801279c <I2C_IsErrorOccurred+0x54>
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d13a      	bne.n	8012812 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	699b      	ldr	r3, [r3, #24]
 80127b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127be:	d121      	bne.n	8012804 <I2C_IsErrorOccurred+0xbc>
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80127c6:	d01d      	beq.n	8012804 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80127c8:	7cfb      	ldrb	r3, [r7, #19]
 80127ca:	2b20      	cmp	r3, #32
 80127cc:	d01a      	beq.n	8012804 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80127dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80127de:	f7fd fd5d 	bl	801029c <HAL_GetTick>
 80127e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80127e4:	e00e      	b.n	8012804 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80127e6:	f7fd fd59 	bl	801029c <HAL_GetTick>
 80127ea:	4602      	mov	r2, r0
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	2b19      	cmp	r3, #25
 80127f2:	d907      	bls.n	8012804 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	f043 0320 	orr.w	r3, r3, #32
 80127fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80127fc:	2301      	movs	r3, #1
 80127fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8012802:	e006      	b.n	8012812 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	699b      	ldr	r3, [r3, #24]
 801280a:	f003 0320 	and.w	r3, r3, #32
 801280e:	2b20      	cmp	r3, #32
 8012810:	d1e9      	bne.n	80127e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	699b      	ldr	r3, [r3, #24]
 8012818:	f003 0320 	and.w	r3, r3, #32
 801281c:	2b20      	cmp	r3, #32
 801281e:	d003      	beq.n	8012828 <I2C_IsErrorOccurred+0xe0>
 8012820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012824:	2b00      	cmp	r3, #0
 8012826:	d0aa      	beq.n	801277e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801282c:	2b00      	cmp	r3, #0
 801282e:	d103      	bne.n	8012838 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2220      	movs	r2, #32
 8012836:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012838:	6a3b      	ldr	r3, [r7, #32]
 801283a:	f043 0304 	orr.w	r3, r3, #4
 801283e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012840:	2301      	movs	r3, #1
 8012842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	699b      	ldr	r3, [r3, #24]
 801284c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012854:	2b00      	cmp	r3, #0
 8012856:	d00b      	beq.n	8012870 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012858:	6a3b      	ldr	r3, [r7, #32]
 801285a:	f043 0301 	orr.w	r3, r3, #1
 801285e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012876:	2b00      	cmp	r3, #0
 8012878:	d00b      	beq.n	8012892 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801287a:	6a3b      	ldr	r3, [r7, #32]
 801287c:	f043 0308 	orr.w	r3, r3, #8
 8012880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801288a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801288c:	2301      	movs	r3, #1
 801288e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012898:	2b00      	cmp	r3, #0
 801289a:	d00b      	beq.n	80128b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801289c:	6a3b      	ldr	r3, [r7, #32]
 801289e:	f043 0302 	orr.w	r3, r3, #2
 80128a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80128ae:	2301      	movs	r3, #1
 80128b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80128b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d01c      	beq.n	80128f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	f7ff fe63 	bl	8012588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	6859      	ldr	r1, [r3, #4]
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	4b0d      	ldr	r3, [pc, #52]	; (8012904 <I2C_IsErrorOccurred+0x1bc>)
 80128ce:	400b      	ands	r3, r1
 80128d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128d6:	6a3b      	ldr	r3, [r7, #32]
 80128d8:	431a      	orrs	r2, r3
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2220      	movs	r2, #32
 80128e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2200      	movs	r2, #0
 80128ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80128f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3728      	adds	r7, #40	; 0x28
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	fe00e800 	.word	0xfe00e800

08012908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012908:	b480      	push	{r7}
 801290a:	b087      	sub	sp, #28
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	607b      	str	r3, [r7, #4]
 8012912:	460b      	mov	r3, r1
 8012914:	817b      	strh	r3, [r7, #10]
 8012916:	4613      	mov	r3, r2
 8012918:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801291a:	897b      	ldrh	r3, [r7, #10]
 801291c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012920:	7a7b      	ldrb	r3, [r7, #9]
 8012922:	041b      	lsls	r3, r3, #16
 8012924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012928:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801292e:	6a3b      	ldr	r3, [r7, #32]
 8012930:	4313      	orrs	r3, r2
 8012932:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012936:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	0d5b      	lsrs	r3, r3, #21
 8012942:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8012946:	4b08      	ldr	r3, [pc, #32]	; (8012968 <I2C_TransferConfig+0x60>)
 8012948:	430b      	orrs	r3, r1
 801294a:	43db      	mvns	r3, r3
 801294c:	ea02 0103 	and.w	r1, r2, r3
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	697a      	ldr	r2, [r7, #20]
 8012956:	430a      	orrs	r2, r1
 8012958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801295a:	bf00      	nop
 801295c:	371c      	adds	r7, #28
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	03ff63ff 	.word	0x03ff63ff

0801296c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801296c:	b480      	push	{r7}
 801296e:	b083      	sub	sp, #12
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801297c:	b2db      	uxtb	r3, r3
 801297e:	2b20      	cmp	r3, #32
 8012980:	d138      	bne.n	80129f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012988:	2b01      	cmp	r3, #1
 801298a:	d101      	bne.n	8012990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801298c:	2302      	movs	r3, #2
 801298e:	e032      	b.n	80129f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2224      	movs	r2, #36	; 0x24
 801299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f022 0201 	bic.w	r2, r2, #1
 80129ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80129be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	6819      	ldr	r1, [r3, #0]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	430a      	orrs	r2, r1
 80129ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f042 0201 	orr.w	r2, r2, #1
 80129de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2220      	movs	r2, #32
 80129e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80129f0:	2300      	movs	r3, #0
 80129f2:	e000      	b.n	80129f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80129f4:	2302      	movs	r3, #2
  }
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr

08012a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012a02:	b480      	push	{r7}
 8012a04:	b085      	sub	sp, #20
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
 8012a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	2b20      	cmp	r3, #32
 8012a16:	d139      	bne.n	8012a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012a22:	2302      	movs	r3, #2
 8012a24:	e033      	b.n	8012a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2224      	movs	r2, #36	; 0x24
 8012a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	681a      	ldr	r2, [r3, #0]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f022 0201 	bic.w	r2, r2, #1
 8012a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8012a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	021b      	lsls	r3, r3, #8
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	68fa      	ldr	r2, [r7, #12]
 8012a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f042 0201 	orr.w	r2, r2, #1
 8012a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2220      	movs	r2, #32
 8012a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2200      	movs	r2, #0
 8012a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e000      	b.n	8012a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012a8c:	2302      	movs	r3, #2
  }
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3714      	adds	r7, #20
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8012a9a:	b580      	push	{r7, lr}
 8012a9c:	b084      	sub	sp, #16
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d101      	bne.n	8012aac <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	e041      	b.n	8012b30 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8012ab4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f245 5255 	movw	r2, #21845	; 0x5555
 8012abe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	6852      	ldr	r2, [r2, #4]
 8012ac8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	6892      	ldr	r2, [r2, #8]
 8012ad2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8012ad4:	f7fd fbe2 	bl	801029c <HAL_GetTick>
 8012ad8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8012ada:	e00f      	b.n	8012afc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8012adc:	f7fd fbde 	bl	801029c <HAL_GetTick>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	2b31      	cmp	r3, #49	; 0x31
 8012ae8:	d908      	bls.n	8012afc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	f003 0307 	and.w	r3, r3, #7
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8012af8:	2303      	movs	r3, #3
 8012afa:	e019      	b.n	8012b30 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	f003 0307 	and.w	r3, r3, #7
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1e8      	bne.n	8012adc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	691a      	ldr	r2, [r3, #16]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d005      	beq.n	8012b24 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	68d2      	ldr	r2, [r2, #12]
 8012b20:	611a      	str	r2, [r3, #16]
 8012b22:	e004      	b.n	8012b2e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012b2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012b2e:	2300      	movs	r3, #0
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012b48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8012b58:	b480      	push	{r7}
 8012b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012b5c:	4b05      	ldr	r3, [pc, #20]	; (8012b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4a04      	ldr	r2, [pc, #16]	; (8012b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8012b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b66:	6013      	str	r3, [r2, #0]
}
 8012b68:	bf00      	nop
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	40007000 	.word	0x40007000

08012b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b086      	sub	sp, #24
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8012b80:	2300      	movs	r3, #0
 8012b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e29b      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f003 0301 	and.w	r3, r3, #1
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f000 8087 	beq.w	8012caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012b9c:	4b96      	ldr	r3, [pc, #600]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012b9e:	689b      	ldr	r3, [r3, #8]
 8012ba0:	f003 030c 	and.w	r3, r3, #12
 8012ba4:	2b04      	cmp	r3, #4
 8012ba6:	d00c      	beq.n	8012bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012ba8:	4b93      	ldr	r3, [pc, #588]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	f003 030c 	and.w	r3, r3, #12
 8012bb0:	2b08      	cmp	r3, #8
 8012bb2:	d112      	bne.n	8012bda <HAL_RCC_OscConfig+0x62>
 8012bb4:	4b90      	ldr	r3, [pc, #576]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012bc0:	d10b      	bne.n	8012bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012bc2:	4b8d      	ldr	r3, [pc, #564]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d06c      	beq.n	8012ca8 <HAL_RCC_OscConfig+0x130>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d168      	bne.n	8012ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e275      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012be2:	d106      	bne.n	8012bf2 <HAL_RCC_OscConfig+0x7a>
 8012be4:	4b84      	ldr	r3, [pc, #528]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	4a83      	ldr	r2, [pc, #524]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012bee:	6013      	str	r3, [r2, #0]
 8012bf0:	e02e      	b.n	8012c50 <HAL_RCC_OscConfig+0xd8>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d10c      	bne.n	8012c14 <HAL_RCC_OscConfig+0x9c>
 8012bfa:	4b7f      	ldr	r3, [pc, #508]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	4a7e      	ldr	r2, [pc, #504]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012c04:	6013      	str	r3, [r2, #0]
 8012c06:	4b7c      	ldr	r3, [pc, #496]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	4a7b      	ldr	r2, [pc, #492]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012c10:	6013      	str	r3, [r2, #0]
 8012c12:	e01d      	b.n	8012c50 <HAL_RCC_OscConfig+0xd8>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012c1c:	d10c      	bne.n	8012c38 <HAL_RCC_OscConfig+0xc0>
 8012c1e:	4b76      	ldr	r3, [pc, #472]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	4a75      	ldr	r2, [pc, #468]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012c28:	6013      	str	r3, [r2, #0]
 8012c2a:	4b73      	ldr	r3, [pc, #460]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a72      	ldr	r2, [pc, #456]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012c34:	6013      	str	r3, [r2, #0]
 8012c36:	e00b      	b.n	8012c50 <HAL_RCC_OscConfig+0xd8>
 8012c38:	4b6f      	ldr	r3, [pc, #444]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4a6e      	ldr	r2, [pc, #440]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012c42:	6013      	str	r3, [r2, #0]
 8012c44:	4b6c      	ldr	r3, [pc, #432]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	4a6b      	ldr	r2, [pc, #428]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d013      	beq.n	8012c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c58:	f7fd fb20 	bl	801029c <HAL_GetTick>
 8012c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c5e:	e008      	b.n	8012c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012c60:	f7fd fb1c 	bl	801029c <HAL_GetTick>
 8012c64:	4602      	mov	r2, r0
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	1ad3      	subs	r3, r2, r3
 8012c6a:	2b64      	cmp	r3, #100	; 0x64
 8012c6c:	d901      	bls.n	8012c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012c6e:	2303      	movs	r3, #3
 8012c70:	e229      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c72:	4b61      	ldr	r3, [pc, #388]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d0f0      	beq.n	8012c60 <HAL_RCC_OscConfig+0xe8>
 8012c7e:	e014      	b.n	8012caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c80:	f7fd fb0c 	bl	801029c <HAL_GetTick>
 8012c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012c86:	e008      	b.n	8012c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012c88:	f7fd fb08 	bl	801029c <HAL_GetTick>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	1ad3      	subs	r3, r2, r3
 8012c92:	2b64      	cmp	r3, #100	; 0x64
 8012c94:	d901      	bls.n	8012c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8012c96:	2303      	movs	r3, #3
 8012c98:	e215      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012c9a:	4b57      	ldr	r3, [pc, #348]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d1f0      	bne.n	8012c88 <HAL_RCC_OscConfig+0x110>
 8012ca6:	e000      	b.n	8012caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f003 0302 	and.w	r3, r3, #2
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d069      	beq.n	8012d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012cb6:	4b50      	ldr	r3, [pc, #320]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	f003 030c 	and.w	r3, r3, #12
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d00b      	beq.n	8012cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012cc2:	4b4d      	ldr	r3, [pc, #308]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012cc4:	689b      	ldr	r3, [r3, #8]
 8012cc6:	f003 030c 	and.w	r3, r3, #12
 8012cca:	2b08      	cmp	r3, #8
 8012ccc:	d11c      	bne.n	8012d08 <HAL_RCC_OscConfig+0x190>
 8012cce:	4b4a      	ldr	r3, [pc, #296]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d116      	bne.n	8012d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012cda:	4b47      	ldr	r3, [pc, #284]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f003 0302 	and.w	r3, r3, #2
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d005      	beq.n	8012cf2 <HAL_RCC_OscConfig+0x17a>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	68db      	ldr	r3, [r3, #12]
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d001      	beq.n	8012cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8012cee:	2301      	movs	r3, #1
 8012cf0:	e1e9      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012cf2:	4b41      	ldr	r3, [pc, #260]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	691b      	ldr	r3, [r3, #16]
 8012cfe:	00db      	lsls	r3, r3, #3
 8012d00:	493d      	ldr	r1, [pc, #244]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d02:	4313      	orrs	r3, r2
 8012d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012d06:	e040      	b.n	8012d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	68db      	ldr	r3, [r3, #12]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d023      	beq.n	8012d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012d10:	4b39      	ldr	r3, [pc, #228]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4a38      	ldr	r2, [pc, #224]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d16:	f043 0301 	orr.w	r3, r3, #1
 8012d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d1c:	f7fd fabe 	bl	801029c <HAL_GetTick>
 8012d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d22:	e008      	b.n	8012d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012d24:	f7fd faba 	bl	801029c <HAL_GetTick>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	2b02      	cmp	r3, #2
 8012d30:	d901      	bls.n	8012d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8012d32:	2303      	movs	r3, #3
 8012d34:	e1c7      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d36:	4b30      	ldr	r3, [pc, #192]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f003 0302 	and.w	r3, r3, #2
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0f0      	beq.n	8012d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012d42:	4b2d      	ldr	r3, [pc, #180]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	691b      	ldr	r3, [r3, #16]
 8012d4e:	00db      	lsls	r3, r3, #3
 8012d50:	4929      	ldr	r1, [pc, #164]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d52:	4313      	orrs	r3, r2
 8012d54:	600b      	str	r3, [r1, #0]
 8012d56:	e018      	b.n	8012d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012d58:	4b27      	ldr	r3, [pc, #156]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4a26      	ldr	r2, [pc, #152]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d5e:	f023 0301 	bic.w	r3, r3, #1
 8012d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d64:	f7fd fa9a 	bl	801029c <HAL_GetTick>
 8012d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012d6a:	e008      	b.n	8012d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012d6c:	f7fd fa96 	bl	801029c <HAL_GetTick>
 8012d70:	4602      	mov	r2, r0
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	d901      	bls.n	8012d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8012d7a:	2303      	movs	r3, #3
 8012d7c:	e1a3      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012d7e:	4b1e      	ldr	r3, [pc, #120]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	f003 0302 	and.w	r3, r3, #2
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1f0      	bne.n	8012d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 0308 	and.w	r3, r3, #8
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d038      	beq.n	8012e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	695b      	ldr	r3, [r3, #20]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d019      	beq.n	8012dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012d9e:	4b16      	ldr	r3, [pc, #88]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012da2:	4a15      	ldr	r2, [pc, #84]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012da4:	f043 0301 	orr.w	r3, r3, #1
 8012da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012daa:	f7fd fa77 	bl	801029c <HAL_GetTick>
 8012dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012db0:	e008      	b.n	8012dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012db2:	f7fd fa73 	bl	801029c <HAL_GetTick>
 8012db6:	4602      	mov	r2, r0
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	1ad3      	subs	r3, r2, r3
 8012dbc:	2b02      	cmp	r3, #2
 8012dbe:	d901      	bls.n	8012dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012dc0:	2303      	movs	r3, #3
 8012dc2:	e180      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012dc4:	4b0c      	ldr	r3, [pc, #48]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dc8:	f003 0302 	and.w	r3, r3, #2
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d0f0      	beq.n	8012db2 <HAL_RCC_OscConfig+0x23a>
 8012dd0:	e01a      	b.n	8012e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012dd2:	4b09      	ldr	r3, [pc, #36]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dd6:	4a08      	ldr	r2, [pc, #32]	; (8012df8 <HAL_RCC_OscConfig+0x280>)
 8012dd8:	f023 0301 	bic.w	r3, r3, #1
 8012ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012dde:	f7fd fa5d 	bl	801029c <HAL_GetTick>
 8012de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012de4:	e00a      	b.n	8012dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012de6:	f7fd fa59 	bl	801029c <HAL_GetTick>
 8012dea:	4602      	mov	r2, r0
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	1ad3      	subs	r3, r2, r3
 8012df0:	2b02      	cmp	r3, #2
 8012df2:	d903      	bls.n	8012dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8012df4:	2303      	movs	r3, #3
 8012df6:	e166      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
 8012df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012dfc:	4b92      	ldr	r3, [pc, #584]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e00:	f003 0302 	and.w	r3, r3, #2
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1ee      	bne.n	8012de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f003 0304 	and.w	r3, r3, #4
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f000 80a4 	beq.w	8012f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012e16:	4b8c      	ldr	r3, [pc, #560]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d10d      	bne.n	8012e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8012e22:	4b89      	ldr	r3, [pc, #548]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e26:	4a88      	ldr	r2, [pc, #544]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8012e2e:	4b86      	ldr	r3, [pc, #536]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e36:	60bb      	str	r3, [r7, #8]
 8012e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012e3e:	4b83      	ldr	r3, [pc, #524]	; (801304c <HAL_RCC_OscConfig+0x4d4>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d118      	bne.n	8012e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8012e4a:	4b80      	ldr	r3, [pc, #512]	; (801304c <HAL_RCC_OscConfig+0x4d4>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4a7f      	ldr	r2, [pc, #508]	; (801304c <HAL_RCC_OscConfig+0x4d4>)
 8012e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012e56:	f7fd fa21 	bl	801029c <HAL_GetTick>
 8012e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012e5c:	e008      	b.n	8012e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012e5e:	f7fd fa1d 	bl	801029c <HAL_GetTick>
 8012e62:	4602      	mov	r2, r0
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	1ad3      	subs	r3, r2, r3
 8012e68:	2b64      	cmp	r3, #100	; 0x64
 8012e6a:	d901      	bls.n	8012e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8012e6c:	2303      	movs	r3, #3
 8012e6e:	e12a      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012e70:	4b76      	ldr	r3, [pc, #472]	; (801304c <HAL_RCC_OscConfig+0x4d4>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d0f0      	beq.n	8012e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d106      	bne.n	8012e92 <HAL_RCC_OscConfig+0x31a>
 8012e84:	4b70      	ldr	r3, [pc, #448]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e88:	4a6f      	ldr	r2, [pc, #444]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e8a:	f043 0301 	orr.w	r3, r3, #1
 8012e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8012e90:	e02d      	b.n	8012eee <HAL_RCC_OscConfig+0x376>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	689b      	ldr	r3, [r3, #8]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d10c      	bne.n	8012eb4 <HAL_RCC_OscConfig+0x33c>
 8012e9a:	4b6b      	ldr	r3, [pc, #428]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e9e:	4a6a      	ldr	r2, [pc, #424]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ea0:	f023 0301 	bic.w	r3, r3, #1
 8012ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8012ea6:	4b68      	ldr	r3, [pc, #416]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eaa:	4a67      	ldr	r2, [pc, #412]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012eac:	f023 0304 	bic.w	r3, r3, #4
 8012eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8012eb2:	e01c      	b.n	8012eee <HAL_RCC_OscConfig+0x376>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	2b05      	cmp	r3, #5
 8012eba:	d10c      	bne.n	8012ed6 <HAL_RCC_OscConfig+0x35e>
 8012ebc:	4b62      	ldr	r3, [pc, #392]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ec0:	4a61      	ldr	r2, [pc, #388]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ec2:	f043 0304 	orr.w	r3, r3, #4
 8012ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8012ec8:	4b5f      	ldr	r3, [pc, #380]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ecc:	4a5e      	ldr	r2, [pc, #376]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ece:	f043 0301 	orr.w	r3, r3, #1
 8012ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8012ed4:	e00b      	b.n	8012eee <HAL_RCC_OscConfig+0x376>
 8012ed6:	4b5c      	ldr	r3, [pc, #368]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eda:	4a5b      	ldr	r2, [pc, #364]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012edc:	f023 0301 	bic.w	r3, r3, #1
 8012ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8012ee2:	4b59      	ldr	r3, [pc, #356]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ee6:	4a58      	ldr	r2, [pc, #352]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012ee8:	f023 0304 	bic.w	r3, r3, #4
 8012eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	689b      	ldr	r3, [r3, #8]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d015      	beq.n	8012f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ef6:	f7fd f9d1 	bl	801029c <HAL_GetTick>
 8012efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012efc:	e00a      	b.n	8012f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012efe:	f7fd f9cd 	bl	801029c <HAL_GetTick>
 8012f02:	4602      	mov	r2, r0
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d901      	bls.n	8012f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8012f10:	2303      	movs	r3, #3
 8012f12:	e0d8      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012f14:	4b4c      	ldr	r3, [pc, #304]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f18:	f003 0302 	and.w	r3, r3, #2
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d0ee      	beq.n	8012efe <HAL_RCC_OscConfig+0x386>
 8012f20:	e014      	b.n	8012f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f22:	f7fd f9bb 	bl	801029c <HAL_GetTick>
 8012f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012f28:	e00a      	b.n	8012f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012f2a:	f7fd f9b7 	bl	801029c <HAL_GetTick>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d901      	bls.n	8012f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8012f3c:	2303      	movs	r3, #3
 8012f3e:	e0c2      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012f40:	4b41      	ldr	r3, [pc, #260]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f44:	f003 0302 	and.w	r3, r3, #2
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1ee      	bne.n	8012f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8012f4c:	7dfb      	ldrb	r3, [r7, #23]
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d105      	bne.n	8012f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012f52:	4b3d      	ldr	r3, [pc, #244]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f56:	4a3c      	ldr	r2, [pc, #240]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	699b      	ldr	r3, [r3, #24]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f000 80ae 	beq.w	80130c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012f68:	4b37      	ldr	r3, [pc, #220]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f6a:	689b      	ldr	r3, [r3, #8]
 8012f6c:	f003 030c 	and.w	r3, r3, #12
 8012f70:	2b08      	cmp	r3, #8
 8012f72:	d06d      	beq.n	8013050 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	699b      	ldr	r3, [r3, #24]
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d14b      	bne.n	8013014 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012f7c:	4b32      	ldr	r3, [pc, #200]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	4a31      	ldr	r2, [pc, #196]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f88:	f7fd f988 	bl	801029c <HAL_GetTick>
 8012f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012f8e:	e008      	b.n	8012fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012f90:	f7fd f984 	bl	801029c <HAL_GetTick>
 8012f94:	4602      	mov	r2, r0
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	1ad3      	subs	r3, r2, r3
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d901      	bls.n	8012fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8012f9e:	2303      	movs	r3, #3
 8012fa0:	e091      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012fa2:	4b29      	ldr	r3, [pc, #164]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d1f0      	bne.n	8012f90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	69da      	ldr	r2, [r3, #28]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6a1b      	ldr	r3, [r3, #32]
 8012fb6:	431a      	orrs	r2, r3
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fbc:	019b      	lsls	r3, r3, #6
 8012fbe:	431a      	orrs	r2, r3
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fc4:	085b      	lsrs	r3, r3, #1
 8012fc6:	3b01      	subs	r3, #1
 8012fc8:	041b      	lsls	r3, r3, #16
 8012fca:	431a      	orrs	r2, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd0:	061b      	lsls	r3, r3, #24
 8012fd2:	431a      	orrs	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fd8:	071b      	lsls	r3, r3, #28
 8012fda:	491b      	ldr	r1, [pc, #108]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012fe0:	4b19      	ldr	r3, [pc, #100]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a18      	ldr	r2, [pc, #96]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8012fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012fec:	f7fd f956 	bl	801029c <HAL_GetTick>
 8012ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012ff2:	e008      	b.n	8013006 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012ff4:	f7fd f952 	bl	801029c <HAL_GetTick>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	2b02      	cmp	r3, #2
 8013000:	d901      	bls.n	8013006 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8013002:	2303      	movs	r3, #3
 8013004:	e05f      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013006:	4b10      	ldr	r3, [pc, #64]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801300e:	2b00      	cmp	r3, #0
 8013010:	d0f0      	beq.n	8012ff4 <HAL_RCC_OscConfig+0x47c>
 8013012:	e057      	b.n	80130c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013014:	4b0c      	ldr	r3, [pc, #48]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4a0b      	ldr	r2, [pc, #44]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 801301a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013020:	f7fd f93c 	bl	801029c <HAL_GetTick>
 8013024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013026:	e008      	b.n	801303a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013028:	f7fd f938 	bl	801029c <HAL_GetTick>
 801302c:	4602      	mov	r2, r0
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	1ad3      	subs	r3, r2, r3
 8013032:	2b02      	cmp	r3, #2
 8013034:	d901      	bls.n	801303a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8013036:	2303      	movs	r3, #3
 8013038:	e045      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801303a:	4b03      	ldr	r3, [pc, #12]	; (8013048 <HAL_RCC_OscConfig+0x4d0>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013042:	2b00      	cmp	r3, #0
 8013044:	d1f0      	bne.n	8013028 <HAL_RCC_OscConfig+0x4b0>
 8013046:	e03d      	b.n	80130c4 <HAL_RCC_OscConfig+0x54c>
 8013048:	40023800 	.word	0x40023800
 801304c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8013050:	4b1f      	ldr	r3, [pc, #124]	; (80130d0 <HAL_RCC_OscConfig+0x558>)
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	2b01      	cmp	r3, #1
 801305c:	d030      	beq.n	80130c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013068:	429a      	cmp	r2, r3
 801306a:	d129      	bne.n	80130c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013076:	429a      	cmp	r2, r3
 8013078:	d122      	bne.n	80130c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801307a:	68fa      	ldr	r2, [r7, #12]
 801307c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013080:	4013      	ands	r3, r2
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013086:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013088:	4293      	cmp	r3, r2
 801308a:	d119      	bne.n	80130c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013096:	085b      	lsrs	r3, r3, #1
 8013098:	3b01      	subs	r3, #1
 801309a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801309c:	429a      	cmp	r2, r3
 801309e:	d10f      	bne.n	80130c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d107      	bne.n	80130c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80130bc:	429a      	cmp	r2, r3
 80130be:	d001      	beq.n	80130c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e000      	b.n	80130c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80130c4:	2300      	movs	r3, #0
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3718      	adds	r7, #24
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	40023800 	.word	0x40023800

080130d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80130de:	2300      	movs	r3, #0
 80130e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d101      	bne.n	80130ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80130e8:	2301      	movs	r3, #1
 80130ea:	e0d0      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80130ec:	4b6a      	ldr	r3, [pc, #424]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f003 030f 	and.w	r3, r3, #15
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d910      	bls.n	801311c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80130fa:	4b67      	ldr	r3, [pc, #412]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f023 020f 	bic.w	r2, r3, #15
 8013102:	4965      	ldr	r1, [pc, #404]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	4313      	orrs	r3, r2
 8013108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801310a:	4b63      	ldr	r3, [pc, #396]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f003 030f 	and.w	r3, r3, #15
 8013112:	683a      	ldr	r2, [r7, #0]
 8013114:	429a      	cmp	r2, r3
 8013116:	d001      	beq.n	801311c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8013118:	2301      	movs	r3, #1
 801311a:	e0b8      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f003 0302 	and.w	r3, r3, #2
 8013124:	2b00      	cmp	r3, #0
 8013126:	d020      	beq.n	801316a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f003 0304 	and.w	r3, r3, #4
 8013130:	2b00      	cmp	r3, #0
 8013132:	d005      	beq.n	8013140 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013134:	4b59      	ldr	r3, [pc, #356]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013136:	689b      	ldr	r3, [r3, #8]
 8013138:	4a58      	ldr	r2, [pc, #352]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 801313a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801313e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f003 0308 	and.w	r3, r3, #8
 8013148:	2b00      	cmp	r3, #0
 801314a:	d005      	beq.n	8013158 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801314c:	4b53      	ldr	r3, [pc, #332]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	4a52      	ldr	r2, [pc, #328]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013158:	4b50      	ldr	r3, [pc, #320]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 801315a:	689b      	ldr	r3, [r3, #8]
 801315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	494d      	ldr	r1, [pc, #308]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013166:	4313      	orrs	r3, r2
 8013168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f003 0301 	and.w	r3, r3, #1
 8013172:	2b00      	cmp	r3, #0
 8013174:	d040      	beq.n	80131f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	2b01      	cmp	r3, #1
 801317c:	d107      	bne.n	801318e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801317e:	4b47      	ldr	r3, [pc, #284]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013186:	2b00      	cmp	r3, #0
 8013188:	d115      	bne.n	80131b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e07f      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	2b02      	cmp	r3, #2
 8013194:	d107      	bne.n	80131a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013196:	4b41      	ldr	r3, [pc, #260]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d109      	bne.n	80131b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e073      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80131a6:	4b3d      	ldr	r3, [pc, #244]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f003 0302 	and.w	r3, r3, #2
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80131b2:	2301      	movs	r3, #1
 80131b4:	e06b      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80131b6:	4b39      	ldr	r3, [pc, #228]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 80131b8:	689b      	ldr	r3, [r3, #8]
 80131ba:	f023 0203 	bic.w	r2, r3, #3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	4936      	ldr	r1, [pc, #216]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 80131c4:	4313      	orrs	r3, r2
 80131c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80131c8:	f7fd f868 	bl	801029c <HAL_GetTick>
 80131cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80131ce:	e00a      	b.n	80131e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80131d0:	f7fd f864 	bl	801029c <HAL_GetTick>
 80131d4:	4602      	mov	r2, r0
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	f241 3288 	movw	r2, #5000	; 0x1388
 80131de:	4293      	cmp	r3, r2
 80131e0:	d901      	bls.n	80131e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80131e2:	2303      	movs	r3, #3
 80131e4:	e053      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80131e6:	4b2d      	ldr	r3, [pc, #180]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	f003 020c 	and.w	r2, r3, #12
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d1eb      	bne.n	80131d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80131f8:	4b27      	ldr	r3, [pc, #156]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f003 030f 	and.w	r3, r3, #15
 8013200:	683a      	ldr	r2, [r7, #0]
 8013202:	429a      	cmp	r2, r3
 8013204:	d210      	bcs.n	8013228 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013206:	4b24      	ldr	r3, [pc, #144]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f023 020f 	bic.w	r2, r3, #15
 801320e:	4922      	ldr	r1, [pc, #136]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	4313      	orrs	r3, r2
 8013214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013216:	4b20      	ldr	r3, [pc, #128]	; (8013298 <HAL_RCC_ClockConfig+0x1c4>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f003 030f 	and.w	r3, r3, #15
 801321e:	683a      	ldr	r2, [r7, #0]
 8013220:	429a      	cmp	r2, r3
 8013222:	d001      	beq.n	8013228 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8013224:	2301      	movs	r3, #1
 8013226:	e032      	b.n	801328e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f003 0304 	and.w	r3, r3, #4
 8013230:	2b00      	cmp	r3, #0
 8013232:	d008      	beq.n	8013246 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013234:	4b19      	ldr	r3, [pc, #100]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013236:	689b      	ldr	r3, [r3, #8]
 8013238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	4916      	ldr	r1, [pc, #88]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013242:	4313      	orrs	r3, r2
 8013244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f003 0308 	and.w	r3, r3, #8
 801324e:	2b00      	cmp	r3, #0
 8013250:	d009      	beq.n	8013266 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8013252:	4b12      	ldr	r3, [pc, #72]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	00db      	lsls	r3, r3, #3
 8013260:	490e      	ldr	r1, [pc, #56]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 8013262:	4313      	orrs	r3, r2
 8013264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013266:	f000 f821 	bl	80132ac <HAL_RCC_GetSysClockFreq>
 801326a:	4602      	mov	r2, r0
 801326c:	4b0b      	ldr	r3, [pc, #44]	; (801329c <HAL_RCC_ClockConfig+0x1c8>)
 801326e:	689b      	ldr	r3, [r3, #8]
 8013270:	091b      	lsrs	r3, r3, #4
 8013272:	f003 030f 	and.w	r3, r3, #15
 8013276:	490a      	ldr	r1, [pc, #40]	; (80132a0 <HAL_RCC_ClockConfig+0x1cc>)
 8013278:	5ccb      	ldrb	r3, [r1, r3]
 801327a:	fa22 f303 	lsr.w	r3, r2, r3
 801327e:	4a09      	ldr	r2, [pc, #36]	; (80132a4 <HAL_RCC_ClockConfig+0x1d0>)
 8013280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8013282:	4b09      	ldr	r3, [pc, #36]	; (80132a8 <HAL_RCC_ClockConfig+0x1d4>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	4618      	mov	r0, r3
 8013288:	f7fc fdce 	bl	800fe28 <HAL_InitTick>

  return HAL_OK;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	40023c00 	.word	0x40023c00
 801329c:	40023800 	.word	0x40023800
 80132a0:	080206f4 	.word	0x080206f4
 80132a4:	2000005c 	.word	0x2000005c
 80132a8:	20000060 	.word	0x20000060

080132ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80132ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80132b0:	b090      	sub	sp, #64	; 0x40
 80132b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80132b4:	2300      	movs	r3, #0
 80132b6:	637b      	str	r3, [r7, #52]	; 0x34
 80132b8:	2300      	movs	r3, #0
 80132ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132bc:	2300      	movs	r3, #0
 80132be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80132c0:	2300      	movs	r3, #0
 80132c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80132c4:	4b59      	ldr	r3, [pc, #356]	; (801342c <HAL_RCC_GetSysClockFreq+0x180>)
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	f003 030c 	and.w	r3, r3, #12
 80132cc:	2b08      	cmp	r3, #8
 80132ce:	d00d      	beq.n	80132ec <HAL_RCC_GetSysClockFreq+0x40>
 80132d0:	2b08      	cmp	r3, #8
 80132d2:	f200 80a1 	bhi.w	8013418 <HAL_RCC_GetSysClockFreq+0x16c>
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d002      	beq.n	80132e0 <HAL_RCC_GetSysClockFreq+0x34>
 80132da:	2b04      	cmp	r3, #4
 80132dc:	d003      	beq.n	80132e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80132de:	e09b      	b.n	8013418 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80132e0:	4b53      	ldr	r3, [pc, #332]	; (8013430 <HAL_RCC_GetSysClockFreq+0x184>)
 80132e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80132e4:	e09b      	b.n	801341e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80132e6:	4b53      	ldr	r3, [pc, #332]	; (8013434 <HAL_RCC_GetSysClockFreq+0x188>)
 80132e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80132ea:	e098      	b.n	801341e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80132ec:	4b4f      	ldr	r3, [pc, #316]	; (801342c <HAL_RCC_GetSysClockFreq+0x180>)
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80132f6:	4b4d      	ldr	r3, [pc, #308]	; (801342c <HAL_RCC_GetSysClockFreq+0x180>)
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d028      	beq.n	8013354 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013302:	4b4a      	ldr	r3, [pc, #296]	; (801342c <HAL_RCC_GetSysClockFreq+0x180>)
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	099b      	lsrs	r3, r3, #6
 8013308:	2200      	movs	r2, #0
 801330a:	623b      	str	r3, [r7, #32]
 801330c:	627a      	str	r2, [r7, #36]	; 0x24
 801330e:	6a3b      	ldr	r3, [r7, #32]
 8013310:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8013314:	2100      	movs	r1, #0
 8013316:	4b47      	ldr	r3, [pc, #284]	; (8013434 <HAL_RCC_GetSysClockFreq+0x188>)
 8013318:	fb03 f201 	mul.w	r2, r3, r1
 801331c:	2300      	movs	r3, #0
 801331e:	fb00 f303 	mul.w	r3, r0, r3
 8013322:	4413      	add	r3, r2
 8013324:	4a43      	ldr	r2, [pc, #268]	; (8013434 <HAL_RCC_GetSysClockFreq+0x188>)
 8013326:	fba0 1202 	umull	r1, r2, r0, r2
 801332a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801332c:	460a      	mov	r2, r1
 801332e:	62ba      	str	r2, [r7, #40]	; 0x28
 8013330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013332:	4413      	add	r3, r2
 8013334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013338:	2200      	movs	r2, #0
 801333a:	61bb      	str	r3, [r7, #24]
 801333c:	61fa      	str	r2, [r7, #28]
 801333e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013346:	f7ed f98f 	bl	8000668 <__aeabi_uldivmod>
 801334a:	4602      	mov	r2, r0
 801334c:	460b      	mov	r3, r1
 801334e:	4613      	mov	r3, r2
 8013350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013352:	e053      	b.n	80133fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013354:	4b35      	ldr	r3, [pc, #212]	; (801342c <HAL_RCC_GetSysClockFreq+0x180>)
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	099b      	lsrs	r3, r3, #6
 801335a:	2200      	movs	r2, #0
 801335c:	613b      	str	r3, [r7, #16]
 801335e:	617a      	str	r2, [r7, #20]
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8013366:	f04f 0b00 	mov.w	fp, #0
 801336a:	4652      	mov	r2, sl
 801336c:	465b      	mov	r3, fp
 801336e:	f04f 0000 	mov.w	r0, #0
 8013372:	f04f 0100 	mov.w	r1, #0
 8013376:	0159      	lsls	r1, r3, #5
 8013378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801337c:	0150      	lsls	r0, r2, #5
 801337e:	4602      	mov	r2, r0
 8013380:	460b      	mov	r3, r1
 8013382:	ebb2 080a 	subs.w	r8, r2, sl
 8013386:	eb63 090b 	sbc.w	r9, r3, fp
 801338a:	f04f 0200 	mov.w	r2, #0
 801338e:	f04f 0300 	mov.w	r3, #0
 8013392:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8013396:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801339a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801339e:	ebb2 0408 	subs.w	r4, r2, r8
 80133a2:	eb63 0509 	sbc.w	r5, r3, r9
 80133a6:	f04f 0200 	mov.w	r2, #0
 80133aa:	f04f 0300 	mov.w	r3, #0
 80133ae:	00eb      	lsls	r3, r5, #3
 80133b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80133b4:	00e2      	lsls	r2, r4, #3
 80133b6:	4614      	mov	r4, r2
 80133b8:	461d      	mov	r5, r3
 80133ba:	eb14 030a 	adds.w	r3, r4, sl
 80133be:	603b      	str	r3, [r7, #0]
 80133c0:	eb45 030b 	adc.w	r3, r5, fp
 80133c4:	607b      	str	r3, [r7, #4]
 80133c6:	f04f 0200 	mov.w	r2, #0
 80133ca:	f04f 0300 	mov.w	r3, #0
 80133ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80133d2:	4629      	mov	r1, r5
 80133d4:	028b      	lsls	r3, r1, #10
 80133d6:	4621      	mov	r1, r4
 80133d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80133dc:	4621      	mov	r1, r4
 80133de:	028a      	lsls	r2, r1, #10
 80133e0:	4610      	mov	r0, r2
 80133e2:	4619      	mov	r1, r3
 80133e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e6:	2200      	movs	r2, #0
 80133e8:	60bb      	str	r3, [r7, #8]
 80133ea:	60fa      	str	r2, [r7, #12]
 80133ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80133f0:	f7ed f93a 	bl	8000668 <__aeabi_uldivmod>
 80133f4:	4602      	mov	r2, r0
 80133f6:	460b      	mov	r3, r1
 80133f8:	4613      	mov	r3, r2
 80133fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80133fc:	4b0b      	ldr	r3, [pc, #44]	; (801342c <HAL_RCC_GetSysClockFreq+0x180>)
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	0c1b      	lsrs	r3, r3, #16
 8013402:	f003 0303 	and.w	r3, r3, #3
 8013406:	3301      	adds	r3, #1
 8013408:	005b      	lsls	r3, r3, #1
 801340a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801340c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013410:	fbb2 f3f3 	udiv	r3, r2, r3
 8013414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013416:	e002      	b.n	801341e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013418:	4b05      	ldr	r3, [pc, #20]	; (8013430 <HAL_RCC_GetSysClockFreq+0x184>)
 801341a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801341c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8013420:	4618      	mov	r0, r3
 8013422:	3740      	adds	r7, #64	; 0x40
 8013424:	46bd      	mov	sp, r7
 8013426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801342a:	bf00      	nop
 801342c:	40023800 	.word	0x40023800
 8013430:	00f42400 	.word	0x00f42400
 8013434:	017d7840 	.word	0x017d7840

08013438 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013438:	b480      	push	{r7}
 801343a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801343c:	4b03      	ldr	r3, [pc, #12]	; (801344c <HAL_RCC_GetHCLKFreq+0x14>)
 801343e:	681b      	ldr	r3, [r3, #0]
}
 8013440:	4618      	mov	r0, r3
 8013442:	46bd      	mov	sp, r7
 8013444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013448:	4770      	bx	lr
 801344a:	bf00      	nop
 801344c:	2000005c 	.word	0x2000005c

08013450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013454:	f7ff fff0 	bl	8013438 <HAL_RCC_GetHCLKFreq>
 8013458:	4602      	mov	r2, r0
 801345a:	4b05      	ldr	r3, [pc, #20]	; (8013470 <HAL_RCC_GetPCLK1Freq+0x20>)
 801345c:	689b      	ldr	r3, [r3, #8]
 801345e:	0a9b      	lsrs	r3, r3, #10
 8013460:	f003 0307 	and.w	r3, r3, #7
 8013464:	4903      	ldr	r1, [pc, #12]	; (8013474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013466:	5ccb      	ldrb	r3, [r1, r3]
 8013468:	fa22 f303 	lsr.w	r3, r2, r3
}
 801346c:	4618      	mov	r0, r3
 801346e:	bd80      	pop	{r7, pc}
 8013470:	40023800 	.word	0x40023800
 8013474:	08020704 	.word	0x08020704

08013478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801347c:	f7ff ffdc 	bl	8013438 <HAL_RCC_GetHCLKFreq>
 8013480:	4602      	mov	r2, r0
 8013482:	4b05      	ldr	r3, [pc, #20]	; (8013498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	0b5b      	lsrs	r3, r3, #13
 8013488:	f003 0307 	and.w	r3, r3, #7
 801348c:	4903      	ldr	r1, [pc, #12]	; (801349c <HAL_RCC_GetPCLK2Freq+0x24>)
 801348e:	5ccb      	ldrb	r3, [r1, r3]
 8013490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013494:	4618      	mov	r0, r3
 8013496:	bd80      	pop	{r7, pc}
 8013498:	40023800 	.word	0x40023800
 801349c:	08020704 	.word	0x08020704

080134a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	220f      	movs	r2, #15
 80134ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80134b0:	4b12      	ldr	r3, [pc, #72]	; (80134fc <HAL_RCC_GetClockConfig+0x5c>)
 80134b2:	689b      	ldr	r3, [r3, #8]
 80134b4:	f003 0203 	and.w	r2, r3, #3
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80134bc:	4b0f      	ldr	r3, [pc, #60]	; (80134fc <HAL_RCC_GetClockConfig+0x5c>)
 80134be:	689b      	ldr	r3, [r3, #8]
 80134c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80134c8:	4b0c      	ldr	r3, [pc, #48]	; (80134fc <HAL_RCC_GetClockConfig+0x5c>)
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80134d4:	4b09      	ldr	r3, [pc, #36]	; (80134fc <HAL_RCC_GetClockConfig+0x5c>)
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	08db      	lsrs	r3, r3, #3
 80134da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80134e2:	4b07      	ldr	r3, [pc, #28]	; (8013500 <HAL_RCC_GetClockConfig+0x60>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f003 020f 	and.w	r2, r3, #15
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	601a      	str	r2, [r3, #0]
}
 80134ee:	bf00      	nop
 80134f0:	370c      	adds	r7, #12
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr
 80134fa:	bf00      	nop
 80134fc:	40023800 	.word	0x40023800
 8013500:	40023c00 	.word	0x40023c00

08013504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b088      	sub	sp, #32
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801351c:	2300      	movs	r3, #0
 801351e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	2b00      	cmp	r3, #0
 801352a:	d012      	beq.n	8013552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801352c:	4b69      	ldr	r3, [pc, #420]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801352e:	689b      	ldr	r3, [r3, #8]
 8013530:	4a68      	ldr	r2, [pc, #416]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013532:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013536:	6093      	str	r3, [r2, #8]
 8013538:	4b66      	ldr	r3, [pc, #408]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801353a:	689a      	ldr	r2, [r3, #8]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013540:	4964      	ldr	r1, [pc, #400]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013542:	4313      	orrs	r3, r2
 8013544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801354a:	2b00      	cmp	r3, #0
 801354c:	d101      	bne.n	8013552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801354e:	2301      	movs	r3, #1
 8013550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801355a:	2b00      	cmp	r3, #0
 801355c:	d017      	beq.n	801358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801355e:	4b5d      	ldr	r3, [pc, #372]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801356c:	4959      	ldr	r1, [pc, #356]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801356e:	4313      	orrs	r3, r2
 8013570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801357c:	d101      	bne.n	8013582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801357e:	2301      	movs	r3, #1
 8013580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013586:	2b00      	cmp	r3, #0
 8013588:	d101      	bne.n	801358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801358a:	2301      	movs	r3, #1
 801358c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013596:	2b00      	cmp	r3, #0
 8013598:	d017      	beq.n	80135ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801359a:	4b4e      	ldr	r3, [pc, #312]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a8:	494a      	ldr	r1, [pc, #296]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135aa:	4313      	orrs	r3, r2
 80135ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80135b8:	d101      	bne.n	80135be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80135ba:	2301      	movs	r3, #1
 80135bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d101      	bne.n	80135ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80135c6:	2301      	movs	r3, #1
 80135c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d001      	beq.n	80135da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80135d6:	2301      	movs	r3, #1
 80135d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f003 0320 	and.w	r3, r3, #32
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f000 808b 	beq.w	80136fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80135e8:	4b3a      	ldr	r3, [pc, #232]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135ec:	4a39      	ldr	r2, [pc, #228]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135f2:	6413      	str	r3, [r2, #64]	; 0x40
 80135f4:	4b37      	ldr	r3, [pc, #220]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80135f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80135fc:	60bb      	str	r3, [r7, #8]
 80135fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8013600:	4b35      	ldr	r3, [pc, #212]	; (80136d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	4a34      	ldr	r2, [pc, #208]	; (80136d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801360c:	f7fc fe46 	bl	801029c <HAL_GetTick>
 8013610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8013612:	e008      	b.n	8013626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013614:	f7fc fe42 	bl	801029c <HAL_GetTick>
 8013618:	4602      	mov	r2, r0
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	2b64      	cmp	r3, #100	; 0x64
 8013620:	d901      	bls.n	8013626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8013622:	2303      	movs	r3, #3
 8013624:	e38f      	b.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8013626:	4b2c      	ldr	r3, [pc, #176]	; (80136d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801362e:	2b00      	cmp	r3, #0
 8013630:	d0f0      	beq.n	8013614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013632:	4b28      	ldr	r3, [pc, #160]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801363a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d035      	beq.n	80136ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801364a:	693a      	ldr	r2, [r7, #16]
 801364c:	429a      	cmp	r2, r3
 801364e:	d02e      	beq.n	80136ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013650:	4b20      	ldr	r3, [pc, #128]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801365a:	4b1e      	ldr	r3, [pc, #120]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365e:	4a1d      	ldr	r2, [pc, #116]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013664:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013666:	4b1b      	ldr	r3, [pc, #108]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801366a:	4a1a      	ldr	r2, [pc, #104]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8013672:	4a18      	ldr	r2, [pc, #96]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013678:	4b16      	ldr	r3, [pc, #88]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801367c:	f003 0301 	and.w	r3, r3, #1
 8013680:	2b01      	cmp	r3, #1
 8013682:	d114      	bne.n	80136ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013684:	f7fc fe0a 	bl	801029c <HAL_GetTick>
 8013688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801368a:	e00a      	b.n	80136a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801368c:	f7fc fe06 	bl	801029c <HAL_GetTick>
 8013690:	4602      	mov	r2, r0
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	1ad3      	subs	r3, r2, r3
 8013696:	f241 3288 	movw	r2, #5000	; 0x1388
 801369a:	4293      	cmp	r3, r2
 801369c:	d901      	bls.n	80136a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801369e:	2303      	movs	r3, #3
 80136a0:	e351      	b.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80136a2:	4b0c      	ldr	r3, [pc, #48]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80136a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136a6:	f003 0302 	and.w	r3, r3, #2
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d0ee      	beq.n	801368c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80136b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80136ba:	d111      	bne.n	80136e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80136bc:	4b05      	ldr	r3, [pc, #20]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80136c8:	4b04      	ldr	r3, [pc, #16]	; (80136dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80136ca:	400b      	ands	r3, r1
 80136cc:	4901      	ldr	r1, [pc, #4]	; (80136d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80136ce:	4313      	orrs	r3, r2
 80136d0:	608b      	str	r3, [r1, #8]
 80136d2:	e00b      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80136d4:	40023800 	.word	0x40023800
 80136d8:	40007000 	.word	0x40007000
 80136dc:	0ffffcff 	.word	0x0ffffcff
 80136e0:	4bac      	ldr	r3, [pc, #688]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80136e2:	689b      	ldr	r3, [r3, #8]
 80136e4:	4aab      	ldr	r2, [pc, #684]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80136e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80136ea:	6093      	str	r3, [r2, #8]
 80136ec:	4ba9      	ldr	r3, [pc, #676]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80136ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80136f8:	49a6      	ldr	r1, [pc, #664]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80136fa:	4313      	orrs	r3, r2
 80136fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f003 0310 	and.w	r3, r3, #16
 8013706:	2b00      	cmp	r3, #0
 8013708:	d010      	beq.n	801372c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801370a:	4ba2      	ldr	r3, [pc, #648]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801370c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013710:	4aa0      	ldr	r2, [pc, #640]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801371a:	4b9e      	ldr	r3, [pc, #632]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801371c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013724:	499b      	ldr	r1, [pc, #620]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013726:	4313      	orrs	r3, r2
 8013728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013734:	2b00      	cmp	r3, #0
 8013736:	d00a      	beq.n	801374e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013738:	4b96      	ldr	r3, [pc, #600]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801373e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013746:	4993      	ldr	r1, [pc, #588]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013748:	4313      	orrs	r3, r2
 801374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013756:	2b00      	cmp	r3, #0
 8013758:	d00a      	beq.n	8013770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801375a:	4b8e      	ldr	r3, [pc, #568]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013768:	498a      	ldr	r1, [pc, #552]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801376a:	4313      	orrs	r3, r2
 801376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00a      	beq.n	8013792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801377c:	4b85      	ldr	r3, [pc, #532]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801378a:	4982      	ldr	r1, [pc, #520]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801378c:	4313      	orrs	r3, r2
 801378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801379a:	2b00      	cmp	r3, #0
 801379c:	d00a      	beq.n	80137b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801379e:	4b7d      	ldr	r3, [pc, #500]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80137a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137ac:	4979      	ldr	r1, [pc, #484]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80137ae:	4313      	orrs	r3, r2
 80137b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00a      	beq.n	80137d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80137c0:	4b74      	ldr	r3, [pc, #464]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80137c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137c6:	f023 0203 	bic.w	r2, r3, #3
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137ce:	4971      	ldr	r1, [pc, #452]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80137d0:	4313      	orrs	r3, r2
 80137d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00a      	beq.n	80137f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80137e2:	4b6c      	ldr	r3, [pc, #432]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80137e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137e8:	f023 020c 	bic.w	r2, r3, #12
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137f0:	4968      	ldr	r1, [pc, #416]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80137f2:	4313      	orrs	r3, r2
 80137f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00a      	beq.n	801381a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013804:	4b63      	ldr	r3, [pc, #396]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801380a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013812:	4960      	ldr	r1, [pc, #384]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013814:	4313      	orrs	r3, r2
 8013816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00a      	beq.n	801383c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013826:	4b5b      	ldr	r3, [pc, #364]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801382c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013834:	4957      	ldr	r1, [pc, #348]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013836:	4313      	orrs	r3, r2
 8013838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013844:	2b00      	cmp	r3, #0
 8013846:	d00a      	beq.n	801385e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8013848:	4b52      	ldr	r3, [pc, #328]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801384e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013856:	494f      	ldr	r1, [pc, #316]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013858:	4313      	orrs	r3, r2
 801385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00a      	beq.n	8013880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801386a:	4b4a      	ldr	r3, [pc, #296]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013870:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013878:	4946      	ldr	r1, [pc, #280]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801387a:	4313      	orrs	r3, r2
 801387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013888:	2b00      	cmp	r3, #0
 801388a:	d00a      	beq.n	80138a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801388c:	4b41      	ldr	r3, [pc, #260]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013892:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801389a:	493e      	ldr	r1, [pc, #248]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801389c:	4313      	orrs	r3, r2
 801389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00a      	beq.n	80138c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80138ae:	4b39      	ldr	r3, [pc, #228]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80138b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138bc:	4935      	ldr	r1, [pc, #212]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80138be:	4313      	orrs	r3, r2
 80138c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00a      	beq.n	80138e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80138d0:	4b30      	ldr	r3, [pc, #192]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80138d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80138de:	492d      	ldr	r1, [pc, #180]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80138e0:	4313      	orrs	r3, r2
 80138e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d011      	beq.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80138f2:	4b28      	ldr	r3, [pc, #160]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80138f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013900:	4924      	ldr	r1, [pc, #144]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013902:	4313      	orrs	r3, r2
 8013904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801390c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013910:	d101      	bne.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8013912:	2301      	movs	r3, #1
 8013914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f003 0308 	and.w	r3, r3, #8
 801391e:	2b00      	cmp	r3, #0
 8013920:	d001      	beq.n	8013926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8013922:	2301      	movs	r3, #1
 8013924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801392e:	2b00      	cmp	r3, #0
 8013930:	d00a      	beq.n	8013948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013932:	4b18      	ldr	r3, [pc, #96]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013940:	4914      	ldr	r1, [pc, #80]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013942:	4313      	orrs	r3, r2
 8013944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013950:	2b00      	cmp	r3, #0
 8013952:	d00b      	beq.n	801396c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8013954:	4b0f      	ldr	r3, [pc, #60]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801395a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013964:	490b      	ldr	r1, [pc, #44]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8013966:	4313      	orrs	r3, r2
 8013968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00f      	beq.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8013978:	4b06      	ldr	r3, [pc, #24]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801397e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013988:	4902      	ldr	r1, [pc, #8]	; (8013994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801398a:	4313      	orrs	r3, r2
 801398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8013990:	e002      	b.n	8013998 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8013992:	bf00      	nop
 8013994:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d00b      	beq.n	80139bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80139a4:	4b8a      	ldr	r3, [pc, #552]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80139a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80139aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139b4:	4986      	ldr	r1, [pc, #536]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80139b6:	4313      	orrs	r3, r2
 80139b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00b      	beq.n	80139e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80139c8:	4b81      	ldr	r3, [pc, #516]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80139ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80139ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80139d8:	497d      	ldr	r1, [pc, #500]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80139da:	4313      	orrs	r3, r2
 80139dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d006      	beq.n	80139f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f000 80d6 	beq.w	8013ba0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80139f4:	4b76      	ldr	r3, [pc, #472]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	4a75      	ldr	r2, [pc, #468]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80139fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80139fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013a00:	f7fc fc4c 	bl	801029c <HAL_GetTick>
 8013a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013a06:	e008      	b.n	8013a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013a08:	f7fc fc48 	bl	801029c <HAL_GetTick>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	1ad3      	subs	r3, r2, r3
 8013a12:	2b64      	cmp	r3, #100	; 0x64
 8013a14:	d901      	bls.n	8013a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013a16:	2303      	movs	r3, #3
 8013a18:	e195      	b.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013a1a:	4b6d      	ldr	r3, [pc, #436]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1f0      	bne.n	8013a08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	f003 0301 	and.w	r3, r3, #1
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d021      	beq.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d11d      	bne.n	8013a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8013a3a:	4b65      	ldr	r3, [pc, #404]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a40:	0c1b      	lsrs	r3, r3, #16
 8013a42:	f003 0303 	and.w	r3, r3, #3
 8013a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8013a48:	4b61      	ldr	r3, [pc, #388]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a4e:	0e1b      	lsrs	r3, r3, #24
 8013a50:	f003 030f 	and.w	r3, r3, #15
 8013a54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	019a      	lsls	r2, r3, #6
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	041b      	lsls	r3, r3, #16
 8013a60:	431a      	orrs	r2, r3
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	061b      	lsls	r3, r3, #24
 8013a66:	431a      	orrs	r2, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	689b      	ldr	r3, [r3, #8]
 8013a6c:	071b      	lsls	r3, r3, #28
 8013a6e:	4958      	ldr	r1, [pc, #352]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013a70:	4313      	orrs	r3, r2
 8013a72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d004      	beq.n	8013a8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a8a:	d00a      	beq.n	8013aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d02e      	beq.n	8013af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013aa0:	d129      	bne.n	8013af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8013aa2:	4b4b      	ldr	r3, [pc, #300]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013aa8:	0c1b      	lsrs	r3, r3, #16
 8013aaa:	f003 0303 	and.w	r3, r3, #3
 8013aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8013ab0:	4b47      	ldr	r3, [pc, #284]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ab6:	0f1b      	lsrs	r3, r3, #28
 8013ab8:	f003 0307 	and.w	r3, r3, #7
 8013abc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	019a      	lsls	r2, r3, #6
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	041b      	lsls	r3, r3, #16
 8013ac8:	431a      	orrs	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	68db      	ldr	r3, [r3, #12]
 8013ace:	061b      	lsls	r3, r3, #24
 8013ad0:	431a      	orrs	r2, r3
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	071b      	lsls	r3, r3, #28
 8013ad6:	493e      	ldr	r1, [pc, #248]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8013ade:	4b3c      	ldr	r3, [pc, #240]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ae4:	f023 021f 	bic.w	r2, r3, #31
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aec:	3b01      	subs	r3, #1
 8013aee:	4938      	ldr	r1, [pc, #224]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013af0:	4313      	orrs	r3, r2
 8013af2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d01d      	beq.n	8013b3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8013b02:	4b33      	ldr	r3, [pc, #204]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b08:	0e1b      	lsrs	r3, r3, #24
 8013b0a:	f003 030f 	and.w	r3, r3, #15
 8013b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8013b10:	4b2f      	ldr	r3, [pc, #188]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b16:	0f1b      	lsrs	r3, r3, #28
 8013b18:	f003 0307 	and.w	r3, r3, #7
 8013b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	019a      	lsls	r2, r3, #6
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	691b      	ldr	r3, [r3, #16]
 8013b28:	041b      	lsls	r3, r3, #16
 8013b2a:	431a      	orrs	r2, r3
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	061b      	lsls	r3, r3, #24
 8013b30:	431a      	orrs	r2, r3
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	071b      	lsls	r3, r3, #28
 8013b36:	4926      	ldr	r1, [pc, #152]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b38:	4313      	orrs	r3, r2
 8013b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d011      	beq.n	8013b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	019a      	lsls	r2, r3, #6
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	691b      	ldr	r3, [r3, #16]
 8013b54:	041b      	lsls	r3, r3, #16
 8013b56:	431a      	orrs	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	061b      	lsls	r3, r3, #24
 8013b5e:	431a      	orrs	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	689b      	ldr	r3, [r3, #8]
 8013b64:	071b      	lsls	r3, r3, #28
 8013b66:	491a      	ldr	r1, [pc, #104]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013b6e:	4b18      	ldr	r3, [pc, #96]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4a17      	ldr	r2, [pc, #92]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013b7a:	f7fc fb8f 	bl	801029c <HAL_GetTick>
 8013b7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013b80:	e008      	b.n	8013b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013b82:	f7fc fb8b 	bl	801029c <HAL_GetTick>
 8013b86:	4602      	mov	r2, r0
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	2b64      	cmp	r3, #100	; 0x64
 8013b8e:	d901      	bls.n	8013b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013b90:	2303      	movs	r3, #3
 8013b92:	e0d8      	b.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013b94:	4b0e      	ldr	r3, [pc, #56]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d0f0      	beq.n	8013b82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8013ba0:	69bb      	ldr	r3, [r7, #24]
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	f040 80ce 	bne.w	8013d44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8013ba8:	4b09      	ldr	r3, [pc, #36]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a08      	ldr	r2, [pc, #32]	; (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8013bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013bb4:	f7fc fb72 	bl	801029c <HAL_GetTick>
 8013bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8013bba:	e00b      	b.n	8013bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8013bbc:	f7fc fb6e 	bl	801029c <HAL_GetTick>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	1ad3      	subs	r3, r2, r3
 8013bc6:	2b64      	cmp	r3, #100	; 0x64
 8013bc8:	d904      	bls.n	8013bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013bca:	2303      	movs	r3, #3
 8013bcc:	e0bb      	b.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8013bce:	bf00      	nop
 8013bd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8013bd4:	4b5e      	ldr	r3, [pc, #376]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013be0:	d0ec      	beq.n	8013bbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d003      	beq.n	8013bf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d009      	beq.n	8013c0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d02e      	beq.n	8013c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d12a      	bne.n	8013c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8013c0a:	4b51      	ldr	r3, [pc, #324]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c10:	0c1b      	lsrs	r3, r3, #16
 8013c12:	f003 0303 	and.w	r3, r3, #3
 8013c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8013c18:	4b4d      	ldr	r3, [pc, #308]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c1e:	0f1b      	lsrs	r3, r3, #28
 8013c20:	f003 0307 	and.w	r3, r3, #7
 8013c24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	695b      	ldr	r3, [r3, #20]
 8013c2a:	019a      	lsls	r2, r3, #6
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	041b      	lsls	r3, r3, #16
 8013c30:	431a      	orrs	r2, r3
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	699b      	ldr	r3, [r3, #24]
 8013c36:	061b      	lsls	r3, r3, #24
 8013c38:	431a      	orrs	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	071b      	lsls	r3, r3, #28
 8013c3e:	4944      	ldr	r1, [pc, #272]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c40:	4313      	orrs	r3, r2
 8013c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8013c46:	4b42      	ldr	r3, [pc, #264]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013c4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c54:	3b01      	subs	r3, #1
 8013c56:	021b      	lsls	r3, r3, #8
 8013c58:	493d      	ldr	r1, [pc, #244]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c5a:	4313      	orrs	r3, r2
 8013c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d022      	beq.n	8013cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013c74:	d11d      	bne.n	8013cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8013c76:	4b36      	ldr	r3, [pc, #216]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c7c:	0e1b      	lsrs	r3, r3, #24
 8013c7e:	f003 030f 	and.w	r3, r3, #15
 8013c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8013c84:	4b32      	ldr	r3, [pc, #200]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c8a:	0f1b      	lsrs	r3, r3, #28
 8013c8c:	f003 0307 	and.w	r3, r3, #7
 8013c90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	695b      	ldr	r3, [r3, #20]
 8013c96:	019a      	lsls	r2, r3, #6
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6a1b      	ldr	r3, [r3, #32]
 8013c9c:	041b      	lsls	r3, r3, #16
 8013c9e:	431a      	orrs	r2, r3
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	061b      	lsls	r3, r3, #24
 8013ca4:	431a      	orrs	r2, r3
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	071b      	lsls	r3, r3, #28
 8013caa:	4929      	ldr	r1, [pc, #164]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013cac:	4313      	orrs	r3, r2
 8013cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	f003 0308 	and.w	r3, r3, #8
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d028      	beq.n	8013d10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8013cbe:	4b24      	ldr	r3, [pc, #144]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cc4:	0e1b      	lsrs	r3, r3, #24
 8013cc6:	f003 030f 	and.w	r3, r3, #15
 8013cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8013ccc:	4b20      	ldr	r3, [pc, #128]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013cd2:	0c1b      	lsrs	r3, r3, #16
 8013cd4:	f003 0303 	and.w	r3, r3, #3
 8013cd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	695b      	ldr	r3, [r3, #20]
 8013cde:	019a      	lsls	r2, r3, #6
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	041b      	lsls	r3, r3, #16
 8013ce4:	431a      	orrs	r2, r3
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	061b      	lsls	r3, r3, #24
 8013cea:	431a      	orrs	r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	69db      	ldr	r3, [r3, #28]
 8013cf0:	071b      	lsls	r3, r3, #28
 8013cf2:	4917      	ldr	r1, [pc, #92]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013cf4:	4313      	orrs	r3, r2
 8013cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8013cfa:	4b15      	ldr	r3, [pc, #84]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d08:	4911      	ldr	r1, [pc, #68]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8013d10:	4b0f      	ldr	r3, [pc, #60]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	4a0e      	ldr	r2, [pc, #56]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013d1c:	f7fc fabe 	bl	801029c <HAL_GetTick>
 8013d20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8013d22:	e008      	b.n	8013d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8013d24:	f7fc faba 	bl	801029c <HAL_GetTick>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	1ad3      	subs	r3, r2, r3
 8013d2e:	2b64      	cmp	r3, #100	; 0x64
 8013d30:	d901      	bls.n	8013d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013d32:	2303      	movs	r3, #3
 8013d34:	e007      	b.n	8013d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8013d36:	4b06      	ldr	r3, [pc, #24]	; (8013d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013d42:	d1ef      	bne.n	8013d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8013d44:	2300      	movs	r3, #0
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3720      	adds	r7, #32
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	40023800 	.word	0x40023800

08013d54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8013d66:	2301      	movs	r3, #1
 8013d68:	e071      	b.n	8013e4e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	7f5b      	ldrb	r3, [r3, #29]
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d105      	bne.n	8013d80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2200      	movs	r2, #0
 8013d78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7fb fbf4 	bl	800f568 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2202      	movs	r2, #2
 8013d84:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	f003 0310 	and.w	r3, r3, #16
 8013d90:	2b10      	cmp	r3, #16
 8013d92:	d053      	beq.n	8013e3c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	22ca      	movs	r2, #202	; 0xca
 8013d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2253      	movs	r2, #83	; 0x53
 8013da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f000 fa4d 	bl	8014244 <RTC_EnterInitMode>
 8013daa:	4603      	mov	r3, r0
 8013dac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8013dae:	7bfb      	ldrb	r3, [r7, #15]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d12a      	bne.n	8013e0a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	6899      	ldr	r1, [r3, #8]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	4b26      	ldr	r3, [pc, #152]	; (8013e58 <HAL_RTC_Init+0x104>)
 8013dc0:	400b      	ands	r3, r1
 8013dc2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	6899      	ldr	r1, [r3, #8]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	685a      	ldr	r2, [r3, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	691b      	ldr	r3, [r3, #16]
 8013dd2:	431a      	orrs	r2, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	695b      	ldr	r3, [r3, #20]
 8013dd8:	431a      	orrs	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	430a      	orrs	r2, r1
 8013de0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	68d2      	ldr	r2, [r2, #12]
 8013dea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	6919      	ldr	r1, [r3, #16]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	041a      	lsls	r2, r3, #16
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	430a      	orrs	r2, r1
 8013dfe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 fa56 	bl	80142b2 <RTC_ExitInitMode>
 8013e06:	4603      	mov	r3, r0
 8013e08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8013e0a:	7bfb      	ldrb	r3, [r7, #15]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d110      	bne.n	8013e32 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f022 0208 	bic.w	r2, r2, #8
 8013e1e:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	699a      	ldr	r2, [r3, #24]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	430a      	orrs	r2, r1
 8013e30:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	22ff      	movs	r2, #255	; 0xff
 8013e38:	625a      	str	r2, [r3, #36]	; 0x24
 8013e3a:	e001      	b.n	8013e40 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8013e40:	7bfb      	ldrb	r3, [r7, #15]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d102      	bne.n	8013e4c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2201      	movs	r2, #1
 8013e4a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8013e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	ff8fffbf 	.word	0xff8fffbf

08013e5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013e5c:	b590      	push	{r4, r7, lr}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	7f1b      	ldrb	r3, [r3, #28]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d101      	bne.n	8013e78 <HAL_RTC_SetTime+0x1c>
 8013e74:	2302      	movs	r3, #2
 8013e76:	e085      	b.n	8013f84 <HAL_RTC_SetTime+0x128>
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2202      	movs	r2, #2
 8013e82:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d126      	bne.n	8013ed8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	689b      	ldr	r3, [r3, #8]
 8013e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d102      	bne.n	8013e9e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f000 fa2a 	bl	80142fc <RTC_ByteToBcd2>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	785b      	ldrb	r3, [r3, #1]
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f000 fa23 	bl	80142fc <RTC_ByteToBcd2>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013eba:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	789b      	ldrb	r3, [r3, #2]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f000 fa1b 	bl	80142fc <RTC_ByteToBcd2>
 8013ec6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013ec8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	78db      	ldrb	r3, [r3, #3]
 8013ed0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013ed2:	4313      	orrs	r3, r2
 8013ed4:	617b      	str	r3, [r7, #20]
 8013ed6:	e018      	b.n	8013f0a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d102      	bne.n	8013eec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	785b      	ldrb	r3, [r3, #1]
 8013ef6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013ef8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8013efe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	78db      	ldrb	r3, [r3, #3]
 8013f04:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8013f06:	4313      	orrs	r3, r2
 8013f08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	22ca      	movs	r2, #202	; 0xca
 8013f10:	625a      	str	r2, [r3, #36]	; 0x24
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2253      	movs	r2, #83	; 0x53
 8013f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f000 f992 	bl	8014244 <RTC_EnterInitMode>
 8013f20:	4603      	mov	r3, r0
 8013f22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8013f24:	7cfb      	ldrb	r3, [r7, #19]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d11e      	bne.n	8013f68 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	6979      	ldr	r1, [r7, #20]
 8013f30:	4b16      	ldr	r3, [pc, #88]	; (8013f8c <HAL_RTC_SetTime+0x130>)
 8013f32:	400b      	ands	r3, r1
 8013f34:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	689a      	ldr	r2, [r3, #8]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013f44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	6899      	ldr	r1, [r3, #8]
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	68da      	ldr	r2, [r3, #12]
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	691b      	ldr	r3, [r3, #16]
 8013f54:	431a      	orrs	r2, r3
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	430a      	orrs	r2, r1
 8013f5c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013f5e:	68f8      	ldr	r0, [r7, #12]
 8013f60:	f000 f9a7 	bl	80142b2 <RTC_ExitInitMode>
 8013f64:	4603      	mov	r3, r0
 8013f66:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8013f68:	7cfb      	ldrb	r3, [r7, #19]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d102      	bne.n	8013f74 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2201      	movs	r2, #1
 8013f72:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	22ff      	movs	r2, #255	; 0xff
 8013f7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	771a      	strb	r2, [r3, #28]

  return status;
 8013f82:	7cfb      	ldrb	r3, [r7, #19]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	371c      	adds	r7, #28
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd90      	pop	{r4, r7, pc}
 8013f8c:	007f7f7f 	.word	0x007f7f7f

08013f90 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b086      	sub	sp, #24
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	60f8      	str	r0, [r7, #12]
 8013f98:	60b9      	str	r1, [r7, #8]
 8013f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	691b      	ldr	r3, [r3, #16]
 8013fb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	681a      	ldr	r2, [r3, #0]
 8013fbe:	4b22      	ldr	r3, [pc, #136]	; (8014048 <HAL_RTC_GetTime+0xb8>)
 8013fc0:	4013      	ands	r3, r2
 8013fc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	0c1b      	lsrs	r3, r3, #16
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	0a1b      	lsrs	r3, r3, #8
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fde:	b2da      	uxtb	r2, r3
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	0d9b      	lsrs	r3, r3, #22
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	f003 0301 	and.w	r3, r3, #1
 8013ffc:	b2da      	uxtb	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d11a      	bne.n	801403e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	4618      	mov	r0, r3
 801400e:	f000 f993 	bl	8014338 <RTC_Bcd2ToByte>
 8014012:	4603      	mov	r3, r0
 8014014:	461a      	mov	r2, r3
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	785b      	ldrb	r3, [r3, #1]
 801401e:	4618      	mov	r0, r3
 8014020:	f000 f98a 	bl	8014338 <RTC_Bcd2ToByte>
 8014024:	4603      	mov	r3, r0
 8014026:	461a      	mov	r2, r3
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	789b      	ldrb	r3, [r3, #2]
 8014030:	4618      	mov	r0, r3
 8014032:	f000 f981 	bl	8014338 <RTC_Bcd2ToByte>
 8014036:	4603      	mov	r3, r0
 8014038:	461a      	mov	r2, r3
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	3718      	adds	r7, #24
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	007f7f7f 	.word	0x007f7f7f

0801404c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801404c:	b590      	push	{r4, r7, lr}
 801404e:	b087      	sub	sp, #28
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014058:	2300      	movs	r3, #0
 801405a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	7f1b      	ldrb	r3, [r3, #28]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d101      	bne.n	8014068 <HAL_RTC_SetDate+0x1c>
 8014064:	2302      	movs	r3, #2
 8014066:	e06f      	b.n	8014148 <HAL_RTC_SetDate+0xfc>
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2201      	movs	r2, #1
 801406c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2202      	movs	r2, #2
 8014072:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d10e      	bne.n	8014098 <HAL_RTC_SetDate+0x4c>
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	785b      	ldrb	r3, [r3, #1]
 801407e:	f003 0310 	and.w	r3, r3, #16
 8014082:	2b00      	cmp	r3, #0
 8014084:	d008      	beq.n	8014098 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	785b      	ldrb	r3, [r3, #1]
 801408a:	f023 0310 	bic.w	r3, r3, #16
 801408e:	b2db      	uxtb	r3, r3
 8014090:	330a      	adds	r3, #10
 8014092:	b2da      	uxtb	r2, r3
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d11c      	bne.n	80140d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	78db      	ldrb	r3, [r3, #3]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f000 f92a 	bl	80142fc <RTC_ByteToBcd2>
 80140a8:	4603      	mov	r3, r0
 80140aa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	785b      	ldrb	r3, [r3, #1]
 80140b0:	4618      	mov	r0, r3
 80140b2:	f000 f923 	bl	80142fc <RTC_ByteToBcd2>
 80140b6:	4603      	mov	r3, r0
 80140b8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80140ba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	789b      	ldrb	r3, [r3, #2]
 80140c0:	4618      	mov	r0, r3
 80140c2:	f000 f91b 	bl	80142fc <RTC_ByteToBcd2>
 80140c6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80140c8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80140d2:	4313      	orrs	r3, r2
 80140d4:	617b      	str	r3, [r7, #20]
 80140d6:	e00e      	b.n	80140f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	78db      	ldrb	r3, [r3, #3]
 80140dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	785b      	ldrb	r3, [r3, #1]
 80140e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80140e4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80140e6:	68ba      	ldr	r2, [r7, #8]
 80140e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80140ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80140f2:	4313      	orrs	r3, r2
 80140f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	22ca      	movs	r2, #202	; 0xca
 80140fc:	625a      	str	r2, [r3, #36]	; 0x24
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2253      	movs	r2, #83	; 0x53
 8014104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f000 f89c 	bl	8014244 <RTC_EnterInitMode>
 801410c:	4603      	mov	r3, r0
 801410e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8014110:	7cfb      	ldrb	r3, [r7, #19]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d10a      	bne.n	801412c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	6979      	ldr	r1, [r7, #20]
 801411c:	4b0c      	ldr	r3, [pc, #48]	; (8014150 <HAL_RTC_SetDate+0x104>)
 801411e:	400b      	ands	r3, r1
 8014120:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f000 f8c5 	bl	80142b2 <RTC_ExitInitMode>
 8014128:	4603      	mov	r3, r0
 801412a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 801412c:	7cfb      	ldrb	r3, [r7, #19]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d102      	bne.n	8014138 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2201      	movs	r2, #1
 8014136:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	22ff      	movs	r2, #255	; 0xff
 801413e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2200      	movs	r2, #0
 8014144:	771a      	strb	r2, [r3, #28]

  return status;
 8014146:	7cfb      	ldrb	r3, [r7, #19]
}
 8014148:	4618      	mov	r0, r3
 801414a:	371c      	adds	r7, #28
 801414c:	46bd      	mov	sp, r7
 801414e:	bd90      	pop	{r4, r7, pc}
 8014150:	00ffff3f 	.word	0x00ffff3f

08014154 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b086      	sub	sp, #24
 8014158:	af00      	add	r7, sp, #0
 801415a:	60f8      	str	r0, [r7, #12]
 801415c:	60b9      	str	r1, [r7, #8]
 801415e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014160:	2300      	movs	r3, #0
 8014162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	685a      	ldr	r2, [r3, #4]
 801416a:	4b21      	ldr	r3, [pc, #132]	; (80141f0 <HAL_RTC_GetDate+0x9c>)
 801416c:	4013      	ands	r3, r2
 801416e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	0c1b      	lsrs	r3, r3, #16
 8014174:	b2da      	uxtb	r2, r3
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	0a1b      	lsrs	r3, r3, #8
 801417e:	b2db      	uxtb	r3, r3
 8014180:	f003 031f 	and.w	r3, r3, #31
 8014184:	b2da      	uxtb	r2, r3
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	b2db      	uxtb	r3, r3
 801418e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014192:	b2da      	uxtb	r2, r3
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	0b5b      	lsrs	r3, r3, #13
 801419c:	b2db      	uxtb	r3, r3
 801419e:	f003 0307 	and.w	r3, r3, #7
 80141a2:	b2da      	uxtb	r2, r3
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d11a      	bne.n	80141e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	78db      	ldrb	r3, [r3, #3]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f000 f8c0 	bl	8014338 <RTC_Bcd2ToByte>
 80141b8:	4603      	mov	r3, r0
 80141ba:	461a      	mov	r2, r3
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	785b      	ldrb	r3, [r3, #1]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f000 f8b7 	bl	8014338 <RTC_Bcd2ToByte>
 80141ca:	4603      	mov	r3, r0
 80141cc:	461a      	mov	r2, r3
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	789b      	ldrb	r3, [r3, #2]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f000 f8ae 	bl	8014338 <RTC_Bcd2ToByte>
 80141dc:	4603      	mov	r3, r0
 80141de:	461a      	mov	r2, r3
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3718      	adds	r7, #24
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	00ffff3f 	.word	0x00ffff3f

080141f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80141fc:	2300      	movs	r3, #0
 80141fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	68da      	ldr	r2, [r3, #12]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801420e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014210:	f7fc f844 	bl	801029c <HAL_GetTick>
 8014214:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014216:	e009      	b.n	801422c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014218:	f7fc f840 	bl	801029c <HAL_GetTick>
 801421c:	4602      	mov	r2, r0
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	1ad3      	subs	r3, r2, r3
 8014222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014226:	d901      	bls.n	801422c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8014228:	2303      	movs	r3, #3
 801422a:	e007      	b.n	801423c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	f003 0320 	and.w	r3, r3, #32
 8014236:	2b00      	cmp	r3, #0
 8014238:	d0ee      	beq.n	8014218 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3710      	adds	r7, #16
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801424c:	2300      	movs	r3, #0
 801424e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014250:	2300      	movs	r3, #0
 8014252:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	68db      	ldr	r3, [r3, #12]
 801425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801425e:	2b00      	cmp	r3, #0
 8014260:	d122      	bne.n	80142a8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	68da      	ldr	r2, [r3, #12]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014270:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014272:	f7fc f813 	bl	801029c <HAL_GetTick>
 8014276:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014278:	e00c      	b.n	8014294 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801427a:	f7fc f80f 	bl	801029c <HAL_GetTick>
 801427e:	4602      	mov	r2, r0
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	1ad3      	subs	r3, r2, r3
 8014284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014288:	d904      	bls.n	8014294 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2204      	movs	r2, #4
 801428e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8014290:	2301      	movs	r3, #1
 8014292:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	68db      	ldr	r3, [r3, #12]
 801429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d102      	bne.n	80142a8 <RTC_EnterInitMode+0x64>
 80142a2:	7bfb      	ldrb	r3, [r7, #15]
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d1e8      	bne.n	801427a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80142a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80142aa:	4618      	mov	r0, r3
 80142ac:	3710      	adds	r7, #16
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}

080142b2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80142b2:	b580      	push	{r7, lr}
 80142b4:	b084      	sub	sp, #16
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80142ba:	2300      	movs	r3, #0
 80142bc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	68da      	ldr	r2, [r3, #12]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80142cc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	f003 0320 	and.w	r3, r3, #32
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d10a      	bne.n	80142f2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f7ff ff89 	bl	80141f4 <HAL_RTC_WaitForSynchro>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d004      	beq.n	80142f2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2204      	movs	r2, #4
 80142ec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80142ee:	2301      	movs	r3, #1
 80142f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80142f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}

080142fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80142fc:	b480      	push	{r7}
 80142fe:	b085      	sub	sp, #20
 8014300:	af00      	add	r7, sp, #0
 8014302:	4603      	mov	r3, r0
 8014304:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8014306:	2300      	movs	r3, #0
 8014308:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801430a:	e005      	b.n	8014318 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	3301      	adds	r3, #1
 8014310:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8014312:	79fb      	ldrb	r3, [r7, #7]
 8014314:	3b0a      	subs	r3, #10
 8014316:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8014318:	79fb      	ldrb	r3, [r7, #7]
 801431a:	2b09      	cmp	r3, #9
 801431c:	d8f6      	bhi.n	801430c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	b2db      	uxtb	r3, r3
 8014322:	011b      	lsls	r3, r3, #4
 8014324:	b2da      	uxtb	r2, r3
 8014326:	79fb      	ldrb	r3, [r7, #7]
 8014328:	4313      	orrs	r3, r2
 801432a:	b2db      	uxtb	r3, r3
}
 801432c:	4618      	mov	r0, r3
 801432e:	3714      	adds	r7, #20
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8014338:	b480      	push	{r7}
 801433a:	b085      	sub	sp, #20
 801433c:	af00      	add	r7, sp, #0
 801433e:	4603      	mov	r3, r0
 8014340:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8014342:	2300      	movs	r3, #0
 8014344:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8014346:	79fb      	ldrb	r3, [r7, #7]
 8014348:	091b      	lsrs	r3, r3, #4
 801434a:	b2db      	uxtb	r3, r3
 801434c:	461a      	mov	r2, r3
 801434e:	4613      	mov	r3, r2
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	4413      	add	r3, r2
 8014354:	005b      	lsls	r3, r3, #1
 8014356:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	b2da      	uxtb	r2, r3
 801435c:	79fb      	ldrb	r3, [r7, #7]
 801435e:	f003 030f 	and.w	r3, r3, #15
 8014362:	b2db      	uxtb	r3, r3
 8014364:	4413      	add	r3, r2
 8014366:	b2db      	uxtb	r3, r3
}
 8014368:	4618      	mov	r0, r3
 801436a:	3714      	adds	r7, #20
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d101      	bne.n	8014386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014382:	2301      	movs	r3, #1
 8014384:	e09d      	b.n	80144c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801438a:	2b00      	cmp	r3, #0
 801438c:	d108      	bne.n	80143a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014396:	d009      	beq.n	80143ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	61da      	str	r2, [r3, #28]
 801439e:	e005      	b.n	80143ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2200      	movs	r2, #0
 80143b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d106      	bne.n	80143cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7fb f8fc 	bl	800f5c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2202      	movs	r2, #2
 80143d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80143e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80143ec:	d902      	bls.n	80143f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80143ee:	2300      	movs	r3, #0
 80143f0:	60fb      	str	r3, [r7, #12]
 80143f2:	e002      	b.n	80143fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80143f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	68db      	ldr	r3, [r3, #12]
 80143fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8014402:	d007      	beq.n	8014414 <HAL_SPI_Init+0xa0>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	68db      	ldr	r3, [r3, #12]
 8014408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801440c:	d002      	beq.n	8014414 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	689b      	ldr	r3, [r3, #8]
 8014420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014424:	431a      	orrs	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	691b      	ldr	r3, [r3, #16]
 801442a:	f003 0302 	and.w	r3, r3, #2
 801442e:	431a      	orrs	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	695b      	ldr	r3, [r3, #20]
 8014434:	f003 0301 	and.w	r3, r3, #1
 8014438:	431a      	orrs	r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	699b      	ldr	r3, [r3, #24]
 801443e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014442:	431a      	orrs	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	69db      	ldr	r3, [r3, #28]
 8014448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801444c:	431a      	orrs	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	6a1b      	ldr	r3, [r3, #32]
 8014452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014456:	ea42 0103 	orr.w	r1, r2, r3
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801445e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	430a      	orrs	r2, r1
 8014468:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	699b      	ldr	r3, [r3, #24]
 801446e:	0c1b      	lsrs	r3, r3, #16
 8014470:	f003 0204 	and.w	r2, r3, #4
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014478:	f003 0310 	and.w	r3, r3, #16
 801447c:	431a      	orrs	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014482:	f003 0308 	and.w	r3, r3, #8
 8014486:	431a      	orrs	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8014490:	ea42 0103 	orr.w	r1, r2, r3
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	430a      	orrs	r2, r1
 80144a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	69da      	ldr	r2, [r3, #28]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80144b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2200      	movs	r2, #0
 80144b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2201      	movs	r2, #1
 80144bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80144c0:	2300      	movs	r3, #0
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3710      	adds	r7, #16
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}

080144ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80144ca:	b580      	push	{r7, lr}
 80144cc:	b088      	sub	sp, #32
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	60f8      	str	r0, [r7, #12]
 80144d2:	60b9      	str	r1, [r7, #8]
 80144d4:	603b      	str	r3, [r7, #0]
 80144d6:	4613      	mov	r3, r2
 80144d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80144da:	2300      	movs	r3, #0
 80144dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d101      	bne.n	80144ec <HAL_SPI_Transmit+0x22>
 80144e8:	2302      	movs	r3, #2
 80144ea:	e158      	b.n	801479e <HAL_SPI_Transmit+0x2d4>
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	2201      	movs	r2, #1
 80144f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80144f4:	f7fb fed2 	bl	801029c <HAL_GetTick>
 80144f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80144fa:	88fb      	ldrh	r3, [r7, #6]
 80144fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014504:	b2db      	uxtb	r3, r3
 8014506:	2b01      	cmp	r3, #1
 8014508:	d002      	beq.n	8014510 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801450a:	2302      	movs	r3, #2
 801450c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801450e:	e13d      	b.n	801478c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d002      	beq.n	801451c <HAL_SPI_Transmit+0x52>
 8014516:	88fb      	ldrh	r3, [r7, #6]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d102      	bne.n	8014522 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801451c:	2301      	movs	r3, #1
 801451e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014520:	e134      	b.n	801478c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2203      	movs	r2, #3
 8014526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2200      	movs	r2, #0
 801452e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	68ba      	ldr	r2, [r7, #8]
 8014534:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	88fa      	ldrh	r2, [r7, #6]
 801453a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	88fa      	ldrh	r2, [r7, #6]
 8014540:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	2200      	movs	r2, #0
 801454c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2200      	movs	r2, #0
 8014554:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2200      	movs	r2, #0
 801455c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2200      	movs	r2, #0
 8014562:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	689b      	ldr	r3, [r3, #8]
 8014568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801456c:	d10f      	bne.n	801458e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	681a      	ldr	r2, [r3, #0]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801457c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801458c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014598:	2b40      	cmp	r3, #64	; 0x40
 801459a:	d007      	beq.n	80145ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80145aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80145b4:	d94b      	bls.n	801464e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d002      	beq.n	80145c4 <HAL_SPI_Transmit+0xfa>
 80145be:	8afb      	ldrh	r3, [r7, #22]
 80145c0:	2b01      	cmp	r3, #1
 80145c2:	d13e      	bne.n	8014642 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145c8:	881a      	ldrh	r2, [r3, #0]
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145d4:	1c9a      	adds	r2, r3, #2
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80145de:	b29b      	uxth	r3, r3
 80145e0:	3b01      	subs	r3, #1
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80145e8:	e02b      	b.n	8014642 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	f003 0302 	and.w	r3, r3, #2
 80145f4:	2b02      	cmp	r3, #2
 80145f6:	d112      	bne.n	801461e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145fc:	881a      	ldrh	r2, [r3, #0]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014608:	1c9a      	adds	r2, r3, #2
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014612:	b29b      	uxth	r3, r3
 8014614:	3b01      	subs	r3, #1
 8014616:	b29a      	uxth	r2, r3
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801461c:	e011      	b.n	8014642 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801461e:	f7fb fe3d 	bl	801029c <HAL_GetTick>
 8014622:	4602      	mov	r2, r0
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	1ad3      	subs	r3, r2, r3
 8014628:	683a      	ldr	r2, [r7, #0]
 801462a:	429a      	cmp	r2, r3
 801462c:	d803      	bhi.n	8014636 <HAL_SPI_Transmit+0x16c>
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014634:	d102      	bne.n	801463c <HAL_SPI_Transmit+0x172>
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d102      	bne.n	8014642 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801463c:	2303      	movs	r3, #3
 801463e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014640:	e0a4      	b.n	801478c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014646:	b29b      	uxth	r3, r3
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1ce      	bne.n	80145ea <HAL_SPI_Transmit+0x120>
 801464c:	e07c      	b.n	8014748 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d002      	beq.n	801465c <HAL_SPI_Transmit+0x192>
 8014656:	8afb      	ldrh	r3, [r7, #22]
 8014658:	2b01      	cmp	r3, #1
 801465a:	d170      	bne.n	801473e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014660:	b29b      	uxth	r3, r3
 8014662:	2b01      	cmp	r3, #1
 8014664:	d912      	bls.n	801468c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801466a:	881a      	ldrh	r2, [r3, #0]
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014676:	1c9a      	adds	r2, r3, #2
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014680:	b29b      	uxth	r3, r3
 8014682:	3b02      	subs	r3, #2
 8014684:	b29a      	uxth	r2, r3
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	87da      	strh	r2, [r3, #62]	; 0x3e
 801468a:	e058      	b.n	801473e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	330c      	adds	r3, #12
 8014696:	7812      	ldrb	r2, [r2, #0]
 8014698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801469e:	1c5a      	adds	r2, r3, #1
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	3b01      	subs	r3, #1
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80146b2:	e044      	b.n	801473e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	f003 0302 	and.w	r3, r3, #2
 80146be:	2b02      	cmp	r3, #2
 80146c0:	d12b      	bne.n	801471a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d912      	bls.n	80146f2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146d0:	881a      	ldrh	r2, [r3, #0]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146dc:	1c9a      	adds	r2, r3, #2
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	3b02      	subs	r3, #2
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80146f0:	e025      	b.n	801473e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	330c      	adds	r3, #12
 80146fc:	7812      	ldrb	r2, [r2, #0]
 80146fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014704:	1c5a      	adds	r2, r3, #1
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801470e:	b29b      	uxth	r3, r3
 8014710:	3b01      	subs	r3, #1
 8014712:	b29a      	uxth	r2, r3
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014718:	e011      	b.n	801473e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801471a:	f7fb fdbf 	bl	801029c <HAL_GetTick>
 801471e:	4602      	mov	r2, r0
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	1ad3      	subs	r3, r2, r3
 8014724:	683a      	ldr	r2, [r7, #0]
 8014726:	429a      	cmp	r2, r3
 8014728:	d803      	bhi.n	8014732 <HAL_SPI_Transmit+0x268>
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014730:	d102      	bne.n	8014738 <HAL_SPI_Transmit+0x26e>
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d102      	bne.n	801473e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8014738:	2303      	movs	r3, #3
 801473a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801473c:	e026      	b.n	801478c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014742:	b29b      	uxth	r3, r3
 8014744:	2b00      	cmp	r3, #0
 8014746:	d1b5      	bne.n	80146b4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014748:	69ba      	ldr	r2, [r7, #24]
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f000 fd07 	bl	8015160 <SPI_EndRxTxTransaction>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d002      	beq.n	801475e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2220      	movs	r2, #32
 801475c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	689b      	ldr	r3, [r3, #8]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d10a      	bne.n	801477c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014766:	2300      	movs	r3, #0
 8014768:	613b      	str	r3, [r7, #16]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	613b      	str	r3, [r7, #16]
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	689b      	ldr	r3, [r3, #8]
 8014778:	613b      	str	r3, [r7, #16]
 801477a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014780:	2b00      	cmp	r3, #0
 8014782:	d002      	beq.n	801478a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8014784:	2301      	movs	r3, #1
 8014786:	77fb      	strb	r3, [r7, #31]
 8014788:	e000      	b.n	801478c <HAL_SPI_Transmit+0x2c2>
  }

error:
 801478a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	2201      	movs	r2, #1
 8014790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2200      	movs	r2, #0
 8014798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801479c:	7ffb      	ldrb	r3, [r7, #31]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3720      	adds	r7, #32
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b088      	sub	sp, #32
 80147aa:	af02      	add	r7, sp, #8
 80147ac:	60f8      	str	r0, [r7, #12]
 80147ae:	60b9      	str	r1, [r7, #8]
 80147b0:	603b      	str	r3, [r7, #0]
 80147b2:	4613      	mov	r3, r2
 80147b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80147b6:	2300      	movs	r3, #0
 80147b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80147c2:	d112      	bne.n	80147ea <HAL_SPI_Receive+0x44>
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	689b      	ldr	r3, [r3, #8]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d10e      	bne.n	80147ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2204      	movs	r2, #4
 80147d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80147d4:	88fa      	ldrh	r2, [r7, #6]
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	4613      	mov	r3, r2
 80147dc:	68ba      	ldr	r2, [r7, #8]
 80147de:	68b9      	ldr	r1, [r7, #8]
 80147e0:	68f8      	ldr	r0, [r7, #12]
 80147e2:	f000 f910 	bl	8014a06 <HAL_SPI_TransmitReceive>
 80147e6:	4603      	mov	r3, r0
 80147e8:	e109      	b.n	80149fe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d101      	bne.n	80147f8 <HAL_SPI_Receive+0x52>
 80147f4:	2302      	movs	r3, #2
 80147f6:	e102      	b.n	80149fe <HAL_SPI_Receive+0x258>
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2201      	movs	r2, #1
 80147fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014800:	f7fb fd4c 	bl	801029c <HAL_GetTick>
 8014804:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b01      	cmp	r3, #1
 8014810:	d002      	beq.n	8014818 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8014812:	2302      	movs	r3, #2
 8014814:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014816:	e0e9      	b.n	80149ec <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d002      	beq.n	8014824 <HAL_SPI_Receive+0x7e>
 801481e:	88fb      	ldrh	r3, [r7, #6]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d102      	bne.n	801482a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8014824:	2301      	movs	r3, #1
 8014826:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014828:	e0e0      	b.n	80149ec <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2204      	movs	r2, #4
 801482e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	2200      	movs	r2, #0
 8014836:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	68ba      	ldr	r2, [r7, #8]
 801483c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	88fa      	ldrh	r2, [r7, #6]
 8014842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	88fa      	ldrh	r2, [r7, #6]
 801484a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2200      	movs	r2, #0
 8014852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2200      	movs	r2, #0
 8014858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2200      	movs	r2, #0
 801485e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2200      	movs	r2, #0
 8014864:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	2200      	movs	r2, #0
 801486a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014874:	d908      	bls.n	8014888 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	685a      	ldr	r2, [r3, #4]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014884:	605a      	str	r2, [r3, #4]
 8014886:	e007      	b.n	8014898 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	685a      	ldr	r2, [r3, #4]
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014896:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	689b      	ldr	r3, [r3, #8]
 801489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148a0:	d10f      	bne.n	80148c2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	681a      	ldr	r2, [r3, #0]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80148c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148cc:	2b40      	cmp	r3, #64	; 0x40
 80148ce:	d007      	beq.n	80148e0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80148de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80148e8:	d867      	bhi.n	80149ba <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80148ea:	e030      	b.n	801494e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	689b      	ldr	r3, [r3, #8]
 80148f2:	f003 0301 	and.w	r3, r3, #1
 80148f6:	2b01      	cmp	r3, #1
 80148f8:	d117      	bne.n	801492a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f103 020c 	add.w	r2, r3, #12
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014906:	7812      	ldrb	r2, [r2, #0]
 8014908:	b2d2      	uxtb	r2, r2
 801490a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014910:	1c5a      	adds	r2, r3, #1
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801491c:	b29b      	uxth	r3, r3
 801491e:	3b01      	subs	r3, #1
 8014920:	b29a      	uxth	r2, r3
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8014928:	e011      	b.n	801494e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801492a:	f7fb fcb7 	bl	801029c <HAL_GetTick>
 801492e:	4602      	mov	r2, r0
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	683a      	ldr	r2, [r7, #0]
 8014936:	429a      	cmp	r2, r3
 8014938:	d803      	bhi.n	8014942 <HAL_SPI_Receive+0x19c>
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014940:	d102      	bne.n	8014948 <HAL_SPI_Receive+0x1a2>
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d102      	bne.n	801494e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8014948:	2303      	movs	r3, #3
 801494a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801494c:	e04e      	b.n	80149ec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014954:	b29b      	uxth	r3, r3
 8014956:	2b00      	cmp	r3, #0
 8014958:	d1c8      	bne.n	80148ec <HAL_SPI_Receive+0x146>
 801495a:	e034      	b.n	80149c6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	689b      	ldr	r3, [r3, #8]
 8014962:	f003 0301 	and.w	r3, r3, #1
 8014966:	2b01      	cmp	r3, #1
 8014968:	d115      	bne.n	8014996 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	68da      	ldr	r2, [r3, #12]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014974:	b292      	uxth	r2, r2
 8014976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801497c:	1c9a      	adds	r2, r3, #2
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014988:	b29b      	uxth	r3, r3
 801498a:	3b01      	subs	r3, #1
 801498c:	b29a      	uxth	r2, r3
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8014994:	e011      	b.n	80149ba <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014996:	f7fb fc81 	bl	801029c <HAL_GetTick>
 801499a:	4602      	mov	r2, r0
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	683a      	ldr	r2, [r7, #0]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d803      	bhi.n	80149ae <HAL_SPI_Receive+0x208>
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ac:	d102      	bne.n	80149b4 <HAL_SPI_Receive+0x20e>
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d102      	bne.n	80149ba <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80149b4:	2303      	movs	r3, #3
 80149b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80149b8:	e018      	b.n	80149ec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d1ca      	bne.n	801495c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80149c6:	693a      	ldr	r2, [r7, #16]
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	68f8      	ldr	r0, [r7, #12]
 80149cc:	f000 fb4c 	bl	8015068 <SPI_EndRxTransaction>
 80149d0:	4603      	mov	r3, r0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d002      	beq.n	80149dc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2220      	movs	r2, #32
 80149da:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80149e4:	2301      	movs	r3, #1
 80149e6:	75fb      	strb	r3, [r7, #23]
 80149e8:	e000      	b.n	80149ec <HAL_SPI_Receive+0x246>
  }

error :
 80149ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2201      	movs	r2, #1
 80149f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2200      	movs	r2, #0
 80149f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80149fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3718      	adds	r7, #24
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b08a      	sub	sp, #40	; 0x28
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	60f8      	str	r0, [r7, #12]
 8014a0e:	60b9      	str	r1, [r7, #8]
 8014a10:	607a      	str	r2, [r7, #4]
 8014a12:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014a14:	2301      	movs	r3, #1
 8014a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d101      	bne.n	8014a2c <HAL_SPI_TransmitReceive+0x26>
 8014a28:	2302      	movs	r3, #2
 8014a2a:	e1fb      	b.n	8014e24 <HAL_SPI_TransmitReceive+0x41e>
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	2201      	movs	r2, #1
 8014a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a34:	f7fb fc32 	bl	801029c <HAL_GetTick>
 8014a38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014a40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8014a48:	887b      	ldrh	r3, [r7, #2]
 8014a4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8014a4c:	887b      	ldrh	r3, [r7, #2]
 8014a4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014a50:	7efb      	ldrb	r3, [r7, #27]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d00e      	beq.n	8014a74 <HAL_SPI_TransmitReceive+0x6e>
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014a5c:	d106      	bne.n	8014a6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	689b      	ldr	r3, [r3, #8]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d102      	bne.n	8014a6c <HAL_SPI_TransmitReceive+0x66>
 8014a66:	7efb      	ldrb	r3, [r7, #27]
 8014a68:	2b04      	cmp	r3, #4
 8014a6a:	d003      	beq.n	8014a74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8014a6c:	2302      	movs	r3, #2
 8014a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014a72:	e1cd      	b.n	8014e10 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d005      	beq.n	8014a86 <HAL_SPI_TransmitReceive+0x80>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d002      	beq.n	8014a86 <HAL_SPI_TransmitReceive+0x80>
 8014a80:	887b      	ldrh	r3, [r7, #2]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d103      	bne.n	8014a8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8014a86:	2301      	movs	r3, #1
 8014a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014a8c:	e1c0      	b.n	8014e10 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	2b04      	cmp	r3, #4
 8014a98:	d003      	beq.n	8014aa2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2205      	movs	r2, #5
 8014a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	887a      	ldrh	r2, [r7, #2]
 8014ab2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	887a      	ldrh	r2, [r7, #2]
 8014aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	68ba      	ldr	r2, [r7, #8]
 8014ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	887a      	ldrh	r2, [r7, #2]
 8014ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	887a      	ldrh	r2, [r7, #2]
 8014ace:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014ae4:	d802      	bhi.n	8014aec <HAL_SPI_TransmitReceive+0xe6>
 8014ae6:	8a3b      	ldrh	r3, [r7, #16]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d908      	bls.n	8014afe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	685a      	ldr	r2, [r3, #4]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014afa:	605a      	str	r2, [r3, #4]
 8014afc:	e007      	b.n	8014b0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	685a      	ldr	r2, [r3, #4]
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014b0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b18:	2b40      	cmp	r3, #64	; 0x40
 8014b1a:	d007      	beq.n	8014b2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	681a      	ldr	r2, [r3, #0]
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014b34:	d97c      	bls.n	8014c30 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	685b      	ldr	r3, [r3, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d002      	beq.n	8014b44 <HAL_SPI_TransmitReceive+0x13e>
 8014b3e:	8a7b      	ldrh	r3, [r7, #18]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d169      	bne.n	8014c18 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b48:	881a      	ldrh	r2, [r3, #0]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b54:	1c9a      	adds	r2, r3, #2
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	3b01      	subs	r3, #1
 8014b62:	b29a      	uxth	r2, r3
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014b68:	e056      	b.n	8014c18 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	689b      	ldr	r3, [r3, #8]
 8014b70:	f003 0302 	and.w	r3, r3, #2
 8014b74:	2b02      	cmp	r3, #2
 8014b76:	d11b      	bne.n	8014bb0 <HAL_SPI_TransmitReceive+0x1aa>
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d016      	beq.n	8014bb0 <HAL_SPI_TransmitReceive+0x1aa>
 8014b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d113      	bne.n	8014bb0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b8c:	881a      	ldrh	r2, [r3, #0]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b98:	1c9a      	adds	r2, r3, #2
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	b29a      	uxth	r2, r3
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014bac:	2300      	movs	r3, #0
 8014bae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	689b      	ldr	r3, [r3, #8]
 8014bb6:	f003 0301 	and.w	r3, r3, #1
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d11c      	bne.n	8014bf8 <HAL_SPI_TransmitReceive+0x1f2>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d016      	beq.n	8014bf8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	68da      	ldr	r2, [r3, #12]
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bd4:	b292      	uxth	r2, r2
 8014bd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bdc:	1c9a      	adds	r2, r3, #2
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	3b01      	subs	r3, #1
 8014bec:	b29a      	uxth	r2, r3
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014bf8:	f7fb fb50 	bl	801029c <HAL_GetTick>
 8014bfc:	4602      	mov	r2, r0
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	1ad3      	subs	r3, r2, r3
 8014c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d807      	bhi.n	8014c18 <HAL_SPI_TransmitReceive+0x212>
 8014c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	d003      	beq.n	8014c18 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8014c10:	2303      	movs	r3, #3
 8014c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014c16:	e0fb      	b.n	8014e10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1a3      	bne.n	8014b6a <HAL_SPI_TransmitReceive+0x164>
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d19d      	bne.n	8014b6a <HAL_SPI_TransmitReceive+0x164>
 8014c2e:	e0df      	b.n	8014df0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d003      	beq.n	8014c40 <HAL_SPI_TransmitReceive+0x23a>
 8014c38:	8a7b      	ldrh	r3, [r7, #18]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	f040 80cb 	bne.w	8014dd6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d912      	bls.n	8014c70 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c4e:	881a      	ldrh	r2, [r3, #0]
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c5a:	1c9a      	adds	r2, r3, #2
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	3b02      	subs	r3, #2
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014c6e:	e0b2      	b.n	8014dd6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	330c      	adds	r3, #12
 8014c7a:	7812      	ldrb	r2, [r2, #0]
 8014c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c82:	1c5a      	adds	r2, r3, #1
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	3b01      	subs	r3, #1
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014c96:	e09e      	b.n	8014dd6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	689b      	ldr	r3, [r3, #8]
 8014c9e:	f003 0302 	and.w	r3, r3, #2
 8014ca2:	2b02      	cmp	r3, #2
 8014ca4:	d134      	bne.n	8014d10 <HAL_SPI_TransmitReceive+0x30a>
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d02f      	beq.n	8014d10 <HAL_SPI_TransmitReceive+0x30a>
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d12c      	bne.n	8014d10 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d912      	bls.n	8014ce6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cc4:	881a      	ldrh	r2, [r3, #0]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cd0:	1c9a      	adds	r2, r3, #2
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	3b02      	subs	r3, #2
 8014cde:	b29a      	uxth	r2, r3
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014ce4:	e012      	b.n	8014d0c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	330c      	adds	r3, #12
 8014cf0:	7812      	ldrb	r2, [r2, #0]
 8014cf2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cf8:	1c5a      	adds	r2, r3, #1
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	3b01      	subs	r3, #1
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	689b      	ldr	r3, [r3, #8]
 8014d16:	f003 0301 	and.w	r3, r3, #1
 8014d1a:	2b01      	cmp	r3, #1
 8014d1c:	d148      	bne.n	8014db0 <HAL_SPI_TransmitReceive+0x3aa>
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d24:	b29b      	uxth	r3, r3
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d042      	beq.n	8014db0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d923      	bls.n	8014d7e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	68da      	ldr	r2, [r3, #12]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d40:	b292      	uxth	r2, r2
 8014d42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d48:	1c9a      	adds	r2, r3, #2
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	3b02      	subs	r3, #2
 8014d58:	b29a      	uxth	r2, r3
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d66:	b29b      	uxth	r3, r3
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d81f      	bhi.n	8014dac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	685a      	ldr	r2, [r3, #4]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014d7a:	605a      	str	r2, [r3, #4]
 8014d7c:	e016      	b.n	8014dac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f103 020c 	add.w	r2, r3, #12
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d8a:	7812      	ldrb	r2, [r2, #0]
 8014d8c:	b2d2      	uxtb	r2, r2
 8014d8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d94:	1c5a      	adds	r2, r3, #1
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	3b01      	subs	r3, #1
 8014da4:	b29a      	uxth	r2, r3
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014dac:	2301      	movs	r3, #1
 8014dae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014db0:	f7fb fa74 	bl	801029c <HAL_GetTick>
 8014db4:	4602      	mov	r2, r0
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	1ad3      	subs	r3, r2, r3
 8014dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d803      	bhi.n	8014dc8 <HAL_SPI_TransmitReceive+0x3c2>
 8014dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dc6:	d102      	bne.n	8014dce <HAL_SPI_TransmitReceive+0x3c8>
 8014dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d103      	bne.n	8014dd6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8014dce:	2303      	movs	r3, #3
 8014dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014dd4:	e01c      	b.n	8014e10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	f47f af5b 	bne.w	8014c98 <HAL_SPI_TransmitReceive+0x292>
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f47f af54 	bne.w	8014c98 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014df0:	69fa      	ldr	r2, [r7, #28]
 8014df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014df4:	68f8      	ldr	r0, [r7, #12]
 8014df6:	f000 f9b3 	bl	8015160 <SPI_EndRxTxTransaction>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d006      	beq.n	8014e0e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8014e00:	2301      	movs	r3, #1
 8014e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2220      	movs	r2, #32
 8014e0a:	661a      	str	r2, [r3, #96]	; 0x60
 8014e0c:	e000      	b.n	8014e10 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8014e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2201      	movs	r2, #1
 8014e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014e20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3728      	adds	r7, #40	; 0x28
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b088      	sub	sp, #32
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	60f8      	str	r0, [r7, #12]
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	603b      	str	r3, [r7, #0]
 8014e38:	4613      	mov	r3, r2
 8014e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014e3c:	f7fb fa2e 	bl	801029c <HAL_GetTick>
 8014e40:	4602      	mov	r2, r0
 8014e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e44:	1a9b      	subs	r3, r3, r2
 8014e46:	683a      	ldr	r2, [r7, #0]
 8014e48:	4413      	add	r3, r2
 8014e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014e4c:	f7fb fa26 	bl	801029c <HAL_GetTick>
 8014e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014e52:	4b39      	ldr	r3, [pc, #228]	; (8014f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	015b      	lsls	r3, r3, #5
 8014e58:	0d1b      	lsrs	r3, r3, #20
 8014e5a:	69fa      	ldr	r2, [r7, #28]
 8014e5c:	fb02 f303 	mul.w	r3, r2, r3
 8014e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014e62:	e054      	b.n	8014f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e6a:	d050      	beq.n	8014f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014e6c:	f7fb fa16 	bl	801029c <HAL_GetTick>
 8014e70:	4602      	mov	r2, r0
 8014e72:	69bb      	ldr	r3, [r7, #24]
 8014e74:	1ad3      	subs	r3, r2, r3
 8014e76:	69fa      	ldr	r2, [r7, #28]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d902      	bls.n	8014e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d13d      	bne.n	8014efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	685a      	ldr	r2, [r3, #4]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014e9a:	d111      	bne.n	8014ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	689b      	ldr	r3, [r3, #8]
 8014ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ea4:	d004      	beq.n	8014eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	689b      	ldr	r3, [r3, #8]
 8014eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014eae:	d107      	bne.n	8014ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014ec8:	d10f      	bne.n	8014eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014ed8:	601a      	str	r2, [r3, #0]
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2201      	movs	r2, #1
 8014eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014efa:	2303      	movs	r3, #3
 8014efc:	e017      	b.n	8014f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d101      	bne.n	8014f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014f04:	2300      	movs	r3, #0
 8014f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	689a      	ldr	r2, [r3, #8]
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	4013      	ands	r3, r2
 8014f18:	68ba      	ldr	r2, [r7, #8]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	bf0c      	ite	eq
 8014f1e:	2301      	moveq	r3, #1
 8014f20:	2300      	movne	r3, #0
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	461a      	mov	r2, r3
 8014f26:	79fb      	ldrb	r3, [r7, #7]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d19b      	bne.n	8014e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3720      	adds	r7, #32
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	2000005c 	.word	0x2000005c

08014f3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b08a      	sub	sp, #40	; 0x28
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	60f8      	str	r0, [r7, #12]
 8014f44:	60b9      	str	r1, [r7, #8]
 8014f46:	607a      	str	r2, [r7, #4]
 8014f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8014f4e:	f7fb f9a5 	bl	801029c <HAL_GetTick>
 8014f52:	4602      	mov	r2, r0
 8014f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f56:	1a9b      	subs	r3, r3, r2
 8014f58:	683a      	ldr	r2, [r7, #0]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8014f5e:	f7fb f99d 	bl	801029c <HAL_GetTick>
 8014f62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	330c      	adds	r3, #12
 8014f6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8014f6c:	4b3d      	ldr	r3, [pc, #244]	; (8015064 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	4613      	mov	r3, r2
 8014f72:	009b      	lsls	r3, r3, #2
 8014f74:	4413      	add	r3, r2
 8014f76:	00da      	lsls	r2, r3, #3
 8014f78:	1ad3      	subs	r3, r2, r3
 8014f7a:	0d1b      	lsrs	r3, r3, #20
 8014f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f7e:	fb02 f303 	mul.w	r3, r2, r3
 8014f82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8014f84:	e060      	b.n	8015048 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8014f8c:	d107      	bne.n	8014f9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d104      	bne.n	8014f9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8014f9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fa4:	d050      	beq.n	8015048 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014fa6:	f7fb f979 	bl	801029c <HAL_GetTick>
 8014faa:	4602      	mov	r2, r0
 8014fac:	6a3b      	ldr	r3, [r7, #32]
 8014fae:	1ad3      	subs	r3, r2, r3
 8014fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d902      	bls.n	8014fbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d13d      	bne.n	8015038 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	685a      	ldr	r2, [r3, #4]
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014fd4:	d111      	bne.n	8014ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	689b      	ldr	r3, [r3, #8]
 8014fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fde:	d004      	beq.n	8014fea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	689b      	ldr	r3, [r3, #8]
 8014fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014fe8:	d107      	bne.n	8014ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015002:	d10f      	bne.n	8015024 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	681a      	ldr	r2, [r3, #0]
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015012:	601a      	str	r2, [r3, #0]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2201      	movs	r2, #1
 8015028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2200      	movs	r2, #0
 8015030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8015034:	2303      	movs	r3, #3
 8015036:	e010      	b.n	801505a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015038:	69bb      	ldr	r3, [r7, #24]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d101      	bne.n	8015042 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801503e:	2300      	movs	r3, #0
 8015040:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8015042:	69bb      	ldr	r3, [r7, #24]
 8015044:	3b01      	subs	r3, #1
 8015046:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	689a      	ldr	r2, [r3, #8]
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	4013      	ands	r3, r2
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	429a      	cmp	r2, r3
 8015056:	d196      	bne.n	8014f86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3728      	adds	r7, #40	; 0x28
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	2000005c 	.word	0x2000005c

08015068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b088      	sub	sp, #32
 801506c:	af02      	add	r7, sp, #8
 801506e:	60f8      	str	r0, [r7, #12]
 8015070:	60b9      	str	r1, [r7, #8]
 8015072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801507c:	d111      	bne.n	80150a2 <SPI_EndRxTransaction+0x3a>
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	689b      	ldr	r3, [r3, #8]
 8015082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015086:	d004      	beq.n	8015092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	689b      	ldr	r3, [r3, #8]
 801508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015090:	d107      	bne.n	80150a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80150a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	685b      	ldr	r3, [r3, #4]
 80150a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80150aa:	d112      	bne.n	80150d2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	9300      	str	r3, [sp, #0]
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	2200      	movs	r2, #0
 80150b4:	2180      	movs	r1, #128	; 0x80
 80150b6:	68f8      	ldr	r0, [r7, #12]
 80150b8:	f7ff feb8 	bl	8014e2c <SPI_WaitFlagStateUntilTimeout>
 80150bc:	4603      	mov	r3, r0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d021      	beq.n	8015106 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80150c6:	f043 0220 	orr.w	r2, r3, #32
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80150ce:	2303      	movs	r3, #3
 80150d0:	e03d      	b.n	801514e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80150d2:	4b21      	ldr	r3, [pc, #132]	; (8015158 <SPI_EndRxTransaction+0xf0>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	4a21      	ldr	r2, [pc, #132]	; (801515c <SPI_EndRxTransaction+0xf4>)
 80150d8:	fba2 2303 	umull	r2, r3, r2, r3
 80150dc:	0d5b      	lsrs	r3, r3, #21
 80150de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80150e2:	fb02 f303 	mul.w	r3, r2, r3
 80150e6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00a      	beq.n	8015104 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	3b01      	subs	r3, #1
 80150f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	689b      	ldr	r3, [r3, #8]
 80150fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150fe:	2b80      	cmp	r3, #128	; 0x80
 8015100:	d0f2      	beq.n	80150e8 <SPI_EndRxTransaction+0x80>
 8015102:	e000      	b.n	8015106 <SPI_EndRxTransaction+0x9e>
        break;
 8015104:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801510e:	d11d      	bne.n	801514c <SPI_EndRxTransaction+0xe4>
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	689b      	ldr	r3, [r3, #8]
 8015114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015118:	d004      	beq.n	8015124 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	689b      	ldr	r3, [r3, #8]
 801511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015122:	d113      	bne.n	801514c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	9300      	str	r3, [sp, #0]
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2200      	movs	r2, #0
 801512c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	f7ff ff03 	bl	8014f3c <SPI_WaitFifoStateUntilTimeout>
 8015136:	4603      	mov	r3, r0
 8015138:	2b00      	cmp	r3, #0
 801513a:	d007      	beq.n	801514c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015140:	f043 0220 	orr.w	r2, r3, #32
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8015148:	2303      	movs	r3, #3
 801514a:	e000      	b.n	801514e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801514c:	2300      	movs	r3, #0
}
 801514e:	4618      	mov	r0, r3
 8015150:	3718      	adds	r7, #24
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}
 8015156:	bf00      	nop
 8015158:	2000005c 	.word	0x2000005c
 801515c:	165e9f81 	.word	0x165e9f81

08015160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b088      	sub	sp, #32
 8015164:	af02      	add	r7, sp, #8
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	9300      	str	r3, [sp, #0]
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	2200      	movs	r2, #0
 8015174:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8015178:	68f8      	ldr	r0, [r7, #12]
 801517a:	f7ff fedf 	bl	8014f3c <SPI_WaitFifoStateUntilTimeout>
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d007      	beq.n	8015194 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015188:	f043 0220 	orr.w	r2, r3, #32
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015190:	2303      	movs	r3, #3
 8015192:	e046      	b.n	8015222 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8015194:	4b25      	ldr	r3, [pc, #148]	; (801522c <SPI_EndRxTxTransaction+0xcc>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	4a25      	ldr	r2, [pc, #148]	; (8015230 <SPI_EndRxTxTransaction+0xd0>)
 801519a:	fba2 2303 	umull	r2, r3, r2, r3
 801519e:	0d5b      	lsrs	r3, r3, #21
 80151a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80151a4:	fb02 f303 	mul.w	r3, r2, r3
 80151a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80151b2:	d112      	bne.n	80151da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2200      	movs	r2, #0
 80151bc:	2180      	movs	r1, #128	; 0x80
 80151be:	68f8      	ldr	r0, [r7, #12]
 80151c0:	f7ff fe34 	bl	8014e2c <SPI_WaitFlagStateUntilTimeout>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d016      	beq.n	80151f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80151ce:	f043 0220 	orr.w	r2, r3, #32
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80151d6:	2303      	movs	r3, #3
 80151d8:	e023      	b.n	8015222 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d00a      	beq.n	80151f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	3b01      	subs	r3, #1
 80151e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	689b      	ldr	r3, [r3, #8]
 80151ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151f0:	2b80      	cmp	r3, #128	; 0x80
 80151f2:	d0f2      	beq.n	80151da <SPI_EndRxTxTransaction+0x7a>
 80151f4:	e000      	b.n	80151f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80151f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	9300      	str	r3, [sp, #0]
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	2200      	movs	r2, #0
 8015200:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f7ff fe99 	bl	8014f3c <SPI_WaitFifoStateUntilTimeout>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	d007      	beq.n	8015220 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015214:	f043 0220 	orr.w	r2, r3, #32
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801521c:	2303      	movs	r3, #3
 801521e:	e000      	b.n	8015222 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8015220:	2300      	movs	r3, #0
}
 8015222:	4618      	mov	r0, r3
 8015224:	3718      	adds	r7, #24
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}
 801522a:	bf00      	nop
 801522c:	2000005c 	.word	0x2000005c
 8015230:	165e9f81 	.word	0x165e9f81

08015234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d101      	bne.n	8015246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015242:	2301      	movs	r3, #1
 8015244:	e049      	b.n	80152da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801524c:	b2db      	uxtb	r3, r3
 801524e:	2b00      	cmp	r3, #0
 8015250:	d106      	bne.n	8015260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2200      	movs	r2, #0
 8015256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7fa fa88 	bl	800f770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2202      	movs	r2, #2
 8015264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	3304      	adds	r3, #4
 8015270:	4619      	mov	r1, r3
 8015272:	4610      	mov	r0, r2
 8015274:	f000 fb58 	bl	8015928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2201      	movs	r2, #1
 801527c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2201      	movs	r2, #1
 8015284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2201      	movs	r2, #1
 801528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2201      	movs	r2, #1
 8015294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2201      	movs	r2, #1
 801529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2201      	movs	r2, #1
 80152a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2201      	movs	r2, #1
 80152ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2201      	movs	r2, #1
 80152b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2201      	movs	r2, #1
 80152bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2201      	movs	r2, #1
 80152c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2201      	movs	r2, #1
 80152cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2201      	movs	r2, #1
 80152d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80152d8:	2300      	movs	r3, #0
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}
	...

080152e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d001      	beq.n	80152fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80152f8:	2301      	movs	r3, #1
 80152fa:	e04c      	b.n	8015396 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2202      	movs	r2, #2
 8015300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4a26      	ldr	r2, [pc, #152]	; (80153a4 <HAL_TIM_Base_Start+0xc0>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d022      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015316:	d01d      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4a22      	ldr	r2, [pc, #136]	; (80153a8 <HAL_TIM_Base_Start+0xc4>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d018      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	4a21      	ldr	r2, [pc, #132]	; (80153ac <HAL_TIM_Base_Start+0xc8>)
 8015328:	4293      	cmp	r3, r2
 801532a:	d013      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	4a1f      	ldr	r2, [pc, #124]	; (80153b0 <HAL_TIM_Base_Start+0xcc>)
 8015332:	4293      	cmp	r3, r2
 8015334:	d00e      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4a1e      	ldr	r2, [pc, #120]	; (80153b4 <HAL_TIM_Base_Start+0xd0>)
 801533c:	4293      	cmp	r3, r2
 801533e:	d009      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4a1c      	ldr	r2, [pc, #112]	; (80153b8 <HAL_TIM_Base_Start+0xd4>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d004      	beq.n	8015354 <HAL_TIM_Base_Start+0x70>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	4a1b      	ldr	r2, [pc, #108]	; (80153bc <HAL_TIM_Base_Start+0xd8>)
 8015350:	4293      	cmp	r3, r2
 8015352:	d115      	bne.n	8015380 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	689a      	ldr	r2, [r3, #8]
 801535a:	4b19      	ldr	r3, [pc, #100]	; (80153c0 <HAL_TIM_Base_Start+0xdc>)
 801535c:	4013      	ands	r3, r2
 801535e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2b06      	cmp	r3, #6
 8015364:	d015      	beq.n	8015392 <HAL_TIM_Base_Start+0xae>
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801536c:	d011      	beq.n	8015392 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f042 0201 	orr.w	r2, r2, #1
 801537c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801537e:	e008      	b.n	8015392 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f042 0201 	orr.w	r2, r2, #1
 801538e:	601a      	str	r2, [r3, #0]
 8015390:	e000      	b.n	8015394 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015394:	2300      	movs	r3, #0
}
 8015396:	4618      	mov	r0, r3
 8015398:	3714      	adds	r7, #20
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr
 80153a2:	bf00      	nop
 80153a4:	40010000 	.word	0x40010000
 80153a8:	40000400 	.word	0x40000400
 80153ac:	40000800 	.word	0x40000800
 80153b0:	40000c00 	.word	0x40000c00
 80153b4:	40010400 	.word	0x40010400
 80153b8:	40014000 	.word	0x40014000
 80153bc:	40001800 	.word	0x40001800
 80153c0:	00010007 	.word	0x00010007

080153c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	6a1a      	ldr	r2, [r3, #32]
 80153d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80153d6:	4013      	ands	r3, r2
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d10f      	bne.n	80153fc <HAL_TIM_Base_Stop+0x38>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	6a1a      	ldr	r2, [r3, #32]
 80153e2:	f240 4344 	movw	r3, #1092	; 0x444
 80153e6:	4013      	ands	r3, r2
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d107      	bne.n	80153fc <HAL_TIM_Base_Stop+0x38>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	681a      	ldr	r2, [r3, #0]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	f022 0201 	bic.w	r2, r2, #1
 80153fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8015404:	2300      	movs	r3, #0
}
 8015406:	4618      	mov	r0, r3
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr
	...

08015414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015414:	b480      	push	{r7}
 8015416:	b085      	sub	sp, #20
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015422:	b2db      	uxtb	r3, r3
 8015424:	2b01      	cmp	r3, #1
 8015426:	d001      	beq.n	801542c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015428:	2301      	movs	r3, #1
 801542a:	e054      	b.n	80154d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2202      	movs	r2, #2
 8015430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	68da      	ldr	r2, [r3, #12]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	f042 0201 	orr.w	r2, r2, #1
 8015442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	4a26      	ldr	r2, [pc, #152]	; (80154e4 <HAL_TIM_Base_Start_IT+0xd0>)
 801544a:	4293      	cmp	r3, r2
 801544c:	d022      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015456:	d01d      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	4a22      	ldr	r2, [pc, #136]	; (80154e8 <HAL_TIM_Base_Start_IT+0xd4>)
 801545e:	4293      	cmp	r3, r2
 8015460:	d018      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	4a21      	ldr	r2, [pc, #132]	; (80154ec <HAL_TIM_Base_Start_IT+0xd8>)
 8015468:	4293      	cmp	r3, r2
 801546a:	d013      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	4a1f      	ldr	r2, [pc, #124]	; (80154f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8015472:	4293      	cmp	r3, r2
 8015474:	d00e      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	4a1e      	ldr	r2, [pc, #120]	; (80154f4 <HAL_TIM_Base_Start_IT+0xe0>)
 801547c:	4293      	cmp	r3, r2
 801547e:	d009      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	4a1c      	ldr	r2, [pc, #112]	; (80154f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8015486:	4293      	cmp	r3, r2
 8015488:	d004      	beq.n	8015494 <HAL_TIM_Base_Start_IT+0x80>
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	4a1b      	ldr	r2, [pc, #108]	; (80154fc <HAL_TIM_Base_Start_IT+0xe8>)
 8015490:	4293      	cmp	r3, r2
 8015492:	d115      	bne.n	80154c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	689a      	ldr	r2, [r3, #8]
 801549a:	4b19      	ldr	r3, [pc, #100]	; (8015500 <HAL_TIM_Base_Start_IT+0xec>)
 801549c:	4013      	ands	r3, r2
 801549e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2b06      	cmp	r3, #6
 80154a4:	d015      	beq.n	80154d2 <HAL_TIM_Base_Start_IT+0xbe>
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154ac:	d011      	beq.n	80154d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	f042 0201 	orr.w	r2, r2, #1
 80154bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80154be:	e008      	b.n	80154d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	681a      	ldr	r2, [r3, #0]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f042 0201 	orr.w	r2, r2, #1
 80154ce:	601a      	str	r2, [r3, #0]
 80154d0:	e000      	b.n	80154d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80154d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80154d4:	2300      	movs	r3, #0
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3714      	adds	r7, #20
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr
 80154e2:	bf00      	nop
 80154e4:	40010000 	.word	0x40010000
 80154e8:	40000400 	.word	0x40000400
 80154ec:	40000800 	.word	0x40000800
 80154f0:	40000c00 	.word	0x40000c00
 80154f4:	40010400 	.word	0x40010400
 80154f8:	40014000 	.word	0x40014000
 80154fc:	40001800 	.word	0x40001800
 8015500:	00010007 	.word	0x00010007

08015504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	691b      	ldr	r3, [r3, #16]
 8015512:	f003 0302 	and.w	r3, r3, #2
 8015516:	2b02      	cmp	r3, #2
 8015518:	d122      	bne.n	8015560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	f003 0302 	and.w	r3, r3, #2
 8015524:	2b02      	cmp	r3, #2
 8015526:	d11b      	bne.n	8015560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	f06f 0202 	mvn.w	r2, #2
 8015530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2201      	movs	r2, #1
 8015536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	699b      	ldr	r3, [r3, #24]
 801553e:	f003 0303 	and.w	r3, r3, #3
 8015542:	2b00      	cmp	r3, #0
 8015544:	d003      	beq.n	801554e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 f9d0 	bl	80158ec <HAL_TIM_IC_CaptureCallback>
 801554c:	e005      	b.n	801555a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f000 f9c2 	bl	80158d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 f9d3 	bl	8015900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2200      	movs	r2, #0
 801555e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	691b      	ldr	r3, [r3, #16]
 8015566:	f003 0304 	and.w	r3, r3, #4
 801556a:	2b04      	cmp	r3, #4
 801556c:	d122      	bne.n	80155b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	68db      	ldr	r3, [r3, #12]
 8015574:	f003 0304 	and.w	r3, r3, #4
 8015578:	2b04      	cmp	r3, #4
 801557a:	d11b      	bne.n	80155b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	f06f 0204 	mvn.w	r2, #4
 8015584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2202      	movs	r2, #2
 801558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	699b      	ldr	r3, [r3, #24]
 8015592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015596:	2b00      	cmp	r3, #0
 8015598:	d003      	beq.n	80155a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 f9a6 	bl	80158ec <HAL_TIM_IC_CaptureCallback>
 80155a0:	e005      	b.n	80155ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f000 f998 	bl	80158d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f000 f9a9 	bl	8015900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2200      	movs	r2, #0
 80155b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	691b      	ldr	r3, [r3, #16]
 80155ba:	f003 0308 	and.w	r3, r3, #8
 80155be:	2b08      	cmp	r3, #8
 80155c0:	d122      	bne.n	8015608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	f003 0308 	and.w	r3, r3, #8
 80155cc:	2b08      	cmp	r3, #8
 80155ce:	d11b      	bne.n	8015608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	f06f 0208 	mvn.w	r2, #8
 80155d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2204      	movs	r2, #4
 80155de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	69db      	ldr	r3, [r3, #28]
 80155e6:	f003 0303 	and.w	r3, r3, #3
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d003      	beq.n	80155f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f97c 	bl	80158ec <HAL_TIM_IC_CaptureCallback>
 80155f4:	e005      	b.n	8015602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f000 f96e 	bl	80158d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 f97f 	bl	8015900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2200      	movs	r2, #0
 8015606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	691b      	ldr	r3, [r3, #16]
 801560e:	f003 0310 	and.w	r3, r3, #16
 8015612:	2b10      	cmp	r3, #16
 8015614:	d122      	bne.n	801565c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	f003 0310 	and.w	r3, r3, #16
 8015620:	2b10      	cmp	r3, #16
 8015622:	d11b      	bne.n	801565c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	f06f 0210 	mvn.w	r2, #16
 801562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2208      	movs	r2, #8
 8015632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	69db      	ldr	r3, [r3, #28]
 801563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801563e:	2b00      	cmp	r3, #0
 8015640:	d003      	beq.n	801564a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f000 f952 	bl	80158ec <HAL_TIM_IC_CaptureCallback>
 8015648:	e005      	b.n	8015656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f000 f944 	bl	80158d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f000 f955 	bl	8015900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2200      	movs	r2, #0
 801565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	691b      	ldr	r3, [r3, #16]
 8015662:	f003 0301 	and.w	r3, r3, #1
 8015666:	2b01      	cmp	r3, #1
 8015668:	d10e      	bne.n	8015688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	f003 0301 	and.w	r3, r3, #1
 8015674:	2b01      	cmp	r3, #1
 8015676:	d107      	bne.n	8015688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f06f 0201 	mvn.w	r2, #1
 8015680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f7f9 fd94 	bl	800f1b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	691b      	ldr	r3, [r3, #16]
 801568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015692:	2b80      	cmp	r3, #128	; 0x80
 8015694:	d10e      	bne.n	80156b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156a0:	2b80      	cmp	r3, #128	; 0x80
 80156a2:	d107      	bne.n	80156b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80156ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f000 fb0c 	bl	8015ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	691b      	ldr	r3, [r3, #16]
 80156ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156c2:	d10e      	bne.n	80156e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156ce:	2b80      	cmp	r3, #128	; 0x80
 80156d0:	d107      	bne.n	80156e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80156da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f000 faff 	bl	8015ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	691b      	ldr	r3, [r3, #16]
 80156e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156ec:	2b40      	cmp	r3, #64	; 0x40
 80156ee:	d10e      	bne.n	801570e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156fa:	2b40      	cmp	r3, #64	; 0x40
 80156fc:	d107      	bne.n	801570e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 f903 	bl	8015914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	691b      	ldr	r3, [r3, #16]
 8015714:	f003 0320 	and.w	r3, r3, #32
 8015718:	2b20      	cmp	r3, #32
 801571a:	d10e      	bne.n	801573a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	f003 0320 	and.w	r3, r3, #32
 8015726:	2b20      	cmp	r3, #32
 8015728:	d107      	bne.n	801573a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f06f 0220 	mvn.w	r2, #32
 8015732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f000 fabf 	bl	8015cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801573a:	bf00      	nop
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
	...

08015744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
 801574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801574e:	2300      	movs	r3, #0
 8015750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015758:	2b01      	cmp	r3, #1
 801575a:	d101      	bne.n	8015760 <HAL_TIM_ConfigClockSource+0x1c>
 801575c:	2302      	movs	r3, #2
 801575e:	e0b4      	b.n	80158ca <HAL_TIM_ConfigClockSource+0x186>
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2201      	movs	r2, #1
 8015764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2202      	movs	r2, #2
 801576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	689b      	ldr	r3, [r3, #8]
 8015776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015778:	68ba      	ldr	r2, [r7, #8]
 801577a:	4b56      	ldr	r3, [pc, #344]	; (80158d4 <HAL_TIM_ConfigClockSource+0x190>)
 801577c:	4013      	ands	r3, r2
 801577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	68ba      	ldr	r2, [r7, #8]
 801578e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015798:	d03e      	beq.n	8015818 <HAL_TIM_ConfigClockSource+0xd4>
 801579a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801579e:	f200 8087 	bhi.w	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157a6:	f000 8086 	beq.w	80158b6 <HAL_TIM_ConfigClockSource+0x172>
 80157aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157ae:	d87f      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157b0:	2b70      	cmp	r3, #112	; 0x70
 80157b2:	d01a      	beq.n	80157ea <HAL_TIM_ConfigClockSource+0xa6>
 80157b4:	2b70      	cmp	r3, #112	; 0x70
 80157b6:	d87b      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157b8:	2b60      	cmp	r3, #96	; 0x60
 80157ba:	d050      	beq.n	801585e <HAL_TIM_ConfigClockSource+0x11a>
 80157bc:	2b60      	cmp	r3, #96	; 0x60
 80157be:	d877      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157c0:	2b50      	cmp	r3, #80	; 0x50
 80157c2:	d03c      	beq.n	801583e <HAL_TIM_ConfigClockSource+0xfa>
 80157c4:	2b50      	cmp	r3, #80	; 0x50
 80157c6:	d873      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157c8:	2b40      	cmp	r3, #64	; 0x40
 80157ca:	d058      	beq.n	801587e <HAL_TIM_ConfigClockSource+0x13a>
 80157cc:	2b40      	cmp	r3, #64	; 0x40
 80157ce:	d86f      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157d0:	2b30      	cmp	r3, #48	; 0x30
 80157d2:	d064      	beq.n	801589e <HAL_TIM_ConfigClockSource+0x15a>
 80157d4:	2b30      	cmp	r3, #48	; 0x30
 80157d6:	d86b      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157d8:	2b20      	cmp	r3, #32
 80157da:	d060      	beq.n	801589e <HAL_TIM_ConfigClockSource+0x15a>
 80157dc:	2b20      	cmp	r3, #32
 80157de:	d867      	bhi.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d05c      	beq.n	801589e <HAL_TIM_ConfigClockSource+0x15a>
 80157e4:	2b10      	cmp	r3, #16
 80157e6:	d05a      	beq.n	801589e <HAL_TIM_ConfigClockSource+0x15a>
 80157e8:	e062      	b.n	80158b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6818      	ldr	r0, [r3, #0]
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	6899      	ldr	r1, [r3, #8]
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	685a      	ldr	r2, [r3, #4]
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	f000 f9af 	bl	8015b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	689b      	ldr	r3, [r3, #8]
 8015804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801580c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	68ba      	ldr	r2, [r7, #8]
 8015814:	609a      	str	r2, [r3, #8]
      break;
 8015816:	e04f      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6818      	ldr	r0, [r3, #0]
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	6899      	ldr	r1, [r3, #8]
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	685a      	ldr	r2, [r3, #4]
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	f000 f998 	bl	8015b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	689a      	ldr	r2, [r3, #8]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801583a:	609a      	str	r2, [r3, #8]
      break;
 801583c:	e03c      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6818      	ldr	r0, [r3, #0]
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	6859      	ldr	r1, [r3, #4]
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	68db      	ldr	r3, [r3, #12]
 801584a:	461a      	mov	r2, r3
 801584c:	f000 f90c 	bl	8015a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	2150      	movs	r1, #80	; 0x50
 8015856:	4618      	mov	r0, r3
 8015858:	f000 f965 	bl	8015b26 <TIM_ITRx_SetConfig>
      break;
 801585c:	e02c      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	6818      	ldr	r0, [r3, #0]
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	6859      	ldr	r1, [r3, #4]
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	461a      	mov	r2, r3
 801586c:	f000 f92b 	bl	8015ac6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2160      	movs	r1, #96	; 0x60
 8015876:	4618      	mov	r0, r3
 8015878:	f000 f955 	bl	8015b26 <TIM_ITRx_SetConfig>
      break;
 801587c:	e01c      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	6818      	ldr	r0, [r3, #0]
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	6859      	ldr	r1, [r3, #4]
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	68db      	ldr	r3, [r3, #12]
 801588a:	461a      	mov	r2, r3
 801588c:	f000 f8ec 	bl	8015a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	2140      	movs	r1, #64	; 0x40
 8015896:	4618      	mov	r0, r3
 8015898:	f000 f945 	bl	8015b26 <TIM_ITRx_SetConfig>
      break;
 801589c:	e00c      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4619      	mov	r1, r3
 80158a8:	4610      	mov	r0, r2
 80158aa:	f000 f93c 	bl	8015b26 <TIM_ITRx_SetConfig>
      break;
 80158ae:	e003      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80158b0:	2301      	movs	r3, #1
 80158b2:	73fb      	strb	r3, [r7, #15]
      break;
 80158b4:	e000      	b.n	80158b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80158b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2201      	movs	r2, #1
 80158bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2200      	movs	r2, #0
 80158c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80158c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3710      	adds	r7, #16
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}
 80158d2:	bf00      	nop
 80158d4:	fffeff88 	.word	0xfffeff88

080158d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80158e0:	bf00      	nop
 80158e2:	370c      	adds	r7, #12
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80158ec:	b480      	push	{r7}
 80158ee:	b083      	sub	sp, #12
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80158f4:	bf00      	nop
 80158f6:	370c      	adds	r7, #12
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015908:	bf00      	nop
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015914:	b480      	push	{r7}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801591c:	bf00      	nop
 801591e:	370c      	adds	r7, #12
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr

08015928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015928:	b480      	push	{r7}
 801592a:	b085      	sub	sp, #20
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	4a40      	ldr	r2, [pc, #256]	; (8015a3c <TIM_Base_SetConfig+0x114>)
 801593c:	4293      	cmp	r3, r2
 801593e:	d013      	beq.n	8015968 <TIM_Base_SetConfig+0x40>
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015946:	d00f      	beq.n	8015968 <TIM_Base_SetConfig+0x40>
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	4a3d      	ldr	r2, [pc, #244]	; (8015a40 <TIM_Base_SetConfig+0x118>)
 801594c:	4293      	cmp	r3, r2
 801594e:	d00b      	beq.n	8015968 <TIM_Base_SetConfig+0x40>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	4a3c      	ldr	r2, [pc, #240]	; (8015a44 <TIM_Base_SetConfig+0x11c>)
 8015954:	4293      	cmp	r3, r2
 8015956:	d007      	beq.n	8015968 <TIM_Base_SetConfig+0x40>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	4a3b      	ldr	r2, [pc, #236]	; (8015a48 <TIM_Base_SetConfig+0x120>)
 801595c:	4293      	cmp	r3, r2
 801595e:	d003      	beq.n	8015968 <TIM_Base_SetConfig+0x40>
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	4a3a      	ldr	r2, [pc, #232]	; (8015a4c <TIM_Base_SetConfig+0x124>)
 8015964:	4293      	cmp	r3, r2
 8015966:	d108      	bne.n	801597a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801596e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	68fa      	ldr	r2, [r7, #12]
 8015976:	4313      	orrs	r3, r2
 8015978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4a2f      	ldr	r2, [pc, #188]	; (8015a3c <TIM_Base_SetConfig+0x114>)
 801597e:	4293      	cmp	r3, r2
 8015980:	d02b      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015988:	d027      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	4a2c      	ldr	r2, [pc, #176]	; (8015a40 <TIM_Base_SetConfig+0x118>)
 801598e:	4293      	cmp	r3, r2
 8015990:	d023      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	4a2b      	ldr	r2, [pc, #172]	; (8015a44 <TIM_Base_SetConfig+0x11c>)
 8015996:	4293      	cmp	r3, r2
 8015998:	d01f      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	4a2a      	ldr	r2, [pc, #168]	; (8015a48 <TIM_Base_SetConfig+0x120>)
 801599e:	4293      	cmp	r3, r2
 80159a0:	d01b      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	4a29      	ldr	r2, [pc, #164]	; (8015a4c <TIM_Base_SetConfig+0x124>)
 80159a6:	4293      	cmp	r3, r2
 80159a8:	d017      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	4a28      	ldr	r2, [pc, #160]	; (8015a50 <TIM_Base_SetConfig+0x128>)
 80159ae:	4293      	cmp	r3, r2
 80159b0:	d013      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4a27      	ldr	r2, [pc, #156]	; (8015a54 <TIM_Base_SetConfig+0x12c>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d00f      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	4a26      	ldr	r2, [pc, #152]	; (8015a58 <TIM_Base_SetConfig+0x130>)
 80159be:	4293      	cmp	r3, r2
 80159c0:	d00b      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4a25      	ldr	r2, [pc, #148]	; (8015a5c <TIM_Base_SetConfig+0x134>)
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d007      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	4a24      	ldr	r2, [pc, #144]	; (8015a60 <TIM_Base_SetConfig+0x138>)
 80159ce:	4293      	cmp	r3, r2
 80159d0:	d003      	beq.n	80159da <TIM_Base_SetConfig+0xb2>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4a23      	ldr	r2, [pc, #140]	; (8015a64 <TIM_Base_SetConfig+0x13c>)
 80159d6:	4293      	cmp	r3, r2
 80159d8:	d108      	bne.n	80159ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80159e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	68fa      	ldr	r2, [r7, #12]
 80159e8:	4313      	orrs	r3, r2
 80159ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	695b      	ldr	r3, [r3, #20]
 80159f6:	4313      	orrs	r3, r2
 80159f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	689a      	ldr	r2, [r3, #8]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	681a      	ldr	r2, [r3, #0]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	4a0a      	ldr	r2, [pc, #40]	; (8015a3c <TIM_Base_SetConfig+0x114>)
 8015a14:	4293      	cmp	r3, r2
 8015a16:	d003      	beq.n	8015a20 <TIM_Base_SetConfig+0xf8>
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	4a0c      	ldr	r2, [pc, #48]	; (8015a4c <TIM_Base_SetConfig+0x124>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d103      	bne.n	8015a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	691a      	ldr	r2, [r3, #16]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	615a      	str	r2, [r3, #20]
}
 8015a2e:	bf00      	nop
 8015a30:	3714      	adds	r7, #20
 8015a32:	46bd      	mov	sp, r7
 8015a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop
 8015a3c:	40010000 	.word	0x40010000
 8015a40:	40000400 	.word	0x40000400
 8015a44:	40000800 	.word	0x40000800
 8015a48:	40000c00 	.word	0x40000c00
 8015a4c:	40010400 	.word	0x40010400
 8015a50:	40014000 	.word	0x40014000
 8015a54:	40014400 	.word	0x40014400
 8015a58:	40014800 	.word	0x40014800
 8015a5c:	40001800 	.word	0x40001800
 8015a60:	40001c00 	.word	0x40001c00
 8015a64:	40002000 	.word	0x40002000

08015a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015a68:	b480      	push	{r7}
 8015a6a:	b087      	sub	sp, #28
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	6a1b      	ldr	r3, [r3, #32]
 8015a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	6a1b      	ldr	r3, [r3, #32]
 8015a7e:	f023 0201 	bic.w	r2, r3, #1
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	699b      	ldr	r3, [r3, #24]
 8015a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	011b      	lsls	r3, r3, #4
 8015a98:	693a      	ldr	r2, [r7, #16]
 8015a9a:	4313      	orrs	r3, r2
 8015a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	f023 030a 	bic.w	r3, r3, #10
 8015aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015aa6:	697a      	ldr	r2, [r7, #20]
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	4313      	orrs	r3, r2
 8015aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	693a      	ldr	r2, [r7, #16]
 8015ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	621a      	str	r2, [r3, #32]
}
 8015aba:	bf00      	nop
 8015abc:	371c      	adds	r7, #28
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac4:	4770      	bx	lr

08015ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015ac6:	b480      	push	{r7}
 8015ac8:	b087      	sub	sp, #28
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	60f8      	str	r0, [r7, #12]
 8015ace:	60b9      	str	r1, [r7, #8]
 8015ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6a1b      	ldr	r3, [r3, #32]
 8015ad6:	f023 0210 	bic.w	r2, r3, #16
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	699b      	ldr	r3, [r3, #24]
 8015ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	6a1b      	ldr	r3, [r3, #32]
 8015ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	031b      	lsls	r3, r3, #12
 8015af6:	697a      	ldr	r2, [r7, #20]
 8015af8:	4313      	orrs	r3, r2
 8015afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	011b      	lsls	r3, r3, #4
 8015b08:	693a      	ldr	r2, [r7, #16]
 8015b0a:	4313      	orrs	r3, r2
 8015b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	697a      	ldr	r2, [r7, #20]
 8015b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	693a      	ldr	r2, [r7, #16]
 8015b18:	621a      	str	r2, [r3, #32]
}
 8015b1a:	bf00      	nop
 8015b1c:	371c      	adds	r7, #28
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b24:	4770      	bx	lr

08015b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015b26:	b480      	push	{r7}
 8015b28:	b085      	sub	sp, #20
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
 8015b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	689b      	ldr	r3, [r3, #8]
 8015b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015b3e:	683a      	ldr	r2, [r7, #0]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	4313      	orrs	r3, r2
 8015b44:	f043 0307 	orr.w	r3, r3, #7
 8015b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	68fa      	ldr	r2, [r7, #12]
 8015b4e:	609a      	str	r2, [r3, #8]
}
 8015b50:	bf00      	nop
 8015b52:	3714      	adds	r7, #20
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b087      	sub	sp, #28
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
 8015b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	689b      	ldr	r3, [r3, #8]
 8015b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	021a      	lsls	r2, r3, #8
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	431a      	orrs	r2, r3
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	4313      	orrs	r3, r2
 8015b84:	697a      	ldr	r2, [r7, #20]
 8015b86:	4313      	orrs	r3, r2
 8015b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	697a      	ldr	r2, [r7, #20]
 8015b8e:	609a      	str	r2, [r3, #8]
}
 8015b90:	bf00      	nop
 8015b92:	371c      	adds	r7, #28
 8015b94:	46bd      	mov	sp, r7
 8015b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9a:	4770      	bx	lr

08015b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b085      	sub	sp, #20
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bac:	2b01      	cmp	r3, #1
 8015bae:	d101      	bne.n	8015bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015bb0:	2302      	movs	r3, #2
 8015bb2:	e06d      	b.n	8015c90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2202      	movs	r2, #2
 8015bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	689b      	ldr	r3, [r3, #8]
 8015bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	4a30      	ldr	r2, [pc, #192]	; (8015c9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015bda:	4293      	cmp	r3, r2
 8015bdc:	d004      	beq.n	8015be8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	4a2f      	ldr	r2, [pc, #188]	; (8015ca0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015be4:	4293      	cmp	r3, r2
 8015be6:	d108      	bne.n	8015bfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015bee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	68fa      	ldr	r2, [r7, #12]
 8015bf6:	4313      	orrs	r3, r2
 8015bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	68fa      	ldr	r2, [r7, #12]
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	4a20      	ldr	r2, [pc, #128]	; (8015c9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	d022      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c26:	d01d      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	4a1d      	ldr	r2, [pc, #116]	; (8015ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	d018      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	4a1c      	ldr	r2, [pc, #112]	; (8015ca8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015c38:	4293      	cmp	r3, r2
 8015c3a:	d013      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	4a1a      	ldr	r2, [pc, #104]	; (8015cac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8015c42:	4293      	cmp	r3, r2
 8015c44:	d00e      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4a15      	ldr	r2, [pc, #84]	; (8015ca0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	d009      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4a16      	ldr	r2, [pc, #88]	; (8015cb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8015c56:	4293      	cmp	r3, r2
 8015c58:	d004      	beq.n	8015c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	4a15      	ldr	r2, [pc, #84]	; (8015cb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8015c60:	4293      	cmp	r3, r2
 8015c62:	d10c      	bne.n	8015c7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	689b      	ldr	r3, [r3, #8]
 8015c70:	68ba      	ldr	r2, [r7, #8]
 8015c72:	4313      	orrs	r3, r2
 8015c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	68ba      	ldr	r2, [r7, #8]
 8015c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2201      	movs	r2, #1
 8015c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3714      	adds	r7, #20
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr
 8015c9c:	40010000 	.word	0x40010000
 8015ca0:	40010400 	.word	0x40010400
 8015ca4:	40000400 	.word	0x40000400
 8015ca8:	40000800 	.word	0x40000800
 8015cac:	40000c00 	.word	0x40000c00
 8015cb0:	40014000 	.word	0x40014000
 8015cb4:	40001800 	.word	0x40001800

08015cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015cb8:	b480      	push	{r7}
 8015cba:	b083      	sub	sp, #12
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015cc0:	bf00      	nop
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr

08015ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015cd4:	bf00      	nop
 8015cd6:	370c      	adds	r7, #12
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr

08015ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015ce0:	b480      	push	{r7}
 8015ce2:	b083      	sub	sp, #12
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015ce8:	bf00      	nop
 8015cea:	370c      	adds	r7, #12
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr

08015cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d101      	bne.n	8015d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015d02:	2301      	movs	r3, #1
 8015d04:	e040      	b.n	8015d88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d106      	bne.n	8015d1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	2200      	movs	r2, #0
 8015d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f7f9 fd4a 	bl	800f7b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2224      	movs	r2, #36	; 0x24
 8015d20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	681a      	ldr	r2, [r3, #0]
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	f022 0201 	bic.w	r2, r2, #1
 8015d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f000 fc10 	bl	8016558 <UART_SetConfig>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b01      	cmp	r3, #1
 8015d3c:	d101      	bne.n	8015d42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e022      	b.n	8015d88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d002      	beq.n	8015d50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 fe68 	bl	8016a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	689a      	ldr	r2, [r3, #8]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	f042 0201 	orr.w	r2, r2, #1
 8015d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f000 feef 	bl	8016b64 <UART_CheckIdleState>
 8015d86:	4603      	mov	r3, r0
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b08a      	sub	sp, #40	; 0x28
 8015d94:	af02      	add	r7, sp, #8
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	603b      	str	r3, [r7, #0]
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015da4:	2b20      	cmp	r3, #32
 8015da6:	d171      	bne.n	8015e8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d002      	beq.n	8015db4 <HAL_UART_Transmit+0x24>
 8015dae:	88fb      	ldrh	r3, [r7, #6]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d101      	bne.n	8015db8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8015db4:	2301      	movs	r3, #1
 8015db6:	e06a      	b.n	8015e8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	2221      	movs	r2, #33	; 0x21
 8015dc4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015dc6:	f7fa fa69 	bl	801029c <HAL_GetTick>
 8015dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	88fa      	ldrh	r2, [r7, #6]
 8015dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	88fa      	ldrh	r2, [r7, #6]
 8015dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	689b      	ldr	r3, [r3, #8]
 8015de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015de4:	d108      	bne.n	8015df8 <HAL_UART_Transmit+0x68>
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	691b      	ldr	r3, [r3, #16]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d104      	bne.n	8015df8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8015dee:	2300      	movs	r3, #0
 8015df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	61bb      	str	r3, [r7, #24]
 8015df6:	e003      	b.n	8015e00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015e00:	e02c      	b.n	8015e5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	9300      	str	r3, [sp, #0]
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	2180      	movs	r1, #128	; 0x80
 8015e0c:	68f8      	ldr	r0, [r7, #12]
 8015e0e:	f000 fef6 	bl	8016bfe <UART_WaitOnFlagUntilTimeout>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d001      	beq.n	8015e1c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8015e18:	2303      	movs	r3, #3
 8015e1a:	e038      	b.n	8015e8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8015e1c:	69fb      	ldr	r3, [r7, #28]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10b      	bne.n	8015e3a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015e22:	69bb      	ldr	r3, [r7, #24]
 8015e24:	881b      	ldrh	r3, [r3, #0]
 8015e26:	461a      	mov	r2, r3
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015e30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	3302      	adds	r3, #2
 8015e36:	61bb      	str	r3, [r7, #24]
 8015e38:	e007      	b.n	8015e4a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	781a      	ldrb	r2, [r3, #0]
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	3301      	adds	r3, #1
 8015e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	3b01      	subs	r3, #1
 8015e54:	b29a      	uxth	r2, r3
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d1cc      	bne.n	8015e02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	2140      	movs	r1, #64	; 0x40
 8015e72:	68f8      	ldr	r0, [r7, #12]
 8015e74:	f000 fec3 	bl	8016bfe <UART_WaitOnFlagUntilTimeout>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d001      	beq.n	8015e82 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8015e7e:	2303      	movs	r3, #3
 8015e80:	e005      	b.n	8015e8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	2220      	movs	r2, #32
 8015e86:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	e000      	b.n	8015e8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8015e8c:	2302      	movs	r3, #2
  }
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3720      	adds	r7, #32
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b08a      	sub	sp, #40	; 0x28
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	60f8      	str	r0, [r7, #12]
 8015e9e:	60b9      	str	r1, [r7, #8]
 8015ea0:	4613      	mov	r3, r2
 8015ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015eaa:	2b20      	cmp	r3, #32
 8015eac:	d132      	bne.n	8015f14 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d002      	beq.n	8015eba <HAL_UART_Receive_DMA+0x24>
 8015eb4:	88fb      	ldrh	r3, [r7, #6]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d101      	bne.n	8015ebe <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	e02b      	b.n	8015f16 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d018      	beq.n	8015f04 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	e853 3f00 	ldrex	r3, [r3]
 8015ede:	613b      	str	r3, [r7, #16]
   return(result);
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	461a      	mov	r2, r3
 8015eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef0:	623b      	str	r3, [r7, #32]
 8015ef2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ef4:	69f9      	ldr	r1, [r7, #28]
 8015ef6:	6a3a      	ldr	r2, [r7, #32]
 8015ef8:	e841 2300 	strex	r3, r2, [r1]
 8015efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d1e6      	bne.n	8015ed2 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015f04:	88fb      	ldrh	r3, [r7, #6]
 8015f06:	461a      	mov	r2, r3
 8015f08:	68b9      	ldr	r1, [r7, #8]
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	f000 ff3e 	bl	8016d8c <UART_Start_Receive_DMA>
 8015f10:	4603      	mov	r3, r0
 8015f12:	e000      	b.n	8015f16 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8015f14:	2302      	movs	r3, #2
  }
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3728      	adds	r7, #40	; 0x28
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
	...

08015f20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b0ba      	sub	sp, #232	; 0xe8
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	69db      	ldr	r3, [r3, #28]
 8015f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	689b      	ldr	r3, [r3, #8]
 8015f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015f46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015f4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8015f4e:	4013      	ands	r3, r2
 8015f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8015f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d115      	bne.n	8015f88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8015f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015f60:	f003 0320 	and.w	r3, r3, #32
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d00f      	beq.n	8015f88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015f6c:	f003 0320 	and.w	r3, r3, #32
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d009      	beq.n	8015f88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f000 82ac 	beq.w	80164d6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	4798      	blx	r3
      }
      return;
 8015f86:	e2a6      	b.n	80164d6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f000 8117 	beq.w	80161c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8015f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015f96:	f003 0301 	and.w	r3, r3, #1
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d106      	bne.n	8015fac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8015f9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015fa2:	4b85      	ldr	r3, [pc, #532]	; (80161b8 <HAL_UART_IRQHandler+0x298>)
 8015fa4:	4013      	ands	r3, r2
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	f000 810a 	beq.w	80161c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015fb0:	f003 0301 	and.w	r3, r3, #1
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d011      	beq.n	8015fdc <HAL_UART_IRQHandler+0xbc>
 8015fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d00b      	beq.n	8015fdc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2201      	movs	r2, #1
 8015fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015fd2:	f043 0201 	orr.w	r2, r3, #1
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015fe0:	f003 0302 	and.w	r3, r3, #2
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d011      	beq.n	801600c <HAL_UART_IRQHandler+0xec>
 8015fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015fec:	f003 0301 	and.w	r3, r3, #1
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d00b      	beq.n	801600c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2202      	movs	r2, #2
 8015ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016002:	f043 0204 	orr.w	r2, r3, #4
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016010:	f003 0304 	and.w	r3, r3, #4
 8016014:	2b00      	cmp	r3, #0
 8016016:	d011      	beq.n	801603c <HAL_UART_IRQHandler+0x11c>
 8016018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801601c:	f003 0301 	and.w	r3, r3, #1
 8016020:	2b00      	cmp	r3, #0
 8016022:	d00b      	beq.n	801603c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	2204      	movs	r2, #4
 801602a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016032:	f043 0202 	orr.w	r2, r3, #2
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801603c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016040:	f003 0308 	and.w	r3, r3, #8
 8016044:	2b00      	cmp	r3, #0
 8016046:	d017      	beq.n	8016078 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801604c:	f003 0320 	and.w	r3, r3, #32
 8016050:	2b00      	cmp	r3, #0
 8016052:	d105      	bne.n	8016060 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016058:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801605c:	2b00      	cmp	r3, #0
 801605e:	d00b      	beq.n	8016078 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	2208      	movs	r2, #8
 8016066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801606e:	f043 0208 	orr.w	r2, r3, #8
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016080:	2b00      	cmp	r3, #0
 8016082:	d012      	beq.n	80160aa <HAL_UART_IRQHandler+0x18a>
 8016084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801608c:	2b00      	cmp	r3, #0
 801608e:	d00c      	beq.n	80160aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80160a0:	f043 0220 	orr.w	r2, r3, #32
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	f000 8212 	beq.w	80164da <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80160b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160ba:	f003 0320 	and.w	r3, r3, #32
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d00d      	beq.n	80160de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80160c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80160c6:	f003 0320 	and.w	r3, r3, #32
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d007      	beq.n	80160de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d003      	beq.n	80160de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80160e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	689b      	ldr	r3, [r3, #8]
 80160ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160f2:	2b40      	cmp	r3, #64	; 0x40
 80160f4:	d005      	beq.n	8016102 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80160f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80160fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d04f      	beq.n	80161a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 ff08 	bl	8016f18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	689b      	ldr	r3, [r3, #8]
 801610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016112:	2b40      	cmp	r3, #64	; 0x40
 8016114:	d141      	bne.n	801619a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	3308      	adds	r3, #8
 801611c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016124:	e853 3f00 	ldrex	r3, [r3]
 8016128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801612c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	3308      	adds	r3, #8
 801613e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801614a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801614e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016152:	e841 2300 	strex	r3, r2, [r1]
 8016156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801615a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801615e:	2b00      	cmp	r3, #0
 8016160:	d1d9      	bne.n	8016116 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016166:	2b00      	cmp	r3, #0
 8016168:	d013      	beq.n	8016192 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801616e:	4a13      	ldr	r2, [pc, #76]	; (80161bc <HAL_UART_IRQHandler+0x29c>)
 8016170:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016176:	4618      	mov	r0, r3
 8016178:	f7fb f928 	bl	80113cc <HAL_DMA_Abort_IT>
 801617c:	4603      	mov	r3, r0
 801617e:	2b00      	cmp	r3, #0
 8016180:	d017      	beq.n	80161b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016188:	687a      	ldr	r2, [r7, #4]
 801618a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801618c:	4610      	mov	r0, r2
 801618e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016190:	e00f      	b.n	80161b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f000 f9c0 	bl	8016518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016198:	e00b      	b.n	80161b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f9bc 	bl	8016518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161a0:	e007      	b.n	80161b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f000 f9b8 	bl	8016518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2200      	movs	r2, #0
 80161ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80161b0:	e193      	b.n	80164da <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161b2:	bf00      	nop
    return;
 80161b4:	e191      	b.n	80164da <HAL_UART_IRQHandler+0x5ba>
 80161b6:	bf00      	nop
 80161b8:	04000120 	.word	0x04000120
 80161bc:	080171c5 	.word	0x080171c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	f040 814c 	bne.w	8016462 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80161ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161ce:	f003 0310 	and.w	r3, r3, #16
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f000 8145 	beq.w	8016462 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80161d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161dc:	f003 0310 	and.w	r3, r3, #16
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	f000 813e 	beq.w	8016462 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	2210      	movs	r2, #16
 80161ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	689b      	ldr	r3, [r3, #8]
 80161f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161f8:	2b40      	cmp	r3, #64	; 0x40
 80161fa:	f040 80b6 	bne.w	801636a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801620a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801620e:	2b00      	cmp	r3, #0
 8016210:	f000 8165 	beq.w	80164de <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801621a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801621e:	429a      	cmp	r2, r3
 8016220:	f080 815d 	bcs.w	80164de <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801622a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016232:	69db      	ldr	r3, [r3, #28]
 8016234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016238:	f000 8086 	beq.w	8016348 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016248:	e853 3f00 	ldrex	r3, [r3]
 801624c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	461a      	mov	r2, r3
 8016262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801626a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801626e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016276:	e841 2300 	strex	r3, r2, [r1]
 801627a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801627e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1da      	bne.n	801623c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	3308      	adds	r3, #8
 801628c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801628e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016290:	e853 3f00 	ldrex	r3, [r3]
 8016294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016298:	f023 0301 	bic.w	r3, r3, #1
 801629c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	3308      	adds	r3, #8
 80162a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80162aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80162ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80162b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80162b6:	e841 2300 	strex	r3, r2, [r1]
 80162ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80162bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d1e1      	bne.n	8016286 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	3308      	adds	r3, #8
 80162c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162cc:	e853 3f00 	ldrex	r3, [r3]
 80162d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80162d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80162d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	3308      	adds	r3, #8
 80162e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80162e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80162e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80162ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80162ee:	e841 2300 	strex	r3, r2, [r1]
 80162f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80162f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d1e3      	bne.n	80162c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2220      	movs	r2, #32
 80162fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2200      	movs	r2, #0
 8016306:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801630e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016310:	e853 3f00 	ldrex	r3, [r3]
 8016314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016318:	f023 0310 	bic.w	r3, r3, #16
 801631c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	461a      	mov	r2, r3
 8016326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801632a:	65bb      	str	r3, [r7, #88]	; 0x58
 801632c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801632e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016332:	e841 2300 	strex	r3, r2, [r1]
 8016336:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801633a:	2b00      	cmp	r3, #0
 801633c:	d1e4      	bne.n	8016308 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016342:	4618      	mov	r0, r3
 8016344:	f7fa ffd2 	bl	80112ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2202      	movs	r2, #2
 801634c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801635a:	b29b      	uxth	r3, r3
 801635c:	1ad3      	subs	r3, r2, r3
 801635e:	b29b      	uxth	r3, r3
 8016360:	4619      	mov	r1, r3
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f000 f8e2 	bl	801652c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016368:	e0b9      	b.n	80164de <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8016376:	b29b      	uxth	r3, r3
 8016378:	1ad3      	subs	r3, r2, r3
 801637a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8016384:	b29b      	uxth	r3, r3
 8016386:	2b00      	cmp	r3, #0
 8016388:	f000 80ab 	beq.w	80164e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 801638c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016390:	2b00      	cmp	r3, #0
 8016392:	f000 80a6 	beq.w	80164e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801639e:	e853 3f00 	ldrex	r3, [r3]
 80163a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80163a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80163aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	461a      	mov	r2, r3
 80163b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80163b8:	647b      	str	r3, [r7, #68]	; 0x44
 80163ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80163be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163c0:	e841 2300 	strex	r3, r2, [r1]
 80163c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80163c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1e4      	bne.n	8016396 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	3308      	adds	r3, #8
 80163d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d6:	e853 3f00 	ldrex	r3, [r3]
 80163da:	623b      	str	r3, [r7, #32]
   return(result);
 80163dc:	6a3b      	ldr	r3, [r7, #32]
 80163de:	f023 0301 	bic.w	r3, r3, #1
 80163e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	3308      	adds	r3, #8
 80163ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80163f0:	633a      	str	r2, [r7, #48]	; 0x30
 80163f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163f8:	e841 2300 	strex	r3, r2, [r1]
 80163fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80163fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016400:	2b00      	cmp	r3, #0
 8016402:	d1e3      	bne.n	80163cc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2220      	movs	r2, #32
 8016408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2200      	movs	r2, #0
 8016410:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2200      	movs	r2, #0
 8016416:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	e853 3f00 	ldrex	r3, [r3]
 8016424:	60fb      	str	r3, [r7, #12]
   return(result);
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	f023 0310 	bic.w	r3, r3, #16
 801642c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	461a      	mov	r2, r3
 8016436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801643a:	61fb      	str	r3, [r7, #28]
 801643c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801643e:	69b9      	ldr	r1, [r7, #24]
 8016440:	69fa      	ldr	r2, [r7, #28]
 8016442:	e841 2300 	strex	r3, r2, [r1]
 8016446:	617b      	str	r3, [r7, #20]
   return(result);
 8016448:	697b      	ldr	r3, [r7, #20]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d1e4      	bne.n	8016418 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2202      	movs	r2, #2
 8016452:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016458:	4619      	mov	r1, r3
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	f000 f866 	bl	801652c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016460:	e03f      	b.n	80164e2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801646a:	2b00      	cmp	r3, #0
 801646c:	d00e      	beq.n	801648c <HAL_UART_IRQHandler+0x56c>
 801646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016476:	2b00      	cmp	r3, #0
 8016478:	d008      	beq.n	801648c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016482:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f000 f85d 	bl	8016544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801648a:	e02d      	b.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801648c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016494:	2b00      	cmp	r3, #0
 8016496:	d00e      	beq.n	80164b6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d008      	beq.n	80164b6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d01c      	beq.n	80164e6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	4798      	blx	r3
    }
    return;
 80164b4:	e017      	b.n	80164e6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80164b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80164ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d012      	beq.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
 80164c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80164c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00c      	beq.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fe8e 	bl	80171f0 <UART_EndTransmit_IT>
    return;
 80164d4:	e008      	b.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80164d6:	bf00      	nop
 80164d8:	e006      	b.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80164da:	bf00      	nop
 80164dc:	e004      	b.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80164de:	bf00      	nop
 80164e0:	e002      	b.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80164e2:	bf00      	nop
 80164e4:	e000      	b.n	80164e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80164e6:	bf00      	nop
  }

}
 80164e8:	37e8      	adds	r7, #232	; 0xe8
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop

080164f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80164f0:	b480      	push	{r7}
 80164f2:	b083      	sub	sp, #12
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80164f8:	bf00      	nop
 80164fa:	370c      	adds	r7, #12
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801650c:	bf00      	nop
 801650e:	370c      	adds	r7, #12
 8016510:	46bd      	mov	sp, r7
 8016512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016516:	4770      	bx	lr

08016518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016520:	bf00      	nop
 8016522:	370c      	adds	r7, #12
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr

0801652c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801652c:	b480      	push	{r7}
 801652e:	b083      	sub	sp, #12
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	460b      	mov	r3, r1
 8016536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016538:	bf00      	nop
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr

08016544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801654c:	bf00      	nop
 801654e:	370c      	adds	r7, #12
 8016550:	46bd      	mov	sp, r7
 8016552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016556:	4770      	bx	lr

08016558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b088      	sub	sp, #32
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016560:	2300      	movs	r3, #0
 8016562:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	689a      	ldr	r2, [r3, #8]
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	691b      	ldr	r3, [r3, #16]
 801656c:	431a      	orrs	r2, r3
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	695b      	ldr	r3, [r3, #20]
 8016572:	431a      	orrs	r2, r3
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	69db      	ldr	r3, [r3, #28]
 8016578:	4313      	orrs	r3, r2
 801657a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	681a      	ldr	r2, [r3, #0]
 8016582:	4ba6      	ldr	r3, [pc, #664]	; (801681c <UART_SetConfig+0x2c4>)
 8016584:	4013      	ands	r3, r2
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	6812      	ldr	r2, [r2, #0]
 801658a:	6979      	ldr	r1, [r7, #20]
 801658c:	430b      	orrs	r3, r1
 801658e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	68da      	ldr	r2, [r3, #12]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	430a      	orrs	r2, r1
 80165a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	699b      	ldr	r3, [r3, #24]
 80165aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6a1b      	ldr	r3, [r3, #32]
 80165b0:	697a      	ldr	r2, [r7, #20]
 80165b2:	4313      	orrs	r3, r2
 80165b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	689b      	ldr	r3, [r3, #8]
 80165bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	697a      	ldr	r2, [r7, #20]
 80165c6:	430a      	orrs	r2, r1
 80165c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	4a94      	ldr	r2, [pc, #592]	; (8016820 <UART_SetConfig+0x2c8>)
 80165d0:	4293      	cmp	r3, r2
 80165d2:	d120      	bne.n	8016616 <UART_SetConfig+0xbe>
 80165d4:	4b93      	ldr	r3, [pc, #588]	; (8016824 <UART_SetConfig+0x2cc>)
 80165d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165da:	f003 0303 	and.w	r3, r3, #3
 80165de:	2b03      	cmp	r3, #3
 80165e0:	d816      	bhi.n	8016610 <UART_SetConfig+0xb8>
 80165e2:	a201      	add	r2, pc, #4	; (adr r2, 80165e8 <UART_SetConfig+0x90>)
 80165e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165e8:	080165f9 	.word	0x080165f9
 80165ec:	08016605 	.word	0x08016605
 80165f0:	080165ff 	.word	0x080165ff
 80165f4:	0801660b 	.word	0x0801660b
 80165f8:	2301      	movs	r3, #1
 80165fa:	77fb      	strb	r3, [r7, #31]
 80165fc:	e150      	b.n	80168a0 <UART_SetConfig+0x348>
 80165fe:	2302      	movs	r3, #2
 8016600:	77fb      	strb	r3, [r7, #31]
 8016602:	e14d      	b.n	80168a0 <UART_SetConfig+0x348>
 8016604:	2304      	movs	r3, #4
 8016606:	77fb      	strb	r3, [r7, #31]
 8016608:	e14a      	b.n	80168a0 <UART_SetConfig+0x348>
 801660a:	2308      	movs	r3, #8
 801660c:	77fb      	strb	r3, [r7, #31]
 801660e:	e147      	b.n	80168a0 <UART_SetConfig+0x348>
 8016610:	2310      	movs	r3, #16
 8016612:	77fb      	strb	r3, [r7, #31]
 8016614:	e144      	b.n	80168a0 <UART_SetConfig+0x348>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4a83      	ldr	r2, [pc, #524]	; (8016828 <UART_SetConfig+0x2d0>)
 801661c:	4293      	cmp	r3, r2
 801661e:	d132      	bne.n	8016686 <UART_SetConfig+0x12e>
 8016620:	4b80      	ldr	r3, [pc, #512]	; (8016824 <UART_SetConfig+0x2cc>)
 8016622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016626:	f003 030c 	and.w	r3, r3, #12
 801662a:	2b0c      	cmp	r3, #12
 801662c:	d828      	bhi.n	8016680 <UART_SetConfig+0x128>
 801662e:	a201      	add	r2, pc, #4	; (adr r2, 8016634 <UART_SetConfig+0xdc>)
 8016630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016634:	08016669 	.word	0x08016669
 8016638:	08016681 	.word	0x08016681
 801663c:	08016681 	.word	0x08016681
 8016640:	08016681 	.word	0x08016681
 8016644:	08016675 	.word	0x08016675
 8016648:	08016681 	.word	0x08016681
 801664c:	08016681 	.word	0x08016681
 8016650:	08016681 	.word	0x08016681
 8016654:	0801666f 	.word	0x0801666f
 8016658:	08016681 	.word	0x08016681
 801665c:	08016681 	.word	0x08016681
 8016660:	08016681 	.word	0x08016681
 8016664:	0801667b 	.word	0x0801667b
 8016668:	2300      	movs	r3, #0
 801666a:	77fb      	strb	r3, [r7, #31]
 801666c:	e118      	b.n	80168a0 <UART_SetConfig+0x348>
 801666e:	2302      	movs	r3, #2
 8016670:	77fb      	strb	r3, [r7, #31]
 8016672:	e115      	b.n	80168a0 <UART_SetConfig+0x348>
 8016674:	2304      	movs	r3, #4
 8016676:	77fb      	strb	r3, [r7, #31]
 8016678:	e112      	b.n	80168a0 <UART_SetConfig+0x348>
 801667a:	2308      	movs	r3, #8
 801667c:	77fb      	strb	r3, [r7, #31]
 801667e:	e10f      	b.n	80168a0 <UART_SetConfig+0x348>
 8016680:	2310      	movs	r3, #16
 8016682:	77fb      	strb	r3, [r7, #31]
 8016684:	e10c      	b.n	80168a0 <UART_SetConfig+0x348>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4a68      	ldr	r2, [pc, #416]	; (801682c <UART_SetConfig+0x2d4>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d120      	bne.n	80166d2 <UART_SetConfig+0x17a>
 8016690:	4b64      	ldr	r3, [pc, #400]	; (8016824 <UART_SetConfig+0x2cc>)
 8016692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016696:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801669a:	2b30      	cmp	r3, #48	; 0x30
 801669c:	d013      	beq.n	80166c6 <UART_SetConfig+0x16e>
 801669e:	2b30      	cmp	r3, #48	; 0x30
 80166a0:	d814      	bhi.n	80166cc <UART_SetConfig+0x174>
 80166a2:	2b20      	cmp	r3, #32
 80166a4:	d009      	beq.n	80166ba <UART_SetConfig+0x162>
 80166a6:	2b20      	cmp	r3, #32
 80166a8:	d810      	bhi.n	80166cc <UART_SetConfig+0x174>
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d002      	beq.n	80166b4 <UART_SetConfig+0x15c>
 80166ae:	2b10      	cmp	r3, #16
 80166b0:	d006      	beq.n	80166c0 <UART_SetConfig+0x168>
 80166b2:	e00b      	b.n	80166cc <UART_SetConfig+0x174>
 80166b4:	2300      	movs	r3, #0
 80166b6:	77fb      	strb	r3, [r7, #31]
 80166b8:	e0f2      	b.n	80168a0 <UART_SetConfig+0x348>
 80166ba:	2302      	movs	r3, #2
 80166bc:	77fb      	strb	r3, [r7, #31]
 80166be:	e0ef      	b.n	80168a0 <UART_SetConfig+0x348>
 80166c0:	2304      	movs	r3, #4
 80166c2:	77fb      	strb	r3, [r7, #31]
 80166c4:	e0ec      	b.n	80168a0 <UART_SetConfig+0x348>
 80166c6:	2308      	movs	r3, #8
 80166c8:	77fb      	strb	r3, [r7, #31]
 80166ca:	e0e9      	b.n	80168a0 <UART_SetConfig+0x348>
 80166cc:	2310      	movs	r3, #16
 80166ce:	77fb      	strb	r3, [r7, #31]
 80166d0:	e0e6      	b.n	80168a0 <UART_SetConfig+0x348>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4a56      	ldr	r2, [pc, #344]	; (8016830 <UART_SetConfig+0x2d8>)
 80166d8:	4293      	cmp	r3, r2
 80166da:	d120      	bne.n	801671e <UART_SetConfig+0x1c6>
 80166dc:	4b51      	ldr	r3, [pc, #324]	; (8016824 <UART_SetConfig+0x2cc>)
 80166de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80166e6:	2bc0      	cmp	r3, #192	; 0xc0
 80166e8:	d013      	beq.n	8016712 <UART_SetConfig+0x1ba>
 80166ea:	2bc0      	cmp	r3, #192	; 0xc0
 80166ec:	d814      	bhi.n	8016718 <UART_SetConfig+0x1c0>
 80166ee:	2b80      	cmp	r3, #128	; 0x80
 80166f0:	d009      	beq.n	8016706 <UART_SetConfig+0x1ae>
 80166f2:	2b80      	cmp	r3, #128	; 0x80
 80166f4:	d810      	bhi.n	8016718 <UART_SetConfig+0x1c0>
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d002      	beq.n	8016700 <UART_SetConfig+0x1a8>
 80166fa:	2b40      	cmp	r3, #64	; 0x40
 80166fc:	d006      	beq.n	801670c <UART_SetConfig+0x1b4>
 80166fe:	e00b      	b.n	8016718 <UART_SetConfig+0x1c0>
 8016700:	2300      	movs	r3, #0
 8016702:	77fb      	strb	r3, [r7, #31]
 8016704:	e0cc      	b.n	80168a0 <UART_SetConfig+0x348>
 8016706:	2302      	movs	r3, #2
 8016708:	77fb      	strb	r3, [r7, #31]
 801670a:	e0c9      	b.n	80168a0 <UART_SetConfig+0x348>
 801670c:	2304      	movs	r3, #4
 801670e:	77fb      	strb	r3, [r7, #31]
 8016710:	e0c6      	b.n	80168a0 <UART_SetConfig+0x348>
 8016712:	2308      	movs	r3, #8
 8016714:	77fb      	strb	r3, [r7, #31]
 8016716:	e0c3      	b.n	80168a0 <UART_SetConfig+0x348>
 8016718:	2310      	movs	r3, #16
 801671a:	77fb      	strb	r3, [r7, #31]
 801671c:	e0c0      	b.n	80168a0 <UART_SetConfig+0x348>
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	4a44      	ldr	r2, [pc, #272]	; (8016834 <UART_SetConfig+0x2dc>)
 8016724:	4293      	cmp	r3, r2
 8016726:	d125      	bne.n	8016774 <UART_SetConfig+0x21c>
 8016728:	4b3e      	ldr	r3, [pc, #248]	; (8016824 <UART_SetConfig+0x2cc>)
 801672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801672e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016736:	d017      	beq.n	8016768 <UART_SetConfig+0x210>
 8016738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801673c:	d817      	bhi.n	801676e <UART_SetConfig+0x216>
 801673e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016742:	d00b      	beq.n	801675c <UART_SetConfig+0x204>
 8016744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016748:	d811      	bhi.n	801676e <UART_SetConfig+0x216>
 801674a:	2b00      	cmp	r3, #0
 801674c:	d003      	beq.n	8016756 <UART_SetConfig+0x1fe>
 801674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016752:	d006      	beq.n	8016762 <UART_SetConfig+0x20a>
 8016754:	e00b      	b.n	801676e <UART_SetConfig+0x216>
 8016756:	2300      	movs	r3, #0
 8016758:	77fb      	strb	r3, [r7, #31]
 801675a:	e0a1      	b.n	80168a0 <UART_SetConfig+0x348>
 801675c:	2302      	movs	r3, #2
 801675e:	77fb      	strb	r3, [r7, #31]
 8016760:	e09e      	b.n	80168a0 <UART_SetConfig+0x348>
 8016762:	2304      	movs	r3, #4
 8016764:	77fb      	strb	r3, [r7, #31]
 8016766:	e09b      	b.n	80168a0 <UART_SetConfig+0x348>
 8016768:	2308      	movs	r3, #8
 801676a:	77fb      	strb	r3, [r7, #31]
 801676c:	e098      	b.n	80168a0 <UART_SetConfig+0x348>
 801676e:	2310      	movs	r3, #16
 8016770:	77fb      	strb	r3, [r7, #31]
 8016772:	e095      	b.n	80168a0 <UART_SetConfig+0x348>
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	4a2f      	ldr	r2, [pc, #188]	; (8016838 <UART_SetConfig+0x2e0>)
 801677a:	4293      	cmp	r3, r2
 801677c:	d125      	bne.n	80167ca <UART_SetConfig+0x272>
 801677e:	4b29      	ldr	r3, [pc, #164]	; (8016824 <UART_SetConfig+0x2cc>)
 8016780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016784:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801678c:	d017      	beq.n	80167be <UART_SetConfig+0x266>
 801678e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016792:	d817      	bhi.n	80167c4 <UART_SetConfig+0x26c>
 8016794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016798:	d00b      	beq.n	80167b2 <UART_SetConfig+0x25a>
 801679a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801679e:	d811      	bhi.n	80167c4 <UART_SetConfig+0x26c>
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d003      	beq.n	80167ac <UART_SetConfig+0x254>
 80167a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167a8:	d006      	beq.n	80167b8 <UART_SetConfig+0x260>
 80167aa:	e00b      	b.n	80167c4 <UART_SetConfig+0x26c>
 80167ac:	2301      	movs	r3, #1
 80167ae:	77fb      	strb	r3, [r7, #31]
 80167b0:	e076      	b.n	80168a0 <UART_SetConfig+0x348>
 80167b2:	2302      	movs	r3, #2
 80167b4:	77fb      	strb	r3, [r7, #31]
 80167b6:	e073      	b.n	80168a0 <UART_SetConfig+0x348>
 80167b8:	2304      	movs	r3, #4
 80167ba:	77fb      	strb	r3, [r7, #31]
 80167bc:	e070      	b.n	80168a0 <UART_SetConfig+0x348>
 80167be:	2308      	movs	r3, #8
 80167c0:	77fb      	strb	r3, [r7, #31]
 80167c2:	e06d      	b.n	80168a0 <UART_SetConfig+0x348>
 80167c4:	2310      	movs	r3, #16
 80167c6:	77fb      	strb	r3, [r7, #31]
 80167c8:	e06a      	b.n	80168a0 <UART_SetConfig+0x348>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4a1b      	ldr	r2, [pc, #108]	; (801683c <UART_SetConfig+0x2e4>)
 80167d0:	4293      	cmp	r3, r2
 80167d2:	d138      	bne.n	8016846 <UART_SetConfig+0x2ee>
 80167d4:	4b13      	ldr	r3, [pc, #76]	; (8016824 <UART_SetConfig+0x2cc>)
 80167d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80167da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80167de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80167e2:	d017      	beq.n	8016814 <UART_SetConfig+0x2bc>
 80167e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80167e8:	d82a      	bhi.n	8016840 <UART_SetConfig+0x2e8>
 80167ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80167ee:	d00b      	beq.n	8016808 <UART_SetConfig+0x2b0>
 80167f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80167f4:	d824      	bhi.n	8016840 <UART_SetConfig+0x2e8>
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d003      	beq.n	8016802 <UART_SetConfig+0x2aa>
 80167fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80167fe:	d006      	beq.n	801680e <UART_SetConfig+0x2b6>
 8016800:	e01e      	b.n	8016840 <UART_SetConfig+0x2e8>
 8016802:	2300      	movs	r3, #0
 8016804:	77fb      	strb	r3, [r7, #31]
 8016806:	e04b      	b.n	80168a0 <UART_SetConfig+0x348>
 8016808:	2302      	movs	r3, #2
 801680a:	77fb      	strb	r3, [r7, #31]
 801680c:	e048      	b.n	80168a0 <UART_SetConfig+0x348>
 801680e:	2304      	movs	r3, #4
 8016810:	77fb      	strb	r3, [r7, #31]
 8016812:	e045      	b.n	80168a0 <UART_SetConfig+0x348>
 8016814:	2308      	movs	r3, #8
 8016816:	77fb      	strb	r3, [r7, #31]
 8016818:	e042      	b.n	80168a0 <UART_SetConfig+0x348>
 801681a:	bf00      	nop
 801681c:	efff69f3 	.word	0xefff69f3
 8016820:	40011000 	.word	0x40011000
 8016824:	40023800 	.word	0x40023800
 8016828:	40004400 	.word	0x40004400
 801682c:	40004800 	.word	0x40004800
 8016830:	40004c00 	.word	0x40004c00
 8016834:	40005000 	.word	0x40005000
 8016838:	40011400 	.word	0x40011400
 801683c:	40007800 	.word	0x40007800
 8016840:	2310      	movs	r3, #16
 8016842:	77fb      	strb	r3, [r7, #31]
 8016844:	e02c      	b.n	80168a0 <UART_SetConfig+0x348>
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4a72      	ldr	r2, [pc, #456]	; (8016a14 <UART_SetConfig+0x4bc>)
 801684c:	4293      	cmp	r3, r2
 801684e:	d125      	bne.n	801689c <UART_SetConfig+0x344>
 8016850:	4b71      	ldr	r3, [pc, #452]	; (8016a18 <UART_SetConfig+0x4c0>)
 8016852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016856:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801685a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801685e:	d017      	beq.n	8016890 <UART_SetConfig+0x338>
 8016860:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8016864:	d817      	bhi.n	8016896 <UART_SetConfig+0x33e>
 8016866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801686a:	d00b      	beq.n	8016884 <UART_SetConfig+0x32c>
 801686c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016870:	d811      	bhi.n	8016896 <UART_SetConfig+0x33e>
 8016872:	2b00      	cmp	r3, #0
 8016874:	d003      	beq.n	801687e <UART_SetConfig+0x326>
 8016876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801687a:	d006      	beq.n	801688a <UART_SetConfig+0x332>
 801687c:	e00b      	b.n	8016896 <UART_SetConfig+0x33e>
 801687e:	2300      	movs	r3, #0
 8016880:	77fb      	strb	r3, [r7, #31]
 8016882:	e00d      	b.n	80168a0 <UART_SetConfig+0x348>
 8016884:	2302      	movs	r3, #2
 8016886:	77fb      	strb	r3, [r7, #31]
 8016888:	e00a      	b.n	80168a0 <UART_SetConfig+0x348>
 801688a:	2304      	movs	r3, #4
 801688c:	77fb      	strb	r3, [r7, #31]
 801688e:	e007      	b.n	80168a0 <UART_SetConfig+0x348>
 8016890:	2308      	movs	r3, #8
 8016892:	77fb      	strb	r3, [r7, #31]
 8016894:	e004      	b.n	80168a0 <UART_SetConfig+0x348>
 8016896:	2310      	movs	r3, #16
 8016898:	77fb      	strb	r3, [r7, #31]
 801689a:	e001      	b.n	80168a0 <UART_SetConfig+0x348>
 801689c:	2310      	movs	r3, #16
 801689e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	69db      	ldr	r3, [r3, #28]
 80168a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80168a8:	d15b      	bne.n	8016962 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80168aa:	7ffb      	ldrb	r3, [r7, #31]
 80168ac:	2b08      	cmp	r3, #8
 80168ae:	d828      	bhi.n	8016902 <UART_SetConfig+0x3aa>
 80168b0:	a201      	add	r2, pc, #4	; (adr r2, 80168b8 <UART_SetConfig+0x360>)
 80168b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168b6:	bf00      	nop
 80168b8:	080168dd 	.word	0x080168dd
 80168bc:	080168e5 	.word	0x080168e5
 80168c0:	080168ed 	.word	0x080168ed
 80168c4:	08016903 	.word	0x08016903
 80168c8:	080168f3 	.word	0x080168f3
 80168cc:	08016903 	.word	0x08016903
 80168d0:	08016903 	.word	0x08016903
 80168d4:	08016903 	.word	0x08016903
 80168d8:	080168fb 	.word	0x080168fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80168dc:	f7fc fdb8 	bl	8013450 <HAL_RCC_GetPCLK1Freq>
 80168e0:	61b8      	str	r0, [r7, #24]
        break;
 80168e2:	e013      	b.n	801690c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80168e4:	f7fc fdc8 	bl	8013478 <HAL_RCC_GetPCLK2Freq>
 80168e8:	61b8      	str	r0, [r7, #24]
        break;
 80168ea:	e00f      	b.n	801690c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80168ec:	4b4b      	ldr	r3, [pc, #300]	; (8016a1c <UART_SetConfig+0x4c4>)
 80168ee:	61bb      	str	r3, [r7, #24]
        break;
 80168f0:	e00c      	b.n	801690c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80168f2:	f7fc fcdb 	bl	80132ac <HAL_RCC_GetSysClockFreq>
 80168f6:	61b8      	str	r0, [r7, #24]
        break;
 80168f8:	e008      	b.n	801690c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80168fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80168fe:	61bb      	str	r3, [r7, #24]
        break;
 8016900:	e004      	b.n	801690c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8016902:	2300      	movs	r3, #0
 8016904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8016906:	2301      	movs	r3, #1
 8016908:	77bb      	strb	r3, [r7, #30]
        break;
 801690a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801690c:	69bb      	ldr	r3, [r7, #24]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d074      	beq.n	80169fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	005a      	lsls	r2, r3, #1
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	685b      	ldr	r3, [r3, #4]
 801691a:	085b      	lsrs	r3, r3, #1
 801691c:	441a      	add	r2, r3
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	fbb2 f3f3 	udiv	r3, r2, r3
 8016926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	2b0f      	cmp	r3, #15
 801692c:	d916      	bls.n	801695c <UART_SetConfig+0x404>
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016934:	d212      	bcs.n	801695c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	b29b      	uxth	r3, r3
 801693a:	f023 030f 	bic.w	r3, r3, #15
 801693e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	085b      	lsrs	r3, r3, #1
 8016944:	b29b      	uxth	r3, r3
 8016946:	f003 0307 	and.w	r3, r3, #7
 801694a:	b29a      	uxth	r2, r3
 801694c:	89fb      	ldrh	r3, [r7, #14]
 801694e:	4313      	orrs	r3, r2
 8016950:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	89fa      	ldrh	r2, [r7, #14]
 8016958:	60da      	str	r2, [r3, #12]
 801695a:	e04f      	b.n	80169fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801695c:	2301      	movs	r3, #1
 801695e:	77bb      	strb	r3, [r7, #30]
 8016960:	e04c      	b.n	80169fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016962:	7ffb      	ldrb	r3, [r7, #31]
 8016964:	2b08      	cmp	r3, #8
 8016966:	d828      	bhi.n	80169ba <UART_SetConfig+0x462>
 8016968:	a201      	add	r2, pc, #4	; (adr r2, 8016970 <UART_SetConfig+0x418>)
 801696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801696e:	bf00      	nop
 8016970:	08016995 	.word	0x08016995
 8016974:	0801699d 	.word	0x0801699d
 8016978:	080169a5 	.word	0x080169a5
 801697c:	080169bb 	.word	0x080169bb
 8016980:	080169ab 	.word	0x080169ab
 8016984:	080169bb 	.word	0x080169bb
 8016988:	080169bb 	.word	0x080169bb
 801698c:	080169bb 	.word	0x080169bb
 8016990:	080169b3 	.word	0x080169b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016994:	f7fc fd5c 	bl	8013450 <HAL_RCC_GetPCLK1Freq>
 8016998:	61b8      	str	r0, [r7, #24]
        break;
 801699a:	e013      	b.n	80169c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801699c:	f7fc fd6c 	bl	8013478 <HAL_RCC_GetPCLK2Freq>
 80169a0:	61b8      	str	r0, [r7, #24]
        break;
 80169a2:	e00f      	b.n	80169c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80169a4:	4b1d      	ldr	r3, [pc, #116]	; (8016a1c <UART_SetConfig+0x4c4>)
 80169a6:	61bb      	str	r3, [r7, #24]
        break;
 80169a8:	e00c      	b.n	80169c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80169aa:	f7fc fc7f 	bl	80132ac <HAL_RCC_GetSysClockFreq>
 80169ae:	61b8      	str	r0, [r7, #24]
        break;
 80169b0:	e008      	b.n	80169c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80169b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80169b6:	61bb      	str	r3, [r7, #24]
        break;
 80169b8:	e004      	b.n	80169c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80169ba:	2300      	movs	r3, #0
 80169bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80169be:	2301      	movs	r3, #1
 80169c0:	77bb      	strb	r3, [r7, #30]
        break;
 80169c2:	bf00      	nop
    }

    if (pclk != 0U)
 80169c4:	69bb      	ldr	r3, [r7, #24]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d018      	beq.n	80169fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	685b      	ldr	r3, [r3, #4]
 80169ce:	085a      	lsrs	r2, r3, #1
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	441a      	add	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80169dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	2b0f      	cmp	r3, #15
 80169e2:	d909      	bls.n	80169f8 <UART_SetConfig+0x4a0>
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169ea:	d205      	bcs.n	80169f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	b29a      	uxth	r2, r3
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	60da      	str	r2, [r3, #12]
 80169f6:	e001      	b.n	80169fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80169f8:	2301      	movs	r3, #1
 80169fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2200      	movs	r2, #0
 8016a06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8016a08:	7fbb      	ldrb	r3, [r7, #30]
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3720      	adds	r7, #32
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	40007c00 	.word	0x40007c00
 8016a18:	40023800 	.word	0x40023800
 8016a1c:	00f42400 	.word	0x00f42400

08016a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016a20:	b480      	push	{r7}
 8016a22:	b083      	sub	sp, #12
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a2c:	f003 0301 	and.w	r3, r3, #1
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d00a      	beq.n	8016a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	430a      	orrs	r2, r1
 8016a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a4e:	f003 0302 	and.w	r3, r3, #2
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d00a      	beq.n	8016a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	430a      	orrs	r2, r1
 8016a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a70:	f003 0304 	and.w	r3, r3, #4
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d00a      	beq.n	8016a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	430a      	orrs	r2, r1
 8016a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a92:	f003 0308 	and.w	r3, r3, #8
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d00a      	beq.n	8016ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	430a      	orrs	r2, r1
 8016aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab4:	f003 0310 	and.w	r3, r3, #16
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d00a      	beq.n	8016ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	689b      	ldr	r3, [r3, #8]
 8016ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	430a      	orrs	r2, r1
 8016ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ad6:	f003 0320 	and.w	r3, r3, #32
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d00a      	beq.n	8016af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	430a      	orrs	r2, r1
 8016af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d01a      	beq.n	8016b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	430a      	orrs	r2, r1
 8016b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016b1e:	d10a      	bne.n	8016b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	430a      	orrs	r2, r1
 8016b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00a      	beq.n	8016b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	685b      	ldr	r3, [r3, #4]
 8016b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	430a      	orrs	r2, r1
 8016b56:	605a      	str	r2, [r3, #4]
  }
}
 8016b58:	bf00      	nop
 8016b5a:	370c      	adds	r7, #12
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b086      	sub	sp, #24
 8016b68:	af02      	add	r7, sp, #8
 8016b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016b74:	f7f9 fb92 	bl	801029c <HAL_GetTick>
 8016b78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	f003 0308 	and.w	r3, r3, #8
 8016b84:	2b08      	cmp	r3, #8
 8016b86:	d10e      	bne.n	8016ba6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016b8c:	9300      	str	r3, [sp, #0]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2200      	movs	r2, #0
 8016b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f000 f831 	bl	8016bfe <UART_WaitOnFlagUntilTimeout>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d001      	beq.n	8016ba6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016ba2:	2303      	movs	r3, #3
 8016ba4:	e027      	b.n	8016bf6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f003 0304 	and.w	r3, r3, #4
 8016bb0:	2b04      	cmp	r3, #4
 8016bb2:	d10e      	bne.n	8016bd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016bb8:	9300      	str	r3, [sp, #0]
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f000 f81b 	bl	8016bfe <UART_WaitOnFlagUntilTimeout>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d001      	beq.n	8016bd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016bce:	2303      	movs	r3, #3
 8016bd0:	e011      	b.n	8016bf6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2220      	movs	r2, #32
 8016bd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2220      	movs	r2, #32
 8016bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2200      	movs	r2, #0
 8016be4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	2200      	movs	r2, #0
 8016bea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2200      	movs	r2, #0
 8016bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8016bf4:	2300      	movs	r3, #0
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b09c      	sub	sp, #112	; 0x70
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	60f8      	str	r0, [r7, #12]
 8016c06:	60b9      	str	r1, [r7, #8]
 8016c08:	603b      	str	r3, [r7, #0]
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016c0e:	e0a7      	b.n	8016d60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c16:	f000 80a3 	beq.w	8016d60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016c1a:	f7f9 fb3f 	bl	801029c <HAL_GetTick>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	1ad3      	subs	r3, r2, r3
 8016c24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d302      	bcc.n	8016c30 <UART_WaitOnFlagUntilTimeout+0x32>
 8016c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d13f      	bne.n	8016cb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c38:	e853 3f00 	ldrex	r3, [r3]
 8016c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016c44:	667b      	str	r3, [r7, #100]	; 0x64
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016c50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016c56:	e841 2300 	strex	r3, r2, [r1]
 8016c5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d1e6      	bne.n	8016c30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	3308      	adds	r3, #8
 8016c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c6c:	e853 3f00 	ldrex	r3, [r3]
 8016c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c74:	f023 0301 	bic.w	r3, r3, #1
 8016c78:	663b      	str	r3, [r7, #96]	; 0x60
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	3308      	adds	r3, #8
 8016c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016c82:	64ba      	str	r2, [r7, #72]	; 0x48
 8016c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c8a:	e841 2300 	strex	r3, r2, [r1]
 8016c8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d1e5      	bne.n	8016c62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2220      	movs	r2, #32
 8016c9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	2220      	movs	r2, #32
 8016ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8016cac:	2303      	movs	r3, #3
 8016cae:	e068      	b.n	8016d82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	f003 0304 	and.w	r3, r3, #4
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d050      	beq.n	8016d60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	69db      	ldr	r3, [r3, #28]
 8016cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016ccc:	d148      	bne.n	8016d60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016cd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce0:	e853 3f00 	ldrex	r3, [r3]
 8016ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8016cf8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016cfe:	e841 2300 	strex	r3, r2, [r1]
 8016d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d1e6      	bne.n	8016cd8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	3308      	adds	r3, #8
 8016d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	e853 3f00 	ldrex	r3, [r3]
 8016d18:	613b      	str	r3, [r7, #16]
   return(result);
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	f023 0301 	bic.w	r3, r3, #1
 8016d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	3308      	adds	r3, #8
 8016d28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016d2a:	623a      	str	r2, [r7, #32]
 8016d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d2e:	69f9      	ldr	r1, [r7, #28]
 8016d30:	6a3a      	ldr	r2, [r7, #32]
 8016d32:	e841 2300 	strex	r3, r2, [r1]
 8016d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d1e5      	bne.n	8016d0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	2220      	movs	r2, #32
 8016d42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	2220      	movs	r2, #32
 8016d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2220      	movs	r2, #32
 8016d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	2200      	movs	r2, #0
 8016d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8016d5c:	2303      	movs	r3, #3
 8016d5e:	e010      	b.n	8016d82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	69da      	ldr	r2, [r3, #28]
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	4013      	ands	r3, r2
 8016d6a:	68ba      	ldr	r2, [r7, #8]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	bf0c      	ite	eq
 8016d70:	2301      	moveq	r3, #1
 8016d72:	2300      	movne	r3, #0
 8016d74:	b2db      	uxtb	r3, r3
 8016d76:	461a      	mov	r2, r3
 8016d78:	79fb      	ldrb	r3, [r7, #7]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	f43f af48 	beq.w	8016c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016d80:	2300      	movs	r3, #0
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3770      	adds	r7, #112	; 0x70
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
	...

08016d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b096      	sub	sp, #88	; 0x58
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	60b9      	str	r1, [r7, #8]
 8016d96:	4613      	mov	r3, r2
 8016d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	68ba      	ldr	r2, [r7, #8]
 8016d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	88fa      	ldrh	r2, [r7, #6]
 8016da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	2200      	movs	r2, #0
 8016dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	2222      	movs	r2, #34	; 0x22
 8016db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d028      	beq.n	8016e12 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dc4:	4a3e      	ldr	r2, [pc, #248]	; (8016ec0 <UART_Start_Receive_DMA+0x134>)
 8016dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dcc:	4a3d      	ldr	r2, [pc, #244]	; (8016ec4 <UART_Start_Receive_DMA+0x138>)
 8016dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dd4:	4a3c      	ldr	r2, [pc, #240]	; (8016ec8 <UART_Start_Receive_DMA+0x13c>)
 8016dd6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ddc:	2200      	movs	r2, #0
 8016dde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	3324      	adds	r3, #36	; 0x24
 8016dea:	4619      	mov	r1, r3
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016df0:	461a      	mov	r2, r3
 8016df2:	88fb      	ldrh	r3, [r7, #6]
 8016df4:	f7fa fa1a 	bl	801122c <HAL_DMA_Start_IT>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d009      	beq.n	8016e12 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	2210      	movs	r2, #16
 8016e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	2220      	movs	r2, #32
 8016e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e051      	b.n	8016eb6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	691b      	ldr	r3, [r3, #16]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d018      	beq.n	8016e4c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e22:	e853 3f00 	ldrex	r3, [r3]
 8016e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	461a      	mov	r2, r3
 8016e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8016e3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e40:	e841 2300 	strex	r3, r2, [r1]
 8016e44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d1e6      	bne.n	8016e1a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	3308      	adds	r3, #8
 8016e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e56:	e853 3f00 	ldrex	r3, [r3]
 8016e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5e:	f043 0301 	orr.w	r3, r3, #1
 8016e62:	653b      	str	r3, [r7, #80]	; 0x50
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	3308      	adds	r3, #8
 8016e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016e6c:	637a      	str	r2, [r7, #52]	; 0x34
 8016e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e74:	e841 2300 	strex	r3, r2, [r1]
 8016e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d1e5      	bne.n	8016e4c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	3308      	adds	r3, #8
 8016e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	e853 3f00 	ldrex	r3, [r3]
 8016e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8016e90:	693b      	ldr	r3, [r7, #16]
 8016e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	3308      	adds	r3, #8
 8016e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ea0:	623a      	str	r2, [r7, #32]
 8016ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ea4:	69f9      	ldr	r1, [r7, #28]
 8016ea6:	6a3a      	ldr	r2, [r7, #32]
 8016ea8:	e841 2300 	strex	r3, r2, [r1]
 8016eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8016eae:	69bb      	ldr	r3, [r7, #24]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d1e5      	bne.n	8016e80 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8016eb4:	2300      	movs	r3, #0
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	3758      	adds	r7, #88	; 0x58
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	08016fe1 	.word	0x08016fe1
 8016ec4:	08017109 	.word	0x08017109
 8016ec8:	08017147 	.word	0x08017147

08016ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8016ecc:	b480      	push	{r7}
 8016ece:	b089      	sub	sp, #36	; 0x24
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	e853 3f00 	ldrex	r3, [r3]
 8016ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016ee8:	61fb      	str	r3, [r7, #28]
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	461a      	mov	r2, r3
 8016ef0:	69fb      	ldr	r3, [r7, #28]
 8016ef2:	61bb      	str	r3, [r7, #24]
 8016ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ef6:	6979      	ldr	r1, [r7, #20]
 8016ef8:	69ba      	ldr	r2, [r7, #24]
 8016efa:	e841 2300 	strex	r3, r2, [r1]
 8016efe:	613b      	str	r3, [r7, #16]
   return(result);
 8016f00:	693b      	ldr	r3, [r7, #16]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d1e6      	bne.n	8016ed4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2220      	movs	r2, #32
 8016f0a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8016f0c:	bf00      	nop
 8016f0e:	3724      	adds	r7, #36	; 0x24
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b095      	sub	sp, #84	; 0x54
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f28:	e853 3f00 	ldrex	r3, [r3]
 8016f2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8016f40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016f46:	e841 2300 	strex	r3, r2, [r1]
 8016f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1e6      	bne.n	8016f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	3308      	adds	r3, #8
 8016f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	e853 3f00 	ldrex	r3, [r3]
 8016f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	f023 0301 	bic.w	r3, r3, #1
 8016f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	3308      	adds	r3, #8
 8016f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f7a:	e841 2300 	strex	r3, r2, [r1]
 8016f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d1e5      	bne.n	8016f52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f8a:	2b01      	cmp	r3, #1
 8016f8c:	d118      	bne.n	8016fc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	e853 3f00 	ldrex	r3, [r3]
 8016f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	f023 0310 	bic.w	r3, r3, #16
 8016fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	461a      	mov	r2, r3
 8016faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016fac:	61bb      	str	r3, [r7, #24]
 8016fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fb0:	6979      	ldr	r1, [r7, #20]
 8016fb2:	69ba      	ldr	r2, [r7, #24]
 8016fb4:	e841 2300 	strex	r3, r2, [r1]
 8016fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d1e6      	bne.n	8016f8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2220      	movs	r2, #32
 8016fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8016fd4:	bf00      	nop
 8016fd6:	3754      	adds	r7, #84	; 0x54
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fde:	4770      	bx	lr

08016fe0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b09c      	sub	sp, #112	; 0x70
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	69db      	ldr	r3, [r3, #28]
 8016ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ff6:	d071      	beq.n	80170dc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8016ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017008:	e853 3f00 	ldrex	r3, [r3]
 801700c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801700e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017014:	66bb      	str	r3, [r7, #104]	; 0x68
 8017016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	461a      	mov	r2, r3
 801701c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801701e:	65bb      	str	r3, [r7, #88]	; 0x58
 8017020:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017026:	e841 2300 	strex	r3, r2, [r1]
 801702a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801702c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801702e:	2b00      	cmp	r3, #0
 8017030:	d1e6      	bne.n	8017000 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	3308      	adds	r3, #8
 8017038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703c:	e853 3f00 	ldrex	r3, [r3]
 8017040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017044:	f023 0301 	bic.w	r3, r3, #1
 8017048:	667b      	str	r3, [r7, #100]	; 0x64
 801704a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	3308      	adds	r3, #8
 8017050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017052:	647a      	str	r2, [r7, #68]	; 0x44
 8017054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801705a:	e841 2300 	strex	r3, r2, [r1]
 801705e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017062:	2b00      	cmp	r3, #0
 8017064:	d1e5      	bne.n	8017032 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	3308      	adds	r3, #8
 801706c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017070:	e853 3f00 	ldrex	r3, [r3]
 8017074:	623b      	str	r3, [r7, #32]
   return(result);
 8017076:	6a3b      	ldr	r3, [r7, #32]
 8017078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801707c:	663b      	str	r3, [r7, #96]	; 0x60
 801707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	3308      	adds	r3, #8
 8017084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017086:	633a      	str	r2, [r7, #48]	; 0x30
 8017088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801708a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801708e:	e841 2300 	strex	r3, r2, [r1]
 8017092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017096:	2b00      	cmp	r3, #0
 8017098:	d1e5      	bne.n	8017066 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801709c:	2220      	movs	r2, #32
 801709e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80170a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d118      	bne.n	80170dc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80170aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170b0:	693b      	ldr	r3, [r7, #16]
 80170b2:	e853 3f00 	ldrex	r3, [r3]
 80170b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f023 0310 	bic.w	r3, r3, #16
 80170be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80170c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	461a      	mov	r2, r3
 80170c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170c8:	61fb      	str	r3, [r7, #28]
 80170ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170cc:	69b9      	ldr	r1, [r7, #24]
 80170ce:	69fa      	ldr	r2, [r7, #28]
 80170d0:	e841 2300 	strex	r3, r2, [r1]
 80170d4:	617b      	str	r3, [r7, #20]
   return(result);
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d1e6      	bne.n	80170aa <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80170dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170de:	2200      	movs	r2, #0
 80170e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80170e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d107      	bne.n	80170fa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80170ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80170f0:	4619      	mov	r1, r3
 80170f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80170f4:	f7ff fa1a 	bl	801652c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80170f8:	e002      	b.n	8017100 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80170fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80170fc:	f7eb f85c 	bl	80021b8 <HAL_UART_RxCpltCallback>
}
 8017100:	bf00      	nop
 8017102:	3770      	adds	r7, #112	; 0x70
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}

08017108 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b084      	sub	sp, #16
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017114:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2201      	movs	r2, #1
 801711a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017120:	2b01      	cmp	r3, #1
 8017122:	d109      	bne.n	8017138 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801712a:	085b      	lsrs	r3, r3, #1
 801712c:	b29b      	uxth	r3, r3
 801712e:	4619      	mov	r1, r3
 8017130:	68f8      	ldr	r0, [r7, #12]
 8017132:	f7ff f9fb 	bl	801652c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017136:	e002      	b.n	801713e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8017138:	68f8      	ldr	r0, [r7, #12]
 801713a:	f7ff f9e3 	bl	8016504 <HAL_UART_RxHalfCpltCallback>
}
 801713e:	bf00      	nop
 8017140:	3710      	adds	r7, #16
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}

08017146 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017146:	b580      	push	{r7, lr}
 8017148:	b086      	sub	sp, #24
 801714a:	af00      	add	r7, sp, #0
 801714c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017152:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8017154:	697b      	ldr	r3, [r7, #20]
 8017156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017158:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017160:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	689b      	ldr	r3, [r3, #8]
 8017168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801716c:	2b80      	cmp	r3, #128	; 0x80
 801716e:	d109      	bne.n	8017184 <UART_DMAError+0x3e>
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	2b21      	cmp	r3, #33	; 0x21
 8017174:	d106      	bne.n	8017184 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017176:	697b      	ldr	r3, [r7, #20]
 8017178:	2200      	movs	r2, #0
 801717a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 801717e:	6978      	ldr	r0, [r7, #20]
 8017180:	f7ff fea4 	bl	8016ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	689b      	ldr	r3, [r3, #8]
 801718a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801718e:	2b40      	cmp	r3, #64	; 0x40
 8017190:	d109      	bne.n	80171a6 <UART_DMAError+0x60>
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2b22      	cmp	r3, #34	; 0x22
 8017196:	d106      	bne.n	80171a6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	2200      	movs	r2, #0
 801719c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80171a0:	6978      	ldr	r0, [r7, #20]
 80171a2:	f7ff feb9 	bl	8016f18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80171ac:	f043 0210 	orr.w	r2, r3, #16
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80171b6:	6978      	ldr	r0, [r7, #20]
 80171b8:	f7ff f9ae 	bl	8016518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80171bc:	bf00      	nop
 80171be:	3718      	adds	r7, #24
 80171c0:	46bd      	mov	sp, r7
 80171c2:	bd80      	pop	{r7, pc}

080171c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b084      	sub	sp, #16
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	2200      	movs	r2, #0
 80171d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2200      	movs	r2, #0
 80171de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80171e2:	68f8      	ldr	r0, [r7, #12]
 80171e4:	f7ff f998 	bl	8016518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80171e8:	bf00      	nop
 80171ea:	3710      	adds	r7, #16
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}

080171f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b088      	sub	sp, #32
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	e853 3f00 	ldrex	r3, [r3]
 8017204:	60bb      	str	r3, [r7, #8]
   return(result);
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801720c:	61fb      	str	r3, [r7, #28]
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	461a      	mov	r2, r3
 8017214:	69fb      	ldr	r3, [r7, #28]
 8017216:	61bb      	str	r3, [r7, #24]
 8017218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801721a:	6979      	ldr	r1, [r7, #20]
 801721c:	69ba      	ldr	r2, [r7, #24]
 801721e:	e841 2300 	strex	r3, r2, [r1]
 8017222:	613b      	str	r3, [r7, #16]
   return(result);
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d1e6      	bne.n	80171f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2220      	movs	r2, #32
 801722e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2200      	movs	r2, #0
 8017234:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f7ff f95a 	bl	80164f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801723c:	bf00      	nop
 801723e:	3720      	adds	r7, #32
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b086      	sub	sp, #24
 8017248:	af00      	add	r7, sp, #0
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	60b9      	str	r1, [r7, #8]
 801724e:	607a      	str	r2, [r7, #4]
 8017250:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d101      	bne.n	801725c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8017258:	2301      	movs	r3, #1
 801725a:	e054      	b.n	8017306 <HAL_RS485Ex_Init+0xc2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017260:	2b00      	cmp	r3, #0
 8017262:	d106      	bne.n	8017272 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2200      	movs	r2, #0
 8017268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 801726c:	68f8      	ldr	r0, [r7, #12]
 801726e:	f7f8 fa9f 	bl	800f7b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	2224      	movs	r2, #36	; 0x24
 8017276:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	681a      	ldr	r2, [r3, #0]
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	f022 0201 	bic.w	r2, r2, #1
 8017286:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017288:	68f8      	ldr	r0, [r7, #12]
 801728a:	f7ff f965 	bl	8016558 <UART_SetConfig>
 801728e:	4603      	mov	r3, r0
 8017290:	2b01      	cmp	r3, #1
 8017292:	d101      	bne.n	8017298 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8017294:	2301      	movs	r3, #1
 8017296:	e036      	b.n	8017306 <HAL_RS485Ex_Init+0xc2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801729c:	2b00      	cmp	r3, #0
 801729e:	d002      	beq.n	80172a6 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80172a0:	68f8      	ldr	r0, [r7, #12]
 80172a2:	f7ff fbbd 	bl	8016a20 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	689a      	ldr	r2, [r3, #8]
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80172b4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	689b      	ldr	r3, [r3, #8]
 80172bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	68ba      	ldr	r2, [r7, #8]
 80172c6:	430a      	orrs	r2, r1
 80172c8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	055b      	lsls	r3, r3, #21
 80172ce:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	041b      	lsls	r3, r3, #16
 80172d4:	697a      	ldr	r2, [r7, #20]
 80172d6:	4313      	orrs	r3, r2
 80172d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	681a      	ldr	r2, [r3, #0]
 80172e0:	4b0b      	ldr	r3, [pc, #44]	; (8017310 <HAL_RS485Ex_Init+0xcc>)
 80172e2:	4013      	ands	r3, r2
 80172e4:	68fa      	ldr	r2, [r7, #12]
 80172e6:	6812      	ldr	r2, [r2, #0]
 80172e8:	6979      	ldr	r1, [r7, #20]
 80172ea:	430b      	orrs	r3, r1
 80172ec:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	681a      	ldr	r2, [r3, #0]
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	f042 0201 	orr.w	r2, r2, #1
 80172fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f7ff fc30 	bl	8016b64 <UART_CheckIdleState>
 8017304:	4603      	mov	r3, r0
}
 8017306:	4618      	mov	r0, r3
 8017308:	3718      	adds	r7, #24
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
 801730e:	bf00      	nop
 8017310:	fc00ffff 	.word	0xfc00ffff

08017314 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8017314:	b480      	push	{r7}
 8017316:	b085      	sub	sp, #20
 8017318:	af00      	add	r7, sp, #0
 801731a:	4603      	mov	r3, r0
 801731c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801731e:	2300      	movs	r3, #0
 8017320:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8017322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017326:	2b84      	cmp	r3, #132	; 0x84
 8017328:	d005      	beq.n	8017336 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801732a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	4413      	add	r3, r2
 8017332:	3303      	adds	r3, #3
 8017334:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8017336:	68fb      	ldr	r3, [r7, #12]
}
 8017338:	4618      	mov	r0, r3
 801733a:	3714      	adds	r7, #20
 801733c:	46bd      	mov	sp, r7
 801733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017342:	4770      	bx	lr

08017344 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8017344:	b480      	push	{r7}
 8017346:	b083      	sub	sp, #12
 8017348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801734a:	f3ef 8305 	mrs	r3, IPSR
 801734e:	607b      	str	r3, [r7, #4]
  return(result);
 8017350:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8017352:	2b00      	cmp	r3, #0
 8017354:	bf14      	ite	ne
 8017356:	2301      	movne	r3, #1
 8017358:	2300      	moveq	r3, #0
 801735a:	b2db      	uxtb	r3, r3
}
 801735c:	4618      	mov	r0, r3
 801735e:	370c      	adds	r7, #12
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr

08017368 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801736c:	f001 ff00 	bl	8019170 <vTaskStartScheduler>
  
  return osOK;
 8017370:	2300      	movs	r3, #0
}
 8017372:	4618      	mov	r0, r3
 8017374:	bd80      	pop	{r7, pc}

08017376 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017378:	b089      	sub	sp, #36	; 0x24
 801737a:	af04      	add	r7, sp, #16
 801737c:	6078      	str	r0, [r7, #4]
 801737e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	695b      	ldr	r3, [r3, #20]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d020      	beq.n	80173ca <osThreadCreate+0x54>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	699b      	ldr	r3, [r3, #24]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d01c      	beq.n	80173ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	685c      	ldr	r4, [r3, #4]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681d      	ldr	r5, [r3, #0]
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	691e      	ldr	r6, [r3, #16]
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80173a2:	4618      	mov	r0, r3
 80173a4:	f7ff ffb6 	bl	8017314 <makeFreeRtosPriority>
 80173a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	695b      	ldr	r3, [r3, #20]
 80173ae:	687a      	ldr	r2, [r7, #4]
 80173b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80173b2:	9202      	str	r2, [sp, #8]
 80173b4:	9301      	str	r3, [sp, #4]
 80173b6:	9100      	str	r1, [sp, #0]
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	4632      	mov	r2, r6
 80173bc:	4629      	mov	r1, r5
 80173be:	4620      	mov	r0, r4
 80173c0:	f001 fabe 	bl	8018940 <xTaskCreateStatic>
 80173c4:	4603      	mov	r3, r0
 80173c6:	60fb      	str	r3, [r7, #12]
 80173c8:	e01c      	b.n	8017404 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	685c      	ldr	r4, [r3, #4]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80173d6:	b29e      	uxth	r6, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80173de:	4618      	mov	r0, r3
 80173e0:	f7ff ff98 	bl	8017314 <makeFreeRtosPriority>
 80173e4:	4602      	mov	r2, r0
 80173e6:	f107 030c 	add.w	r3, r7, #12
 80173ea:	9301      	str	r3, [sp, #4]
 80173ec:	9200      	str	r2, [sp, #0]
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	4632      	mov	r2, r6
 80173f2:	4629      	mov	r1, r5
 80173f4:	4620      	mov	r0, r4
 80173f6:	f001 fb06 	bl	8018a06 <xTaskCreate>
 80173fa:	4603      	mov	r3, r0
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	d001      	beq.n	8017404 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017400:	2300      	movs	r3, #0
 8017402:	e000      	b.n	8017406 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017404:	68fb      	ldr	r3, [r7, #12]
}
 8017406:	4618      	mov	r0, r3
 8017408:	3714      	adds	r7, #20
 801740a:	46bd      	mov	sp, r7
 801740c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801740e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b082      	sub	sp, #8
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f001 fc44 	bl	8018ca4 <vTaskDelete>
  return osOK;
 801741c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 801741e:	4618      	mov	r0, r3
 8017420:	3708      	adds	r7, #8
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}

08017426 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8017426:	b580      	push	{r7, lr}
 8017428:	b084      	sub	sp, #16
 801742a:	af00      	add	r7, sp, #0
 801742c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d001      	beq.n	801743c <osDelay+0x16>
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	e000      	b.n	801743e <osDelay+0x18>
 801743c:	2301      	movs	r3, #1
 801743e:	4618      	mov	r0, r3
 8017440:	f001 fcc2 	bl	8018dc8 <vTaskDelay>
  
  return osOK;
 8017444:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8017446:	4618      	mov	r0, r3
 8017448:	3710      	adds	r7, #16
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
	...

08017450 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b086      	sub	sp, #24
 8017454:	af02      	add	r7, sp, #8
 8017456:	60f8      	str	r0, [r7, #12]
 8017458:	460b      	mov	r3, r1
 801745a:	607a      	str	r2, [r7, #4]
 801745c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d013      	beq.n	801748e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8017466:	7afb      	ldrb	r3, [r7, #11]
 8017468:	2b01      	cmp	r3, #1
 801746a:	d101      	bne.n	8017470 <osTimerCreate+0x20>
 801746c:	2101      	movs	r1, #1
 801746e:	e000      	b.n	8017472 <osTimerCreate+0x22>
 8017470:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8017476:	68fa      	ldr	r2, [r7, #12]
 8017478:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 801747a:	9201      	str	r2, [sp, #4]
 801747c:	9300      	str	r3, [sp, #0]
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	460a      	mov	r2, r1
 8017482:	2101      	movs	r1, #1
 8017484:	480b      	ldr	r0, [pc, #44]	; (80174b4 <osTimerCreate+0x64>)
 8017486:	f002 fe00 	bl	801a08a <xTimerCreateStatic>
 801748a:	4603      	mov	r3, r0
 801748c:	e00e      	b.n	80174ac <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 801748e:	7afb      	ldrb	r3, [r7, #11]
 8017490:	2b01      	cmp	r3, #1
 8017492:	d101      	bne.n	8017498 <osTimerCreate+0x48>
 8017494:	2201      	movs	r2, #1
 8017496:	e000      	b.n	801749a <osTimerCreate+0x4a>
 8017498:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 801749e:	9300      	str	r3, [sp, #0]
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	2101      	movs	r1, #1
 80174a4:	4803      	ldr	r0, [pc, #12]	; (80174b4 <osTimerCreate+0x64>)
 80174a6:	f002 fdcf 	bl	801a048 <xTimerCreate>
 80174aa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	3710      	adds	r7, #16
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	08020594 	.word	0x08020594

080174b8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b088      	sub	sp, #32
 80174bc:	af02      	add	r7, sp, #8
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80174c6:	2300      	movs	r3, #0
 80174c8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d101      	bne.n	80174d8 <osTimerStart+0x20>
    ticks = 1;
 80174d4:	2301      	movs	r3, #1
 80174d6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80174d8:	f7ff ff34 	bl	8017344 <inHandlerMode>
 80174dc:	4603      	mov	r3, r0
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d01a      	beq.n	8017518 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80174e2:	f107 030c 	add.w	r3, r7, #12
 80174e6:	2200      	movs	r2, #0
 80174e8:	9200      	str	r2, [sp, #0]
 80174ea:	693a      	ldr	r2, [r7, #16]
 80174ec:	2109      	movs	r1, #9
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f002 fe4a 	bl	801a188 <xTimerGenericCommand>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b01      	cmp	r3, #1
 80174f8:	d002      	beq.n	8017500 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80174fa:	23ff      	movs	r3, #255	; 0xff
 80174fc:	617b      	str	r3, [r7, #20]
 80174fe:	e018      	b.n	8017532 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d015      	beq.n	8017532 <osTimerStart+0x7a>
 8017506:	4b0d      	ldr	r3, [pc, #52]	; (801753c <osTimerStart+0x84>)
 8017508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801750c:	601a      	str	r2, [r3, #0]
 801750e:	f3bf 8f4f 	dsb	sy
 8017512:	f3bf 8f6f 	isb	sy
 8017516:	e00c      	b.n	8017532 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8017518:	2300      	movs	r3, #0
 801751a:	9300      	str	r3, [sp, #0]
 801751c:	2300      	movs	r3, #0
 801751e:	693a      	ldr	r2, [r7, #16]
 8017520:	2104      	movs	r1, #4
 8017522:	6878      	ldr	r0, [r7, #4]
 8017524:	f002 fe30 	bl	801a188 <xTimerGenericCommand>
 8017528:	4603      	mov	r3, r0
 801752a:	2b01      	cmp	r3, #1
 801752c:	d001      	beq.n	8017532 <osTimerStart+0x7a>
      result = osErrorOS;
 801752e:	23ff      	movs	r3, #255	; 0xff
 8017530:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8017532:	697b      	ldr	r3, [r7, #20]
}
 8017534:	4618      	mov	r0, r3
 8017536:	3718      	adds	r7, #24
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	e000ed04 	.word	0xe000ed04

08017540 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b086      	sub	sp, #24
 8017544:	af02      	add	r7, sp, #8
 8017546:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017548:	2300      	movs	r3, #0
 801754a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 801754c:	2300      	movs	r3, #0
 801754e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8017550:	f7ff fef8 	bl	8017344 <inHandlerMode>
 8017554:	4603      	mov	r3, r0
 8017556:	2b00      	cmp	r3, #0
 8017558:	d019      	beq.n	801758e <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 801755a:	f107 0308 	add.w	r3, r7, #8
 801755e:	2200      	movs	r2, #0
 8017560:	9200      	str	r2, [sp, #0]
 8017562:	2200      	movs	r2, #0
 8017564:	2108      	movs	r1, #8
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f002 fe0e 	bl	801a188 <xTimerGenericCommand>
 801756c:	4603      	mov	r3, r0
 801756e:	2b01      	cmp	r3, #1
 8017570:	d001      	beq.n	8017576 <osTimerStop+0x36>
      return osErrorOS;
 8017572:	23ff      	movs	r3, #255	; 0xff
 8017574:	e019      	b.n	80175aa <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d015      	beq.n	80175a8 <osTimerStop+0x68>
 801757c:	4b0d      	ldr	r3, [pc, #52]	; (80175b4 <osTimerStop+0x74>)
 801757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017582:	601a      	str	r2, [r3, #0]
 8017584:	f3bf 8f4f 	dsb	sy
 8017588:	f3bf 8f6f 	isb	sy
 801758c:	e00c      	b.n	80175a8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 801758e:	2300      	movs	r3, #0
 8017590:	9300      	str	r3, [sp, #0]
 8017592:	2300      	movs	r3, #0
 8017594:	2200      	movs	r2, #0
 8017596:	2103      	movs	r1, #3
 8017598:	6878      	ldr	r0, [r7, #4]
 801759a:	f002 fdf5 	bl	801a188 <xTimerGenericCommand>
 801759e:	4603      	mov	r3, r0
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d001      	beq.n	80175a8 <osTimerStop+0x68>
      result = osErrorOS;
 80175a4:	23ff      	movs	r3, #255	; 0xff
 80175a6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80175a8:	68fb      	ldr	r3, [r7, #12]
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3710      	adds	r7, #16
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
 80175b2:	bf00      	nop
 80175b4:	e000ed04 	.word	0xe000ed04

080175b8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	685b      	ldr	r3, [r3, #4]
 80175c4:	3303      	adds	r3, #3
 80175c6:	f023 0303 	bic.w	r3, r3, #3
 80175ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80175cc:	2014      	movs	r0, #20
 80175ce:	f003 fb09 	bl	801abe4 <pvPortMalloc>
 80175d2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80175d4:	697b      	ldr	r3, [r7, #20]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d046      	beq.n	8017668 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80175e2:	68fa      	ldr	r2, [r7, #12]
 80175e4:	697b      	ldr	r3, [r7, #20]
 80175e6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	2200      	movs	r2, #0
 80175ec:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f003 faf6 	bl	801abe4 <pvPortMalloc>
 80175f8:	4602      	mov	r2, r0
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	685b      	ldr	r3, [r3, #4]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d02b      	beq.n	801765e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	68fa      	ldr	r2, [r7, #12]
 801760c:	fb02 f303 	mul.w	r3, r2, r3
 8017610:	4618      	mov	r0, r3
 8017612:	f003 fae7 	bl	801abe4 <pvPortMalloc>
 8017616:	4602      	mov	r2, r0
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d011      	beq.n	8017648 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8017624:	2300      	movs	r3, #0
 8017626:	613b      	str	r3, [r7, #16]
 8017628:	e008      	b.n	801763c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	685a      	ldr	r2, [r3, #4]
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	4413      	add	r3, r2
 8017632:	2200      	movs	r2, #0
 8017634:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	3301      	adds	r3, #1
 801763a:	613b      	str	r3, [r7, #16]
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	693a      	ldr	r2, [r7, #16]
 8017642:	429a      	cmp	r2, r3
 8017644:	d3f1      	bcc.n	801762a <osPoolCreate+0x72>
 8017646:	e00f      	b.n	8017668 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	4618      	mov	r0, r3
 801764e:	f003 fb93 	bl	801ad78 <vPortFree>
        vPortFree(thePool);
 8017652:	6978      	ldr	r0, [r7, #20]
 8017654:	f003 fb90 	bl	801ad78 <vPortFree>
        thePool = NULL;
 8017658:	2300      	movs	r3, #0
 801765a:	617b      	str	r3, [r7, #20]
 801765c:	e004      	b.n	8017668 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801765e:	6978      	ldr	r0, [r7, #20]
 8017660:	f003 fb8a 	bl	801ad78 <vPortFree>
      thePool = NULL;
 8017664:	2300      	movs	r3, #0
 8017666:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8017668:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801766a:	4618      	mov	r0, r3
 801766c:	3718      	adds	r7, #24
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}

08017672 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8017672:	b580      	push	{r7, lr}
 8017674:	b08a      	sub	sp, #40	; 0x28
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801767a:	2300      	movs	r3, #0
 801767c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801767e:	2300      	movs	r3, #0
 8017680:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8017682:	f7ff fe5f 	bl	8017344 <inHandlerMode>
 8017686:	4603      	mov	r3, r0
 8017688:	2b00      	cmp	r3, #0
 801768a:	d010      	beq.n	80176ae <osPoolAlloc+0x3c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801768c:	f3ef 8211 	mrs	r2, BASEPRI
 8017690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017694:	b672      	cpsid	i
 8017696:	f383 8811 	msr	BASEPRI, r3
 801769a:	f3bf 8f6f 	isb	sy
 801769e:	f3bf 8f4f 	dsb	sy
 80176a2:	b662      	cpsie	i
 80176a4:	617a      	str	r2, [r7, #20]
 80176a6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80176a8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80176aa:	627b      	str	r3, [r7, #36]	; 0x24
 80176ac:	e001      	b.n	80176b2 <osPoolAlloc+0x40>
  }
  else {
    vPortEnterCritical();
 80176ae:	f003 f96d 	bl	801a98c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80176b2:	2300      	movs	r3, #0
 80176b4:	61fb      	str	r3, [r7, #28]
 80176b6:	e029      	b.n	801770c <osPoolAlloc+0x9a>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	691a      	ldr	r2, [r3, #16]
 80176bc:	69fb      	ldr	r3, [r7, #28]
 80176be:	4413      	add	r3, r2
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	6892      	ldr	r2, [r2, #8]
 80176c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80176c8:	fb01 f202 	mul.w	r2, r1, r2
 80176cc:	1a9b      	subs	r3, r3, r2
 80176ce:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	685a      	ldr	r2, [r3, #4]
 80176d4:	69bb      	ldr	r3, [r7, #24]
 80176d6:	4413      	add	r3, r2
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d113      	bne.n	8017706 <osPoolAlloc+0x94>
      pool_id->markers[index] = 1;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	685a      	ldr	r2, [r3, #4]
 80176e2:	69bb      	ldr	r3, [r7, #24]
 80176e4:	4413      	add	r3, r2
 80176e6:	2201      	movs	r2, #1
 80176e8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	4619      	mov	r1, r3
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	68db      	ldr	r3, [r3, #12]
 80176f4:	69ba      	ldr	r2, [r7, #24]
 80176f6:	fb02 f303 	mul.w	r3, r2, r3
 80176fa:	440b      	add	r3, r1
 80176fc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	69ba      	ldr	r2, [r7, #24]
 8017702:	611a      	str	r2, [r3, #16]
      break;
 8017704:	e007      	b.n	8017716 <osPoolAlloc+0xa4>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8017706:	69fb      	ldr	r3, [r7, #28]
 8017708:	3301      	adds	r3, #1
 801770a:	61fb      	str	r3, [r7, #28]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	689b      	ldr	r3, [r3, #8]
 8017710:	69fa      	ldr	r2, [r7, #28]
 8017712:	429a      	cmp	r2, r3
 8017714:	d3d0      	bcc.n	80176b8 <osPoolAlloc+0x46>
    }
  }
  
  if (inHandlerMode()) {
 8017716:	f7ff fe15 	bl	8017344 <inHandlerMode>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d005      	beq.n	801772c <osPoolAlloc+0xba>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8017720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017722:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801772a:	e001      	b.n	8017730 <osPoolAlloc+0xbe>
  }
  else {
    vPortExitCritical();
 801772c:	f003 f962 	bl	801a9f4 <vPortExitCritical>
  }
  
  return p;
 8017730:	6a3b      	ldr	r3, [r7, #32]
}
 8017732:	4618      	mov	r0, r3
 8017734:	3728      	adds	r7, #40	; 0x28
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}

0801773a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801773a:	b480      	push	{r7}
 801773c:	b085      	sub	sp, #20
 801773e:	af00      	add	r7, sp, #0
 8017740:	6078      	str	r0, [r7, #4]
 8017742:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d101      	bne.n	801774e <osPoolFree+0x14>
    return osErrorParameter;
 801774a:	2380      	movs	r3, #128	; 0x80
 801774c:	e030      	b.n	80177b0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d101      	bne.n	8017758 <osPoolFree+0x1e>
    return osErrorParameter;
 8017754:	2380      	movs	r3, #128	; 0x80
 8017756:	e02b      	b.n	80177b0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	683a      	ldr	r2, [r7, #0]
 801775e:	429a      	cmp	r2, r3
 8017760:	d201      	bcs.n	8017766 <osPoolFree+0x2c>
    return osErrorParameter;
 8017762:	2380      	movs	r3, #128	; 0x80
 8017764:	e024      	b.n	80177b0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	687a      	ldr	r2, [r7, #4]
 801776a:	6812      	ldr	r2, [r2, #0]
 801776c:	1a9b      	subs	r3, r3, r2
 801776e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	68da      	ldr	r2, [r3, #12]
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	fbb3 f1f2 	udiv	r1, r3, r2
 801777a:	fb01 f202 	mul.w	r2, r1, r2
 801777e:	1a9b      	subs	r3, r3, r2
 8017780:	2b00      	cmp	r3, #0
 8017782:	d001      	beq.n	8017788 <osPoolFree+0x4e>
    return osErrorParameter;
 8017784:	2380      	movs	r3, #128	; 0x80
 8017786:	e013      	b.n	80177b0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	68fa      	ldr	r2, [r7, #12]
 801778e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017792:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	689b      	ldr	r3, [r3, #8]
 8017798:	68fa      	ldr	r2, [r7, #12]
 801779a:	429a      	cmp	r2, r3
 801779c:	d301      	bcc.n	80177a2 <osPoolFree+0x68>
    return osErrorParameter;
 801779e:	2380      	movs	r3, #128	; 0x80
 80177a0:	e006      	b.n	80177b0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	685a      	ldr	r2, [r3, #4]
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	4413      	add	r3, r2
 80177aa:	2200      	movs	r2, #0
 80177ac:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80177ae:	2300      	movs	r3, #0
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3714      	adds	r7, #20
 80177b4:	46bd      	mov	sp, r7
 80177b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ba:	4770      	bx	lr

080177bc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80177bc:	b590      	push	{r4, r7, lr}
 80177be:	b085      	sub	sp, #20
 80177c0:	af02      	add	r7, sp, #8
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	689b      	ldr	r3, [r3, #8]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d011      	beq.n	80177f2 <osMessageCreate+0x36>
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	68db      	ldr	r3, [r3, #12]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d00d      	beq.n	80177f2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6818      	ldr	r0, [r3, #0]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6859      	ldr	r1, [r3, #4]
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	689a      	ldr	r2, [r3, #8]
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	68db      	ldr	r3, [r3, #12]
 80177e6:	2400      	movs	r4, #0
 80177e8:	9400      	str	r4, [sp, #0]
 80177ea:	f000 fb45 	bl	8017e78 <xQueueGenericCreateStatic>
 80177ee:	4603      	mov	r3, r0
 80177f0:	e008      	b.n	8017804 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6818      	ldr	r0, [r3, #0]
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	685b      	ldr	r3, [r3, #4]
 80177fa:	2200      	movs	r2, #0
 80177fc:	4619      	mov	r1, r3
 80177fe:	f000 fbbd 	bl	8017f7c <xQueueGenericCreate>
 8017802:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8017804:	4618      	mov	r0, r3
 8017806:	370c      	adds	r7, #12
 8017808:	46bd      	mov	sp, r7
 801780a:	bd90      	pop	{r4, r7, pc}

0801780c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b086      	sub	sp, #24
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	60b9      	str	r1, [r7, #8]
 8017816:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8017818:	2300      	movs	r3, #0
 801781a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d101      	bne.n	801782a <osMessagePut+0x1e>
    ticks = 1;
 8017826:	2301      	movs	r3, #1
 8017828:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801782a:	f7ff fd8b 	bl	8017344 <inHandlerMode>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d018      	beq.n	8017866 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8017834:	f107 0210 	add.w	r2, r7, #16
 8017838:	f107 0108 	add.w	r1, r7, #8
 801783c:	2300      	movs	r3, #0
 801783e:	68f8      	ldr	r0, [r7, #12]
 8017840:	f000 fd04 	bl	801824c <xQueueGenericSendFromISR>
 8017844:	4603      	mov	r3, r0
 8017846:	2b01      	cmp	r3, #1
 8017848:	d001      	beq.n	801784e <osMessagePut+0x42>
      return osErrorOS;
 801784a:	23ff      	movs	r3, #255	; 0xff
 801784c:	e018      	b.n	8017880 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d014      	beq.n	801787e <osMessagePut+0x72>
 8017854:	4b0c      	ldr	r3, [pc, #48]	; (8017888 <osMessagePut+0x7c>)
 8017856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801785a:	601a      	str	r2, [r3, #0]
 801785c:	f3bf 8f4f 	dsb	sy
 8017860:	f3bf 8f6f 	isb	sy
 8017864:	e00b      	b.n	801787e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8017866:	f107 0108 	add.w	r1, r7, #8
 801786a:	2300      	movs	r3, #0
 801786c:	697a      	ldr	r2, [r7, #20]
 801786e:	68f8      	ldr	r0, [r7, #12]
 8017870:	f000 fbe6 	bl	8018040 <xQueueGenericSend>
 8017874:	4603      	mov	r3, r0
 8017876:	2b01      	cmp	r3, #1
 8017878:	d001      	beq.n	801787e <osMessagePut+0x72>
      return osErrorOS;
 801787a:	23ff      	movs	r3, #255	; 0xff
 801787c:	e000      	b.n	8017880 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801787e:	2300      	movs	r3, #0
}
 8017880:	4618      	mov	r0, r3
 8017882:	3718      	adds	r7, #24
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}
 8017888:	e000ed04 	.word	0xe000ed04

0801788c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801788c:	b590      	push	{r4, r7, lr}
 801788e:	b08b      	sub	sp, #44	; 0x2c
 8017890:	af00      	add	r7, sp, #0
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	60b9      	str	r1, [r7, #8]
 8017896:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801789c:	2300      	movs	r3, #0
 801789e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d10a      	bne.n	80178bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80178a6:	2380      	movs	r3, #128	; 0x80
 80178a8:	617b      	str	r3, [r7, #20]
    return event;
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	461c      	mov	r4, r3
 80178ae:	f107 0314 	add.w	r3, r7, #20
 80178b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80178b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80178ba:	e054      	b.n	8017966 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80178bc:	2300      	movs	r3, #0
 80178be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80178c0:	2300      	movs	r3, #0
 80178c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178ca:	d103      	bne.n	80178d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80178cc:	f04f 33ff 	mov.w	r3, #4294967295
 80178d0:	627b      	str	r3, [r7, #36]	; 0x24
 80178d2:	e009      	b.n	80178e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d006      	beq.n	80178e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80178de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d101      	bne.n	80178e8 <osMessageGet+0x5c>
      ticks = 1;
 80178e4:	2301      	movs	r3, #1
 80178e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80178e8:	f7ff fd2c 	bl	8017344 <inHandlerMode>
 80178ec:	4603      	mov	r3, r0
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d01c      	beq.n	801792c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80178f2:	f107 0220 	add.w	r2, r7, #32
 80178f6:	f107 0314 	add.w	r3, r7, #20
 80178fa:	3304      	adds	r3, #4
 80178fc:	4619      	mov	r1, r3
 80178fe:	68b8      	ldr	r0, [r7, #8]
 8017900:	f000 fe2a 	bl	8018558 <xQueueReceiveFromISR>
 8017904:	4603      	mov	r3, r0
 8017906:	2b01      	cmp	r3, #1
 8017908:	d102      	bne.n	8017910 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801790a:	2310      	movs	r3, #16
 801790c:	617b      	str	r3, [r7, #20]
 801790e:	e001      	b.n	8017914 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8017910:	2300      	movs	r3, #0
 8017912:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017914:	6a3b      	ldr	r3, [r7, #32]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d01d      	beq.n	8017956 <osMessageGet+0xca>
 801791a:	4b15      	ldr	r3, [pc, #84]	; (8017970 <osMessageGet+0xe4>)
 801791c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017920:	601a      	str	r2, [r3, #0]
 8017922:	f3bf 8f4f 	dsb	sy
 8017926:	f3bf 8f6f 	isb	sy
 801792a:	e014      	b.n	8017956 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801792c:	f107 0314 	add.w	r3, r7, #20
 8017930:	3304      	adds	r3, #4
 8017932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017934:	4619      	mov	r1, r3
 8017936:	68b8      	ldr	r0, [r7, #8]
 8017938:	f000 fd28 	bl	801838c <xQueueReceive>
 801793c:	4603      	mov	r3, r0
 801793e:	2b01      	cmp	r3, #1
 8017940:	d102      	bne.n	8017948 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8017942:	2310      	movs	r3, #16
 8017944:	617b      	str	r3, [r7, #20]
 8017946:	e006      	b.n	8017956 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794a:	2b00      	cmp	r3, #0
 801794c:	d101      	bne.n	8017952 <osMessageGet+0xc6>
 801794e:	2300      	movs	r3, #0
 8017950:	e000      	b.n	8017954 <osMessageGet+0xc8>
 8017952:	2340      	movs	r3, #64	; 0x40
 8017954:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	461c      	mov	r4, r3
 801795a:	f107 0314 	add.w	r3, r7, #20
 801795e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017966:	68f8      	ldr	r0, [r7, #12]
 8017968:	372c      	adds	r7, #44	; 0x2c
 801796a:	46bd      	mov	sp, r7
 801796c:	bd90      	pop	{r4, r7, pc}
 801796e:	bf00      	nop
 8017970:	e000ed04 	.word	0xe000ed04

08017974 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8017974:	b590      	push	{r4, r7, lr}
 8017976:	b087      	sub	sp, #28
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	60fb      	str	r3, [r7, #12]
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	613b      	str	r3, [r7, #16]
 801798a:	2300      	movs	r3, #0
 801798c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	689c      	ldr	r4, [r3, #8]
 8017992:	200c      	movs	r0, #12
 8017994:	f003 f926 	bl	801abe4 <pvPortMalloc>
 8017998:	4603      	mov	r3, r0
 801799a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	689b      	ldr	r3, [r3, #8]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d101      	bne.n	80179aa <osMailCreate+0x36>
    return NULL;
 80179a6:	2300      	movs	r3, #0
 80179a8:	e038      	b.n	8017a1c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	689b      	ldr	r3, [r3, #8]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	687a      	ldr	r2, [r7, #4]
 80179b2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	6818      	ldr	r0, [r3, #0]
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	689b      	ldr	r3, [r3, #8]
 80179bc:	681c      	ldr	r4, [r3, #0]
 80179be:	2200      	movs	r2, #0
 80179c0:	2104      	movs	r1, #4
 80179c2:	f000 fadb 	bl	8017f7c <xQueueGenericCreate>
 80179c6:	4603      	mov	r3, r0
 80179c8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	689b      	ldr	r3, [r3, #8]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d107      	bne.n	80179e6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	689b      	ldr	r3, [r3, #8]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	4618      	mov	r0, r3
 80179de:	f003 f9cb 	bl	801ad78 <vPortFree>
    return NULL;
 80179e2:	2300      	movs	r3, #0
 80179e4:	e01a      	b.n	8017a1c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	689b      	ldr	r3, [r3, #8]
 80179ea:	681c      	ldr	r4, [r3, #0]
 80179ec:	f107 030c 	add.w	r3, r7, #12
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7ff fde1 	bl	80175b8 <osPoolCreate>
 80179f6:	4603      	mov	r3, r0
 80179f8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	689b      	ldr	r3, [r3, #8]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	689b      	ldr	r3, [r3, #8]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d107      	bne.n	8017a16 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	689b      	ldr	r3, [r3, #8]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f003 f9b3 	bl	801ad78 <vPortFree>
    return NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	e002      	b.n	8017a1c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	689b      	ldr	r3, [r3, #8]
 8017a1a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	371c      	adds	r7, #28
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd90      	pop	{r4, r7, pc}

08017a24 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b084      	sub	sp, #16
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d101      	bne.n	8017a38 <osMailAlloc+0x14>
    return NULL;
 8017a34:	2300      	movs	r3, #0
 8017a36:	e006      	b.n	8017a46 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	689b      	ldr	r3, [r3, #8]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7ff fe18 	bl	8017672 <osPoolAlloc>
 8017a42:	60f8      	str	r0, [r7, #12]
  
  return p;
 8017a44:	68fb      	ldr	r3, [r7, #12]
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3710      	adds	r7, #16
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
	...

08017a50 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b084      	sub	sp, #16
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d101      	bne.n	8017a64 <osMailPut+0x14>
    return osErrorParameter;
 8017a60:	2380      	movs	r3, #128	; 0x80
 8017a62:	e02c      	b.n	8017abe <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8017a64:	2300      	movs	r3, #0
 8017a66:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8017a68:	f7ff fc6c 	bl	8017344 <inHandlerMode>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d018      	beq.n	8017aa4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	6858      	ldr	r0, [r3, #4]
 8017a76:	f107 020c 	add.w	r2, r7, #12
 8017a7a:	4639      	mov	r1, r7
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	f000 fbe5 	bl	801824c <xQueueGenericSendFromISR>
 8017a82:	4603      	mov	r3, r0
 8017a84:	2b01      	cmp	r3, #1
 8017a86:	d001      	beq.n	8017a8c <osMailPut+0x3c>
      return osErrorOS;
 8017a88:	23ff      	movs	r3, #255	; 0xff
 8017a8a:	e018      	b.n	8017abe <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d014      	beq.n	8017abc <osMailPut+0x6c>
 8017a92:	4b0d      	ldr	r3, [pc, #52]	; (8017ac8 <osMailPut+0x78>)
 8017a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a98:	601a      	str	r2, [r3, #0]
 8017a9a:	f3bf 8f4f 	dsb	sy
 8017a9e:	f3bf 8f6f 	isb	sy
 8017aa2:	e00b      	b.n	8017abc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	6858      	ldr	r0, [r3, #4]
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	2300      	movs	r3, #0
 8017aac:	2200      	movs	r2, #0
 8017aae:	f000 fac7 	bl	8018040 <xQueueGenericSend>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	2b01      	cmp	r3, #1
 8017ab6:	d001      	beq.n	8017abc <osMailPut+0x6c>
      return osErrorOS;
 8017ab8:	23ff      	movs	r3, #255	; 0xff
 8017aba:	e000      	b.n	8017abe <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8017abc:	2300      	movs	r3, #0
}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	3710      	adds	r7, #16
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	e000ed04 	.word	0xe000ed04

08017acc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8017acc:	b590      	push	{r4, r7, lr}
 8017ace:	b08b      	sub	sp, #44	; 0x2c
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	60f8      	str	r0, [r7, #12]
 8017ad4:	60b9      	str	r1, [r7, #8]
 8017ad6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8017adc:	68bb      	ldr	r3, [r7, #8]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d10a      	bne.n	8017af8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8017ae2:	2380      	movs	r3, #128	; 0x80
 8017ae4:	617b      	str	r3, [r7, #20]
    return event;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	461c      	mov	r4, r3
 8017aea:	f107 0314 	add.w	r3, r7, #20
 8017aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017af6:	e056      	b.n	8017ba6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8017af8:	2300      	movs	r3, #0
 8017afa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8017afc:	2300      	movs	r3, #0
 8017afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b06:	d103      	bne.n	8017b10 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8017b08:	f04f 33ff 	mov.w	r3, #4294967295
 8017b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8017b0e:	e009      	b.n	8017b24 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d006      	beq.n	8017b24 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8017b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d101      	bne.n	8017b24 <osMailGet+0x58>
      ticks = 1;
 8017b20:	2301      	movs	r3, #1
 8017b22:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8017b24:	f7ff fc0e 	bl	8017344 <inHandlerMode>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d01d      	beq.n	8017b6a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8017b2e:	68bb      	ldr	r3, [r7, #8]
 8017b30:	6858      	ldr	r0, [r3, #4]
 8017b32:	f107 0220 	add.w	r2, r7, #32
 8017b36:	f107 0314 	add.w	r3, r7, #20
 8017b3a:	3304      	adds	r3, #4
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	f000 fd0b 	bl	8018558 <xQueueReceiveFromISR>
 8017b42:	4603      	mov	r3, r0
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	d102      	bne.n	8017b4e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8017b48:	2320      	movs	r3, #32
 8017b4a:	617b      	str	r3, [r7, #20]
 8017b4c:	e001      	b.n	8017b52 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017b52:	6a3b      	ldr	r3, [r7, #32]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d01e      	beq.n	8017b96 <osMailGet+0xca>
 8017b58:	4b15      	ldr	r3, [pc, #84]	; (8017bb0 <osMailGet+0xe4>)
 8017b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b5e:	601a      	str	r2, [r3, #0]
 8017b60:	f3bf 8f4f 	dsb	sy
 8017b64:	f3bf 8f6f 	isb	sy
 8017b68:	e015      	b.n	8017b96 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8017b6a:	68bb      	ldr	r3, [r7, #8]
 8017b6c:	6858      	ldr	r0, [r3, #4]
 8017b6e:	f107 0314 	add.w	r3, r7, #20
 8017b72:	3304      	adds	r3, #4
 8017b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b76:	4619      	mov	r1, r3
 8017b78:	f000 fc08 	bl	801838c <xQueueReceive>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	d102      	bne.n	8017b88 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8017b82:	2320      	movs	r3, #32
 8017b84:	617b      	str	r3, [r7, #20]
 8017b86:	e006      	b.n	8017b96 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d101      	bne.n	8017b92 <osMailGet+0xc6>
 8017b8e:	2300      	movs	r3, #0
 8017b90:	e000      	b.n	8017b94 <osMailGet+0xc8>
 8017b92:	2340      	movs	r3, #64	; 0x40
 8017b94:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	461c      	mov	r4, r3
 8017b9a:	f107 0314 	add.w	r3, r7, #20
 8017b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	372c      	adds	r7, #44	; 0x2c
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd90      	pop	{r4, r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	e000ed04 	.word	0xe000ed04

08017bb4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d101      	bne.n	8017bc8 <osMailFree+0x14>
    return osErrorParameter;
 8017bc4:	2380      	movs	r3, #128	; 0x80
 8017bc6:	e006      	b.n	8017bd6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	689b      	ldr	r3, [r3, #8]
 8017bcc:	6839      	ldr	r1, [r7, #0]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7ff fdb3 	bl	801773a <osPoolFree>
 8017bd4:	4603      	mov	r3, r0
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3708      	adds	r7, #8
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}

08017bde <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8017bde:	b580      	push	{r7, lr}
 8017be0:	b082      	sub	sp, #8
 8017be2:	af00      	add	r7, sp, #0
 8017be4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8017be6:	6878      	ldr	r0, [r7, #4]
 8017be8:	f001 f924 	bl	8018e34 <vTaskSuspend>
  
  return osOK;
 8017bec:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3708      	adds	r7, #8
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}
	...

08017bf8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b082      	sub	sp, #8
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8017c00:	f7ff fba0 	bl	8017344 <inHandlerMode>
 8017c04:	4603      	mov	r3, r0
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00e      	beq.n	8017c28 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f001 fa3a 	bl	8019084 <xTaskResumeFromISR>
 8017c10:	4603      	mov	r3, r0
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	d10b      	bne.n	8017c2e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8017c16:	4b08      	ldr	r3, [pc, #32]	; (8017c38 <osThreadResume+0x40>)
 8017c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c1c:	601a      	str	r2, [r3, #0]
 8017c1e:	f3bf 8f4f 	dsb	sy
 8017c22:	f3bf 8f6f 	isb	sy
 8017c26:	e002      	b.n	8017c2e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f001 f9cb 	bl	8018fc4 <vTaskResume>
  }
  return osOK;
 8017c2e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3708      	adds	r7, #8
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	e000ed04 	.word	0xe000ed04

08017c3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b083      	sub	sp, #12
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f103 0208 	add.w	r2, r3, #8
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f04f 32ff 	mov.w	r2, #4294967295
 8017c54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f103 0208 	add.w	r2, r3, #8
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f103 0208 	add.w	r2, r3, #8
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017c70:	bf00      	nop
 8017c72:	370c      	adds	r7, #12
 8017c74:	46bd      	mov	sp, r7
 8017c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7a:	4770      	bx	lr

08017c7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017c7c:	b480      	push	{r7}
 8017c7e:	b083      	sub	sp, #12
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2200      	movs	r2, #0
 8017c88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017c8a:	bf00      	nop
 8017c8c:	370c      	adds	r7, #12
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c94:	4770      	bx	lr

08017c96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017c96:	b480      	push	{r7}
 8017c98:	b085      	sub	sp, #20
 8017c9a:	af00      	add	r7, sp, #0
 8017c9c:	6078      	str	r0, [r7, #4]
 8017c9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	68fa      	ldr	r2, [r7, #12]
 8017caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	689a      	ldr	r2, [r3, #8]
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	689b      	ldr	r3, [r3, #8]
 8017cb8:	683a      	ldr	r2, [r7, #0]
 8017cba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	683a      	ldr	r2, [r7, #0]
 8017cc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	687a      	ldr	r2, [r7, #4]
 8017cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	1c5a      	adds	r2, r3, #1
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	601a      	str	r2, [r3, #0]
}
 8017cd2:	bf00      	nop
 8017cd4:	3714      	adds	r7, #20
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cdc:	4770      	bx	lr

08017cde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017cde:	b480      	push	{r7}
 8017ce0:	b085      	sub	sp, #20
 8017ce2:	af00      	add	r7, sp, #0
 8017ce4:	6078      	str	r0, [r7, #4]
 8017ce6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017ce8:	683b      	ldr	r3, [r7, #0]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cf4:	d103      	bne.n	8017cfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	691b      	ldr	r3, [r3, #16]
 8017cfa:	60fb      	str	r3, [r7, #12]
 8017cfc:	e00c      	b.n	8017d18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	3308      	adds	r3, #8
 8017d02:	60fb      	str	r3, [r7, #12]
 8017d04:	e002      	b.n	8017d0c <vListInsert+0x2e>
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	60fb      	str	r3, [r7, #12]
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	685b      	ldr	r3, [r3, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	68ba      	ldr	r2, [r7, #8]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d2f6      	bcs.n	8017d06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	685a      	ldr	r2, [r3, #4]
 8017d1c:	683b      	ldr	r3, [r7, #0]
 8017d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	685b      	ldr	r3, [r3, #4]
 8017d24:	683a      	ldr	r2, [r7, #0]
 8017d26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017d28:	683b      	ldr	r3, [r7, #0]
 8017d2a:	68fa      	ldr	r2, [r7, #12]
 8017d2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	683a      	ldr	r2, [r7, #0]
 8017d32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	687a      	ldr	r2, [r7, #4]
 8017d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	1c5a      	adds	r2, r3, #1
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	601a      	str	r2, [r3, #0]
}
 8017d44:	bf00      	nop
 8017d46:	3714      	adds	r7, #20
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4e:	4770      	bx	lr

08017d50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017d50:	b480      	push	{r7}
 8017d52:	b085      	sub	sp, #20
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	691b      	ldr	r3, [r3, #16]
 8017d5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	6892      	ldr	r2, [r2, #8]
 8017d66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	689b      	ldr	r3, [r3, #8]
 8017d6c:	687a      	ldr	r2, [r7, #4]
 8017d6e:	6852      	ldr	r2, [r2, #4]
 8017d70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	687a      	ldr	r2, [r7, #4]
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	d103      	bne.n	8017d84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	689a      	ldr	r2, [r3, #8]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	2200      	movs	r2, #0
 8017d88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	1e5a      	subs	r2, r3, #1
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	681b      	ldr	r3, [r3, #0]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3714      	adds	r7, #20
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b084      	sub	sp, #16
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d10c      	bne.n	8017dd2 <xQueueGenericReset+0x2e>
	__asm volatile
 8017db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dbc:	b672      	cpsid	i
 8017dbe:	f383 8811 	msr	BASEPRI, r3
 8017dc2:	f3bf 8f6f 	isb	sy
 8017dc6:	f3bf 8f4f 	dsb	sy
 8017dca:	b662      	cpsie	i
 8017dcc:	60bb      	str	r3, [r7, #8]
}
 8017dce:	bf00      	nop
 8017dd0:	e7fe      	b.n	8017dd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8017dd2:	f002 fddb 	bl	801a98c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	681a      	ldr	r2, [r3, #0]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017dde:	68f9      	ldr	r1, [r7, #12]
 8017de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017de2:	fb01 f303 	mul.w	r3, r1, r3
 8017de6:	441a      	add	r2, r3
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	2200      	movs	r2, #0
 8017df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681a      	ldr	r2, [r3, #0]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e02:	3b01      	subs	r3, #1
 8017e04:	68f9      	ldr	r1, [r7, #12]
 8017e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017e08:	fb01 f303 	mul.w	r3, r1, r3
 8017e0c:	441a      	add	r2, r3
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	22ff      	movs	r2, #255	; 0xff
 8017e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	22ff      	movs	r2, #255	; 0xff
 8017e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d114      	bne.n	8017e52 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	691b      	ldr	r3, [r3, #16]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d01a      	beq.n	8017e66 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	3310      	adds	r3, #16
 8017e34:	4618      	mov	r0, r3
 8017e36:	f001 fc3d 	bl	80196b4 <xTaskRemoveFromEventList>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d012      	beq.n	8017e66 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017e40:	4b0c      	ldr	r3, [pc, #48]	; (8017e74 <xQueueGenericReset+0xd0>)
 8017e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e46:	601a      	str	r2, [r3, #0]
 8017e48:	f3bf 8f4f 	dsb	sy
 8017e4c:	f3bf 8f6f 	isb	sy
 8017e50:	e009      	b.n	8017e66 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	3310      	adds	r3, #16
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7ff fef0 	bl	8017c3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	3324      	adds	r3, #36	; 0x24
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7ff feeb 	bl	8017c3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017e66:	f002 fdc5 	bl	801a9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017e6a:	2301      	movs	r3, #1
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3710      	adds	r7, #16
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}
 8017e74:	e000ed04 	.word	0xe000ed04

08017e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b08e      	sub	sp, #56	; 0x38
 8017e7c:	af02      	add	r7, sp, #8
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	607a      	str	r2, [r7, #4]
 8017e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d10c      	bne.n	8017ea6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8017e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e90:	b672      	cpsid	i
 8017e92:	f383 8811 	msr	BASEPRI, r3
 8017e96:	f3bf 8f6f 	isb	sy
 8017e9a:	f3bf 8f4f 	dsb	sy
 8017e9e:	b662      	cpsie	i
 8017ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017ea2:	bf00      	nop
 8017ea4:	e7fe      	b.n	8017ea4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017ea6:	683b      	ldr	r3, [r7, #0]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d10c      	bne.n	8017ec6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8017eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb0:	b672      	cpsid	i
 8017eb2:	f383 8811 	msr	BASEPRI, r3
 8017eb6:	f3bf 8f6f 	isb	sy
 8017eba:	f3bf 8f4f 	dsb	sy
 8017ebe:	b662      	cpsie	i
 8017ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017ec2:	bf00      	nop
 8017ec4:	e7fe      	b.n	8017ec4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d002      	beq.n	8017ed2 <xQueueGenericCreateStatic+0x5a>
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d001      	beq.n	8017ed6 <xQueueGenericCreateStatic+0x5e>
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	e000      	b.n	8017ed8 <xQueueGenericCreateStatic+0x60>
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d10c      	bne.n	8017ef6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8017edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee0:	b672      	cpsid	i
 8017ee2:	f383 8811 	msr	BASEPRI, r3
 8017ee6:	f3bf 8f6f 	isb	sy
 8017eea:	f3bf 8f4f 	dsb	sy
 8017eee:	b662      	cpsie	i
 8017ef0:	623b      	str	r3, [r7, #32]
}
 8017ef2:	bf00      	nop
 8017ef4:	e7fe      	b.n	8017ef4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d102      	bne.n	8017f02 <xQueueGenericCreateStatic+0x8a>
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d101      	bne.n	8017f06 <xQueueGenericCreateStatic+0x8e>
 8017f02:	2301      	movs	r3, #1
 8017f04:	e000      	b.n	8017f08 <xQueueGenericCreateStatic+0x90>
 8017f06:	2300      	movs	r3, #0
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d10c      	bne.n	8017f26 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8017f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f10:	b672      	cpsid	i
 8017f12:	f383 8811 	msr	BASEPRI, r3
 8017f16:	f3bf 8f6f 	isb	sy
 8017f1a:	f3bf 8f4f 	dsb	sy
 8017f1e:	b662      	cpsie	i
 8017f20:	61fb      	str	r3, [r7, #28]
}
 8017f22:	bf00      	nop
 8017f24:	e7fe      	b.n	8017f24 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017f26:	2348      	movs	r3, #72	; 0x48
 8017f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017f2a:	697b      	ldr	r3, [r7, #20]
 8017f2c:	2b48      	cmp	r3, #72	; 0x48
 8017f2e:	d00c      	beq.n	8017f4a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8017f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f34:	b672      	cpsid	i
 8017f36:	f383 8811 	msr	BASEPRI, r3
 8017f3a:	f3bf 8f6f 	isb	sy
 8017f3e:	f3bf 8f4f 	dsb	sy
 8017f42:	b662      	cpsie	i
 8017f44:	61bb      	str	r3, [r7, #24]
}
 8017f46:	bf00      	nop
 8017f48:	e7fe      	b.n	8017f48 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017f4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d00d      	beq.n	8017f72 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f58:	2201      	movs	r2, #1
 8017f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017f5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f64:	9300      	str	r3, [sp, #0]
 8017f66:	4613      	mov	r3, r2
 8017f68:	687a      	ldr	r2, [r7, #4]
 8017f6a:	68b9      	ldr	r1, [r7, #8]
 8017f6c:	68f8      	ldr	r0, [r7, #12]
 8017f6e:	f000 f847 	bl	8018000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3730      	adds	r7, #48	; 0x30
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}

08017f7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b08a      	sub	sp, #40	; 0x28
 8017f80:	af02      	add	r7, sp, #8
 8017f82:	60f8      	str	r0, [r7, #12]
 8017f84:	60b9      	str	r1, [r7, #8]
 8017f86:	4613      	mov	r3, r2
 8017f88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d10c      	bne.n	8017faa <xQueueGenericCreate+0x2e>
	__asm volatile
 8017f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f94:	b672      	cpsid	i
 8017f96:	f383 8811 	msr	BASEPRI, r3
 8017f9a:	f3bf 8f6f 	isb	sy
 8017f9e:	f3bf 8f4f 	dsb	sy
 8017fa2:	b662      	cpsie	i
 8017fa4:	613b      	str	r3, [r7, #16]
}
 8017fa6:	bf00      	nop
 8017fa8:	e7fe      	b.n	8017fa8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d102      	bne.n	8017fb6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	61fb      	str	r3, [r7, #28]
 8017fb4:	e004      	b.n	8017fc0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	68ba      	ldr	r2, [r7, #8]
 8017fba:	fb02 f303 	mul.w	r3, r2, r3
 8017fbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017fc0:	69fb      	ldr	r3, [r7, #28]
 8017fc2:	3348      	adds	r3, #72	; 0x48
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f002 fe0d 	bl	801abe4 <pvPortMalloc>
 8017fca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017fcc:	69bb      	ldr	r3, [r7, #24]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d011      	beq.n	8017ff6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017fd2:	69bb      	ldr	r3, [r7, #24]
 8017fd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	3348      	adds	r3, #72	; 0x48
 8017fda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017fdc:	69bb      	ldr	r3, [r7, #24]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017fe4:	79fa      	ldrb	r2, [r7, #7]
 8017fe6:	69bb      	ldr	r3, [r7, #24]
 8017fe8:	9300      	str	r3, [sp, #0]
 8017fea:	4613      	mov	r3, r2
 8017fec:	697a      	ldr	r2, [r7, #20]
 8017fee:	68b9      	ldr	r1, [r7, #8]
 8017ff0:	68f8      	ldr	r0, [r7, #12]
 8017ff2:	f000 f805 	bl	8018000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3720      	adds	r7, #32
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}

08018000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b084      	sub	sp, #16
 8018004:	af00      	add	r7, sp, #0
 8018006:	60f8      	str	r0, [r7, #12]
 8018008:	60b9      	str	r1, [r7, #8]
 801800a:	607a      	str	r2, [r7, #4]
 801800c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d103      	bne.n	801801c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018014:	69bb      	ldr	r3, [r7, #24]
 8018016:	69ba      	ldr	r2, [r7, #24]
 8018018:	601a      	str	r2, [r3, #0]
 801801a:	e002      	b.n	8018022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801801c:	69bb      	ldr	r3, [r7, #24]
 801801e:	687a      	ldr	r2, [r7, #4]
 8018020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018022:	69bb      	ldr	r3, [r7, #24]
 8018024:	68fa      	ldr	r2, [r7, #12]
 8018026:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	68ba      	ldr	r2, [r7, #8]
 801802c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801802e:	2101      	movs	r1, #1
 8018030:	69b8      	ldr	r0, [r7, #24]
 8018032:	f7ff feb7 	bl	8017da4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018036:	bf00      	nop
 8018038:	3710      	adds	r7, #16
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}
	...

08018040 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b08e      	sub	sp, #56	; 0x38
 8018044:	af00      	add	r7, sp, #0
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
 801804c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801804e:	2300      	movs	r3, #0
 8018050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018058:	2b00      	cmp	r3, #0
 801805a:	d10c      	bne.n	8018076 <xQueueGenericSend+0x36>
	__asm volatile
 801805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018060:	b672      	cpsid	i
 8018062:	f383 8811 	msr	BASEPRI, r3
 8018066:	f3bf 8f6f 	isb	sy
 801806a:	f3bf 8f4f 	dsb	sy
 801806e:	b662      	cpsie	i
 8018070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018072:	bf00      	nop
 8018074:	e7fe      	b.n	8018074 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018076:	68bb      	ldr	r3, [r7, #8]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d103      	bne.n	8018084 <xQueueGenericSend+0x44>
 801807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018080:	2b00      	cmp	r3, #0
 8018082:	d101      	bne.n	8018088 <xQueueGenericSend+0x48>
 8018084:	2301      	movs	r3, #1
 8018086:	e000      	b.n	801808a <xQueueGenericSend+0x4a>
 8018088:	2300      	movs	r3, #0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d10c      	bne.n	80180a8 <xQueueGenericSend+0x68>
	__asm volatile
 801808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018092:	b672      	cpsid	i
 8018094:	f383 8811 	msr	BASEPRI, r3
 8018098:	f3bf 8f6f 	isb	sy
 801809c:	f3bf 8f4f 	dsb	sy
 80180a0:	b662      	cpsie	i
 80180a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80180a4:	bf00      	nop
 80180a6:	e7fe      	b.n	80180a6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	2b02      	cmp	r3, #2
 80180ac:	d103      	bne.n	80180b6 <xQueueGenericSend+0x76>
 80180ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180b2:	2b01      	cmp	r3, #1
 80180b4:	d101      	bne.n	80180ba <xQueueGenericSend+0x7a>
 80180b6:	2301      	movs	r3, #1
 80180b8:	e000      	b.n	80180bc <xQueueGenericSend+0x7c>
 80180ba:	2300      	movs	r3, #0
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d10c      	bne.n	80180da <xQueueGenericSend+0x9a>
	__asm volatile
 80180c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c4:	b672      	cpsid	i
 80180c6:	f383 8811 	msr	BASEPRI, r3
 80180ca:	f3bf 8f6f 	isb	sy
 80180ce:	f3bf 8f4f 	dsb	sy
 80180d2:	b662      	cpsie	i
 80180d4:	623b      	str	r3, [r7, #32]
}
 80180d6:	bf00      	nop
 80180d8:	e7fe      	b.n	80180d8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80180da:	f001 fcb3 	bl	8019a44 <xTaskGetSchedulerState>
 80180de:	4603      	mov	r3, r0
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d102      	bne.n	80180ea <xQueueGenericSend+0xaa>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d101      	bne.n	80180ee <xQueueGenericSend+0xae>
 80180ea:	2301      	movs	r3, #1
 80180ec:	e000      	b.n	80180f0 <xQueueGenericSend+0xb0>
 80180ee:	2300      	movs	r3, #0
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d10c      	bne.n	801810e <xQueueGenericSend+0xce>
	__asm volatile
 80180f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180f8:	b672      	cpsid	i
 80180fa:	f383 8811 	msr	BASEPRI, r3
 80180fe:	f3bf 8f6f 	isb	sy
 8018102:	f3bf 8f4f 	dsb	sy
 8018106:	b662      	cpsie	i
 8018108:	61fb      	str	r3, [r7, #28]
}
 801810a:	bf00      	nop
 801810c:	e7fe      	b.n	801810c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801810e:	f002 fc3d 	bl	801a98c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801811a:	429a      	cmp	r2, r3
 801811c:	d302      	bcc.n	8018124 <xQueueGenericSend+0xe4>
 801811e:	683b      	ldr	r3, [r7, #0]
 8018120:	2b02      	cmp	r3, #2
 8018122:	d129      	bne.n	8018178 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018124:	683a      	ldr	r2, [r7, #0]
 8018126:	68b9      	ldr	r1, [r7, #8]
 8018128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801812a:	f000 fa9b 	bl	8018664 <prvCopyDataToQueue>
 801812e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018134:	2b00      	cmp	r3, #0
 8018136:	d010      	beq.n	801815a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801813a:	3324      	adds	r3, #36	; 0x24
 801813c:	4618      	mov	r0, r3
 801813e:	f001 fab9 	bl	80196b4 <xTaskRemoveFromEventList>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d013      	beq.n	8018170 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018148:	4b3f      	ldr	r3, [pc, #252]	; (8018248 <xQueueGenericSend+0x208>)
 801814a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801814e:	601a      	str	r2, [r3, #0]
 8018150:	f3bf 8f4f 	dsb	sy
 8018154:	f3bf 8f6f 	isb	sy
 8018158:	e00a      	b.n	8018170 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815c:	2b00      	cmp	r3, #0
 801815e:	d007      	beq.n	8018170 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018160:	4b39      	ldr	r3, [pc, #228]	; (8018248 <xQueueGenericSend+0x208>)
 8018162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018166:	601a      	str	r2, [r3, #0]
 8018168:	f3bf 8f4f 	dsb	sy
 801816c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018170:	f002 fc40 	bl	801a9f4 <vPortExitCritical>
				return pdPASS;
 8018174:	2301      	movs	r3, #1
 8018176:	e063      	b.n	8018240 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d103      	bne.n	8018186 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801817e:	f002 fc39 	bl	801a9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018182:	2300      	movs	r3, #0
 8018184:	e05c      	b.n	8018240 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018188:	2b00      	cmp	r3, #0
 801818a:	d106      	bne.n	801819a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801818c:	f107 0314 	add.w	r3, r7, #20
 8018190:	4618      	mov	r0, r3
 8018192:	f001 faf3 	bl	801977c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018196:	2301      	movs	r3, #1
 8018198:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801819a:	f002 fc2b 	bl	801a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801819e:	f001 f85b 	bl	8019258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80181a2:	f002 fbf3 	bl	801a98c <vPortEnterCritical>
 80181a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80181ac:	b25b      	sxtb	r3, r3
 80181ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181b2:	d103      	bne.n	80181bc <xQueueGenericSend+0x17c>
 80181b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b6:	2200      	movs	r2, #0
 80181b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80181bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80181c2:	b25b      	sxtb	r3, r3
 80181c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181c8:	d103      	bne.n	80181d2 <xQueueGenericSend+0x192>
 80181ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181cc:	2200      	movs	r2, #0
 80181ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80181d2:	f002 fc0f 	bl	801a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80181d6:	1d3a      	adds	r2, r7, #4
 80181d8:	f107 0314 	add.w	r3, r7, #20
 80181dc:	4611      	mov	r1, r2
 80181de:	4618      	mov	r0, r3
 80181e0:	f001 fae2 	bl	80197a8 <xTaskCheckForTimeOut>
 80181e4:	4603      	mov	r3, r0
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d124      	bne.n	8018234 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80181ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181ec:	f000 fb32 	bl	8018854 <prvIsQueueFull>
 80181f0:	4603      	mov	r3, r0
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d018      	beq.n	8018228 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80181f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f8:	3310      	adds	r3, #16
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	4611      	mov	r1, r2
 80181fe:	4618      	mov	r0, r3
 8018200:	f001 fa04 	bl	801960c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018206:	f000 fabd 	bl	8018784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801820a:	f001 f833 	bl	8019274 <xTaskResumeAll>
 801820e:	4603      	mov	r3, r0
 8018210:	2b00      	cmp	r3, #0
 8018212:	f47f af7c 	bne.w	801810e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8018216:	4b0c      	ldr	r3, [pc, #48]	; (8018248 <xQueueGenericSend+0x208>)
 8018218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801821c:	601a      	str	r2, [r3, #0]
 801821e:	f3bf 8f4f 	dsb	sy
 8018222:	f3bf 8f6f 	isb	sy
 8018226:	e772      	b.n	801810e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801822a:	f000 faab 	bl	8018784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801822e:	f001 f821 	bl	8019274 <xTaskResumeAll>
 8018232:	e76c      	b.n	801810e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018236:	f000 faa5 	bl	8018784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801823a:	f001 f81b 	bl	8019274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801823e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018240:	4618      	mov	r0, r3
 8018242:	3738      	adds	r7, #56	; 0x38
 8018244:	46bd      	mov	sp, r7
 8018246:	bd80      	pop	{r7, pc}
 8018248:	e000ed04 	.word	0xe000ed04

0801824c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b08e      	sub	sp, #56	; 0x38
 8018250:	af00      	add	r7, sp, #0
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
 8018258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	2b00      	cmp	r3, #0
 8018262:	d10c      	bne.n	801827e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8018264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018268:	b672      	cpsid	i
 801826a:	f383 8811 	msr	BASEPRI, r3
 801826e:	f3bf 8f6f 	isb	sy
 8018272:	f3bf 8f4f 	dsb	sy
 8018276:	b662      	cpsie	i
 8018278:	627b      	str	r3, [r7, #36]	; 0x24
}
 801827a:	bf00      	nop
 801827c:	e7fe      	b.n	801827c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d103      	bne.n	801828c <xQueueGenericSendFromISR+0x40>
 8018284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018288:	2b00      	cmp	r3, #0
 801828a:	d101      	bne.n	8018290 <xQueueGenericSendFromISR+0x44>
 801828c:	2301      	movs	r3, #1
 801828e:	e000      	b.n	8018292 <xQueueGenericSendFromISR+0x46>
 8018290:	2300      	movs	r3, #0
 8018292:	2b00      	cmp	r3, #0
 8018294:	d10c      	bne.n	80182b0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8018296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801829a:	b672      	cpsid	i
 801829c:	f383 8811 	msr	BASEPRI, r3
 80182a0:	f3bf 8f6f 	isb	sy
 80182a4:	f3bf 8f4f 	dsb	sy
 80182a8:	b662      	cpsie	i
 80182aa:	623b      	str	r3, [r7, #32]
}
 80182ac:	bf00      	nop
 80182ae:	e7fe      	b.n	80182ae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	2b02      	cmp	r3, #2
 80182b4:	d103      	bne.n	80182be <xQueueGenericSendFromISR+0x72>
 80182b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182ba:	2b01      	cmp	r3, #1
 80182bc:	d101      	bne.n	80182c2 <xQueueGenericSendFromISR+0x76>
 80182be:	2301      	movs	r3, #1
 80182c0:	e000      	b.n	80182c4 <xQueueGenericSendFromISR+0x78>
 80182c2:	2300      	movs	r3, #0
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d10c      	bne.n	80182e2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80182c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182cc:	b672      	cpsid	i
 80182ce:	f383 8811 	msr	BASEPRI, r3
 80182d2:	f3bf 8f6f 	isb	sy
 80182d6:	f3bf 8f4f 	dsb	sy
 80182da:	b662      	cpsie	i
 80182dc:	61fb      	str	r3, [r7, #28]
}
 80182de:	bf00      	nop
 80182e0:	e7fe      	b.n	80182e0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80182e2:	f002 fc3b 	bl	801ab5c <vPortValidateInterruptPriority>
	__asm volatile
 80182e6:	f3ef 8211 	mrs	r2, BASEPRI
 80182ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ee:	b672      	cpsid	i
 80182f0:	f383 8811 	msr	BASEPRI, r3
 80182f4:	f3bf 8f6f 	isb	sy
 80182f8:	f3bf 8f4f 	dsb	sy
 80182fc:	b662      	cpsie	i
 80182fe:	61ba      	str	r2, [r7, #24]
 8018300:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018302:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018304:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801830e:	429a      	cmp	r2, r3
 8018310:	d302      	bcc.n	8018318 <xQueueGenericSendFromISR+0xcc>
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	2b02      	cmp	r3, #2
 8018316:	d12c      	bne.n	8018372 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801831e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018322:	683a      	ldr	r2, [r7, #0]
 8018324:	68b9      	ldr	r1, [r7, #8]
 8018326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018328:	f000 f99c 	bl	8018664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801832c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8018330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018334:	d112      	bne.n	801835c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801833a:	2b00      	cmp	r3, #0
 801833c:	d016      	beq.n	801836c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018340:	3324      	adds	r3, #36	; 0x24
 8018342:	4618      	mov	r0, r3
 8018344:	f001 f9b6 	bl	80196b4 <xTaskRemoveFromEventList>
 8018348:	4603      	mov	r3, r0
 801834a:	2b00      	cmp	r3, #0
 801834c:	d00e      	beq.n	801836c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00b      	beq.n	801836c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2201      	movs	r2, #1
 8018358:	601a      	str	r2, [r3, #0]
 801835a:	e007      	b.n	801836c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801835c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018360:	3301      	adds	r3, #1
 8018362:	b2db      	uxtb	r3, r3
 8018364:	b25a      	sxtb	r2, r3
 8018366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801836c:	2301      	movs	r3, #1
 801836e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8018370:	e001      	b.n	8018376 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018372:	2300      	movs	r3, #0
 8018374:	637b      	str	r3, [r7, #52]	; 0x34
 8018376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018378:	613b      	str	r3, [r7, #16]
	__asm volatile
 801837a:	693b      	ldr	r3, [r7, #16]
 801837c:	f383 8811 	msr	BASEPRI, r3
}
 8018380:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018384:	4618      	mov	r0, r3
 8018386:	3738      	adds	r7, #56	; 0x38
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}

0801838c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b08c      	sub	sp, #48	; 0x30
 8018390:	af00      	add	r7, sp, #0
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	60b9      	str	r1, [r7, #8]
 8018396:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018398:	2300      	movs	r3, #0
 801839a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80183a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d10c      	bne.n	80183c0 <xQueueReceive+0x34>
	__asm volatile
 80183a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183aa:	b672      	cpsid	i
 80183ac:	f383 8811 	msr	BASEPRI, r3
 80183b0:	f3bf 8f6f 	isb	sy
 80183b4:	f3bf 8f4f 	dsb	sy
 80183b8:	b662      	cpsie	i
 80183ba:	623b      	str	r3, [r7, #32]
}
 80183bc:	bf00      	nop
 80183be:	e7fe      	b.n	80183be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d103      	bne.n	80183ce <xQueueReceive+0x42>
 80183c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d101      	bne.n	80183d2 <xQueueReceive+0x46>
 80183ce:	2301      	movs	r3, #1
 80183d0:	e000      	b.n	80183d4 <xQueueReceive+0x48>
 80183d2:	2300      	movs	r3, #0
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d10c      	bne.n	80183f2 <xQueueReceive+0x66>
	__asm volatile
 80183d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183dc:	b672      	cpsid	i
 80183de:	f383 8811 	msr	BASEPRI, r3
 80183e2:	f3bf 8f6f 	isb	sy
 80183e6:	f3bf 8f4f 	dsb	sy
 80183ea:	b662      	cpsie	i
 80183ec:	61fb      	str	r3, [r7, #28]
}
 80183ee:	bf00      	nop
 80183f0:	e7fe      	b.n	80183f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80183f2:	f001 fb27 	bl	8019a44 <xTaskGetSchedulerState>
 80183f6:	4603      	mov	r3, r0
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d102      	bne.n	8018402 <xQueueReceive+0x76>
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d101      	bne.n	8018406 <xQueueReceive+0x7a>
 8018402:	2301      	movs	r3, #1
 8018404:	e000      	b.n	8018408 <xQueueReceive+0x7c>
 8018406:	2300      	movs	r3, #0
 8018408:	2b00      	cmp	r3, #0
 801840a:	d10c      	bne.n	8018426 <xQueueReceive+0x9a>
	__asm volatile
 801840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018410:	b672      	cpsid	i
 8018412:	f383 8811 	msr	BASEPRI, r3
 8018416:	f3bf 8f6f 	isb	sy
 801841a:	f3bf 8f4f 	dsb	sy
 801841e:	b662      	cpsie	i
 8018420:	61bb      	str	r3, [r7, #24]
}
 8018422:	bf00      	nop
 8018424:	e7fe      	b.n	8018424 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018426:	f002 fab1 	bl	801a98c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801842e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018432:	2b00      	cmp	r3, #0
 8018434:	d01f      	beq.n	8018476 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018436:	68b9      	ldr	r1, [r7, #8]
 8018438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801843a:	f000 f97d 	bl	8018738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018440:	1e5a      	subs	r2, r3, #1
 8018442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018444:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018448:	691b      	ldr	r3, [r3, #16]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d00f      	beq.n	801846e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018450:	3310      	adds	r3, #16
 8018452:	4618      	mov	r0, r3
 8018454:	f001 f92e 	bl	80196b4 <xTaskRemoveFromEventList>
 8018458:	4603      	mov	r3, r0
 801845a:	2b00      	cmp	r3, #0
 801845c:	d007      	beq.n	801846e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801845e:	4b3d      	ldr	r3, [pc, #244]	; (8018554 <xQueueReceive+0x1c8>)
 8018460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018464:	601a      	str	r2, [r3, #0]
 8018466:	f3bf 8f4f 	dsb	sy
 801846a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801846e:	f002 fac1 	bl	801a9f4 <vPortExitCritical>
				return pdPASS;
 8018472:	2301      	movs	r3, #1
 8018474:	e069      	b.n	801854a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d103      	bne.n	8018484 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801847c:	f002 faba 	bl	801a9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018480:	2300      	movs	r3, #0
 8018482:	e062      	b.n	801854a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018486:	2b00      	cmp	r3, #0
 8018488:	d106      	bne.n	8018498 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801848a:	f107 0310 	add.w	r3, r7, #16
 801848e:	4618      	mov	r0, r3
 8018490:	f001 f974 	bl	801977c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018494:	2301      	movs	r3, #1
 8018496:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018498:	f002 faac 	bl	801a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801849c:	f000 fedc 	bl	8019258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80184a0:	f002 fa74 	bl	801a98c <vPortEnterCritical>
 80184a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184aa:	b25b      	sxtb	r3, r3
 80184ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184b0:	d103      	bne.n	80184ba <xQueueReceive+0x12e>
 80184b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b4:	2200      	movs	r2, #0
 80184b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80184ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80184c0:	b25b      	sxtb	r3, r3
 80184c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184c6:	d103      	bne.n	80184d0 <xQueueReceive+0x144>
 80184c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ca:	2200      	movs	r2, #0
 80184cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80184d0:	f002 fa90 	bl	801a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80184d4:	1d3a      	adds	r2, r7, #4
 80184d6:	f107 0310 	add.w	r3, r7, #16
 80184da:	4611      	mov	r1, r2
 80184dc:	4618      	mov	r0, r3
 80184de:	f001 f963 	bl	80197a8 <xTaskCheckForTimeOut>
 80184e2:	4603      	mov	r3, r0
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d123      	bne.n	8018530 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80184e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184ea:	f000 f99d 	bl	8018828 <prvIsQueueEmpty>
 80184ee:	4603      	mov	r3, r0
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d017      	beq.n	8018524 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80184f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f6:	3324      	adds	r3, #36	; 0x24
 80184f8:	687a      	ldr	r2, [r7, #4]
 80184fa:	4611      	mov	r1, r2
 80184fc:	4618      	mov	r0, r3
 80184fe:	f001 f885 	bl	801960c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018504:	f000 f93e 	bl	8018784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018508:	f000 feb4 	bl	8019274 <xTaskResumeAll>
 801850c:	4603      	mov	r3, r0
 801850e:	2b00      	cmp	r3, #0
 8018510:	d189      	bne.n	8018426 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8018512:	4b10      	ldr	r3, [pc, #64]	; (8018554 <xQueueReceive+0x1c8>)
 8018514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018518:	601a      	str	r2, [r3, #0]
 801851a:	f3bf 8f4f 	dsb	sy
 801851e:	f3bf 8f6f 	isb	sy
 8018522:	e780      	b.n	8018426 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018526:	f000 f92d 	bl	8018784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801852a:	f000 fea3 	bl	8019274 <xTaskResumeAll>
 801852e:	e77a      	b.n	8018426 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018532:	f000 f927 	bl	8018784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018536:	f000 fe9d 	bl	8019274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801853a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801853c:	f000 f974 	bl	8018828 <prvIsQueueEmpty>
 8018540:	4603      	mov	r3, r0
 8018542:	2b00      	cmp	r3, #0
 8018544:	f43f af6f 	beq.w	8018426 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801854a:	4618      	mov	r0, r3
 801854c:	3730      	adds	r7, #48	; 0x30
 801854e:	46bd      	mov	sp, r7
 8018550:	bd80      	pop	{r7, pc}
 8018552:	bf00      	nop
 8018554:	e000ed04 	.word	0xe000ed04

08018558 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b08e      	sub	sp, #56	; 0x38
 801855c:	af00      	add	r7, sp, #0
 801855e:	60f8      	str	r0, [r7, #12]
 8018560:	60b9      	str	r1, [r7, #8]
 8018562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801856a:	2b00      	cmp	r3, #0
 801856c:	d10c      	bne.n	8018588 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018572:	b672      	cpsid	i
 8018574:	f383 8811 	msr	BASEPRI, r3
 8018578:	f3bf 8f6f 	isb	sy
 801857c:	f3bf 8f4f 	dsb	sy
 8018580:	b662      	cpsie	i
 8018582:	623b      	str	r3, [r7, #32]
}
 8018584:	bf00      	nop
 8018586:	e7fe      	b.n	8018586 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d103      	bne.n	8018596 <xQueueReceiveFromISR+0x3e>
 801858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018592:	2b00      	cmp	r3, #0
 8018594:	d101      	bne.n	801859a <xQueueReceiveFromISR+0x42>
 8018596:	2301      	movs	r3, #1
 8018598:	e000      	b.n	801859c <xQueueReceiveFromISR+0x44>
 801859a:	2300      	movs	r3, #0
 801859c:	2b00      	cmp	r3, #0
 801859e:	d10c      	bne.n	80185ba <xQueueReceiveFromISR+0x62>
	__asm volatile
 80185a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185a4:	b672      	cpsid	i
 80185a6:	f383 8811 	msr	BASEPRI, r3
 80185aa:	f3bf 8f6f 	isb	sy
 80185ae:	f3bf 8f4f 	dsb	sy
 80185b2:	b662      	cpsie	i
 80185b4:	61fb      	str	r3, [r7, #28]
}
 80185b6:	bf00      	nop
 80185b8:	e7fe      	b.n	80185b8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80185ba:	f002 facf 	bl	801ab5c <vPortValidateInterruptPriority>
	__asm volatile
 80185be:	f3ef 8211 	mrs	r2, BASEPRI
 80185c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185c6:	b672      	cpsid	i
 80185c8:	f383 8811 	msr	BASEPRI, r3
 80185cc:	f3bf 8f6f 	isb	sy
 80185d0:	f3bf 8f4f 	dsb	sy
 80185d4:	b662      	cpsie	i
 80185d6:	61ba      	str	r2, [r7, #24]
 80185d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80185da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80185dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80185de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80185e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d02f      	beq.n	801864a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80185ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80185f4:	68b9      	ldr	r1, [r7, #8]
 80185f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185f8:	f000 f89e 	bl	8018738 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80185fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fe:	1e5a      	subs	r2, r3, #1
 8018600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018602:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801860c:	d112      	bne.n	8018634 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018610:	691b      	ldr	r3, [r3, #16]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d016      	beq.n	8018644 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018618:	3310      	adds	r3, #16
 801861a:	4618      	mov	r0, r3
 801861c:	f001 f84a 	bl	80196b4 <xTaskRemoveFromEventList>
 8018620:	4603      	mov	r3, r0
 8018622:	2b00      	cmp	r3, #0
 8018624:	d00e      	beq.n	8018644 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d00b      	beq.n	8018644 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2201      	movs	r2, #1
 8018630:	601a      	str	r2, [r3, #0]
 8018632:	e007      	b.n	8018644 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018638:	3301      	adds	r3, #1
 801863a:	b2db      	uxtb	r3, r3
 801863c:	b25a      	sxtb	r2, r3
 801863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8018644:	2301      	movs	r3, #1
 8018646:	637b      	str	r3, [r7, #52]	; 0x34
 8018648:	e001      	b.n	801864e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801864a:	2300      	movs	r3, #0
 801864c:	637b      	str	r3, [r7, #52]	; 0x34
 801864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018650:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	f383 8811 	msr	BASEPRI, r3
}
 8018658:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801865c:	4618      	mov	r0, r3
 801865e:	3738      	adds	r7, #56	; 0x38
 8018660:	46bd      	mov	sp, r7
 8018662:	bd80      	pop	{r7, pc}

08018664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b086      	sub	sp, #24
 8018668:	af00      	add	r7, sp, #0
 801866a:	60f8      	str	r0, [r7, #12]
 801866c:	60b9      	str	r1, [r7, #8]
 801866e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018670:	2300      	movs	r3, #0
 8018672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801867e:	2b00      	cmp	r3, #0
 8018680:	d10d      	bne.n	801869e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d14d      	bne.n	8018726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	689b      	ldr	r3, [r3, #8]
 801868e:	4618      	mov	r0, r3
 8018690:	f001 f9f6 	bl	8019a80 <xTaskPriorityDisinherit>
 8018694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	2200      	movs	r2, #0
 801869a:	609a      	str	r2, [r3, #8]
 801869c:	e043      	b.n	8018726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d119      	bne.n	80186d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6858      	ldr	r0, [r3, #4]
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ac:	461a      	mov	r2, r3
 80186ae:	68b9      	ldr	r1, [r7, #8]
 80186b0:	f002 fda1 	bl	801b1f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	685a      	ldr	r2, [r3, #4]
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186bc:	441a      	add	r2, r3
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	685a      	ldr	r2, [r3, #4]
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	689b      	ldr	r3, [r3, #8]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d32b      	bcc.n	8018726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	681a      	ldr	r2, [r3, #0]
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	605a      	str	r2, [r3, #4]
 80186d6:	e026      	b.n	8018726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	68d8      	ldr	r0, [r3, #12]
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186e0:	461a      	mov	r2, r3
 80186e2:	68b9      	ldr	r1, [r7, #8]
 80186e4:	f002 fd87 	bl	801b1f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	68da      	ldr	r2, [r3, #12]
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186f0:	425b      	negs	r3, r3
 80186f2:	441a      	add	r2, r3
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	68da      	ldr	r2, [r3, #12]
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	429a      	cmp	r2, r3
 8018702:	d207      	bcs.n	8018714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	689a      	ldr	r2, [r3, #8]
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801870c:	425b      	negs	r3, r3
 801870e:	441a      	add	r2, r3
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2b02      	cmp	r3, #2
 8018718:	d105      	bne.n	8018726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801871a:	693b      	ldr	r3, [r7, #16]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d002      	beq.n	8018726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	3b01      	subs	r3, #1
 8018724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018726:	693b      	ldr	r3, [r7, #16]
 8018728:	1c5a      	adds	r2, r3, #1
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801872e:	697b      	ldr	r3, [r7, #20]
}
 8018730:	4618      	mov	r0, r3
 8018732:	3718      	adds	r7, #24
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
 8018740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018746:	2b00      	cmp	r3, #0
 8018748:	d018      	beq.n	801877c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	68da      	ldr	r2, [r3, #12]
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018752:	441a      	add	r2, r3
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	68da      	ldr	r2, [r3, #12]
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	689b      	ldr	r3, [r3, #8]
 8018760:	429a      	cmp	r2, r3
 8018762:	d303      	bcc.n	801876c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681a      	ldr	r2, [r3, #0]
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	68d9      	ldr	r1, [r3, #12]
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018774:	461a      	mov	r2, r3
 8018776:	6838      	ldr	r0, [r7, #0]
 8018778:	f002 fd3d 	bl	801b1f6 <memcpy>
	}
}
 801877c:	bf00      	nop
 801877e:	3708      	adds	r7, #8
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}

08018784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b084      	sub	sp, #16
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801878c:	f002 f8fe 	bl	801a98c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018798:	e011      	b.n	80187be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d012      	beq.n	80187c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	3324      	adds	r3, #36	; 0x24
 80187a6:	4618      	mov	r0, r3
 80187a8:	f000 ff84 	bl	80196b4 <xTaskRemoveFromEventList>
 80187ac:	4603      	mov	r3, r0
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d001      	beq.n	80187b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80187b2:	f001 f85f 	bl	8019874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80187b6:	7bfb      	ldrb	r3, [r7, #15]
 80187b8:	3b01      	subs	r3, #1
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80187be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	dce9      	bgt.n	801879a <prvUnlockQueue+0x16>
 80187c6:	e000      	b.n	80187ca <prvUnlockQueue+0x46>
					break;
 80187c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	22ff      	movs	r2, #255	; 0xff
 80187ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80187d2:	f002 f90f 	bl	801a9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80187d6:	f002 f8d9 	bl	801a98c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80187e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80187e2:	e011      	b.n	8018808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	691b      	ldr	r3, [r3, #16]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d012      	beq.n	8018812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	3310      	adds	r3, #16
 80187f0:	4618      	mov	r0, r3
 80187f2:	f000 ff5f 	bl	80196b4 <xTaskRemoveFromEventList>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d001      	beq.n	8018800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80187fc:	f001 f83a 	bl	8019874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018800:	7bbb      	ldrb	r3, [r7, #14]
 8018802:	3b01      	subs	r3, #1
 8018804:	b2db      	uxtb	r3, r3
 8018806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801880c:	2b00      	cmp	r3, #0
 801880e:	dce9      	bgt.n	80187e4 <prvUnlockQueue+0x60>
 8018810:	e000      	b.n	8018814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	22ff      	movs	r2, #255	; 0xff
 8018818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801881c:	f002 f8ea 	bl	801a9f4 <vPortExitCritical>
}
 8018820:	bf00      	nop
 8018822:	3710      	adds	r7, #16
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}

08018828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018830:	f002 f8ac 	bl	801a98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018838:	2b00      	cmp	r3, #0
 801883a:	d102      	bne.n	8018842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801883c:	2301      	movs	r3, #1
 801883e:	60fb      	str	r3, [r7, #12]
 8018840:	e001      	b.n	8018846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018842:	2300      	movs	r3, #0
 8018844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018846:	f002 f8d5 	bl	801a9f4 <vPortExitCritical>

	return xReturn;
 801884a:	68fb      	ldr	r3, [r7, #12]
}
 801884c:	4618      	mov	r0, r3
 801884e:	3710      	adds	r7, #16
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801885c:	f002 f896 	bl	801a98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018868:	429a      	cmp	r2, r3
 801886a:	d102      	bne.n	8018872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801886c:	2301      	movs	r3, #1
 801886e:	60fb      	str	r3, [r7, #12]
 8018870:	e001      	b.n	8018876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018872:	2300      	movs	r3, #0
 8018874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018876:	f002 f8bd 	bl	801a9f4 <vPortExitCritical>

	return xReturn;
 801887a:	68fb      	ldr	r3, [r7, #12]
}
 801887c:	4618      	mov	r0, r3
 801887e:	3710      	adds	r7, #16
 8018880:	46bd      	mov	sp, r7
 8018882:	bd80      	pop	{r7, pc}

08018884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018884:	b480      	push	{r7}
 8018886:	b085      	sub	sp, #20
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
 801888c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801888e:	2300      	movs	r3, #0
 8018890:	60fb      	str	r3, [r7, #12]
 8018892:	e014      	b.n	80188be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018894:	4a0f      	ldr	r2, [pc, #60]	; (80188d4 <vQueueAddToRegistry+0x50>)
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d10b      	bne.n	80188b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80188a0:	490c      	ldr	r1, [pc, #48]	; (80188d4 <vQueueAddToRegistry+0x50>)
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	683a      	ldr	r2, [r7, #0]
 80188a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80188aa:	4a0a      	ldr	r2, [pc, #40]	; (80188d4 <vQueueAddToRegistry+0x50>)
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	00db      	lsls	r3, r3, #3
 80188b0:	4413      	add	r3, r2
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80188b6:	e006      	b.n	80188c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	3301      	adds	r3, #1
 80188bc:	60fb      	str	r3, [r7, #12]
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	2b07      	cmp	r3, #7
 80188c2:	d9e7      	bls.n	8018894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80188c4:	bf00      	nop
 80188c6:	bf00      	nop
 80188c8:	3714      	adds	r7, #20
 80188ca:	46bd      	mov	sp, r7
 80188cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d0:	4770      	bx	lr
 80188d2:	bf00      	nop
 80188d4:	20002d84 	.word	0x20002d84

080188d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b086      	sub	sp, #24
 80188dc:	af00      	add	r7, sp, #0
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80188e8:	f002 f850 	bl	801a98c <vPortEnterCritical>
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188f2:	b25b      	sxtb	r3, r3
 80188f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188f8:	d103      	bne.n	8018902 <vQueueWaitForMessageRestricted+0x2a>
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	2200      	movs	r2, #0
 80188fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018908:	b25b      	sxtb	r3, r3
 801890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801890e:	d103      	bne.n	8018918 <vQueueWaitForMessageRestricted+0x40>
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	2200      	movs	r2, #0
 8018914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018918:	f002 f86c 	bl	801a9f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801891c:	697b      	ldr	r3, [r7, #20]
 801891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018920:	2b00      	cmp	r3, #0
 8018922:	d106      	bne.n	8018932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018924:	697b      	ldr	r3, [r7, #20]
 8018926:	3324      	adds	r3, #36	; 0x24
 8018928:	687a      	ldr	r2, [r7, #4]
 801892a:	68b9      	ldr	r1, [r7, #8]
 801892c:	4618      	mov	r0, r3
 801892e:	f000 fe93 	bl	8019658 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018932:	6978      	ldr	r0, [r7, #20]
 8018934:	f7ff ff26 	bl	8018784 <prvUnlockQueue>
	}
 8018938:	bf00      	nop
 801893a:	3718      	adds	r7, #24
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}

08018940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018940:	b580      	push	{r7, lr}
 8018942:	b08e      	sub	sp, #56	; 0x38
 8018944:	af04      	add	r7, sp, #16
 8018946:	60f8      	str	r0, [r7, #12]
 8018948:	60b9      	str	r1, [r7, #8]
 801894a:	607a      	str	r2, [r7, #4]
 801894c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018950:	2b00      	cmp	r3, #0
 8018952:	d10c      	bne.n	801896e <xTaskCreateStatic+0x2e>
	__asm volatile
 8018954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018958:	b672      	cpsid	i
 801895a:	f383 8811 	msr	BASEPRI, r3
 801895e:	f3bf 8f6f 	isb	sy
 8018962:	f3bf 8f4f 	dsb	sy
 8018966:	b662      	cpsie	i
 8018968:	623b      	str	r3, [r7, #32]
}
 801896a:	bf00      	nop
 801896c:	e7fe      	b.n	801896c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018970:	2b00      	cmp	r3, #0
 8018972:	d10c      	bne.n	801898e <xTaskCreateStatic+0x4e>
	__asm volatile
 8018974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018978:	b672      	cpsid	i
 801897a:	f383 8811 	msr	BASEPRI, r3
 801897e:	f3bf 8f6f 	isb	sy
 8018982:	f3bf 8f4f 	dsb	sy
 8018986:	b662      	cpsie	i
 8018988:	61fb      	str	r3, [r7, #28]
}
 801898a:	bf00      	nop
 801898c:	e7fe      	b.n	801898c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801898e:	23b4      	movs	r3, #180	; 0xb4
 8018990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	2bb4      	cmp	r3, #180	; 0xb4
 8018996:	d00c      	beq.n	80189b2 <xTaskCreateStatic+0x72>
	__asm volatile
 8018998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801899c:	b672      	cpsid	i
 801899e:	f383 8811 	msr	BASEPRI, r3
 80189a2:	f3bf 8f6f 	isb	sy
 80189a6:	f3bf 8f4f 	dsb	sy
 80189aa:	b662      	cpsie	i
 80189ac:	61bb      	str	r3, [r7, #24]
}
 80189ae:	bf00      	nop
 80189b0:	e7fe      	b.n	80189b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80189b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80189b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d01e      	beq.n	80189f8 <xTaskCreateStatic+0xb8>
 80189ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d01b      	beq.n	80189f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80189c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80189c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80189c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80189ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189cc:	2202      	movs	r2, #2
 80189ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80189d2:	2300      	movs	r3, #0
 80189d4:	9303      	str	r3, [sp, #12]
 80189d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d8:	9302      	str	r3, [sp, #8]
 80189da:	f107 0314 	add.w	r3, r7, #20
 80189de:	9301      	str	r3, [sp, #4]
 80189e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e2:	9300      	str	r3, [sp, #0]
 80189e4:	683b      	ldr	r3, [r7, #0]
 80189e6:	687a      	ldr	r2, [r7, #4]
 80189e8:	68b9      	ldr	r1, [r7, #8]
 80189ea:	68f8      	ldr	r0, [r7, #12]
 80189ec:	f000 f850 	bl	8018a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80189f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189f2:	f000 f8ed 	bl	8018bd0 <prvAddNewTaskToReadyList>
 80189f6:	e001      	b.n	80189fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80189f8:	2300      	movs	r3, #0
 80189fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80189fc:	697b      	ldr	r3, [r7, #20]
	}
 80189fe:	4618      	mov	r0, r3
 8018a00:	3728      	adds	r7, #40	; 0x28
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}

08018a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018a06:	b580      	push	{r7, lr}
 8018a08:	b08c      	sub	sp, #48	; 0x30
 8018a0a:	af04      	add	r7, sp, #16
 8018a0c:	60f8      	str	r0, [r7, #12]
 8018a0e:	60b9      	str	r1, [r7, #8]
 8018a10:	603b      	str	r3, [r7, #0]
 8018a12:	4613      	mov	r3, r2
 8018a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018a16:	88fb      	ldrh	r3, [r7, #6]
 8018a18:	009b      	lsls	r3, r3, #2
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	f002 f8e2 	bl	801abe4 <pvPortMalloc>
 8018a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018a22:	697b      	ldr	r3, [r7, #20]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d00e      	beq.n	8018a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018a28:	20b4      	movs	r0, #180	; 0xb4
 8018a2a:	f002 f8db 	bl	801abe4 <pvPortMalloc>
 8018a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d003      	beq.n	8018a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018a36:	69fb      	ldr	r3, [r7, #28]
 8018a38:	697a      	ldr	r2, [r7, #20]
 8018a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8018a3c:	e005      	b.n	8018a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018a3e:	6978      	ldr	r0, [r7, #20]
 8018a40:	f002 f99a 	bl	801ad78 <vPortFree>
 8018a44:	e001      	b.n	8018a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018a46:	2300      	movs	r3, #0
 8018a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018a4a:	69fb      	ldr	r3, [r7, #28]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d017      	beq.n	8018a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018a50:	69fb      	ldr	r3, [r7, #28]
 8018a52:	2200      	movs	r2, #0
 8018a54:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018a58:	88fa      	ldrh	r2, [r7, #6]
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	9303      	str	r3, [sp, #12]
 8018a5e:	69fb      	ldr	r3, [r7, #28]
 8018a60:	9302      	str	r3, [sp, #8]
 8018a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a64:	9301      	str	r3, [sp, #4]
 8018a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a68:	9300      	str	r3, [sp, #0]
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	68b9      	ldr	r1, [r7, #8]
 8018a6e:	68f8      	ldr	r0, [r7, #12]
 8018a70:	f000 f80e 	bl	8018a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018a74:	69f8      	ldr	r0, [r7, #28]
 8018a76:	f000 f8ab 	bl	8018bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018a7a:	2301      	movs	r3, #1
 8018a7c:	61bb      	str	r3, [r7, #24]
 8018a7e:	e002      	b.n	8018a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018a80:	f04f 33ff 	mov.w	r3, #4294967295
 8018a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018a86:	69bb      	ldr	r3, [r7, #24]
	}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3720      	adds	r7, #32
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}

08018a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b088      	sub	sp, #32
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	60b9      	str	r1, [r7, #8]
 8018a9a:	607a      	str	r2, [r7, #4]
 8018a9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018aa2:	6879      	ldr	r1, [r7, #4]
 8018aa4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018aa8:	440b      	add	r3, r1
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	4413      	add	r3, r2
 8018aae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018ab0:	69bb      	ldr	r3, [r7, #24]
 8018ab2:	f023 0307 	bic.w	r3, r3, #7
 8018ab6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018ab8:	69bb      	ldr	r3, [r7, #24]
 8018aba:	f003 0307 	and.w	r3, r3, #7
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d00c      	beq.n	8018adc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8018ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac6:	b672      	cpsid	i
 8018ac8:	f383 8811 	msr	BASEPRI, r3
 8018acc:	f3bf 8f6f 	isb	sy
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	b662      	cpsie	i
 8018ad6:	617b      	str	r3, [r7, #20]
}
 8018ad8:	bf00      	nop
 8018ada:	e7fe      	b.n	8018ada <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d01f      	beq.n	8018b22 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	61fb      	str	r3, [r7, #28]
 8018ae6:	e012      	b.n	8018b0e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018ae8:	68ba      	ldr	r2, [r7, #8]
 8018aea:	69fb      	ldr	r3, [r7, #28]
 8018aec:	4413      	add	r3, r2
 8018aee:	7819      	ldrb	r1, [r3, #0]
 8018af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018af2:	69fb      	ldr	r3, [r7, #28]
 8018af4:	4413      	add	r3, r2
 8018af6:	3334      	adds	r3, #52	; 0x34
 8018af8:	460a      	mov	r2, r1
 8018afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018afc:	68ba      	ldr	r2, [r7, #8]
 8018afe:	69fb      	ldr	r3, [r7, #28]
 8018b00:	4413      	add	r3, r2
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d006      	beq.n	8018b16 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	61fb      	str	r3, [r7, #28]
 8018b0e:	69fb      	ldr	r3, [r7, #28]
 8018b10:	2b0f      	cmp	r3, #15
 8018b12:	d9e9      	bls.n	8018ae8 <prvInitialiseNewTask+0x58>
 8018b14:	e000      	b.n	8018b18 <prvInitialiseNewTask+0x88>
			{
				break;
 8018b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018b20:	e003      	b.n	8018b2a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b24:	2200      	movs	r2, #0
 8018b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b2c:	2b06      	cmp	r3, #6
 8018b2e:	d901      	bls.n	8018b34 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018b30:	2306      	movs	r3, #6
 8018b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8018b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b42:	2200      	movs	r2, #0
 8018b44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b48:	3304      	adds	r3, #4
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7ff f896 	bl	8017c7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b52:	3318      	adds	r3, #24
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7ff f891 	bl	8017c7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b62:	f1c3 0207 	rsb	r2, r3, #7
 8018b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b72:	2200      	movs	r2, #0
 8018b74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b82:	334c      	adds	r3, #76	; 0x4c
 8018b84:	2260      	movs	r2, #96	; 0x60
 8018b86:	2100      	movs	r1, #0
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f002 fb42 	bl	801b212 <memset>
 8018b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b90:	4a0c      	ldr	r2, [pc, #48]	; (8018bc4 <prvInitialiseNewTask+0x134>)
 8018b92:	651a      	str	r2, [r3, #80]	; 0x50
 8018b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b96:	4a0c      	ldr	r2, [pc, #48]	; (8018bc8 <prvInitialiseNewTask+0x138>)
 8018b98:	655a      	str	r2, [r3, #84]	; 0x54
 8018b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b9c:	4a0b      	ldr	r2, [pc, #44]	; (8018bcc <prvInitialiseNewTask+0x13c>)
 8018b9e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018ba0:	683a      	ldr	r2, [r7, #0]
 8018ba2:	68f9      	ldr	r1, [r7, #12]
 8018ba4:	69b8      	ldr	r0, [r7, #24]
 8018ba6:	f001 fde3 	bl	801a770 <pxPortInitialiseStack>
 8018baa:	4602      	mov	r2, r0
 8018bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d002      	beq.n	8018bbc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018bbc:	bf00      	nop
 8018bbe:	3720      	adds	r7, #32
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	08020734 	.word	0x08020734
 8018bc8:	08020754 	.word	0x08020754
 8018bcc:	08020714 	.word	0x08020714

08018bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b082      	sub	sp, #8
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018bd8:	f001 fed8 	bl	801a98c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018bdc:	4b2a      	ldr	r3, [pc, #168]	; (8018c88 <prvAddNewTaskToReadyList+0xb8>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	3301      	adds	r3, #1
 8018be2:	4a29      	ldr	r2, [pc, #164]	; (8018c88 <prvAddNewTaskToReadyList+0xb8>)
 8018be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018be6:	4b29      	ldr	r3, [pc, #164]	; (8018c8c <prvAddNewTaskToReadyList+0xbc>)
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d109      	bne.n	8018c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018bee:	4a27      	ldr	r2, [pc, #156]	; (8018c8c <prvAddNewTaskToReadyList+0xbc>)
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018bf4:	4b24      	ldr	r3, [pc, #144]	; (8018c88 <prvAddNewTaskToReadyList+0xb8>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	2b01      	cmp	r3, #1
 8018bfa:	d110      	bne.n	8018c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018bfc:	f000 fe5e 	bl	80198bc <prvInitialiseTaskLists>
 8018c00:	e00d      	b.n	8018c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018c02:	4b23      	ldr	r3, [pc, #140]	; (8018c90 <prvAddNewTaskToReadyList+0xc0>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d109      	bne.n	8018c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018c0a:	4b20      	ldr	r3, [pc, #128]	; (8018c8c <prvAddNewTaskToReadyList+0xbc>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d802      	bhi.n	8018c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018c18:	4a1c      	ldr	r2, [pc, #112]	; (8018c8c <prvAddNewTaskToReadyList+0xbc>)
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018c1e:	4b1d      	ldr	r3, [pc, #116]	; (8018c94 <prvAddNewTaskToReadyList+0xc4>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	3301      	adds	r3, #1
 8018c24:	4a1b      	ldr	r2, [pc, #108]	; (8018c94 <prvAddNewTaskToReadyList+0xc4>)
 8018c26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c2c:	2201      	movs	r2, #1
 8018c2e:	409a      	lsls	r2, r3
 8018c30:	4b19      	ldr	r3, [pc, #100]	; (8018c98 <prvAddNewTaskToReadyList+0xc8>)
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	4313      	orrs	r3, r2
 8018c36:	4a18      	ldr	r2, [pc, #96]	; (8018c98 <prvAddNewTaskToReadyList+0xc8>)
 8018c38:	6013      	str	r3, [r2, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c3e:	4613      	mov	r3, r2
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	4413      	add	r3, r2
 8018c44:	009b      	lsls	r3, r3, #2
 8018c46:	4a15      	ldr	r2, [pc, #84]	; (8018c9c <prvAddNewTaskToReadyList+0xcc>)
 8018c48:	441a      	add	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	4619      	mov	r1, r3
 8018c50:	4610      	mov	r0, r2
 8018c52:	f7ff f820 	bl	8017c96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018c56:	f001 fecd 	bl	801a9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018c5a:	4b0d      	ldr	r3, [pc, #52]	; (8018c90 <prvAddNewTaskToReadyList+0xc0>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d00e      	beq.n	8018c80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018c62:	4b0a      	ldr	r3, [pc, #40]	; (8018c8c <prvAddNewTaskToReadyList+0xbc>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	d207      	bcs.n	8018c80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018c70:	4b0b      	ldr	r3, [pc, #44]	; (8018ca0 <prvAddNewTaskToReadyList+0xd0>)
 8018c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c76:	601a      	str	r2, [r3, #0]
 8018c78:	f3bf 8f4f 	dsb	sy
 8018c7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018c80:	bf00      	nop
 8018c82:	3708      	adds	r7, #8
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}
 8018c88:	20002ec4 	.word	0x20002ec4
 8018c8c:	20002dc4 	.word	0x20002dc4
 8018c90:	20002ed0 	.word	0x20002ed0
 8018c94:	20002ee0 	.word	0x20002ee0
 8018c98:	20002ecc 	.word	0x20002ecc
 8018c9c:	20002dc8 	.word	0x20002dc8
 8018ca0:	e000ed04 	.word	0xe000ed04

08018ca4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b084      	sub	sp, #16
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018cac:	f001 fe6e 	bl	801a98c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d102      	bne.n	8018cbc <vTaskDelete+0x18>
 8018cb6:	4b3a      	ldr	r3, [pc, #232]	; (8018da0 <vTaskDelete+0xfc>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	e000      	b.n	8018cbe <vTaskDelete+0x1a>
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	3304      	adds	r3, #4
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7ff f843 	bl	8017d50 <uxListRemove>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d115      	bne.n	8018cfc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cd4:	4933      	ldr	r1, [pc, #204]	; (8018da4 <vTaskDelete+0x100>)
 8018cd6:	4613      	mov	r3, r2
 8018cd8:	009b      	lsls	r3, r3, #2
 8018cda:	4413      	add	r3, r2
 8018cdc:	009b      	lsls	r3, r3, #2
 8018cde:	440b      	add	r3, r1
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d10a      	bne.n	8018cfc <vTaskDelete+0x58>
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cea:	2201      	movs	r2, #1
 8018cec:	fa02 f303 	lsl.w	r3, r2, r3
 8018cf0:	43da      	mvns	r2, r3
 8018cf2:	4b2d      	ldr	r3, [pc, #180]	; (8018da8 <vTaskDelete+0x104>)
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	4013      	ands	r3, r2
 8018cf8:	4a2b      	ldr	r2, [pc, #172]	; (8018da8 <vTaskDelete+0x104>)
 8018cfa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d004      	beq.n	8018d0e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	3318      	adds	r3, #24
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f7ff f821 	bl	8017d50 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8018d0e:	4b27      	ldr	r3, [pc, #156]	; (8018dac <vTaskDelete+0x108>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	3301      	adds	r3, #1
 8018d14:	4a25      	ldr	r2, [pc, #148]	; (8018dac <vTaskDelete+0x108>)
 8018d16:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8018d18:	4b21      	ldr	r3, [pc, #132]	; (8018da0 <vTaskDelete+0xfc>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d10b      	bne.n	8018d3a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	3304      	adds	r3, #4
 8018d26:	4619      	mov	r1, r3
 8018d28:	4821      	ldr	r0, [pc, #132]	; (8018db0 <vTaskDelete+0x10c>)
 8018d2a:	f7fe ffb4 	bl	8017c96 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8018d2e:	4b21      	ldr	r3, [pc, #132]	; (8018db4 <vTaskDelete+0x110>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	3301      	adds	r3, #1
 8018d34:	4a1f      	ldr	r2, [pc, #124]	; (8018db4 <vTaskDelete+0x110>)
 8018d36:	6013      	str	r3, [r2, #0]
 8018d38:	e009      	b.n	8018d4e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8018d3a:	4b1f      	ldr	r3, [pc, #124]	; (8018db8 <vTaskDelete+0x114>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	3b01      	subs	r3, #1
 8018d40:	4a1d      	ldr	r2, [pc, #116]	; (8018db8 <vTaskDelete+0x114>)
 8018d42:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8018d44:	68f8      	ldr	r0, [r7, #12]
 8018d46:	f000 fe27 	bl	8019998 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8018d4a:	f000 fe5b 	bl	8019a04 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8018d4e:	f001 fe51 	bl	801a9f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8018d52:	4b1a      	ldr	r3, [pc, #104]	; (8018dbc <vTaskDelete+0x118>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d01d      	beq.n	8018d96 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8018d5a:	4b11      	ldr	r3, [pc, #68]	; (8018da0 <vTaskDelete+0xfc>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	68fa      	ldr	r2, [r7, #12]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d118      	bne.n	8018d96 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8018d64:	4b16      	ldr	r3, [pc, #88]	; (8018dc0 <vTaskDelete+0x11c>)
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d00c      	beq.n	8018d86 <vTaskDelete+0xe2>
	__asm volatile
 8018d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d70:	b672      	cpsid	i
 8018d72:	f383 8811 	msr	BASEPRI, r3
 8018d76:	f3bf 8f6f 	isb	sy
 8018d7a:	f3bf 8f4f 	dsb	sy
 8018d7e:	b662      	cpsie	i
 8018d80:	60bb      	str	r3, [r7, #8]
}
 8018d82:	bf00      	nop
 8018d84:	e7fe      	b.n	8018d84 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8018d86:	4b0f      	ldr	r3, [pc, #60]	; (8018dc4 <vTaskDelete+0x120>)
 8018d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d8c:	601a      	str	r2, [r3, #0]
 8018d8e:	f3bf 8f4f 	dsb	sy
 8018d92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018d96:	bf00      	nop
 8018d98:	3710      	adds	r7, #16
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	20002dc4 	.word	0x20002dc4
 8018da4:	20002dc8 	.word	0x20002dc8
 8018da8:	20002ecc 	.word	0x20002ecc
 8018dac:	20002ee0 	.word	0x20002ee0
 8018db0:	20002e98 	.word	0x20002e98
 8018db4:	20002eac 	.word	0x20002eac
 8018db8:	20002ec4 	.word	0x20002ec4
 8018dbc:	20002ed0 	.word	0x20002ed0
 8018dc0:	20002eec 	.word	0x20002eec
 8018dc4:	e000ed04 	.word	0xe000ed04

08018dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b084      	sub	sp, #16
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d019      	beq.n	8018e0e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018dda:	4b14      	ldr	r3, [pc, #80]	; (8018e2c <vTaskDelay+0x64>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d00c      	beq.n	8018dfc <vTaskDelay+0x34>
	__asm volatile
 8018de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de6:	b672      	cpsid	i
 8018de8:	f383 8811 	msr	BASEPRI, r3
 8018dec:	f3bf 8f6f 	isb	sy
 8018df0:	f3bf 8f4f 	dsb	sy
 8018df4:	b662      	cpsie	i
 8018df6:	60bb      	str	r3, [r7, #8]
}
 8018df8:	bf00      	nop
 8018dfa:	e7fe      	b.n	8018dfa <vTaskDelay+0x32>
			vTaskSuspendAll();
 8018dfc:	f000 fa2c 	bl	8019258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018e00:	2100      	movs	r1, #0
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f001 f870 	bl	8019ee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018e08:	f000 fa34 	bl	8019274 <xTaskResumeAll>
 8018e0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d107      	bne.n	8018e24 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8018e14:	4b06      	ldr	r3, [pc, #24]	; (8018e30 <vTaskDelay+0x68>)
 8018e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e1a:	601a      	str	r2, [r3, #0]
 8018e1c:	f3bf 8f4f 	dsb	sy
 8018e20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e24:	bf00      	nop
 8018e26:	3710      	adds	r7, #16
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd80      	pop	{r7, pc}
 8018e2c:	20002eec 	.word	0x20002eec
 8018e30:	e000ed04 	.word	0xe000ed04

08018e34 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b084      	sub	sp, #16
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018e3c:	f001 fda6 	bl	801a98c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d102      	bne.n	8018e4c <vTaskSuspend+0x18>
 8018e46:	4b3d      	ldr	r3, [pc, #244]	; (8018f3c <vTaskSuspend+0x108>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	e000      	b.n	8018e4e <vTaskSuspend+0x1a>
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	3304      	adds	r3, #4
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7fe ff7b 	bl	8017d50 <uxListRemove>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d115      	bne.n	8018e8c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e64:	4936      	ldr	r1, [pc, #216]	; (8018f40 <vTaskSuspend+0x10c>)
 8018e66:	4613      	mov	r3, r2
 8018e68:	009b      	lsls	r3, r3, #2
 8018e6a:	4413      	add	r3, r2
 8018e6c:	009b      	lsls	r3, r3, #2
 8018e6e:	440b      	add	r3, r1
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d10a      	bne.n	8018e8c <vTaskSuspend+0x58>
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e7a:	2201      	movs	r2, #1
 8018e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8018e80:	43da      	mvns	r2, r3
 8018e82:	4b30      	ldr	r3, [pc, #192]	; (8018f44 <vTaskSuspend+0x110>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	4013      	ands	r3, r2
 8018e88:	4a2e      	ldr	r2, [pc, #184]	; (8018f44 <vTaskSuspend+0x110>)
 8018e8a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d004      	beq.n	8018e9e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	3318      	adds	r3, #24
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7fe ff59 	bl	8017d50 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	3304      	adds	r3, #4
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	4828      	ldr	r0, [pc, #160]	; (8018f48 <vTaskSuspend+0x114>)
 8018ea6:	f7fe fef6 	bl	8017c96 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8018eb0:	b2db      	uxtb	r3, r3
 8018eb2:	2b01      	cmp	r3, #1
 8018eb4:	d103      	bne.n	8018ebe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018ebe:	f001 fd99 	bl	801a9f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018ec2:	4b22      	ldr	r3, [pc, #136]	; (8018f4c <vTaskSuspend+0x118>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d005      	beq.n	8018ed6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018eca:	f001 fd5f 	bl	801a98c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018ece:	f000 fd99 	bl	8019a04 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018ed2:	f001 fd8f 	bl	801a9f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018ed6:	4b19      	ldr	r3, [pc, #100]	; (8018f3c <vTaskSuspend+0x108>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	68fa      	ldr	r2, [r7, #12]
 8018edc:	429a      	cmp	r2, r3
 8018ede:	d129      	bne.n	8018f34 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8018ee0:	4b1a      	ldr	r3, [pc, #104]	; (8018f4c <vTaskSuspend+0x118>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d019      	beq.n	8018f1c <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018ee8:	4b19      	ldr	r3, [pc, #100]	; (8018f50 <vTaskSuspend+0x11c>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d00c      	beq.n	8018f0a <vTaskSuspend+0xd6>
	__asm volatile
 8018ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ef4:	b672      	cpsid	i
 8018ef6:	f383 8811 	msr	BASEPRI, r3
 8018efa:	f3bf 8f6f 	isb	sy
 8018efe:	f3bf 8f4f 	dsb	sy
 8018f02:	b662      	cpsie	i
 8018f04:	60bb      	str	r3, [r7, #8]
}
 8018f06:	bf00      	nop
 8018f08:	e7fe      	b.n	8018f08 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8018f0a:	4b12      	ldr	r3, [pc, #72]	; (8018f54 <vTaskSuspend+0x120>)
 8018f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f10:	601a      	str	r2, [r3, #0]
 8018f12:	f3bf 8f4f 	dsb	sy
 8018f16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018f1a:	e00b      	b.n	8018f34 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018f1c:	4b0a      	ldr	r3, [pc, #40]	; (8018f48 <vTaskSuspend+0x114>)
 8018f1e:	681a      	ldr	r2, [r3, #0]
 8018f20:	4b0d      	ldr	r3, [pc, #52]	; (8018f58 <vTaskSuspend+0x124>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d103      	bne.n	8018f30 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8018f28:	4b04      	ldr	r3, [pc, #16]	; (8018f3c <vTaskSuspend+0x108>)
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	601a      	str	r2, [r3, #0]
	}
 8018f2e:	e001      	b.n	8018f34 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8018f30:	f000 fb08 	bl	8019544 <vTaskSwitchContext>
	}
 8018f34:	bf00      	nop
 8018f36:	3710      	adds	r7, #16
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	20002dc4 	.word	0x20002dc4
 8018f40:	20002dc8 	.word	0x20002dc8
 8018f44:	20002ecc 	.word	0x20002ecc
 8018f48:	20002eb0 	.word	0x20002eb0
 8018f4c:	20002ed0 	.word	0x20002ed0
 8018f50:	20002eec 	.word	0x20002eec
 8018f54:	e000ed04 	.word	0xe000ed04
 8018f58:	20002ec4 	.word	0x20002ec4

08018f5c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018f5c:	b480      	push	{r7}
 8018f5e:	b087      	sub	sp, #28
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018f64:	2300      	movs	r3, #0
 8018f66:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d10c      	bne.n	8018f8c <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8018f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f76:	b672      	cpsid	i
 8018f78:	f383 8811 	msr	BASEPRI, r3
 8018f7c:	f3bf 8f6f 	isb	sy
 8018f80:	f3bf 8f4f 	dsb	sy
 8018f84:	b662      	cpsie	i
 8018f86:	60fb      	str	r3, [r7, #12]
}
 8018f88:	bf00      	nop
 8018f8a:	e7fe      	b.n	8018f8a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	695b      	ldr	r3, [r3, #20]
 8018f90:	4a0a      	ldr	r2, [pc, #40]	; (8018fbc <prvTaskIsTaskSuspended+0x60>)
 8018f92:	4293      	cmp	r3, r2
 8018f94:	d10a      	bne.n	8018fac <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f9a:	4a09      	ldr	r2, [pc, #36]	; (8018fc0 <prvTaskIsTaskSuspended+0x64>)
 8018f9c:	4293      	cmp	r3, r2
 8018f9e:	d005      	beq.n	8018fac <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018fa0:	693b      	ldr	r3, [r7, #16]
 8018fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d101      	bne.n	8018fac <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8018fa8:	2301      	movs	r3, #1
 8018faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018fac:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018fae:	4618      	mov	r0, r3
 8018fb0:	371c      	adds	r7, #28
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb8:	4770      	bx	lr
 8018fba:	bf00      	nop
 8018fbc:	20002eb0 	.word	0x20002eb0
 8018fc0:	20002e84 	.word	0x20002e84

08018fc4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b084      	sub	sp, #16
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d10c      	bne.n	8018ff0 <vTaskResume+0x2c>
	__asm volatile
 8018fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fda:	b672      	cpsid	i
 8018fdc:	f383 8811 	msr	BASEPRI, r3
 8018fe0:	f3bf 8f6f 	isb	sy
 8018fe4:	f3bf 8f4f 	dsb	sy
 8018fe8:	b662      	cpsie	i
 8018fea:	60bb      	str	r3, [r7, #8]
}
 8018fec:	bf00      	nop
 8018fee:	e7fe      	b.n	8018fee <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018ff0:	4b20      	ldr	r3, [pc, #128]	; (8019074 <vTaskResume+0xb0>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	68fa      	ldr	r2, [r7, #12]
 8018ff6:	429a      	cmp	r2, r3
 8018ff8:	d037      	beq.n	801906a <vTaskResume+0xa6>
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d034      	beq.n	801906a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8019000:	f001 fcc4 	bl	801a98c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8019004:	68f8      	ldr	r0, [r7, #12]
 8019006:	f7ff ffa9 	bl	8018f5c <prvTaskIsTaskSuspended>
 801900a:	4603      	mov	r3, r0
 801900c:	2b00      	cmp	r3, #0
 801900e:	d02a      	beq.n	8019066 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	3304      	adds	r3, #4
 8019014:	4618      	mov	r0, r3
 8019016:	f7fe fe9b 	bl	8017d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801901e:	2201      	movs	r2, #1
 8019020:	409a      	lsls	r2, r3
 8019022:	4b15      	ldr	r3, [pc, #84]	; (8019078 <vTaskResume+0xb4>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	4313      	orrs	r3, r2
 8019028:	4a13      	ldr	r2, [pc, #76]	; (8019078 <vTaskResume+0xb4>)
 801902a:	6013      	str	r3, [r2, #0]
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019030:	4613      	mov	r3, r2
 8019032:	009b      	lsls	r3, r3, #2
 8019034:	4413      	add	r3, r2
 8019036:	009b      	lsls	r3, r3, #2
 8019038:	4a10      	ldr	r2, [pc, #64]	; (801907c <vTaskResume+0xb8>)
 801903a:	441a      	add	r2, r3
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	3304      	adds	r3, #4
 8019040:	4619      	mov	r1, r3
 8019042:	4610      	mov	r0, r2
 8019044:	f7fe fe27 	bl	8017c96 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801904c:	4b09      	ldr	r3, [pc, #36]	; (8019074 <vTaskResume+0xb0>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019052:	429a      	cmp	r2, r3
 8019054:	d307      	bcc.n	8019066 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8019056:	4b0a      	ldr	r3, [pc, #40]	; (8019080 <vTaskResume+0xbc>)
 8019058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801905c:	601a      	str	r2, [r3, #0]
 801905e:	f3bf 8f4f 	dsb	sy
 8019062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8019066:	f001 fcc5 	bl	801a9f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801906a:	bf00      	nop
 801906c:	3710      	adds	r7, #16
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}
 8019072:	bf00      	nop
 8019074:	20002dc4 	.word	0x20002dc4
 8019078:	20002ecc 	.word	0x20002ecc
 801907c:	20002dc8 	.word	0x20002dc8
 8019080:	e000ed04 	.word	0xe000ed04

08019084 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8019084:	b580      	push	{r7, lr}
 8019086:	b08a      	sub	sp, #40	; 0x28
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801908c:	2300      	movs	r3, #0
 801908e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d10c      	bne.n	80190b4 <xTaskResumeFromISR+0x30>
	__asm volatile
 801909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801909e:	b672      	cpsid	i
 80190a0:	f383 8811 	msr	BASEPRI, r3
 80190a4:	f3bf 8f6f 	isb	sy
 80190a8:	f3bf 8f4f 	dsb	sy
 80190ac:	b662      	cpsie	i
 80190ae:	61bb      	str	r3, [r7, #24]
}
 80190b0:	bf00      	nop
 80190b2:	e7fe      	b.n	80190b2 <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80190b4:	f001 fd52 	bl	801ab5c <vPortValidateInterruptPriority>
	__asm volatile
 80190b8:	f3ef 8211 	mrs	r2, BASEPRI
 80190bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c0:	b672      	cpsid	i
 80190c2:	f383 8811 	msr	BASEPRI, r3
 80190c6:	f3bf 8f6f 	isb	sy
 80190ca:	f3bf 8f4f 	dsb	sy
 80190ce:	b662      	cpsie	i
 80190d0:	617a      	str	r2, [r7, #20]
 80190d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80190d4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80190d6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80190d8:	6a38      	ldr	r0, [r7, #32]
 80190da:	f7ff ff3f 	bl	8018f5c <prvTaskIsTaskSuspended>
 80190de:	4603      	mov	r3, r0
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d02f      	beq.n	8019144 <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80190e4:	4b1d      	ldr	r3, [pc, #116]	; (801915c <xTaskResumeFromISR+0xd8>)
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d125      	bne.n	8019138 <xTaskResumeFromISR+0xb4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80190ec:	6a3b      	ldr	r3, [r7, #32]
 80190ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190f0:	4b1b      	ldr	r3, [pc, #108]	; (8019160 <xTaskResumeFromISR+0xdc>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190f6:	429a      	cmp	r2, r3
 80190f8:	d301      	bcc.n	80190fe <xTaskResumeFromISR+0x7a>
					{
						xYieldRequired = pdTRUE;
 80190fa:	2301      	movs	r3, #1
 80190fc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190fe:	6a3b      	ldr	r3, [r7, #32]
 8019100:	3304      	adds	r3, #4
 8019102:	4618      	mov	r0, r3
 8019104:	f7fe fe24 	bl	8017d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019108:	6a3b      	ldr	r3, [r7, #32]
 801910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801910c:	2201      	movs	r2, #1
 801910e:	409a      	lsls	r2, r3
 8019110:	4b14      	ldr	r3, [pc, #80]	; (8019164 <xTaskResumeFromISR+0xe0>)
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4313      	orrs	r3, r2
 8019116:	4a13      	ldr	r2, [pc, #76]	; (8019164 <xTaskResumeFromISR+0xe0>)
 8019118:	6013      	str	r3, [r2, #0]
 801911a:	6a3b      	ldr	r3, [r7, #32]
 801911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801911e:	4613      	mov	r3, r2
 8019120:	009b      	lsls	r3, r3, #2
 8019122:	4413      	add	r3, r2
 8019124:	009b      	lsls	r3, r3, #2
 8019126:	4a10      	ldr	r2, [pc, #64]	; (8019168 <xTaskResumeFromISR+0xe4>)
 8019128:	441a      	add	r2, r3
 801912a:	6a3b      	ldr	r3, [r7, #32]
 801912c:	3304      	adds	r3, #4
 801912e:	4619      	mov	r1, r3
 8019130:	4610      	mov	r0, r2
 8019132:	f7fe fdb0 	bl	8017c96 <vListInsertEnd>
 8019136:	e005      	b.n	8019144 <xTaskResumeFromISR+0xc0>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8019138:	6a3b      	ldr	r3, [r7, #32]
 801913a:	3318      	adds	r3, #24
 801913c:	4619      	mov	r1, r3
 801913e:	480b      	ldr	r0, [pc, #44]	; (801916c <xTaskResumeFromISR+0xe8>)
 8019140:	f7fe fda9 	bl	8017c96 <vListInsertEnd>
 8019144:	69fb      	ldr	r3, [r7, #28]
 8019146:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	f383 8811 	msr	BASEPRI, r3
}
 801914e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8019150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019152:	4618      	mov	r0, r3
 8019154:	3728      	adds	r7, #40	; 0x28
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	20002eec 	.word	0x20002eec
 8019160:	20002dc4 	.word	0x20002dc4
 8019164:	20002ecc 	.word	0x20002ecc
 8019168:	20002dc8 	.word	0x20002dc8
 801916c:	20002e84 	.word	0x20002e84

08019170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b08a      	sub	sp, #40	; 0x28
 8019174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019176:	2300      	movs	r3, #0
 8019178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801917a:	2300      	movs	r3, #0
 801917c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801917e:	463a      	mov	r2, r7
 8019180:	1d39      	adds	r1, r7, #4
 8019182:	f107 0308 	add.w	r3, r7, #8
 8019186:	4618      	mov	r0, r3
 8019188:	f7e8 fe66 	bl	8001e58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801918c:	6839      	ldr	r1, [r7, #0]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	68ba      	ldr	r2, [r7, #8]
 8019192:	9202      	str	r2, [sp, #8]
 8019194:	9301      	str	r3, [sp, #4]
 8019196:	2300      	movs	r3, #0
 8019198:	9300      	str	r3, [sp, #0]
 801919a:	2300      	movs	r3, #0
 801919c:	460a      	mov	r2, r1
 801919e:	4926      	ldr	r1, [pc, #152]	; (8019238 <vTaskStartScheduler+0xc8>)
 80191a0:	4826      	ldr	r0, [pc, #152]	; (801923c <vTaskStartScheduler+0xcc>)
 80191a2:	f7ff fbcd 	bl	8018940 <xTaskCreateStatic>
 80191a6:	4603      	mov	r3, r0
 80191a8:	4a25      	ldr	r2, [pc, #148]	; (8019240 <vTaskStartScheduler+0xd0>)
 80191aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80191ac:	4b24      	ldr	r3, [pc, #144]	; (8019240 <vTaskStartScheduler+0xd0>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d002      	beq.n	80191ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80191b4:	2301      	movs	r3, #1
 80191b6:	617b      	str	r3, [r7, #20]
 80191b8:	e001      	b.n	80191be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80191ba:	2300      	movs	r3, #0
 80191bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	d102      	bne.n	80191ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80191c4:	f000 fef6 	bl	8019fb4 <xTimerCreateTimerTask>
 80191c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	2b01      	cmp	r3, #1
 80191ce:	d11d      	bne.n	801920c <vTaskStartScheduler+0x9c>
	__asm volatile
 80191d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191d4:	b672      	cpsid	i
 80191d6:	f383 8811 	msr	BASEPRI, r3
 80191da:	f3bf 8f6f 	isb	sy
 80191de:	f3bf 8f4f 	dsb	sy
 80191e2:	b662      	cpsie	i
 80191e4:	613b      	str	r3, [r7, #16]
}
 80191e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80191e8:	4b16      	ldr	r3, [pc, #88]	; (8019244 <vTaskStartScheduler+0xd4>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	334c      	adds	r3, #76	; 0x4c
 80191ee:	4a16      	ldr	r2, [pc, #88]	; (8019248 <vTaskStartScheduler+0xd8>)
 80191f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80191f2:	4b16      	ldr	r3, [pc, #88]	; (801924c <vTaskStartScheduler+0xdc>)
 80191f4:	f04f 32ff 	mov.w	r2, #4294967295
 80191f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80191fa:	4b15      	ldr	r3, [pc, #84]	; (8019250 <vTaskStartScheduler+0xe0>)
 80191fc:	2201      	movs	r2, #1
 80191fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019200:	4b14      	ldr	r3, [pc, #80]	; (8019254 <vTaskStartScheduler+0xe4>)
 8019202:	2200      	movs	r2, #0
 8019204:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019206:	f001 fb43 	bl	801a890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801920a:	e010      	b.n	801922e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801920c:	697b      	ldr	r3, [r7, #20]
 801920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019212:	d10c      	bne.n	801922e <vTaskStartScheduler+0xbe>
	__asm volatile
 8019214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019218:	b672      	cpsid	i
 801921a:	f383 8811 	msr	BASEPRI, r3
 801921e:	f3bf 8f6f 	isb	sy
 8019222:	f3bf 8f4f 	dsb	sy
 8019226:	b662      	cpsie	i
 8019228:	60fb      	str	r3, [r7, #12]
}
 801922a:	bf00      	nop
 801922c:	e7fe      	b.n	801922c <vTaskStartScheduler+0xbc>
}
 801922e:	bf00      	nop
 8019230:	3718      	adds	r7, #24
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}
 8019236:	bf00      	nop
 8019238:	08020598 	.word	0x08020598
 801923c:	0801988d 	.word	0x0801988d
 8019240:	20002ee8 	.word	0x20002ee8
 8019244:	20002dc4 	.word	0x20002dc4
 8019248:	2000006c 	.word	0x2000006c
 801924c:	20002ee4 	.word	0x20002ee4
 8019250:	20002ed0 	.word	0x20002ed0
 8019254:	20002ec8 	.word	0x20002ec8

08019258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019258:	b480      	push	{r7}
 801925a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801925c:	4b04      	ldr	r3, [pc, #16]	; (8019270 <vTaskSuspendAll+0x18>)
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	3301      	adds	r3, #1
 8019262:	4a03      	ldr	r2, [pc, #12]	; (8019270 <vTaskSuspendAll+0x18>)
 8019264:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8019266:	bf00      	nop
 8019268:	46bd      	mov	sp, r7
 801926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926e:	4770      	bx	lr
 8019270:	20002eec 	.word	0x20002eec

08019274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b084      	sub	sp, #16
 8019278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801927a:	2300      	movs	r3, #0
 801927c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801927e:	2300      	movs	r3, #0
 8019280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019282:	4b42      	ldr	r3, [pc, #264]	; (801938c <xTaskResumeAll+0x118>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d10c      	bne.n	80192a4 <xTaskResumeAll+0x30>
	__asm volatile
 801928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801928e:	b672      	cpsid	i
 8019290:	f383 8811 	msr	BASEPRI, r3
 8019294:	f3bf 8f6f 	isb	sy
 8019298:	f3bf 8f4f 	dsb	sy
 801929c:	b662      	cpsie	i
 801929e:	603b      	str	r3, [r7, #0]
}
 80192a0:	bf00      	nop
 80192a2:	e7fe      	b.n	80192a2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80192a4:	f001 fb72 	bl	801a98c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80192a8:	4b38      	ldr	r3, [pc, #224]	; (801938c <xTaskResumeAll+0x118>)
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	3b01      	subs	r3, #1
 80192ae:	4a37      	ldr	r2, [pc, #220]	; (801938c <xTaskResumeAll+0x118>)
 80192b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80192b2:	4b36      	ldr	r3, [pc, #216]	; (801938c <xTaskResumeAll+0x118>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d161      	bne.n	801937e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80192ba:	4b35      	ldr	r3, [pc, #212]	; (8019390 <xTaskResumeAll+0x11c>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d05d      	beq.n	801937e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80192c2:	e02e      	b.n	8019322 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80192c4:	4b33      	ldr	r3, [pc, #204]	; (8019394 <xTaskResumeAll+0x120>)
 80192c6:	68db      	ldr	r3, [r3, #12]
 80192c8:	68db      	ldr	r3, [r3, #12]
 80192ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	3318      	adds	r3, #24
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7fe fd3d 	bl	8017d50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	3304      	adds	r3, #4
 80192da:	4618      	mov	r0, r3
 80192dc:	f7fe fd38 	bl	8017d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192e4:	2201      	movs	r2, #1
 80192e6:	409a      	lsls	r2, r3
 80192e8:	4b2b      	ldr	r3, [pc, #172]	; (8019398 <xTaskResumeAll+0x124>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	4313      	orrs	r3, r2
 80192ee:	4a2a      	ldr	r2, [pc, #168]	; (8019398 <xTaskResumeAll+0x124>)
 80192f0:	6013      	str	r3, [r2, #0]
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192f6:	4613      	mov	r3, r2
 80192f8:	009b      	lsls	r3, r3, #2
 80192fa:	4413      	add	r3, r2
 80192fc:	009b      	lsls	r3, r3, #2
 80192fe:	4a27      	ldr	r2, [pc, #156]	; (801939c <xTaskResumeAll+0x128>)
 8019300:	441a      	add	r2, r3
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	3304      	adds	r3, #4
 8019306:	4619      	mov	r1, r3
 8019308:	4610      	mov	r0, r2
 801930a:	f7fe fcc4 	bl	8017c96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019312:	4b23      	ldr	r3, [pc, #140]	; (80193a0 <xTaskResumeAll+0x12c>)
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019318:	429a      	cmp	r2, r3
 801931a:	d302      	bcc.n	8019322 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801931c:	4b21      	ldr	r3, [pc, #132]	; (80193a4 <xTaskResumeAll+0x130>)
 801931e:	2201      	movs	r2, #1
 8019320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019322:	4b1c      	ldr	r3, [pc, #112]	; (8019394 <xTaskResumeAll+0x120>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d1cc      	bne.n	80192c4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d001      	beq.n	8019334 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019330:	f000 fb68 	bl	8019a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8019334:	4b1c      	ldr	r3, [pc, #112]	; (80193a8 <xTaskResumeAll+0x134>)
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d010      	beq.n	8019362 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019340:	f000 f846 	bl	80193d0 <xTaskIncrementTick>
 8019344:	4603      	mov	r3, r0
 8019346:	2b00      	cmp	r3, #0
 8019348:	d002      	beq.n	8019350 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801934a:	4b16      	ldr	r3, [pc, #88]	; (80193a4 <xTaskResumeAll+0x130>)
 801934c:	2201      	movs	r2, #1
 801934e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	3b01      	subs	r3, #1
 8019354:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d1f1      	bne.n	8019340 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801935c:	4b12      	ldr	r3, [pc, #72]	; (80193a8 <xTaskResumeAll+0x134>)
 801935e:	2200      	movs	r2, #0
 8019360:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019362:	4b10      	ldr	r3, [pc, #64]	; (80193a4 <xTaskResumeAll+0x130>)
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d009      	beq.n	801937e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801936a:	2301      	movs	r3, #1
 801936c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801936e:	4b0f      	ldr	r3, [pc, #60]	; (80193ac <xTaskResumeAll+0x138>)
 8019370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019374:	601a      	str	r2, [r3, #0]
 8019376:	f3bf 8f4f 	dsb	sy
 801937a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801937e:	f001 fb39 	bl	801a9f4 <vPortExitCritical>

	return xAlreadyYielded;
 8019382:	68bb      	ldr	r3, [r7, #8]
}
 8019384:	4618      	mov	r0, r3
 8019386:	3710      	adds	r7, #16
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	20002eec 	.word	0x20002eec
 8019390:	20002ec4 	.word	0x20002ec4
 8019394:	20002e84 	.word	0x20002e84
 8019398:	20002ecc 	.word	0x20002ecc
 801939c:	20002dc8 	.word	0x20002dc8
 80193a0:	20002dc4 	.word	0x20002dc4
 80193a4:	20002ed8 	.word	0x20002ed8
 80193a8:	20002ed4 	.word	0x20002ed4
 80193ac:	e000ed04 	.word	0xe000ed04

080193b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80193b6:	4b05      	ldr	r3, [pc, #20]	; (80193cc <xTaskGetTickCount+0x1c>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80193bc:	687b      	ldr	r3, [r7, #4]
}
 80193be:	4618      	mov	r0, r3
 80193c0:	370c      	adds	r7, #12
 80193c2:	46bd      	mov	sp, r7
 80193c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c8:	4770      	bx	lr
 80193ca:	bf00      	nop
 80193cc:	20002ec8 	.word	0x20002ec8

080193d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b086      	sub	sp, #24
 80193d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80193d6:	2300      	movs	r3, #0
 80193d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80193da:	4b4f      	ldr	r3, [pc, #316]	; (8019518 <xTaskIncrementTick+0x148>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	f040 808a 	bne.w	80194f8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80193e4:	4b4d      	ldr	r3, [pc, #308]	; (801951c <xTaskIncrementTick+0x14c>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	3301      	adds	r3, #1
 80193ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80193ec:	4a4b      	ldr	r2, [pc, #300]	; (801951c <xTaskIncrementTick+0x14c>)
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80193f2:	693b      	ldr	r3, [r7, #16]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d122      	bne.n	801943e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80193f8:	4b49      	ldr	r3, [pc, #292]	; (8019520 <xTaskIncrementTick+0x150>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d00c      	beq.n	801941c <xTaskIncrementTick+0x4c>
	__asm volatile
 8019402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019406:	b672      	cpsid	i
 8019408:	f383 8811 	msr	BASEPRI, r3
 801940c:	f3bf 8f6f 	isb	sy
 8019410:	f3bf 8f4f 	dsb	sy
 8019414:	b662      	cpsie	i
 8019416:	603b      	str	r3, [r7, #0]
}
 8019418:	bf00      	nop
 801941a:	e7fe      	b.n	801941a <xTaskIncrementTick+0x4a>
 801941c:	4b40      	ldr	r3, [pc, #256]	; (8019520 <xTaskIncrementTick+0x150>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	60fb      	str	r3, [r7, #12]
 8019422:	4b40      	ldr	r3, [pc, #256]	; (8019524 <xTaskIncrementTick+0x154>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	4a3e      	ldr	r2, [pc, #248]	; (8019520 <xTaskIncrementTick+0x150>)
 8019428:	6013      	str	r3, [r2, #0]
 801942a:	4a3e      	ldr	r2, [pc, #248]	; (8019524 <xTaskIncrementTick+0x154>)
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	6013      	str	r3, [r2, #0]
 8019430:	4b3d      	ldr	r3, [pc, #244]	; (8019528 <xTaskIncrementTick+0x158>)
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	3301      	adds	r3, #1
 8019436:	4a3c      	ldr	r2, [pc, #240]	; (8019528 <xTaskIncrementTick+0x158>)
 8019438:	6013      	str	r3, [r2, #0]
 801943a:	f000 fae3 	bl	8019a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801943e:	4b3b      	ldr	r3, [pc, #236]	; (801952c <xTaskIncrementTick+0x15c>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	693a      	ldr	r2, [r7, #16]
 8019444:	429a      	cmp	r2, r3
 8019446:	d348      	bcc.n	80194da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019448:	4b35      	ldr	r3, [pc, #212]	; (8019520 <xTaskIncrementTick+0x150>)
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d104      	bne.n	801945c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019452:	4b36      	ldr	r3, [pc, #216]	; (801952c <xTaskIncrementTick+0x15c>)
 8019454:	f04f 32ff 	mov.w	r2, #4294967295
 8019458:	601a      	str	r2, [r3, #0]
					break;
 801945a:	e03e      	b.n	80194da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801945c:	4b30      	ldr	r3, [pc, #192]	; (8019520 <xTaskIncrementTick+0x150>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	68db      	ldr	r3, [r3, #12]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019466:	68bb      	ldr	r3, [r7, #8]
 8019468:	685b      	ldr	r3, [r3, #4]
 801946a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801946c:	693a      	ldr	r2, [r7, #16]
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	429a      	cmp	r2, r3
 8019472:	d203      	bcs.n	801947c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019474:	4a2d      	ldr	r2, [pc, #180]	; (801952c <xTaskIncrementTick+0x15c>)
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801947a:	e02e      	b.n	80194da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801947c:	68bb      	ldr	r3, [r7, #8]
 801947e:	3304      	adds	r3, #4
 8019480:	4618      	mov	r0, r3
 8019482:	f7fe fc65 	bl	8017d50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801948a:	2b00      	cmp	r3, #0
 801948c:	d004      	beq.n	8019498 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801948e:	68bb      	ldr	r3, [r7, #8]
 8019490:	3318      	adds	r3, #24
 8019492:	4618      	mov	r0, r3
 8019494:	f7fe fc5c 	bl	8017d50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801949c:	2201      	movs	r2, #1
 801949e:	409a      	lsls	r2, r3
 80194a0:	4b23      	ldr	r3, [pc, #140]	; (8019530 <xTaskIncrementTick+0x160>)
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	4313      	orrs	r3, r2
 80194a6:	4a22      	ldr	r2, [pc, #136]	; (8019530 <xTaskIncrementTick+0x160>)
 80194a8:	6013      	str	r3, [r2, #0]
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194ae:	4613      	mov	r3, r2
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	4413      	add	r3, r2
 80194b4:	009b      	lsls	r3, r3, #2
 80194b6:	4a1f      	ldr	r2, [pc, #124]	; (8019534 <xTaskIncrementTick+0x164>)
 80194b8:	441a      	add	r2, r3
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	3304      	adds	r3, #4
 80194be:	4619      	mov	r1, r3
 80194c0:	4610      	mov	r0, r2
 80194c2:	f7fe fbe8 	bl	8017c96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194ca:	4b1b      	ldr	r3, [pc, #108]	; (8019538 <xTaskIncrementTick+0x168>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d3b9      	bcc.n	8019448 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80194d4:	2301      	movs	r3, #1
 80194d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80194d8:	e7b6      	b.n	8019448 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80194da:	4b17      	ldr	r3, [pc, #92]	; (8019538 <xTaskIncrementTick+0x168>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194e0:	4914      	ldr	r1, [pc, #80]	; (8019534 <xTaskIncrementTick+0x164>)
 80194e2:	4613      	mov	r3, r2
 80194e4:	009b      	lsls	r3, r3, #2
 80194e6:	4413      	add	r3, r2
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	440b      	add	r3, r1
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	d907      	bls.n	8019502 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80194f2:	2301      	movs	r3, #1
 80194f4:	617b      	str	r3, [r7, #20]
 80194f6:	e004      	b.n	8019502 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80194f8:	4b10      	ldr	r3, [pc, #64]	; (801953c <xTaskIncrementTick+0x16c>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	3301      	adds	r3, #1
 80194fe:	4a0f      	ldr	r2, [pc, #60]	; (801953c <xTaskIncrementTick+0x16c>)
 8019500:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019502:	4b0f      	ldr	r3, [pc, #60]	; (8019540 <xTaskIncrementTick+0x170>)
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d001      	beq.n	801950e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801950a:	2301      	movs	r3, #1
 801950c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801950e:	697b      	ldr	r3, [r7, #20]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3718      	adds	r7, #24
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	20002eec 	.word	0x20002eec
 801951c:	20002ec8 	.word	0x20002ec8
 8019520:	20002e7c 	.word	0x20002e7c
 8019524:	20002e80 	.word	0x20002e80
 8019528:	20002edc 	.word	0x20002edc
 801952c:	20002ee4 	.word	0x20002ee4
 8019530:	20002ecc 	.word	0x20002ecc
 8019534:	20002dc8 	.word	0x20002dc8
 8019538:	20002dc4 	.word	0x20002dc4
 801953c:	20002ed4 	.word	0x20002ed4
 8019540:	20002ed8 	.word	0x20002ed8

08019544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019544:	b480      	push	{r7}
 8019546:	b087      	sub	sp, #28
 8019548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801954a:	4b2a      	ldr	r3, [pc, #168]	; (80195f4 <vTaskSwitchContext+0xb0>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d003      	beq.n	801955a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019552:	4b29      	ldr	r3, [pc, #164]	; (80195f8 <vTaskSwitchContext+0xb4>)
 8019554:	2201      	movs	r2, #1
 8019556:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019558:	e046      	b.n	80195e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801955a:	4b27      	ldr	r3, [pc, #156]	; (80195f8 <vTaskSwitchContext+0xb4>)
 801955c:	2200      	movs	r2, #0
 801955e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019560:	4b26      	ldr	r3, [pc, #152]	; (80195fc <vTaskSwitchContext+0xb8>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	fab3 f383 	clz	r3, r3
 801956c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801956e:	7afb      	ldrb	r3, [r7, #11]
 8019570:	f1c3 031f 	rsb	r3, r3, #31
 8019574:	617b      	str	r3, [r7, #20]
 8019576:	4922      	ldr	r1, [pc, #136]	; (8019600 <vTaskSwitchContext+0xbc>)
 8019578:	697a      	ldr	r2, [r7, #20]
 801957a:	4613      	mov	r3, r2
 801957c:	009b      	lsls	r3, r3, #2
 801957e:	4413      	add	r3, r2
 8019580:	009b      	lsls	r3, r3, #2
 8019582:	440b      	add	r3, r1
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d10c      	bne.n	80195a4 <vTaskSwitchContext+0x60>
	__asm volatile
 801958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801958e:	b672      	cpsid	i
 8019590:	f383 8811 	msr	BASEPRI, r3
 8019594:	f3bf 8f6f 	isb	sy
 8019598:	f3bf 8f4f 	dsb	sy
 801959c:	b662      	cpsie	i
 801959e:	607b      	str	r3, [r7, #4]
}
 80195a0:	bf00      	nop
 80195a2:	e7fe      	b.n	80195a2 <vTaskSwitchContext+0x5e>
 80195a4:	697a      	ldr	r2, [r7, #20]
 80195a6:	4613      	mov	r3, r2
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	4413      	add	r3, r2
 80195ac:	009b      	lsls	r3, r3, #2
 80195ae:	4a14      	ldr	r2, [pc, #80]	; (8019600 <vTaskSwitchContext+0xbc>)
 80195b0:	4413      	add	r3, r2
 80195b2:	613b      	str	r3, [r7, #16]
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	685b      	ldr	r3, [r3, #4]
 80195b8:	685a      	ldr	r2, [r3, #4]
 80195ba:	693b      	ldr	r3, [r7, #16]
 80195bc:	605a      	str	r2, [r3, #4]
 80195be:	693b      	ldr	r3, [r7, #16]
 80195c0:	685a      	ldr	r2, [r3, #4]
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	3308      	adds	r3, #8
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d104      	bne.n	80195d4 <vTaskSwitchContext+0x90>
 80195ca:	693b      	ldr	r3, [r7, #16]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	685a      	ldr	r2, [r3, #4]
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	605a      	str	r2, [r3, #4]
 80195d4:	693b      	ldr	r3, [r7, #16]
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	68db      	ldr	r3, [r3, #12]
 80195da:	4a0a      	ldr	r2, [pc, #40]	; (8019604 <vTaskSwitchContext+0xc0>)
 80195dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80195de:	4b09      	ldr	r3, [pc, #36]	; (8019604 <vTaskSwitchContext+0xc0>)
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	334c      	adds	r3, #76	; 0x4c
 80195e4:	4a08      	ldr	r2, [pc, #32]	; (8019608 <vTaskSwitchContext+0xc4>)
 80195e6:	6013      	str	r3, [r2, #0]
}
 80195e8:	bf00      	nop
 80195ea:	371c      	adds	r7, #28
 80195ec:	46bd      	mov	sp, r7
 80195ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f2:	4770      	bx	lr
 80195f4:	20002eec 	.word	0x20002eec
 80195f8:	20002ed8 	.word	0x20002ed8
 80195fc:	20002ecc 	.word	0x20002ecc
 8019600:	20002dc8 	.word	0x20002dc8
 8019604:	20002dc4 	.word	0x20002dc4
 8019608:	2000006c 	.word	0x2000006c

0801960c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b084      	sub	sp, #16
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
 8019614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d10c      	bne.n	8019636 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019620:	b672      	cpsid	i
 8019622:	f383 8811 	msr	BASEPRI, r3
 8019626:	f3bf 8f6f 	isb	sy
 801962a:	f3bf 8f4f 	dsb	sy
 801962e:	b662      	cpsie	i
 8019630:	60fb      	str	r3, [r7, #12]
}
 8019632:	bf00      	nop
 8019634:	e7fe      	b.n	8019634 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019636:	4b07      	ldr	r3, [pc, #28]	; (8019654 <vTaskPlaceOnEventList+0x48>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	3318      	adds	r3, #24
 801963c:	4619      	mov	r1, r3
 801963e:	6878      	ldr	r0, [r7, #4]
 8019640:	f7fe fb4d 	bl	8017cde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019644:	2101      	movs	r1, #1
 8019646:	6838      	ldr	r0, [r7, #0]
 8019648:	f000 fc4e 	bl	8019ee8 <prvAddCurrentTaskToDelayedList>
}
 801964c:	bf00      	nop
 801964e:	3710      	adds	r7, #16
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	20002dc4 	.word	0x20002dc4

08019658 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019658:	b580      	push	{r7, lr}
 801965a:	b086      	sub	sp, #24
 801965c:	af00      	add	r7, sp, #0
 801965e:	60f8      	str	r0, [r7, #12]
 8019660:	60b9      	str	r1, [r7, #8]
 8019662:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d10c      	bne.n	8019684 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 801966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801966e:	b672      	cpsid	i
 8019670:	f383 8811 	msr	BASEPRI, r3
 8019674:	f3bf 8f6f 	isb	sy
 8019678:	f3bf 8f4f 	dsb	sy
 801967c:	b662      	cpsie	i
 801967e:	617b      	str	r3, [r7, #20]
}
 8019680:	bf00      	nop
 8019682:	e7fe      	b.n	8019682 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019684:	4b0a      	ldr	r3, [pc, #40]	; (80196b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	3318      	adds	r3, #24
 801968a:	4619      	mov	r1, r3
 801968c:	68f8      	ldr	r0, [r7, #12]
 801968e:	f7fe fb02 	bl	8017c96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d002      	beq.n	801969e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8019698:	f04f 33ff 	mov.w	r3, #4294967295
 801969c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801969e:	6879      	ldr	r1, [r7, #4]
 80196a0:	68b8      	ldr	r0, [r7, #8]
 80196a2:	f000 fc21 	bl	8019ee8 <prvAddCurrentTaskToDelayedList>
	}
 80196a6:	bf00      	nop
 80196a8:	3718      	adds	r7, #24
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
 80196ae:	bf00      	nop
 80196b0:	20002dc4 	.word	0x20002dc4

080196b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b086      	sub	sp, #24
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	68db      	ldr	r3, [r3, #12]
 80196c0:	68db      	ldr	r3, [r3, #12]
 80196c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80196c4:	693b      	ldr	r3, [r7, #16]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d10c      	bne.n	80196e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80196ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196ce:	b672      	cpsid	i
 80196d0:	f383 8811 	msr	BASEPRI, r3
 80196d4:	f3bf 8f6f 	isb	sy
 80196d8:	f3bf 8f4f 	dsb	sy
 80196dc:	b662      	cpsie	i
 80196de:	60fb      	str	r3, [r7, #12]
}
 80196e0:	bf00      	nop
 80196e2:	e7fe      	b.n	80196e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80196e4:	693b      	ldr	r3, [r7, #16]
 80196e6:	3318      	adds	r3, #24
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7fe fb31 	bl	8017d50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80196ee:	4b1d      	ldr	r3, [pc, #116]	; (8019764 <xTaskRemoveFromEventList+0xb0>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d11c      	bne.n	8019730 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80196f6:	693b      	ldr	r3, [r7, #16]
 80196f8:	3304      	adds	r3, #4
 80196fa:	4618      	mov	r0, r3
 80196fc:	f7fe fb28 	bl	8017d50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019700:	693b      	ldr	r3, [r7, #16]
 8019702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019704:	2201      	movs	r2, #1
 8019706:	409a      	lsls	r2, r3
 8019708:	4b17      	ldr	r3, [pc, #92]	; (8019768 <xTaskRemoveFromEventList+0xb4>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	4313      	orrs	r3, r2
 801970e:	4a16      	ldr	r2, [pc, #88]	; (8019768 <xTaskRemoveFromEventList+0xb4>)
 8019710:	6013      	str	r3, [r2, #0]
 8019712:	693b      	ldr	r3, [r7, #16]
 8019714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019716:	4613      	mov	r3, r2
 8019718:	009b      	lsls	r3, r3, #2
 801971a:	4413      	add	r3, r2
 801971c:	009b      	lsls	r3, r3, #2
 801971e:	4a13      	ldr	r2, [pc, #76]	; (801976c <xTaskRemoveFromEventList+0xb8>)
 8019720:	441a      	add	r2, r3
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	3304      	adds	r3, #4
 8019726:	4619      	mov	r1, r3
 8019728:	4610      	mov	r0, r2
 801972a:	f7fe fab4 	bl	8017c96 <vListInsertEnd>
 801972e:	e005      	b.n	801973c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019730:	693b      	ldr	r3, [r7, #16]
 8019732:	3318      	adds	r3, #24
 8019734:	4619      	mov	r1, r3
 8019736:	480e      	ldr	r0, [pc, #56]	; (8019770 <xTaskRemoveFromEventList+0xbc>)
 8019738:	f7fe faad 	bl	8017c96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801973c:	693b      	ldr	r3, [r7, #16]
 801973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019740:	4b0c      	ldr	r3, [pc, #48]	; (8019774 <xTaskRemoveFromEventList+0xc0>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019746:	429a      	cmp	r2, r3
 8019748:	d905      	bls.n	8019756 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801974a:	2301      	movs	r3, #1
 801974c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801974e:	4b0a      	ldr	r3, [pc, #40]	; (8019778 <xTaskRemoveFromEventList+0xc4>)
 8019750:	2201      	movs	r2, #1
 8019752:	601a      	str	r2, [r3, #0]
 8019754:	e001      	b.n	801975a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8019756:	2300      	movs	r3, #0
 8019758:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801975a:	697b      	ldr	r3, [r7, #20]
}
 801975c:	4618      	mov	r0, r3
 801975e:	3718      	adds	r7, #24
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}
 8019764:	20002eec 	.word	0x20002eec
 8019768:	20002ecc 	.word	0x20002ecc
 801976c:	20002dc8 	.word	0x20002dc8
 8019770:	20002e84 	.word	0x20002e84
 8019774:	20002dc4 	.word	0x20002dc4
 8019778:	20002ed8 	.word	0x20002ed8

0801977c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801977c:	b480      	push	{r7}
 801977e:	b083      	sub	sp, #12
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019784:	4b06      	ldr	r3, [pc, #24]	; (80197a0 <vTaskInternalSetTimeOutState+0x24>)
 8019786:	681a      	ldr	r2, [r3, #0]
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801978c:	4b05      	ldr	r3, [pc, #20]	; (80197a4 <vTaskInternalSetTimeOutState+0x28>)
 801978e:	681a      	ldr	r2, [r3, #0]
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	605a      	str	r2, [r3, #4]
}
 8019794:	bf00      	nop
 8019796:	370c      	adds	r7, #12
 8019798:	46bd      	mov	sp, r7
 801979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979e:	4770      	bx	lr
 80197a0:	20002edc 	.word	0x20002edc
 80197a4:	20002ec8 	.word	0x20002ec8

080197a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b088      	sub	sp, #32
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d10c      	bne.n	80197d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80197b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197bc:	b672      	cpsid	i
 80197be:	f383 8811 	msr	BASEPRI, r3
 80197c2:	f3bf 8f6f 	isb	sy
 80197c6:	f3bf 8f4f 	dsb	sy
 80197ca:	b662      	cpsie	i
 80197cc:	613b      	str	r3, [r7, #16]
}
 80197ce:	bf00      	nop
 80197d0:	e7fe      	b.n	80197d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80197d2:	683b      	ldr	r3, [r7, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d10c      	bne.n	80197f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80197d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197dc:	b672      	cpsid	i
 80197de:	f383 8811 	msr	BASEPRI, r3
 80197e2:	f3bf 8f6f 	isb	sy
 80197e6:	f3bf 8f4f 	dsb	sy
 80197ea:	b662      	cpsie	i
 80197ec:	60fb      	str	r3, [r7, #12]
}
 80197ee:	bf00      	nop
 80197f0:	e7fe      	b.n	80197f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80197f2:	f001 f8cb 	bl	801a98c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80197f6:	4b1d      	ldr	r3, [pc, #116]	; (801986c <xTaskCheckForTimeOut+0xc4>)
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	685b      	ldr	r3, [r3, #4]
 8019800:	69ba      	ldr	r2, [r7, #24]
 8019802:	1ad3      	subs	r3, r2, r3
 8019804:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801980e:	d102      	bne.n	8019816 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019810:	2300      	movs	r3, #0
 8019812:	61fb      	str	r3, [r7, #28]
 8019814:	e023      	b.n	801985e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681a      	ldr	r2, [r3, #0]
 801981a:	4b15      	ldr	r3, [pc, #84]	; (8019870 <xTaskCheckForTimeOut+0xc8>)
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	429a      	cmp	r2, r3
 8019820:	d007      	beq.n	8019832 <xTaskCheckForTimeOut+0x8a>
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	69ba      	ldr	r2, [r7, #24]
 8019828:	429a      	cmp	r2, r3
 801982a:	d302      	bcc.n	8019832 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801982c:	2301      	movs	r3, #1
 801982e:	61fb      	str	r3, [r7, #28]
 8019830:	e015      	b.n	801985e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	697a      	ldr	r2, [r7, #20]
 8019838:	429a      	cmp	r2, r3
 801983a:	d20b      	bcs.n	8019854 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	681a      	ldr	r2, [r3, #0]
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	1ad2      	subs	r2, r2, r3
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f7ff ff97 	bl	801977c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801984e:	2300      	movs	r3, #0
 8019850:	61fb      	str	r3, [r7, #28]
 8019852:	e004      	b.n	801985e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	2200      	movs	r2, #0
 8019858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801985a:	2301      	movs	r3, #1
 801985c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801985e:	f001 f8c9 	bl	801a9f4 <vPortExitCritical>

	return xReturn;
 8019862:	69fb      	ldr	r3, [r7, #28]
}
 8019864:	4618      	mov	r0, r3
 8019866:	3720      	adds	r7, #32
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}
 801986c:	20002ec8 	.word	0x20002ec8
 8019870:	20002edc 	.word	0x20002edc

08019874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019874:	b480      	push	{r7}
 8019876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019878:	4b03      	ldr	r3, [pc, #12]	; (8019888 <vTaskMissedYield+0x14>)
 801987a:	2201      	movs	r2, #1
 801987c:	601a      	str	r2, [r3, #0]
}
 801987e:	bf00      	nop
 8019880:	46bd      	mov	sp, r7
 8019882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019886:	4770      	bx	lr
 8019888:	20002ed8 	.word	0x20002ed8

0801988c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019894:	f000 f852 	bl	801993c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019898:	4b06      	ldr	r3, [pc, #24]	; (80198b4 <prvIdleTask+0x28>)
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	2b01      	cmp	r3, #1
 801989e:	d9f9      	bls.n	8019894 <prvIdleTask+0x8>
			{
				taskYIELD();
 80198a0:	4b05      	ldr	r3, [pc, #20]	; (80198b8 <prvIdleTask+0x2c>)
 80198a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80198a6:	601a      	str	r2, [r3, #0]
 80198a8:	f3bf 8f4f 	dsb	sy
 80198ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80198b0:	e7f0      	b.n	8019894 <prvIdleTask+0x8>
 80198b2:	bf00      	nop
 80198b4:	20002dc8 	.word	0x20002dc8
 80198b8:	e000ed04 	.word	0xe000ed04

080198bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b082      	sub	sp, #8
 80198c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80198c2:	2300      	movs	r3, #0
 80198c4:	607b      	str	r3, [r7, #4]
 80198c6:	e00c      	b.n	80198e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	4613      	mov	r3, r2
 80198cc:	009b      	lsls	r3, r3, #2
 80198ce:	4413      	add	r3, r2
 80198d0:	009b      	lsls	r3, r3, #2
 80198d2:	4a12      	ldr	r2, [pc, #72]	; (801991c <prvInitialiseTaskLists+0x60>)
 80198d4:	4413      	add	r3, r2
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7fe f9b0 	bl	8017c3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	3301      	adds	r3, #1
 80198e0:	607b      	str	r3, [r7, #4]
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	2b06      	cmp	r3, #6
 80198e6:	d9ef      	bls.n	80198c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80198e8:	480d      	ldr	r0, [pc, #52]	; (8019920 <prvInitialiseTaskLists+0x64>)
 80198ea:	f7fe f9a7 	bl	8017c3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80198ee:	480d      	ldr	r0, [pc, #52]	; (8019924 <prvInitialiseTaskLists+0x68>)
 80198f0:	f7fe f9a4 	bl	8017c3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80198f4:	480c      	ldr	r0, [pc, #48]	; (8019928 <prvInitialiseTaskLists+0x6c>)
 80198f6:	f7fe f9a1 	bl	8017c3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80198fa:	480c      	ldr	r0, [pc, #48]	; (801992c <prvInitialiseTaskLists+0x70>)
 80198fc:	f7fe f99e 	bl	8017c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019900:	480b      	ldr	r0, [pc, #44]	; (8019930 <prvInitialiseTaskLists+0x74>)
 8019902:	f7fe f99b 	bl	8017c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019906:	4b0b      	ldr	r3, [pc, #44]	; (8019934 <prvInitialiseTaskLists+0x78>)
 8019908:	4a05      	ldr	r2, [pc, #20]	; (8019920 <prvInitialiseTaskLists+0x64>)
 801990a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801990c:	4b0a      	ldr	r3, [pc, #40]	; (8019938 <prvInitialiseTaskLists+0x7c>)
 801990e:	4a05      	ldr	r2, [pc, #20]	; (8019924 <prvInitialiseTaskLists+0x68>)
 8019910:	601a      	str	r2, [r3, #0]
}
 8019912:	bf00      	nop
 8019914:	3708      	adds	r7, #8
 8019916:	46bd      	mov	sp, r7
 8019918:	bd80      	pop	{r7, pc}
 801991a:	bf00      	nop
 801991c:	20002dc8 	.word	0x20002dc8
 8019920:	20002e54 	.word	0x20002e54
 8019924:	20002e68 	.word	0x20002e68
 8019928:	20002e84 	.word	0x20002e84
 801992c:	20002e98 	.word	0x20002e98
 8019930:	20002eb0 	.word	0x20002eb0
 8019934:	20002e7c 	.word	0x20002e7c
 8019938:	20002e80 	.word	0x20002e80

0801993c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b082      	sub	sp, #8
 8019940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019942:	e019      	b.n	8019978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019944:	f001 f822 	bl	801a98c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019948:	4b10      	ldr	r3, [pc, #64]	; (801998c <prvCheckTasksWaitingTermination+0x50>)
 801994a:	68db      	ldr	r3, [r3, #12]
 801994c:	68db      	ldr	r3, [r3, #12]
 801994e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	3304      	adds	r3, #4
 8019954:	4618      	mov	r0, r3
 8019956:	f7fe f9fb 	bl	8017d50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801995a:	4b0d      	ldr	r3, [pc, #52]	; (8019990 <prvCheckTasksWaitingTermination+0x54>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	3b01      	subs	r3, #1
 8019960:	4a0b      	ldr	r2, [pc, #44]	; (8019990 <prvCheckTasksWaitingTermination+0x54>)
 8019962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019964:	4b0b      	ldr	r3, [pc, #44]	; (8019994 <prvCheckTasksWaitingTermination+0x58>)
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	3b01      	subs	r3, #1
 801996a:	4a0a      	ldr	r2, [pc, #40]	; (8019994 <prvCheckTasksWaitingTermination+0x58>)
 801996c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801996e:	f001 f841 	bl	801a9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019972:	6878      	ldr	r0, [r7, #4]
 8019974:	f000 f810 	bl	8019998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019978:	4b06      	ldr	r3, [pc, #24]	; (8019994 <prvCheckTasksWaitingTermination+0x58>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d1e1      	bne.n	8019944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019980:	bf00      	nop
 8019982:	bf00      	nop
 8019984:	3708      	adds	r7, #8
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}
 801998a:	bf00      	nop
 801998c:	20002e98 	.word	0x20002e98
 8019990:	20002ec4 	.word	0x20002ec4
 8019994:	20002eac 	.word	0x20002eac

08019998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019998:	b580      	push	{r7, lr}
 801999a:	b084      	sub	sp, #16
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	334c      	adds	r3, #76	; 0x4c
 80199a4:	4618      	mov	r0, r3
 80199a6:	f002 fb41 	bl	801c02c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d108      	bne.n	80199c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199b8:	4618      	mov	r0, r3
 80199ba:	f001 f9dd 	bl	801ad78 <vPortFree>
				vPortFree( pxTCB );
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f001 f9da 	bl	801ad78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80199c4:	e01a      	b.n	80199fc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80199cc:	2b01      	cmp	r3, #1
 80199ce:	d103      	bne.n	80199d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80199d0:	6878      	ldr	r0, [r7, #4]
 80199d2:	f001 f9d1 	bl	801ad78 <vPortFree>
	}
 80199d6:	e011      	b.n	80199fc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80199de:	2b02      	cmp	r3, #2
 80199e0:	d00c      	beq.n	80199fc <prvDeleteTCB+0x64>
	__asm volatile
 80199e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e6:	b672      	cpsid	i
 80199e8:	f383 8811 	msr	BASEPRI, r3
 80199ec:	f3bf 8f6f 	isb	sy
 80199f0:	f3bf 8f4f 	dsb	sy
 80199f4:	b662      	cpsie	i
 80199f6:	60fb      	str	r3, [r7, #12]
}
 80199f8:	bf00      	nop
 80199fa:	e7fe      	b.n	80199fa <prvDeleteTCB+0x62>
	}
 80199fc:	bf00      	nop
 80199fe:	3710      	adds	r7, #16
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bd80      	pop	{r7, pc}

08019a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019a04:	b480      	push	{r7}
 8019a06:	b083      	sub	sp, #12
 8019a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019a0a:	4b0c      	ldr	r3, [pc, #48]	; (8019a3c <prvResetNextTaskUnblockTime+0x38>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d104      	bne.n	8019a1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019a14:	4b0a      	ldr	r3, [pc, #40]	; (8019a40 <prvResetNextTaskUnblockTime+0x3c>)
 8019a16:	f04f 32ff 	mov.w	r2, #4294967295
 8019a1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019a1c:	e008      	b.n	8019a30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a1e:	4b07      	ldr	r3, [pc, #28]	; (8019a3c <prvResetNextTaskUnblockTime+0x38>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	68db      	ldr	r3, [r3, #12]
 8019a24:	68db      	ldr	r3, [r3, #12]
 8019a26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	685b      	ldr	r3, [r3, #4]
 8019a2c:	4a04      	ldr	r2, [pc, #16]	; (8019a40 <prvResetNextTaskUnblockTime+0x3c>)
 8019a2e:	6013      	str	r3, [r2, #0]
}
 8019a30:	bf00      	nop
 8019a32:	370c      	adds	r7, #12
 8019a34:	46bd      	mov	sp, r7
 8019a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3a:	4770      	bx	lr
 8019a3c:	20002e7c 	.word	0x20002e7c
 8019a40:	20002ee4 	.word	0x20002ee4

08019a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019a4a:	4b0b      	ldr	r3, [pc, #44]	; (8019a78 <xTaskGetSchedulerState+0x34>)
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d102      	bne.n	8019a58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019a52:	2301      	movs	r3, #1
 8019a54:	607b      	str	r3, [r7, #4]
 8019a56:	e008      	b.n	8019a6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a58:	4b08      	ldr	r3, [pc, #32]	; (8019a7c <xTaskGetSchedulerState+0x38>)
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d102      	bne.n	8019a66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019a60:	2302      	movs	r3, #2
 8019a62:	607b      	str	r3, [r7, #4]
 8019a64:	e001      	b.n	8019a6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019a66:	2300      	movs	r3, #0
 8019a68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019a6a:	687b      	ldr	r3, [r7, #4]
	}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	370c      	adds	r7, #12
 8019a70:	46bd      	mov	sp, r7
 8019a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a76:	4770      	bx	lr
 8019a78:	20002ed0 	.word	0x20002ed0
 8019a7c:	20002eec 	.word	0x20002eec

08019a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b086      	sub	sp, #24
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d072      	beq.n	8019b7c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019a96:	4b3c      	ldr	r3, [pc, #240]	; (8019b88 <xTaskPriorityDisinherit+0x108>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	693a      	ldr	r2, [r7, #16]
 8019a9c:	429a      	cmp	r2, r3
 8019a9e:	d00c      	beq.n	8019aba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8019aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aa4:	b672      	cpsid	i
 8019aa6:	f383 8811 	msr	BASEPRI, r3
 8019aaa:	f3bf 8f6f 	isb	sy
 8019aae:	f3bf 8f4f 	dsb	sy
 8019ab2:	b662      	cpsie	i
 8019ab4:	60fb      	str	r3, [r7, #12]
}
 8019ab6:	bf00      	nop
 8019ab8:	e7fe      	b.n	8019ab8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8019aba:	693b      	ldr	r3, [r7, #16]
 8019abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d10c      	bne.n	8019adc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8019ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ac6:	b672      	cpsid	i
 8019ac8:	f383 8811 	msr	BASEPRI, r3
 8019acc:	f3bf 8f6f 	isb	sy
 8019ad0:	f3bf 8f4f 	dsb	sy
 8019ad4:	b662      	cpsie	i
 8019ad6:	60bb      	str	r3, [r7, #8]
}
 8019ad8:	bf00      	nop
 8019ada:	e7fe      	b.n	8019ada <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8019adc:	693b      	ldr	r3, [r7, #16]
 8019ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ae0:	1e5a      	subs	r2, r3, #1
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019ae6:	693b      	ldr	r3, [r7, #16]
 8019ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019aea:	693b      	ldr	r3, [r7, #16]
 8019aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d044      	beq.n	8019b7c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d140      	bne.n	8019b7c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019afa:	693b      	ldr	r3, [r7, #16]
 8019afc:	3304      	adds	r3, #4
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7fe f926 	bl	8017d50 <uxListRemove>
 8019b04:	4603      	mov	r3, r0
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d115      	bne.n	8019b36 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019b0a:	693b      	ldr	r3, [r7, #16]
 8019b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b0e:	491f      	ldr	r1, [pc, #124]	; (8019b8c <xTaskPriorityDisinherit+0x10c>)
 8019b10:	4613      	mov	r3, r2
 8019b12:	009b      	lsls	r3, r3, #2
 8019b14:	4413      	add	r3, r2
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	440b      	add	r3, r1
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d10a      	bne.n	8019b36 <xTaskPriorityDisinherit+0xb6>
 8019b20:	693b      	ldr	r3, [r7, #16]
 8019b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b24:	2201      	movs	r2, #1
 8019b26:	fa02 f303 	lsl.w	r3, r2, r3
 8019b2a:	43da      	mvns	r2, r3
 8019b2c:	4b18      	ldr	r3, [pc, #96]	; (8019b90 <xTaskPriorityDisinherit+0x110>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	4013      	ands	r3, r2
 8019b32:	4a17      	ldr	r2, [pc, #92]	; (8019b90 <xTaskPriorityDisinherit+0x110>)
 8019b34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019b36:	693b      	ldr	r3, [r7, #16]
 8019b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019b3a:	693b      	ldr	r3, [r7, #16]
 8019b3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b3e:	693b      	ldr	r3, [r7, #16]
 8019b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b42:	f1c3 0207 	rsb	r2, r3, #7
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019b4a:	693b      	ldr	r3, [r7, #16]
 8019b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b4e:	2201      	movs	r2, #1
 8019b50:	409a      	lsls	r2, r3
 8019b52:	4b0f      	ldr	r3, [pc, #60]	; (8019b90 <xTaskPriorityDisinherit+0x110>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	4313      	orrs	r3, r2
 8019b58:	4a0d      	ldr	r2, [pc, #52]	; (8019b90 <xTaskPriorityDisinherit+0x110>)
 8019b5a:	6013      	str	r3, [r2, #0]
 8019b5c:	693b      	ldr	r3, [r7, #16]
 8019b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b60:	4613      	mov	r3, r2
 8019b62:	009b      	lsls	r3, r3, #2
 8019b64:	4413      	add	r3, r2
 8019b66:	009b      	lsls	r3, r3, #2
 8019b68:	4a08      	ldr	r2, [pc, #32]	; (8019b8c <xTaskPriorityDisinherit+0x10c>)
 8019b6a:	441a      	add	r2, r3
 8019b6c:	693b      	ldr	r3, [r7, #16]
 8019b6e:	3304      	adds	r3, #4
 8019b70:	4619      	mov	r1, r3
 8019b72:	4610      	mov	r0, r2
 8019b74:	f7fe f88f 	bl	8017c96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019b78:	2301      	movs	r3, #1
 8019b7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019b7c:	697b      	ldr	r3, [r7, #20]
	}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	3718      	adds	r7, #24
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bd80      	pop	{r7, pc}
 8019b86:	bf00      	nop
 8019b88:	20002dc4 	.word	0x20002dc4
 8019b8c:	20002dc8 	.word	0x20002dc8
 8019b90:	20002ecc 	.word	0x20002ecc

08019b94 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b084      	sub	sp, #16
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8019b9e:	f000 fef5 	bl	801a98c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8019ba2:	4b20      	ldr	r3, [pc, #128]	; (8019c24 <ulTaskNotifyTake+0x90>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d113      	bne.n	8019bd6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8019bae:	4b1d      	ldr	r3, [pc, #116]	; (8019c24 <ulTaskNotifyTake+0x90>)
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	2201      	movs	r2, #1
 8019bb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8019bb8:	683b      	ldr	r3, [r7, #0]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d00b      	beq.n	8019bd6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019bbe:	2101      	movs	r1, #1
 8019bc0:	6838      	ldr	r0, [r7, #0]
 8019bc2:	f000 f991 	bl	8019ee8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8019bc6:	4b18      	ldr	r3, [pc, #96]	; (8019c28 <ulTaskNotifyTake+0x94>)
 8019bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019bcc:	601a      	str	r2, [r3, #0]
 8019bce:	f3bf 8f4f 	dsb	sy
 8019bd2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019bd6:	f000 ff0d 	bl	801a9f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8019bda:	f000 fed7 	bl	801a98c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8019bde:	4b11      	ldr	r3, [pc, #68]	; (8019c24 <ulTaskNotifyTake+0x90>)
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019be6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d00e      	beq.n	8019c0c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d005      	beq.n	8019c00 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8019bf4:	4b0b      	ldr	r3, [pc, #44]	; (8019c24 <ulTaskNotifyTake+0x90>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	2200      	movs	r2, #0
 8019bfa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8019bfe:	e005      	b.n	8019c0c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8019c00:	4b08      	ldr	r3, [pc, #32]	; (8019c24 <ulTaskNotifyTake+0x90>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	68fa      	ldr	r2, [r7, #12]
 8019c06:	3a01      	subs	r2, #1
 8019c08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019c0c:	4b05      	ldr	r3, [pc, #20]	; (8019c24 <ulTaskNotifyTake+0x90>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	2200      	movs	r2, #0
 8019c12:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8019c16:	f000 feed 	bl	801a9f4 <vPortExitCritical>

		return ulReturn;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	3710      	adds	r7, #16
 8019c20:	46bd      	mov	sp, r7
 8019c22:	bd80      	pop	{r7, pc}
 8019c24:	20002dc4 	.word	0x20002dc4
 8019c28:	e000ed04 	.word	0xe000ed04

08019c2c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b08a      	sub	sp, #40	; 0x28
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	60f8      	str	r0, [r7, #12]
 8019c34:	60b9      	str	r1, [r7, #8]
 8019c36:	603b      	str	r3, [r7, #0]
 8019c38:	4613      	mov	r3, r2
 8019c3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8019c3c:	2301      	movs	r3, #1
 8019c3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d10c      	bne.n	8019c60 <xTaskGenericNotify+0x34>
	__asm volatile
 8019c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c4a:	b672      	cpsid	i
 8019c4c:	f383 8811 	msr	BASEPRI, r3
 8019c50:	f3bf 8f6f 	isb	sy
 8019c54:	f3bf 8f4f 	dsb	sy
 8019c58:	b662      	cpsie	i
 8019c5a:	61bb      	str	r3, [r7, #24]
}
 8019c5c:	bf00      	nop
 8019c5e:	e7fe      	b.n	8019c5e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8019c64:	f000 fe92 	bl	801a98c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d004      	beq.n	8019c78 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8019c6e:	6a3b      	ldr	r3, [r7, #32]
 8019c70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8019c78:	6a3b      	ldr	r3, [r7, #32]
 8019c7a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8019c7e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8019c80:	6a3b      	ldr	r3, [r7, #32]
 8019c82:	2202      	movs	r2, #2
 8019c84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8019c88:	79fb      	ldrb	r3, [r7, #7]
 8019c8a:	2b04      	cmp	r3, #4
 8019c8c:	d82d      	bhi.n	8019cea <xTaskGenericNotify+0xbe>
 8019c8e:	a201      	add	r2, pc, #4	; (adr r2, 8019c94 <xTaskGenericNotify+0x68>)
 8019c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c94:	08019d11 	.word	0x08019d11
 8019c98:	08019ca9 	.word	0x08019ca9
 8019c9c:	08019cbb 	.word	0x08019cbb
 8019ca0:	08019ccb 	.word	0x08019ccb
 8019ca4:	08019cd5 	.word	0x08019cd5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8019ca8:	6a3b      	ldr	r3, [r7, #32]
 8019caa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	431a      	orrs	r2, r3
 8019cb2:	6a3b      	ldr	r3, [r7, #32]
 8019cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8019cb8:	e02d      	b.n	8019d16 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8019cba:	6a3b      	ldr	r3, [r7, #32]
 8019cbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019cc0:	1c5a      	adds	r2, r3, #1
 8019cc2:	6a3b      	ldr	r3, [r7, #32]
 8019cc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8019cc8:	e025      	b.n	8019d16 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8019cca:	6a3b      	ldr	r3, [r7, #32]
 8019ccc:	68ba      	ldr	r2, [r7, #8]
 8019cce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8019cd2:	e020      	b.n	8019d16 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8019cd4:	7ffb      	ldrb	r3, [r7, #31]
 8019cd6:	2b02      	cmp	r3, #2
 8019cd8:	d004      	beq.n	8019ce4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8019cda:	6a3b      	ldr	r3, [r7, #32]
 8019cdc:	68ba      	ldr	r2, [r7, #8]
 8019cde:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8019ce2:	e018      	b.n	8019d16 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8019ce8:	e015      	b.n	8019d16 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8019cea:	6a3b      	ldr	r3, [r7, #32]
 8019cec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cf4:	d00e      	beq.n	8019d14 <xTaskGenericNotify+0xe8>
	__asm volatile
 8019cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cfa:	b672      	cpsid	i
 8019cfc:	f383 8811 	msr	BASEPRI, r3
 8019d00:	f3bf 8f6f 	isb	sy
 8019d04:	f3bf 8f4f 	dsb	sy
 8019d08:	b662      	cpsie	i
 8019d0a:	617b      	str	r3, [r7, #20]
}
 8019d0c:	bf00      	nop
 8019d0e:	e7fe      	b.n	8019d0e <xTaskGenericNotify+0xe2>
					break;
 8019d10:	bf00      	nop
 8019d12:	e000      	b.n	8019d16 <xTaskGenericNotify+0xea>

					break;
 8019d14:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8019d16:	7ffb      	ldrb	r3, [r7, #31]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	d13b      	bne.n	8019d94 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019d1c:	6a3b      	ldr	r3, [r7, #32]
 8019d1e:	3304      	adds	r3, #4
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7fe f815 	bl	8017d50 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8019d26:	6a3b      	ldr	r3, [r7, #32]
 8019d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d2a:	2201      	movs	r2, #1
 8019d2c:	409a      	lsls	r2, r3
 8019d2e:	4b1d      	ldr	r3, [pc, #116]	; (8019da4 <xTaskGenericNotify+0x178>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4313      	orrs	r3, r2
 8019d34:	4a1b      	ldr	r2, [pc, #108]	; (8019da4 <xTaskGenericNotify+0x178>)
 8019d36:	6013      	str	r3, [r2, #0]
 8019d38:	6a3b      	ldr	r3, [r7, #32]
 8019d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d3c:	4613      	mov	r3, r2
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	4413      	add	r3, r2
 8019d42:	009b      	lsls	r3, r3, #2
 8019d44:	4a18      	ldr	r2, [pc, #96]	; (8019da8 <xTaskGenericNotify+0x17c>)
 8019d46:	441a      	add	r2, r3
 8019d48:	6a3b      	ldr	r3, [r7, #32]
 8019d4a:	3304      	adds	r3, #4
 8019d4c:	4619      	mov	r1, r3
 8019d4e:	4610      	mov	r0, r2
 8019d50:	f7fd ffa1 	bl	8017c96 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8019d54:	6a3b      	ldr	r3, [r7, #32]
 8019d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d00c      	beq.n	8019d76 <xTaskGenericNotify+0x14a>
	__asm volatile
 8019d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d60:	b672      	cpsid	i
 8019d62:	f383 8811 	msr	BASEPRI, r3
 8019d66:	f3bf 8f6f 	isb	sy
 8019d6a:	f3bf 8f4f 	dsb	sy
 8019d6e:	b662      	cpsie	i
 8019d70:	613b      	str	r3, [r7, #16]
}
 8019d72:	bf00      	nop
 8019d74:	e7fe      	b.n	8019d74 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019d76:	6a3b      	ldr	r3, [r7, #32]
 8019d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d7a:	4b0c      	ldr	r3, [pc, #48]	; (8019dac <xTaskGenericNotify+0x180>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d80:	429a      	cmp	r2, r3
 8019d82:	d907      	bls.n	8019d94 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8019d84:	4b0a      	ldr	r3, [pc, #40]	; (8019db0 <xTaskGenericNotify+0x184>)
 8019d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d8a:	601a      	str	r2, [r3, #0]
 8019d8c:	f3bf 8f4f 	dsb	sy
 8019d90:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019d94:	f000 fe2e 	bl	801a9f4 <vPortExitCritical>

		return xReturn;
 8019d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3728      	adds	r7, #40	; 0x28
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}
 8019da2:	bf00      	nop
 8019da4:	20002ecc 	.word	0x20002ecc
 8019da8:	20002dc8 	.word	0x20002dc8
 8019dac:	20002dc4 	.word	0x20002dc4
 8019db0:	e000ed04 	.word	0xe000ed04

08019db4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b08a      	sub	sp, #40	; 0x28
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
 8019dbc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d10c      	bne.n	8019dde <vTaskNotifyGiveFromISR+0x2a>
	__asm volatile
 8019dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dc8:	b672      	cpsid	i
 8019dca:	f383 8811 	msr	BASEPRI, r3
 8019dce:	f3bf 8f6f 	isb	sy
 8019dd2:	f3bf 8f4f 	dsb	sy
 8019dd6:	b662      	cpsie	i
 8019dd8:	61bb      	str	r3, [r7, #24]
}
 8019dda:	bf00      	nop
 8019ddc:	e7fe      	b.n	8019ddc <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019dde:	f000 febd 	bl	801ab5c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8019de6:	f3ef 8211 	mrs	r2, BASEPRI
 8019dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dee:	b672      	cpsid	i
 8019df0:	f383 8811 	msr	BASEPRI, r3
 8019df4:	f3bf 8f6f 	isb	sy
 8019df8:	f3bf 8f4f 	dsb	sy
 8019dfc:	b662      	cpsie	i
 8019dfe:	617a      	str	r2, [r7, #20]
 8019e00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019e02:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019e04:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8019e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e08:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8019e0c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8019e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e10:	2202      	movs	r2, #2
 8019e12:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8019e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019e1c:	1c5a      	adds	r2, r3, #1
 8019e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8019e24:	7ffb      	ldrb	r3, [r7, #31]
 8019e26:	2b01      	cmp	r3, #1
 8019e28:	d147      	bne.n	8019eba <vTaskNotifyGiveFromISR+0x106>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8019e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d00c      	beq.n	8019e4c <vTaskNotifyGiveFromISR+0x98>
	__asm volatile
 8019e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e36:	b672      	cpsid	i
 8019e38:	f383 8811 	msr	BASEPRI, r3
 8019e3c:	f3bf 8f6f 	isb	sy
 8019e40:	f3bf 8f4f 	dsb	sy
 8019e44:	b662      	cpsie	i
 8019e46:	60fb      	str	r3, [r7, #12]
}
 8019e48:	bf00      	nop
 8019e4a:	e7fe      	b.n	8019e4a <vTaskNotifyGiveFromISR+0x96>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019e4c:	4b20      	ldr	r3, [pc, #128]	; (8019ed0 <vTaskNotifyGiveFromISR+0x11c>)
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d11c      	bne.n	8019e8e <vTaskNotifyGiveFromISR+0xda>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e56:	3304      	adds	r3, #4
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f7fd ff79 	bl	8017d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e62:	2201      	movs	r2, #1
 8019e64:	409a      	lsls	r2, r3
 8019e66:	4b1b      	ldr	r3, [pc, #108]	; (8019ed4 <vTaskNotifyGiveFromISR+0x120>)
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	4313      	orrs	r3, r2
 8019e6c:	4a19      	ldr	r2, [pc, #100]	; (8019ed4 <vTaskNotifyGiveFromISR+0x120>)
 8019e6e:	6013      	str	r3, [r2, #0]
 8019e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e74:	4613      	mov	r3, r2
 8019e76:	009b      	lsls	r3, r3, #2
 8019e78:	4413      	add	r3, r2
 8019e7a:	009b      	lsls	r3, r3, #2
 8019e7c:	4a16      	ldr	r2, [pc, #88]	; (8019ed8 <vTaskNotifyGiveFromISR+0x124>)
 8019e7e:	441a      	add	r2, r3
 8019e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e82:	3304      	adds	r3, #4
 8019e84:	4619      	mov	r1, r3
 8019e86:	4610      	mov	r0, r2
 8019e88:	f7fd ff05 	bl	8017c96 <vListInsertEnd>
 8019e8c:	e005      	b.n	8019e9a <vTaskNotifyGiveFromISR+0xe6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8019e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e90:	3318      	adds	r3, #24
 8019e92:	4619      	mov	r1, r3
 8019e94:	4811      	ldr	r0, [pc, #68]	; (8019edc <vTaskNotifyGiveFromISR+0x128>)
 8019e96:	f7fd fefe 	bl	8017c96 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e9e:	4b10      	ldr	r3, [pc, #64]	; (8019ee0 <vTaskNotifyGiveFromISR+0x12c>)
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	d908      	bls.n	8019eba <vTaskNotifyGiveFromISR+0x106>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d002      	beq.n	8019eb4 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8019eae:	683b      	ldr	r3, [r7, #0]
 8019eb0:	2201      	movs	r2, #1
 8019eb2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8019eb4:	4b0b      	ldr	r3, [pc, #44]	; (8019ee4 <vTaskNotifyGiveFromISR+0x130>)
 8019eb6:	2201      	movs	r2, #1
 8019eb8:	601a      	str	r2, [r3, #0]
 8019eba:	6a3b      	ldr	r3, [r7, #32]
 8019ebc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8019ebe:	68bb      	ldr	r3, [r7, #8]
 8019ec0:	f383 8811 	msr	BASEPRI, r3
}
 8019ec4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8019ec6:	bf00      	nop
 8019ec8:	3728      	adds	r7, #40	; 0x28
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	bd80      	pop	{r7, pc}
 8019ece:	bf00      	nop
 8019ed0:	20002eec 	.word	0x20002eec
 8019ed4:	20002ecc 	.word	0x20002ecc
 8019ed8:	20002dc8 	.word	0x20002dc8
 8019edc:	20002e84 	.word	0x20002e84
 8019ee0:	20002dc4 	.word	0x20002dc4
 8019ee4:	20002ed8 	.word	0x20002ed8

08019ee8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b084      	sub	sp, #16
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	6078      	str	r0, [r7, #4]
 8019ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019ef2:	4b29      	ldr	r3, [pc, #164]	; (8019f98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019ef8:	4b28      	ldr	r3, [pc, #160]	; (8019f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	3304      	adds	r3, #4
 8019efe:	4618      	mov	r0, r3
 8019f00:	f7fd ff26 	bl	8017d50 <uxListRemove>
 8019f04:	4603      	mov	r3, r0
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d10b      	bne.n	8019f22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8019f0a:	4b24      	ldr	r3, [pc, #144]	; (8019f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f10:	2201      	movs	r2, #1
 8019f12:	fa02 f303 	lsl.w	r3, r2, r3
 8019f16:	43da      	mvns	r2, r3
 8019f18:	4b21      	ldr	r3, [pc, #132]	; (8019fa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	4013      	ands	r3, r2
 8019f1e:	4a20      	ldr	r2, [pc, #128]	; (8019fa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019f20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f28:	d10a      	bne.n	8019f40 <prvAddCurrentTaskToDelayedList+0x58>
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d007      	beq.n	8019f40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019f30:	4b1a      	ldr	r3, [pc, #104]	; (8019f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	3304      	adds	r3, #4
 8019f36:	4619      	mov	r1, r3
 8019f38:	481a      	ldr	r0, [pc, #104]	; (8019fa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8019f3a:	f7fd feac 	bl	8017c96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019f3e:	e026      	b.n	8019f8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019f40:	68fa      	ldr	r2, [r7, #12]
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	4413      	add	r3, r2
 8019f46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019f48:	4b14      	ldr	r3, [pc, #80]	; (8019f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	68ba      	ldr	r2, [r7, #8]
 8019f4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019f50:	68ba      	ldr	r2, [r7, #8]
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	429a      	cmp	r2, r3
 8019f56:	d209      	bcs.n	8019f6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019f58:	4b13      	ldr	r3, [pc, #76]	; (8019fa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8019f5a:	681a      	ldr	r2, [r3, #0]
 8019f5c:	4b0f      	ldr	r3, [pc, #60]	; (8019f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	3304      	adds	r3, #4
 8019f62:	4619      	mov	r1, r3
 8019f64:	4610      	mov	r0, r2
 8019f66:	f7fd feba 	bl	8017cde <vListInsert>
}
 8019f6a:	e010      	b.n	8019f8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019f6c:	4b0f      	ldr	r3, [pc, #60]	; (8019fac <prvAddCurrentTaskToDelayedList+0xc4>)
 8019f6e:	681a      	ldr	r2, [r3, #0]
 8019f70:	4b0a      	ldr	r3, [pc, #40]	; (8019f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	3304      	adds	r3, #4
 8019f76:	4619      	mov	r1, r3
 8019f78:	4610      	mov	r0, r2
 8019f7a:	f7fd feb0 	bl	8017cde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019f7e:	4b0c      	ldr	r3, [pc, #48]	; (8019fb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	68ba      	ldr	r2, [r7, #8]
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d202      	bcs.n	8019f8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8019f88:	4a09      	ldr	r2, [pc, #36]	; (8019fb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	6013      	str	r3, [r2, #0]
}
 8019f8e:	bf00      	nop
 8019f90:	3710      	adds	r7, #16
 8019f92:	46bd      	mov	sp, r7
 8019f94:	bd80      	pop	{r7, pc}
 8019f96:	bf00      	nop
 8019f98:	20002ec8 	.word	0x20002ec8
 8019f9c:	20002dc4 	.word	0x20002dc4
 8019fa0:	20002ecc 	.word	0x20002ecc
 8019fa4:	20002eb0 	.word	0x20002eb0
 8019fa8:	20002e80 	.word	0x20002e80
 8019fac:	20002e7c 	.word	0x20002e7c
 8019fb0:	20002ee4 	.word	0x20002ee4

08019fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b08a      	sub	sp, #40	; 0x28
 8019fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019fbe:	f000 fb97 	bl	801a6f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019fc2:	4b1d      	ldr	r3, [pc, #116]	; (801a038 <xTimerCreateTimerTask+0x84>)
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d021      	beq.n	801a00e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019fca:	2300      	movs	r3, #0
 8019fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019fd2:	1d3a      	adds	r2, r7, #4
 8019fd4:	f107 0108 	add.w	r1, r7, #8
 8019fd8:	f107 030c 	add.w	r3, r7, #12
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f7e7 ff55 	bl	8001e8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019fe2:	6879      	ldr	r1, [r7, #4]
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	68fa      	ldr	r2, [r7, #12]
 8019fe8:	9202      	str	r2, [sp, #8]
 8019fea:	9301      	str	r3, [sp, #4]
 8019fec:	2302      	movs	r3, #2
 8019fee:	9300      	str	r3, [sp, #0]
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	460a      	mov	r2, r1
 8019ff4:	4911      	ldr	r1, [pc, #68]	; (801a03c <xTimerCreateTimerTask+0x88>)
 8019ff6:	4812      	ldr	r0, [pc, #72]	; (801a040 <xTimerCreateTimerTask+0x8c>)
 8019ff8:	f7fe fca2 	bl	8018940 <xTaskCreateStatic>
 8019ffc:	4603      	mov	r3, r0
 8019ffe:	4a11      	ldr	r2, [pc, #68]	; (801a044 <xTimerCreateTimerTask+0x90>)
 801a000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a002:	4b10      	ldr	r3, [pc, #64]	; (801a044 <xTimerCreateTimerTask+0x90>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d001      	beq.n	801a00e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801a00a:	2301      	movs	r3, #1
 801a00c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d10c      	bne.n	801a02e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 801a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a018:	b672      	cpsid	i
 801a01a:	f383 8811 	msr	BASEPRI, r3
 801a01e:	f3bf 8f6f 	isb	sy
 801a022:	f3bf 8f4f 	dsb	sy
 801a026:	b662      	cpsie	i
 801a028:	613b      	str	r3, [r7, #16]
}
 801a02a:	bf00      	nop
 801a02c:	e7fe      	b.n	801a02c <xTimerCreateTimerTask+0x78>
	return xReturn;
 801a02e:	697b      	ldr	r3, [r7, #20]
}
 801a030:	4618      	mov	r0, r3
 801a032:	3718      	adds	r7, #24
 801a034:	46bd      	mov	sp, r7
 801a036:	bd80      	pop	{r7, pc}
 801a038:	20002f20 	.word	0x20002f20
 801a03c:	080205a0 	.word	0x080205a0
 801a040:	0801a2c5 	.word	0x0801a2c5
 801a044:	20002f24 	.word	0x20002f24

0801a048 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b088      	sub	sp, #32
 801a04c:	af02      	add	r7, sp, #8
 801a04e:	60f8      	str	r0, [r7, #12]
 801a050:	60b9      	str	r1, [r7, #8]
 801a052:	607a      	str	r2, [r7, #4]
 801a054:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801a056:	2028      	movs	r0, #40	; 0x28
 801a058:	f000 fdc4 	bl	801abe4 <pvPortMalloc>
 801a05c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801a05e:	697b      	ldr	r3, [r7, #20]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d00d      	beq.n	801a080 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	2200      	movs	r2, #0
 801a068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801a06c:	697b      	ldr	r3, [r7, #20]
 801a06e:	9301      	str	r3, [sp, #4]
 801a070:	6a3b      	ldr	r3, [r7, #32]
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	68b9      	ldr	r1, [r7, #8]
 801a07a:	68f8      	ldr	r0, [r7, #12]
 801a07c:	f000 f847 	bl	801a10e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801a080:	697b      	ldr	r3, [r7, #20]
	}
 801a082:	4618      	mov	r0, r3
 801a084:	3718      	adds	r7, #24
 801a086:	46bd      	mov	sp, r7
 801a088:	bd80      	pop	{r7, pc}

0801a08a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801a08a:	b580      	push	{r7, lr}
 801a08c:	b08a      	sub	sp, #40	; 0x28
 801a08e:	af02      	add	r7, sp, #8
 801a090:	60f8      	str	r0, [r7, #12]
 801a092:	60b9      	str	r1, [r7, #8]
 801a094:	607a      	str	r2, [r7, #4]
 801a096:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801a098:	2328      	movs	r3, #40	; 0x28
 801a09a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801a09c:	693b      	ldr	r3, [r7, #16]
 801a09e:	2b28      	cmp	r3, #40	; 0x28
 801a0a0:	d00c      	beq.n	801a0bc <xTimerCreateStatic+0x32>
	__asm volatile
 801a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0a6:	b672      	cpsid	i
 801a0a8:	f383 8811 	msr	BASEPRI, r3
 801a0ac:	f3bf 8f6f 	isb	sy
 801a0b0:	f3bf 8f4f 	dsb	sy
 801a0b4:	b662      	cpsie	i
 801a0b6:	61bb      	str	r3, [r7, #24]
}
 801a0b8:	bf00      	nop
 801a0ba:	e7fe      	b.n	801a0ba <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a0bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d10c      	bne.n	801a0de <xTimerCreateStatic+0x54>
	__asm volatile
 801a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0c8:	b672      	cpsid	i
 801a0ca:	f383 8811 	msr	BASEPRI, r3
 801a0ce:	f3bf 8f6f 	isb	sy
 801a0d2:	f3bf 8f4f 	dsb	sy
 801a0d6:	b662      	cpsie	i
 801a0d8:	617b      	str	r3, [r7, #20]
}
 801a0da:	bf00      	nop
 801a0dc:	e7fe      	b.n	801a0dc <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801a0e2:	69fb      	ldr	r3, [r7, #28]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d00d      	beq.n	801a104 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801a0e8:	69fb      	ldr	r3, [r7, #28]
 801a0ea:	2202      	movs	r2, #2
 801a0ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801a0f0:	69fb      	ldr	r3, [r7, #28]
 801a0f2:	9301      	str	r3, [sp, #4]
 801a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f6:	9300      	str	r3, [sp, #0]
 801a0f8:	683b      	ldr	r3, [r7, #0]
 801a0fa:	687a      	ldr	r2, [r7, #4]
 801a0fc:	68b9      	ldr	r1, [r7, #8]
 801a0fe:	68f8      	ldr	r0, [r7, #12]
 801a100:	f000 f805 	bl	801a10e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801a104:	69fb      	ldr	r3, [r7, #28]
	}
 801a106:	4618      	mov	r0, r3
 801a108:	3720      	adds	r7, #32
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}

0801a10e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801a10e:	b580      	push	{r7, lr}
 801a110:	b086      	sub	sp, #24
 801a112:	af00      	add	r7, sp, #0
 801a114:	60f8      	str	r0, [r7, #12]
 801a116:	60b9      	str	r1, [r7, #8]
 801a118:	607a      	str	r2, [r7, #4]
 801a11a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801a11c:	68bb      	ldr	r3, [r7, #8]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d10c      	bne.n	801a13c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 801a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a126:	b672      	cpsid	i
 801a128:	f383 8811 	msr	BASEPRI, r3
 801a12c:	f3bf 8f6f 	isb	sy
 801a130:	f3bf 8f4f 	dsb	sy
 801a134:	b662      	cpsie	i
 801a136:	617b      	str	r3, [r7, #20]
}
 801a138:	bf00      	nop
 801a13a:	e7fe      	b.n	801a13a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 801a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d01e      	beq.n	801a180 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801a142:	f000 fad5 	bl	801a6f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a148:	68fa      	ldr	r2, [r7, #12]
 801a14a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a14e:	68ba      	ldr	r2, [r7, #8]
 801a150:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a154:	683a      	ldr	r2, [r7, #0]
 801a156:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a15a:	6a3a      	ldr	r2, [r7, #32]
 801a15c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a160:	3304      	adds	r3, #4
 801a162:	4618      	mov	r0, r3
 801a164:	f7fd fd8a 	bl	8017c7c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d008      	beq.n	801a180 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a174:	f043 0304 	orr.w	r3, r3, #4
 801a178:	b2da      	uxtb	r2, r3
 801a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a17c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801a180:	bf00      	nop
 801a182:	3718      	adds	r7, #24
 801a184:	46bd      	mov	sp, r7
 801a186:	bd80      	pop	{r7, pc}

0801a188 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b08a      	sub	sp, #40	; 0x28
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	607a      	str	r2, [r7, #4]
 801a194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a196:	2300      	movs	r3, #0
 801a198:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d10c      	bne.n	801a1ba <xTimerGenericCommand+0x32>
	__asm volatile
 801a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1a4:	b672      	cpsid	i
 801a1a6:	f383 8811 	msr	BASEPRI, r3
 801a1aa:	f3bf 8f6f 	isb	sy
 801a1ae:	f3bf 8f4f 	dsb	sy
 801a1b2:	b662      	cpsie	i
 801a1b4:	623b      	str	r3, [r7, #32]
}
 801a1b6:	bf00      	nop
 801a1b8:	e7fe      	b.n	801a1b8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a1ba:	4b1a      	ldr	r3, [pc, #104]	; (801a224 <xTimerGenericCommand+0x9c>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d02a      	beq.n	801a218 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	2b05      	cmp	r3, #5
 801a1d2:	dc18      	bgt.n	801a206 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a1d4:	f7ff fc36 	bl	8019a44 <xTaskGetSchedulerState>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	2b02      	cmp	r3, #2
 801a1dc:	d109      	bne.n	801a1f2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a1de:	4b11      	ldr	r3, [pc, #68]	; (801a224 <xTimerGenericCommand+0x9c>)
 801a1e0:	6818      	ldr	r0, [r3, #0]
 801a1e2:	f107 0114 	add.w	r1, r7, #20
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1ea:	f7fd ff29 	bl	8018040 <xQueueGenericSend>
 801a1ee:	6278      	str	r0, [r7, #36]	; 0x24
 801a1f0:	e012      	b.n	801a218 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a1f2:	4b0c      	ldr	r3, [pc, #48]	; (801a224 <xTimerGenericCommand+0x9c>)
 801a1f4:	6818      	ldr	r0, [r3, #0]
 801a1f6:	f107 0114 	add.w	r1, r7, #20
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	f7fd ff1f 	bl	8018040 <xQueueGenericSend>
 801a202:	6278      	str	r0, [r7, #36]	; 0x24
 801a204:	e008      	b.n	801a218 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a206:	4b07      	ldr	r3, [pc, #28]	; (801a224 <xTimerGenericCommand+0x9c>)
 801a208:	6818      	ldr	r0, [r3, #0]
 801a20a:	f107 0114 	add.w	r1, r7, #20
 801a20e:	2300      	movs	r3, #0
 801a210:	683a      	ldr	r2, [r7, #0]
 801a212:	f7fe f81b 	bl	801824c <xQueueGenericSendFromISR>
 801a216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	3728      	adds	r7, #40	; 0x28
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}
 801a222:	bf00      	nop
 801a224:	20002f20 	.word	0x20002f20

0801a228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	b088      	sub	sp, #32
 801a22c:	af02      	add	r7, sp, #8
 801a22e:	6078      	str	r0, [r7, #4]
 801a230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a232:	4b23      	ldr	r3, [pc, #140]	; (801a2c0 <prvProcessExpiredTimer+0x98>)
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	68db      	ldr	r3, [r3, #12]
 801a238:	68db      	ldr	r3, [r3, #12]
 801a23a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a23c:	697b      	ldr	r3, [r7, #20]
 801a23e:	3304      	adds	r3, #4
 801a240:	4618      	mov	r0, r3
 801a242:	f7fd fd85 	bl	8017d50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a246:	697b      	ldr	r3, [r7, #20]
 801a248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a24c:	f003 0304 	and.w	r3, r3, #4
 801a250:	2b00      	cmp	r3, #0
 801a252:	d024      	beq.n	801a29e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	699a      	ldr	r2, [r3, #24]
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	18d1      	adds	r1, r2, r3
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	683a      	ldr	r2, [r7, #0]
 801a260:	6978      	ldr	r0, [r7, #20]
 801a262:	f000 f8d3 	bl	801a40c <prvInsertTimerInActiveList>
 801a266:	4603      	mov	r3, r0
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d021      	beq.n	801a2b0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a26c:	2300      	movs	r3, #0
 801a26e:	9300      	str	r3, [sp, #0]
 801a270:	2300      	movs	r3, #0
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	2100      	movs	r1, #0
 801a276:	6978      	ldr	r0, [r7, #20]
 801a278:	f7ff ff86 	bl	801a188 <xTimerGenericCommand>
 801a27c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801a27e:	693b      	ldr	r3, [r7, #16]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d115      	bne.n	801a2b0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 801a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a288:	b672      	cpsid	i
 801a28a:	f383 8811 	msr	BASEPRI, r3
 801a28e:	f3bf 8f6f 	isb	sy
 801a292:	f3bf 8f4f 	dsb	sy
 801a296:	b662      	cpsie	i
 801a298:	60fb      	str	r3, [r7, #12]
}
 801a29a:	bf00      	nop
 801a29c:	e7fe      	b.n	801a29c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a2a4:	f023 0301 	bic.w	r3, r3, #1
 801a2a8:	b2da      	uxtb	r2, r3
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a2b0:	697b      	ldr	r3, [r7, #20]
 801a2b2:	6a1b      	ldr	r3, [r3, #32]
 801a2b4:	6978      	ldr	r0, [r7, #20]
 801a2b6:	4798      	blx	r3
}
 801a2b8:	bf00      	nop
 801a2ba:	3718      	adds	r7, #24
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}
 801a2c0:	20002f18 	.word	0x20002f18

0801a2c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b084      	sub	sp, #16
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a2cc:	f107 0308 	add.w	r3, r7, #8
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	f000 f857 	bl	801a384 <prvGetNextExpireTime>
 801a2d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	4619      	mov	r1, r3
 801a2dc:	68f8      	ldr	r0, [r7, #12]
 801a2de:	f000 f803 	bl	801a2e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801a2e2:	f000 f8d5 	bl	801a490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a2e6:	e7f1      	b.n	801a2cc <prvTimerTask+0x8>

0801a2e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b084      	sub	sp, #16
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
 801a2f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801a2f2:	f7fe ffb1 	bl	8019258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a2f6:	f107 0308 	add.w	r3, r7, #8
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f000 f866 	bl	801a3cc <prvSampleTimeNow>
 801a300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801a302:	68bb      	ldr	r3, [r7, #8]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d130      	bne.n	801a36a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d10a      	bne.n	801a324 <prvProcessTimerOrBlockTask+0x3c>
 801a30e:	687a      	ldr	r2, [r7, #4]
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	429a      	cmp	r2, r3
 801a314:	d806      	bhi.n	801a324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801a316:	f7fe ffad 	bl	8019274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a31a:	68f9      	ldr	r1, [r7, #12]
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f7ff ff83 	bl	801a228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801a322:	e024      	b.n	801a36e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801a324:	683b      	ldr	r3, [r7, #0]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d008      	beq.n	801a33c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a32a:	4b13      	ldr	r3, [pc, #76]	; (801a378 <prvProcessTimerOrBlockTask+0x90>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d101      	bne.n	801a338 <prvProcessTimerOrBlockTask+0x50>
 801a334:	2301      	movs	r3, #1
 801a336:	e000      	b.n	801a33a <prvProcessTimerOrBlockTask+0x52>
 801a338:	2300      	movs	r3, #0
 801a33a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a33c:	4b0f      	ldr	r3, [pc, #60]	; (801a37c <prvProcessTimerOrBlockTask+0x94>)
 801a33e:	6818      	ldr	r0, [r3, #0]
 801a340:	687a      	ldr	r2, [r7, #4]
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	1ad3      	subs	r3, r2, r3
 801a346:	683a      	ldr	r2, [r7, #0]
 801a348:	4619      	mov	r1, r3
 801a34a:	f7fe fac5 	bl	80188d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a34e:	f7fe ff91 	bl	8019274 <xTaskResumeAll>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	d10a      	bne.n	801a36e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801a358:	4b09      	ldr	r3, [pc, #36]	; (801a380 <prvProcessTimerOrBlockTask+0x98>)
 801a35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a35e:	601a      	str	r2, [r3, #0]
 801a360:	f3bf 8f4f 	dsb	sy
 801a364:	f3bf 8f6f 	isb	sy
}
 801a368:	e001      	b.n	801a36e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801a36a:	f7fe ff83 	bl	8019274 <xTaskResumeAll>
}
 801a36e:	bf00      	nop
 801a370:	3710      	adds	r7, #16
 801a372:	46bd      	mov	sp, r7
 801a374:	bd80      	pop	{r7, pc}
 801a376:	bf00      	nop
 801a378:	20002f1c 	.word	0x20002f1c
 801a37c:	20002f20 	.word	0x20002f20
 801a380:	e000ed04 	.word	0xe000ed04

0801a384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801a384:	b480      	push	{r7}
 801a386:	b085      	sub	sp, #20
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a38c:	4b0e      	ldr	r3, [pc, #56]	; (801a3c8 <prvGetNextExpireTime+0x44>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d101      	bne.n	801a39a <prvGetNextExpireTime+0x16>
 801a396:	2201      	movs	r2, #1
 801a398:	e000      	b.n	801a39c <prvGetNextExpireTime+0x18>
 801a39a:	2200      	movs	r2, #0
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d105      	bne.n	801a3b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a3a8:	4b07      	ldr	r3, [pc, #28]	; (801a3c8 <prvGetNextExpireTime+0x44>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	68db      	ldr	r3, [r3, #12]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	60fb      	str	r3, [r7, #12]
 801a3b2:	e001      	b.n	801a3b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a3b8:	68fb      	ldr	r3, [r7, #12]
}
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	3714      	adds	r7, #20
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c4:	4770      	bx	lr
 801a3c6:	bf00      	nop
 801a3c8:	20002f18 	.word	0x20002f18

0801a3cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b084      	sub	sp, #16
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a3d4:	f7fe ffec 	bl	80193b0 <xTaskGetTickCount>
 801a3d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801a3da:	4b0b      	ldr	r3, [pc, #44]	; (801a408 <prvSampleTimeNow+0x3c>)
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	68fa      	ldr	r2, [r7, #12]
 801a3e0:	429a      	cmp	r2, r3
 801a3e2:	d205      	bcs.n	801a3f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801a3e4:	f000 f91e 	bl	801a624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2201      	movs	r2, #1
 801a3ec:	601a      	str	r2, [r3, #0]
 801a3ee:	e002      	b.n	801a3f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a3f6:	4a04      	ldr	r2, [pc, #16]	; (801a408 <prvSampleTimeNow+0x3c>)
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
}
 801a3fe:	4618      	mov	r0, r3
 801a400:	3710      	adds	r7, #16
 801a402:	46bd      	mov	sp, r7
 801a404:	bd80      	pop	{r7, pc}
 801a406:	bf00      	nop
 801a408:	20002f28 	.word	0x20002f28

0801a40c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b086      	sub	sp, #24
 801a410:	af00      	add	r7, sp, #0
 801a412:	60f8      	str	r0, [r7, #12]
 801a414:	60b9      	str	r1, [r7, #8]
 801a416:	607a      	str	r2, [r7, #4]
 801a418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a41a:	2300      	movs	r3, #0
 801a41c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	68ba      	ldr	r2, [r7, #8]
 801a422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	68fa      	ldr	r2, [r7, #12]
 801a428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a42a:	68ba      	ldr	r2, [r7, #8]
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	429a      	cmp	r2, r3
 801a430:	d812      	bhi.n	801a458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	683b      	ldr	r3, [r7, #0]
 801a436:	1ad2      	subs	r2, r2, r3
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	699b      	ldr	r3, [r3, #24]
 801a43c:	429a      	cmp	r2, r3
 801a43e:	d302      	bcc.n	801a446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a440:	2301      	movs	r3, #1
 801a442:	617b      	str	r3, [r7, #20]
 801a444:	e01b      	b.n	801a47e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a446:	4b10      	ldr	r3, [pc, #64]	; (801a488 <prvInsertTimerInActiveList+0x7c>)
 801a448:	681a      	ldr	r2, [r3, #0]
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	3304      	adds	r3, #4
 801a44e:	4619      	mov	r1, r3
 801a450:	4610      	mov	r0, r2
 801a452:	f7fd fc44 	bl	8017cde <vListInsert>
 801a456:	e012      	b.n	801a47e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a458:	687a      	ldr	r2, [r7, #4]
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	429a      	cmp	r2, r3
 801a45e:	d206      	bcs.n	801a46e <prvInsertTimerInActiveList+0x62>
 801a460:	68ba      	ldr	r2, [r7, #8]
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	429a      	cmp	r2, r3
 801a466:	d302      	bcc.n	801a46e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a468:	2301      	movs	r3, #1
 801a46a:	617b      	str	r3, [r7, #20]
 801a46c:	e007      	b.n	801a47e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a46e:	4b07      	ldr	r3, [pc, #28]	; (801a48c <prvInsertTimerInActiveList+0x80>)
 801a470:	681a      	ldr	r2, [r3, #0]
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	3304      	adds	r3, #4
 801a476:	4619      	mov	r1, r3
 801a478:	4610      	mov	r0, r2
 801a47a:	f7fd fc30 	bl	8017cde <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a47e:	697b      	ldr	r3, [r7, #20]
}
 801a480:	4618      	mov	r0, r3
 801a482:	3718      	adds	r7, #24
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}
 801a488:	20002f1c 	.word	0x20002f1c
 801a48c:	20002f18 	.word	0x20002f18

0801a490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a490:	b580      	push	{r7, lr}
 801a492:	b08c      	sub	sp, #48	; 0x30
 801a494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a496:	e0b2      	b.n	801a5fe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	f2c0 80ae 	blt.w	801a5fc <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a4a0:	693b      	ldr	r3, [r7, #16]
 801a4a2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a6:	695b      	ldr	r3, [r3, #20]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d004      	beq.n	801a4b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ae:	3304      	adds	r3, #4
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	f7fd fc4d 	bl	8017d50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a4b6:	1d3b      	adds	r3, r7, #4
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f7ff ff87 	bl	801a3cc <prvSampleTimeNow>
 801a4be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801a4c0:	68bb      	ldr	r3, [r7, #8]
 801a4c2:	2b09      	cmp	r3, #9
 801a4c4:	f200 809b 	bhi.w	801a5fe <prvProcessReceivedCommands+0x16e>
 801a4c8:	a201      	add	r2, pc, #4	; (adr r2, 801a4d0 <prvProcessReceivedCommands+0x40>)
 801a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4ce:	bf00      	nop
 801a4d0:	0801a4f9 	.word	0x0801a4f9
 801a4d4:	0801a4f9 	.word	0x0801a4f9
 801a4d8:	0801a4f9 	.word	0x0801a4f9
 801a4dc:	0801a571 	.word	0x0801a571
 801a4e0:	0801a585 	.word	0x0801a585
 801a4e4:	0801a5d3 	.word	0x0801a5d3
 801a4e8:	0801a4f9 	.word	0x0801a4f9
 801a4ec:	0801a4f9 	.word	0x0801a4f9
 801a4f0:	0801a571 	.word	0x0801a571
 801a4f4:	0801a585 	.word	0x0801a585
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a4fe:	f043 0301 	orr.w	r3, r3, #1
 801a502:	b2da      	uxtb	r2, r3
 801a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a50a:	68fa      	ldr	r2, [r7, #12]
 801a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50e:	699b      	ldr	r3, [r3, #24]
 801a510:	18d1      	adds	r1, r2, r3
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	6a3a      	ldr	r2, [r7, #32]
 801a516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a518:	f7ff ff78 	bl	801a40c <prvInsertTimerInActiveList>
 801a51c:	4603      	mov	r3, r0
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d06d      	beq.n	801a5fe <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a524:	6a1b      	ldr	r3, [r3, #32]
 801a526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a52c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a530:	f003 0304 	and.w	r3, r3, #4
 801a534:	2b00      	cmp	r3, #0
 801a536:	d062      	beq.n	801a5fe <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a538:	68fa      	ldr	r2, [r7, #12]
 801a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a53c:	699b      	ldr	r3, [r3, #24]
 801a53e:	441a      	add	r2, r3
 801a540:	2300      	movs	r3, #0
 801a542:	9300      	str	r3, [sp, #0]
 801a544:	2300      	movs	r3, #0
 801a546:	2100      	movs	r1, #0
 801a548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a54a:	f7ff fe1d 	bl	801a188 <xTimerGenericCommand>
 801a54e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801a550:	69fb      	ldr	r3, [r7, #28]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d153      	bne.n	801a5fe <prvProcessReceivedCommands+0x16e>
	__asm volatile
 801a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a55a:	b672      	cpsid	i
 801a55c:	f383 8811 	msr	BASEPRI, r3
 801a560:	f3bf 8f6f 	isb	sy
 801a564:	f3bf 8f4f 	dsb	sy
 801a568:	b662      	cpsie	i
 801a56a:	61bb      	str	r3, [r7, #24]
}
 801a56c:	bf00      	nop
 801a56e:	e7fe      	b.n	801a56e <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a576:	f023 0301 	bic.w	r3, r3, #1
 801a57a:	b2da      	uxtb	r2, r3
 801a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a57e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 801a582:	e03c      	b.n	801a5fe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a586:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a58a:	f043 0301 	orr.w	r3, r3, #1
 801a58e:	b2da      	uxtb	r2, r3
 801a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a596:	68fa      	ldr	r2, [r7, #12]
 801a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59e:	699b      	ldr	r3, [r3, #24]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d10c      	bne.n	801a5be <prvProcessReceivedCommands+0x12e>
	__asm volatile
 801a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5a8:	b672      	cpsid	i
 801a5aa:	f383 8811 	msr	BASEPRI, r3
 801a5ae:	f3bf 8f6f 	isb	sy
 801a5b2:	f3bf 8f4f 	dsb	sy
 801a5b6:	b662      	cpsie	i
 801a5b8:	617b      	str	r3, [r7, #20]
}
 801a5ba:	bf00      	nop
 801a5bc:	e7fe      	b.n	801a5bc <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c0:	699a      	ldr	r2, [r3, #24]
 801a5c2:	6a3b      	ldr	r3, [r7, #32]
 801a5c4:	18d1      	adds	r1, r2, r3
 801a5c6:	6a3b      	ldr	r3, [r7, #32]
 801a5c8:	6a3a      	ldr	r2, [r7, #32]
 801a5ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5cc:	f7ff ff1e 	bl	801a40c <prvInsertTimerInActiveList>
					break;
 801a5d0:	e015      	b.n	801a5fe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a5d8:	f003 0302 	and.w	r3, r3, #2
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d103      	bne.n	801a5e8 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801a5e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5e2:	f000 fbc9 	bl	801ad78 <vPortFree>
 801a5e6:	e00a      	b.n	801a5fe <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a5ee:	f023 0301 	bic.w	r3, r3, #1
 801a5f2:	b2da      	uxtb	r2, r3
 801a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a5fa:	e000      	b.n	801a5fe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801a5fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a5fe:	4b08      	ldr	r3, [pc, #32]	; (801a620 <prvProcessReceivedCommands+0x190>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f107 0108 	add.w	r1, r7, #8
 801a606:	2200      	movs	r2, #0
 801a608:	4618      	mov	r0, r3
 801a60a:	f7fd febf 	bl	801838c <xQueueReceive>
 801a60e:	4603      	mov	r3, r0
 801a610:	2b00      	cmp	r3, #0
 801a612:	f47f af41 	bne.w	801a498 <prvProcessReceivedCommands+0x8>
	}
}
 801a616:	bf00      	nop
 801a618:	bf00      	nop
 801a61a:	3728      	adds	r7, #40	; 0x28
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}
 801a620:	20002f20 	.word	0x20002f20

0801a624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b088      	sub	sp, #32
 801a628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a62a:	e04a      	b.n	801a6c2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a62c:	4b2e      	ldr	r3, [pc, #184]	; (801a6e8 <prvSwitchTimerLists+0xc4>)
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	68db      	ldr	r3, [r3, #12]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a636:	4b2c      	ldr	r3, [pc, #176]	; (801a6e8 <prvSwitchTimerLists+0xc4>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	68db      	ldr	r3, [r3, #12]
 801a63c:	68db      	ldr	r3, [r3, #12]
 801a63e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	3304      	adds	r3, #4
 801a644:	4618      	mov	r0, r3
 801a646:	f7fd fb83 	bl	8017d50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	6a1b      	ldr	r3, [r3, #32]
 801a64e:	68f8      	ldr	r0, [r7, #12]
 801a650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a658:	f003 0304 	and.w	r3, r3, #4
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d030      	beq.n	801a6c2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	699b      	ldr	r3, [r3, #24]
 801a664:	693a      	ldr	r2, [r7, #16]
 801a666:	4413      	add	r3, r2
 801a668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a66a:	68ba      	ldr	r2, [r7, #8]
 801a66c:	693b      	ldr	r3, [r7, #16]
 801a66e:	429a      	cmp	r2, r3
 801a670:	d90e      	bls.n	801a690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	68ba      	ldr	r2, [r7, #8]
 801a676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	68fa      	ldr	r2, [r7, #12]
 801a67c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a67e:	4b1a      	ldr	r3, [pc, #104]	; (801a6e8 <prvSwitchTimerLists+0xc4>)
 801a680:	681a      	ldr	r2, [r3, #0]
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	3304      	adds	r3, #4
 801a686:	4619      	mov	r1, r3
 801a688:	4610      	mov	r0, r2
 801a68a:	f7fd fb28 	bl	8017cde <vListInsert>
 801a68e:	e018      	b.n	801a6c2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a690:	2300      	movs	r3, #0
 801a692:	9300      	str	r3, [sp, #0]
 801a694:	2300      	movs	r3, #0
 801a696:	693a      	ldr	r2, [r7, #16]
 801a698:	2100      	movs	r1, #0
 801a69a:	68f8      	ldr	r0, [r7, #12]
 801a69c:	f7ff fd74 	bl	801a188 <xTimerGenericCommand>
 801a6a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d10c      	bne.n	801a6c2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 801a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6ac:	b672      	cpsid	i
 801a6ae:	f383 8811 	msr	BASEPRI, r3
 801a6b2:	f3bf 8f6f 	isb	sy
 801a6b6:	f3bf 8f4f 	dsb	sy
 801a6ba:	b662      	cpsie	i
 801a6bc:	603b      	str	r3, [r7, #0]
}
 801a6be:	bf00      	nop
 801a6c0:	e7fe      	b.n	801a6c0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a6c2:	4b09      	ldr	r3, [pc, #36]	; (801a6e8 <prvSwitchTimerLists+0xc4>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d1af      	bne.n	801a62c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a6cc:	4b06      	ldr	r3, [pc, #24]	; (801a6e8 <prvSwitchTimerLists+0xc4>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a6d2:	4b06      	ldr	r3, [pc, #24]	; (801a6ec <prvSwitchTimerLists+0xc8>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	4a04      	ldr	r2, [pc, #16]	; (801a6e8 <prvSwitchTimerLists+0xc4>)
 801a6d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801a6da:	4a04      	ldr	r2, [pc, #16]	; (801a6ec <prvSwitchTimerLists+0xc8>)
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	6013      	str	r3, [r2, #0]
}
 801a6e0:	bf00      	nop
 801a6e2:	3718      	adds	r7, #24
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}
 801a6e8:	20002f18 	.word	0x20002f18
 801a6ec:	20002f1c 	.word	0x20002f1c

0801a6f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b082      	sub	sp, #8
 801a6f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a6f6:	f000 f949 	bl	801a98c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a6fa:	4b15      	ldr	r3, [pc, #84]	; (801a750 <prvCheckForValidListAndQueue+0x60>)
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d120      	bne.n	801a744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801a702:	4814      	ldr	r0, [pc, #80]	; (801a754 <prvCheckForValidListAndQueue+0x64>)
 801a704:	f7fd fa9a 	bl	8017c3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a708:	4813      	ldr	r0, [pc, #76]	; (801a758 <prvCheckForValidListAndQueue+0x68>)
 801a70a:	f7fd fa97 	bl	8017c3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a70e:	4b13      	ldr	r3, [pc, #76]	; (801a75c <prvCheckForValidListAndQueue+0x6c>)
 801a710:	4a10      	ldr	r2, [pc, #64]	; (801a754 <prvCheckForValidListAndQueue+0x64>)
 801a712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a714:	4b12      	ldr	r3, [pc, #72]	; (801a760 <prvCheckForValidListAndQueue+0x70>)
 801a716:	4a10      	ldr	r2, [pc, #64]	; (801a758 <prvCheckForValidListAndQueue+0x68>)
 801a718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a71a:	2300      	movs	r3, #0
 801a71c:	9300      	str	r3, [sp, #0]
 801a71e:	4b11      	ldr	r3, [pc, #68]	; (801a764 <prvCheckForValidListAndQueue+0x74>)
 801a720:	4a11      	ldr	r2, [pc, #68]	; (801a768 <prvCheckForValidListAndQueue+0x78>)
 801a722:	210c      	movs	r1, #12
 801a724:	2001      	movs	r0, #1
 801a726:	f7fd fba7 	bl	8017e78 <xQueueGenericCreateStatic>
 801a72a:	4603      	mov	r3, r0
 801a72c:	4a08      	ldr	r2, [pc, #32]	; (801a750 <prvCheckForValidListAndQueue+0x60>)
 801a72e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a730:	4b07      	ldr	r3, [pc, #28]	; (801a750 <prvCheckForValidListAndQueue+0x60>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d005      	beq.n	801a744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a738:	4b05      	ldr	r3, [pc, #20]	; (801a750 <prvCheckForValidListAndQueue+0x60>)
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	490b      	ldr	r1, [pc, #44]	; (801a76c <prvCheckForValidListAndQueue+0x7c>)
 801a73e:	4618      	mov	r0, r3
 801a740:	f7fe f8a0 	bl	8018884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a744:	f000 f956 	bl	801a9f4 <vPortExitCritical>
}
 801a748:	bf00      	nop
 801a74a:	46bd      	mov	sp, r7
 801a74c:	bd80      	pop	{r7, pc}
 801a74e:	bf00      	nop
 801a750:	20002f20 	.word	0x20002f20
 801a754:	20002ef0 	.word	0x20002ef0
 801a758:	20002f04 	.word	0x20002f04
 801a75c:	20002f18 	.word	0x20002f18
 801a760:	20002f1c 	.word	0x20002f1c
 801a764:	20002f38 	.word	0x20002f38
 801a768:	20002f2c 	.word	0x20002f2c
 801a76c:	080205a8 	.word	0x080205a8

0801a770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a770:	b480      	push	{r7}
 801a772:	b085      	sub	sp, #20
 801a774:	af00      	add	r7, sp, #0
 801a776:	60f8      	str	r0, [r7, #12]
 801a778:	60b9      	str	r1, [r7, #8]
 801a77a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	3b04      	subs	r3, #4
 801a780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	3b04      	subs	r3, #4
 801a78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	f023 0201 	bic.w	r2, r3, #1
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	3b04      	subs	r3, #4
 801a79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a7a0:	4a0c      	ldr	r2, [pc, #48]	; (801a7d4 <pxPortInitialiseStack+0x64>)
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	3b14      	subs	r3, #20
 801a7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a7ac:	687a      	ldr	r2, [r7, #4]
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	3b04      	subs	r3, #4
 801a7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	f06f 0202 	mvn.w	r2, #2
 801a7be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	3b20      	subs	r3, #32
 801a7c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a7c6:	68fb      	ldr	r3, [r7, #12]
}
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	3714      	adds	r7, #20
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d2:	4770      	bx	lr
 801a7d4:	0801a7d9 	.word	0x0801a7d9

0801a7d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a7d8:	b480      	push	{r7}
 801a7da:	b085      	sub	sp, #20
 801a7dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a7de:	2300      	movs	r3, #0
 801a7e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a7e2:	4b14      	ldr	r3, [pc, #80]	; (801a834 <prvTaskExitError+0x5c>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7ea:	d00c      	beq.n	801a806 <prvTaskExitError+0x2e>
	__asm volatile
 801a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7f0:	b672      	cpsid	i
 801a7f2:	f383 8811 	msr	BASEPRI, r3
 801a7f6:	f3bf 8f6f 	isb	sy
 801a7fa:	f3bf 8f4f 	dsb	sy
 801a7fe:	b662      	cpsie	i
 801a800:	60fb      	str	r3, [r7, #12]
}
 801a802:	bf00      	nop
 801a804:	e7fe      	b.n	801a804 <prvTaskExitError+0x2c>
	__asm volatile
 801a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a80a:	b672      	cpsid	i
 801a80c:	f383 8811 	msr	BASEPRI, r3
 801a810:	f3bf 8f6f 	isb	sy
 801a814:	f3bf 8f4f 	dsb	sy
 801a818:	b662      	cpsie	i
 801a81a:	60bb      	str	r3, [r7, #8]
}
 801a81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a81e:	bf00      	nop
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d0fc      	beq.n	801a820 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a826:	bf00      	nop
 801a828:	bf00      	nop
 801a82a:	3714      	adds	r7, #20
 801a82c:	46bd      	mov	sp, r7
 801a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a832:	4770      	bx	lr
 801a834:	20000068 	.word	0x20000068
	...

0801a840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a840:	4b07      	ldr	r3, [pc, #28]	; (801a860 <pxCurrentTCBConst2>)
 801a842:	6819      	ldr	r1, [r3, #0]
 801a844:	6808      	ldr	r0, [r1, #0]
 801a846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a84a:	f380 8809 	msr	PSP, r0
 801a84e:	f3bf 8f6f 	isb	sy
 801a852:	f04f 0000 	mov.w	r0, #0
 801a856:	f380 8811 	msr	BASEPRI, r0
 801a85a:	4770      	bx	lr
 801a85c:	f3af 8000 	nop.w

0801a860 <pxCurrentTCBConst2>:
 801a860:	20002dc4 	.word	0x20002dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a864:	bf00      	nop
 801a866:	bf00      	nop

0801a868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a868:	4808      	ldr	r0, [pc, #32]	; (801a88c <prvPortStartFirstTask+0x24>)
 801a86a:	6800      	ldr	r0, [r0, #0]
 801a86c:	6800      	ldr	r0, [r0, #0]
 801a86e:	f380 8808 	msr	MSP, r0
 801a872:	f04f 0000 	mov.w	r0, #0
 801a876:	f380 8814 	msr	CONTROL, r0
 801a87a:	b662      	cpsie	i
 801a87c:	b661      	cpsie	f
 801a87e:	f3bf 8f4f 	dsb	sy
 801a882:	f3bf 8f6f 	isb	sy
 801a886:	df00      	svc	0
 801a888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a88a:	bf00      	nop
 801a88c:	e000ed08 	.word	0xe000ed08

0801a890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b084      	sub	sp, #16
 801a894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a896:	4b37      	ldr	r3, [pc, #220]	; (801a974 <xPortStartScheduler+0xe4>)
 801a898:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	781b      	ldrb	r3, [r3, #0]
 801a89e:	b2db      	uxtb	r3, r3
 801a8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	22ff      	movs	r2, #255	; 0xff
 801a8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	781b      	ldrb	r3, [r3, #0]
 801a8ac:	b2db      	uxtb	r3, r3
 801a8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a8b0:	78fb      	ldrb	r3, [r7, #3]
 801a8b2:	b2db      	uxtb	r3, r3
 801a8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a8b8:	b2da      	uxtb	r2, r3
 801a8ba:	4b2f      	ldr	r3, [pc, #188]	; (801a978 <xPortStartScheduler+0xe8>)
 801a8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a8be:	4b2f      	ldr	r3, [pc, #188]	; (801a97c <xPortStartScheduler+0xec>)
 801a8c0:	2207      	movs	r2, #7
 801a8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a8c4:	e009      	b.n	801a8da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801a8c6:	4b2d      	ldr	r3, [pc, #180]	; (801a97c <xPortStartScheduler+0xec>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	3b01      	subs	r3, #1
 801a8cc:	4a2b      	ldr	r2, [pc, #172]	; (801a97c <xPortStartScheduler+0xec>)
 801a8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a8d0:	78fb      	ldrb	r3, [r7, #3]
 801a8d2:	b2db      	uxtb	r3, r3
 801a8d4:	005b      	lsls	r3, r3, #1
 801a8d6:	b2db      	uxtb	r3, r3
 801a8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a8da:	78fb      	ldrb	r3, [r7, #3]
 801a8dc:	b2db      	uxtb	r3, r3
 801a8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8e2:	2b80      	cmp	r3, #128	; 0x80
 801a8e4:	d0ef      	beq.n	801a8c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a8e6:	4b25      	ldr	r3, [pc, #148]	; (801a97c <xPortStartScheduler+0xec>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	f1c3 0307 	rsb	r3, r3, #7
 801a8ee:	2b04      	cmp	r3, #4
 801a8f0:	d00c      	beq.n	801a90c <xPortStartScheduler+0x7c>
	__asm volatile
 801a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8f6:	b672      	cpsid	i
 801a8f8:	f383 8811 	msr	BASEPRI, r3
 801a8fc:	f3bf 8f6f 	isb	sy
 801a900:	f3bf 8f4f 	dsb	sy
 801a904:	b662      	cpsie	i
 801a906:	60bb      	str	r3, [r7, #8]
}
 801a908:	bf00      	nop
 801a90a:	e7fe      	b.n	801a90a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a90c:	4b1b      	ldr	r3, [pc, #108]	; (801a97c <xPortStartScheduler+0xec>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	021b      	lsls	r3, r3, #8
 801a912:	4a1a      	ldr	r2, [pc, #104]	; (801a97c <xPortStartScheduler+0xec>)
 801a914:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a916:	4b19      	ldr	r3, [pc, #100]	; (801a97c <xPortStartScheduler+0xec>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a91e:	4a17      	ldr	r2, [pc, #92]	; (801a97c <xPortStartScheduler+0xec>)
 801a920:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	b2da      	uxtb	r2, r3
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a92a:	4b15      	ldr	r3, [pc, #84]	; (801a980 <xPortStartScheduler+0xf0>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	4a14      	ldr	r2, [pc, #80]	; (801a980 <xPortStartScheduler+0xf0>)
 801a930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a934:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a936:	4b12      	ldr	r3, [pc, #72]	; (801a980 <xPortStartScheduler+0xf0>)
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	4a11      	ldr	r2, [pc, #68]	; (801a980 <xPortStartScheduler+0xf0>)
 801a93c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a940:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a942:	f000 f8dd 	bl	801ab00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a946:	4b0f      	ldr	r3, [pc, #60]	; (801a984 <xPortStartScheduler+0xf4>)
 801a948:	2200      	movs	r2, #0
 801a94a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a94c:	f000 f8fc 	bl	801ab48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a950:	4b0d      	ldr	r3, [pc, #52]	; (801a988 <xPortStartScheduler+0xf8>)
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	4a0c      	ldr	r2, [pc, #48]	; (801a988 <xPortStartScheduler+0xf8>)
 801a956:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a95a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a95c:	f7ff ff84 	bl	801a868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a960:	f7fe fdf0 	bl	8019544 <vTaskSwitchContext>
	prvTaskExitError();
 801a964:	f7ff ff38 	bl	801a7d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a968:	2300      	movs	r3, #0
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	3710      	adds	r7, #16
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd80      	pop	{r7, pc}
 801a972:	bf00      	nop
 801a974:	e000e400 	.word	0xe000e400
 801a978:	20002f80 	.word	0x20002f80
 801a97c:	20002f84 	.word	0x20002f84
 801a980:	e000ed20 	.word	0xe000ed20
 801a984:	20000068 	.word	0x20000068
 801a988:	e000ef34 	.word	0xe000ef34

0801a98c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a98c:	b480      	push	{r7}
 801a98e:	b083      	sub	sp, #12
 801a990:	af00      	add	r7, sp, #0
	__asm volatile
 801a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a996:	b672      	cpsid	i
 801a998:	f383 8811 	msr	BASEPRI, r3
 801a99c:	f3bf 8f6f 	isb	sy
 801a9a0:	f3bf 8f4f 	dsb	sy
 801a9a4:	b662      	cpsie	i
 801a9a6:	607b      	str	r3, [r7, #4]
}
 801a9a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a9aa:	4b10      	ldr	r3, [pc, #64]	; (801a9ec <vPortEnterCritical+0x60>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	3301      	adds	r3, #1
 801a9b0:	4a0e      	ldr	r2, [pc, #56]	; (801a9ec <vPortEnterCritical+0x60>)
 801a9b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a9b4:	4b0d      	ldr	r3, [pc, #52]	; (801a9ec <vPortEnterCritical+0x60>)
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	2b01      	cmp	r3, #1
 801a9ba:	d111      	bne.n	801a9e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a9bc:	4b0c      	ldr	r3, [pc, #48]	; (801a9f0 <vPortEnterCritical+0x64>)
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	b2db      	uxtb	r3, r3
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d00c      	beq.n	801a9e0 <vPortEnterCritical+0x54>
	__asm volatile
 801a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9ca:	b672      	cpsid	i
 801a9cc:	f383 8811 	msr	BASEPRI, r3
 801a9d0:	f3bf 8f6f 	isb	sy
 801a9d4:	f3bf 8f4f 	dsb	sy
 801a9d8:	b662      	cpsie	i
 801a9da:	603b      	str	r3, [r7, #0]
}
 801a9dc:	bf00      	nop
 801a9de:	e7fe      	b.n	801a9de <vPortEnterCritical+0x52>
	}
}
 801a9e0:	bf00      	nop
 801a9e2:	370c      	adds	r7, #12
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ea:	4770      	bx	lr
 801a9ec:	20000068 	.word	0x20000068
 801a9f0:	e000ed04 	.word	0xe000ed04

0801a9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a9f4:	b480      	push	{r7}
 801a9f6:	b083      	sub	sp, #12
 801a9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a9fa:	4b13      	ldr	r3, [pc, #76]	; (801aa48 <vPortExitCritical+0x54>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d10c      	bne.n	801aa1c <vPortExitCritical+0x28>
	__asm volatile
 801aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa06:	b672      	cpsid	i
 801aa08:	f383 8811 	msr	BASEPRI, r3
 801aa0c:	f3bf 8f6f 	isb	sy
 801aa10:	f3bf 8f4f 	dsb	sy
 801aa14:	b662      	cpsie	i
 801aa16:	607b      	str	r3, [r7, #4]
}
 801aa18:	bf00      	nop
 801aa1a:	e7fe      	b.n	801aa1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801aa1c:	4b0a      	ldr	r3, [pc, #40]	; (801aa48 <vPortExitCritical+0x54>)
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	3b01      	subs	r3, #1
 801aa22:	4a09      	ldr	r2, [pc, #36]	; (801aa48 <vPortExitCritical+0x54>)
 801aa24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801aa26:	4b08      	ldr	r3, [pc, #32]	; (801aa48 <vPortExitCritical+0x54>)
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d105      	bne.n	801aa3a <vPortExitCritical+0x46>
 801aa2e:	2300      	movs	r3, #0
 801aa30:	603b      	str	r3, [r7, #0]
	__asm volatile
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	f383 8811 	msr	BASEPRI, r3
}
 801aa38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801aa3a:	bf00      	nop
 801aa3c:	370c      	adds	r7, #12
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa44:	4770      	bx	lr
 801aa46:	bf00      	nop
 801aa48:	20000068 	.word	0x20000068
 801aa4c:	00000000 	.word	0x00000000

0801aa50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801aa50:	f3ef 8009 	mrs	r0, PSP
 801aa54:	f3bf 8f6f 	isb	sy
 801aa58:	4b15      	ldr	r3, [pc, #84]	; (801aab0 <pxCurrentTCBConst>)
 801aa5a:	681a      	ldr	r2, [r3, #0]
 801aa5c:	f01e 0f10 	tst.w	lr, #16
 801aa60:	bf08      	it	eq
 801aa62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801aa66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa6a:	6010      	str	r0, [r2, #0]
 801aa6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801aa70:	f04f 0050 	mov.w	r0, #80	; 0x50
 801aa74:	b672      	cpsid	i
 801aa76:	f380 8811 	msr	BASEPRI, r0
 801aa7a:	f3bf 8f4f 	dsb	sy
 801aa7e:	f3bf 8f6f 	isb	sy
 801aa82:	b662      	cpsie	i
 801aa84:	f7fe fd5e 	bl	8019544 <vTaskSwitchContext>
 801aa88:	f04f 0000 	mov.w	r0, #0
 801aa8c:	f380 8811 	msr	BASEPRI, r0
 801aa90:	bc09      	pop	{r0, r3}
 801aa92:	6819      	ldr	r1, [r3, #0]
 801aa94:	6808      	ldr	r0, [r1, #0]
 801aa96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa9a:	f01e 0f10 	tst.w	lr, #16
 801aa9e:	bf08      	it	eq
 801aaa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801aaa4:	f380 8809 	msr	PSP, r0
 801aaa8:	f3bf 8f6f 	isb	sy
 801aaac:	4770      	bx	lr
 801aaae:	bf00      	nop

0801aab0 <pxCurrentTCBConst>:
 801aab0:	20002dc4 	.word	0x20002dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801aab4:	bf00      	nop
 801aab6:	bf00      	nop

0801aab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
	__asm volatile
 801aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aac2:	b672      	cpsid	i
 801aac4:	f383 8811 	msr	BASEPRI, r3
 801aac8:	f3bf 8f6f 	isb	sy
 801aacc:	f3bf 8f4f 	dsb	sy
 801aad0:	b662      	cpsie	i
 801aad2:	607b      	str	r3, [r7, #4]
}
 801aad4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801aad6:	f7fe fc7b 	bl	80193d0 <xTaskIncrementTick>
 801aada:	4603      	mov	r3, r0
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d003      	beq.n	801aae8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801aae0:	4b06      	ldr	r3, [pc, #24]	; (801aafc <SysTick_Handler+0x44>)
 801aae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aae6:	601a      	str	r2, [r3, #0]
 801aae8:	2300      	movs	r3, #0
 801aaea:	603b      	str	r3, [r7, #0]
	__asm volatile
 801aaec:	683b      	ldr	r3, [r7, #0]
 801aaee:	f383 8811 	msr	BASEPRI, r3
}
 801aaf2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801aaf4:	bf00      	nop
 801aaf6:	3708      	adds	r7, #8
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd80      	pop	{r7, pc}
 801aafc:	e000ed04 	.word	0xe000ed04

0801ab00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801ab00:	b480      	push	{r7}
 801ab02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ab04:	4b0b      	ldr	r3, [pc, #44]	; (801ab34 <vPortSetupTimerInterrupt+0x34>)
 801ab06:	2200      	movs	r2, #0
 801ab08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ab0a:	4b0b      	ldr	r3, [pc, #44]	; (801ab38 <vPortSetupTimerInterrupt+0x38>)
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ab10:	4b0a      	ldr	r3, [pc, #40]	; (801ab3c <vPortSetupTimerInterrupt+0x3c>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	4a0a      	ldr	r2, [pc, #40]	; (801ab40 <vPortSetupTimerInterrupt+0x40>)
 801ab16:	fba2 2303 	umull	r2, r3, r2, r3
 801ab1a:	099b      	lsrs	r3, r3, #6
 801ab1c:	4a09      	ldr	r2, [pc, #36]	; (801ab44 <vPortSetupTimerInterrupt+0x44>)
 801ab1e:	3b01      	subs	r3, #1
 801ab20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ab22:	4b04      	ldr	r3, [pc, #16]	; (801ab34 <vPortSetupTimerInterrupt+0x34>)
 801ab24:	2207      	movs	r2, #7
 801ab26:	601a      	str	r2, [r3, #0]
}
 801ab28:	bf00      	nop
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab30:	4770      	bx	lr
 801ab32:	bf00      	nop
 801ab34:	e000e010 	.word	0xe000e010
 801ab38:	e000e018 	.word	0xe000e018
 801ab3c:	2000005c 	.word	0x2000005c
 801ab40:	10624dd3 	.word	0x10624dd3
 801ab44:	e000e014 	.word	0xe000e014

0801ab48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ab48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ab58 <vPortEnableVFP+0x10>
 801ab4c:	6801      	ldr	r1, [r0, #0]
 801ab4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801ab52:	6001      	str	r1, [r0, #0]
 801ab54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ab56:	bf00      	nop
 801ab58:	e000ed88 	.word	0xe000ed88

0801ab5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ab5c:	b480      	push	{r7}
 801ab5e:	b085      	sub	sp, #20
 801ab60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ab62:	f3ef 8305 	mrs	r3, IPSR
 801ab66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	2b0f      	cmp	r3, #15
 801ab6c:	d916      	bls.n	801ab9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ab6e:	4a19      	ldr	r2, [pc, #100]	; (801abd4 <vPortValidateInterruptPriority+0x78>)
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	4413      	add	r3, r2
 801ab74:	781b      	ldrb	r3, [r3, #0]
 801ab76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ab78:	4b17      	ldr	r3, [pc, #92]	; (801abd8 <vPortValidateInterruptPriority+0x7c>)
 801ab7a:	781b      	ldrb	r3, [r3, #0]
 801ab7c:	7afa      	ldrb	r2, [r7, #11]
 801ab7e:	429a      	cmp	r2, r3
 801ab80:	d20c      	bcs.n	801ab9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 801ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab86:	b672      	cpsid	i
 801ab88:	f383 8811 	msr	BASEPRI, r3
 801ab8c:	f3bf 8f6f 	isb	sy
 801ab90:	f3bf 8f4f 	dsb	sy
 801ab94:	b662      	cpsie	i
 801ab96:	607b      	str	r3, [r7, #4]
}
 801ab98:	bf00      	nop
 801ab9a:	e7fe      	b.n	801ab9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ab9c:	4b0f      	ldr	r3, [pc, #60]	; (801abdc <vPortValidateInterruptPriority+0x80>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801aba4:	4b0e      	ldr	r3, [pc, #56]	; (801abe0 <vPortValidateInterruptPriority+0x84>)
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	429a      	cmp	r2, r3
 801abaa:	d90c      	bls.n	801abc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abb0:	b672      	cpsid	i
 801abb2:	f383 8811 	msr	BASEPRI, r3
 801abb6:	f3bf 8f6f 	isb	sy
 801abba:	f3bf 8f4f 	dsb	sy
 801abbe:	b662      	cpsie	i
 801abc0:	603b      	str	r3, [r7, #0]
}
 801abc2:	bf00      	nop
 801abc4:	e7fe      	b.n	801abc4 <vPortValidateInterruptPriority+0x68>
	}
 801abc6:	bf00      	nop
 801abc8:	3714      	adds	r7, #20
 801abca:	46bd      	mov	sp, r7
 801abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd0:	4770      	bx	lr
 801abd2:	bf00      	nop
 801abd4:	e000e3f0 	.word	0xe000e3f0
 801abd8:	20002f80 	.word	0x20002f80
 801abdc:	e000ed0c 	.word	0xe000ed0c
 801abe0:	20002f84 	.word	0x20002f84

0801abe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b08a      	sub	sp, #40	; 0x28
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801abec:	2300      	movs	r3, #0
 801abee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801abf0:	f7fe fb32 	bl	8019258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801abf4:	4b5b      	ldr	r3, [pc, #364]	; (801ad64 <pvPortMalloc+0x180>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d101      	bne.n	801ac00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801abfc:	f000 f91a 	bl	801ae34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801ac00:	4b59      	ldr	r3, [pc, #356]	; (801ad68 <pvPortMalloc+0x184>)
 801ac02:	681a      	ldr	r2, [r3, #0]
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	4013      	ands	r3, r2
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	f040 8092 	bne.w	801ad32 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d01f      	beq.n	801ac54 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 801ac14:	2208      	movs	r2, #8
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	4413      	add	r3, r2
 801ac1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f003 0307 	and.w	r3, r3, #7
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d016      	beq.n	801ac54 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	f023 0307 	bic.w	r3, r3, #7
 801ac2c:	3308      	adds	r3, #8
 801ac2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	f003 0307 	and.w	r3, r3, #7
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d00c      	beq.n	801ac54 <pvPortMalloc+0x70>
	__asm volatile
 801ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac3e:	b672      	cpsid	i
 801ac40:	f383 8811 	msr	BASEPRI, r3
 801ac44:	f3bf 8f6f 	isb	sy
 801ac48:	f3bf 8f4f 	dsb	sy
 801ac4c:	b662      	cpsie	i
 801ac4e:	617b      	str	r3, [r7, #20]
}
 801ac50:	bf00      	nop
 801ac52:	e7fe      	b.n	801ac52 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d06b      	beq.n	801ad32 <pvPortMalloc+0x14e>
 801ac5a:	4b44      	ldr	r3, [pc, #272]	; (801ad6c <pvPortMalloc+0x188>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	687a      	ldr	r2, [r7, #4]
 801ac60:	429a      	cmp	r2, r3
 801ac62:	d866      	bhi.n	801ad32 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801ac64:	4b42      	ldr	r3, [pc, #264]	; (801ad70 <pvPortMalloc+0x18c>)
 801ac66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801ac68:	4b41      	ldr	r3, [pc, #260]	; (801ad70 <pvPortMalloc+0x18c>)
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ac6e:	e004      	b.n	801ac7a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 801ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7c:	685b      	ldr	r3, [r3, #4]
 801ac7e:	687a      	ldr	r2, [r7, #4]
 801ac80:	429a      	cmp	r2, r3
 801ac82:	d903      	bls.n	801ac8c <pvPortMalloc+0xa8>
 801ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d1f1      	bne.n	801ac70 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801ac8c:	4b35      	ldr	r3, [pc, #212]	; (801ad64 <pvPortMalloc+0x180>)
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac92:	429a      	cmp	r2, r3
 801ac94:	d04d      	beq.n	801ad32 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801ac96:	6a3b      	ldr	r3, [r7, #32]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	2208      	movs	r2, #8
 801ac9c:	4413      	add	r3, r2
 801ac9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aca2:	681a      	ldr	r2, [r3, #0]
 801aca4:	6a3b      	ldr	r3, [r7, #32]
 801aca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acaa:	685a      	ldr	r2, [r3, #4]
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	1ad2      	subs	r2, r2, r3
 801acb0:	2308      	movs	r3, #8
 801acb2:	005b      	lsls	r3, r3, #1
 801acb4:	429a      	cmp	r2, r3
 801acb6:	d921      	bls.n	801acfc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801acb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	4413      	add	r3, r2
 801acbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801acc0:	69bb      	ldr	r3, [r7, #24]
 801acc2:	f003 0307 	and.w	r3, r3, #7
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d00c      	beq.n	801ace4 <pvPortMalloc+0x100>
	__asm volatile
 801acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acce:	b672      	cpsid	i
 801acd0:	f383 8811 	msr	BASEPRI, r3
 801acd4:	f3bf 8f6f 	isb	sy
 801acd8:	f3bf 8f4f 	dsb	sy
 801acdc:	b662      	cpsie	i
 801acde:	613b      	str	r3, [r7, #16]
}
 801ace0:	bf00      	nop
 801ace2:	e7fe      	b.n	801ace2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace6:	685a      	ldr	r2, [r3, #4]
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	1ad2      	subs	r2, r2, r3
 801acec:	69bb      	ldr	r3, [r7, #24]
 801acee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf2:	687a      	ldr	r2, [r7, #4]
 801acf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801acf6:	69b8      	ldr	r0, [r7, #24]
 801acf8:	f000 f900 	bl	801aefc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801acfc:	4b1b      	ldr	r3, [pc, #108]	; (801ad6c <pvPortMalloc+0x188>)
 801acfe:	681a      	ldr	r2, [r3, #0]
 801ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad02:	685b      	ldr	r3, [r3, #4]
 801ad04:	1ad3      	subs	r3, r2, r3
 801ad06:	4a19      	ldr	r2, [pc, #100]	; (801ad6c <pvPortMalloc+0x188>)
 801ad08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801ad0a:	4b18      	ldr	r3, [pc, #96]	; (801ad6c <pvPortMalloc+0x188>)
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	4b19      	ldr	r3, [pc, #100]	; (801ad74 <pvPortMalloc+0x190>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d203      	bcs.n	801ad1e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801ad16:	4b15      	ldr	r3, [pc, #84]	; (801ad6c <pvPortMalloc+0x188>)
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	4a16      	ldr	r2, [pc, #88]	; (801ad74 <pvPortMalloc+0x190>)
 801ad1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad20:	685a      	ldr	r2, [r3, #4]
 801ad22:	4b11      	ldr	r3, [pc, #68]	; (801ad68 <pvPortMalloc+0x184>)
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	431a      	orrs	r2, r3
 801ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2e:	2200      	movs	r2, #0
 801ad30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ad32:	f7fe fa9f 	bl	8019274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ad36:	69fb      	ldr	r3, [r7, #28]
 801ad38:	f003 0307 	and.w	r3, r3, #7
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d00c      	beq.n	801ad5a <pvPortMalloc+0x176>
	__asm volatile
 801ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad44:	b672      	cpsid	i
 801ad46:	f383 8811 	msr	BASEPRI, r3
 801ad4a:	f3bf 8f6f 	isb	sy
 801ad4e:	f3bf 8f4f 	dsb	sy
 801ad52:	b662      	cpsie	i
 801ad54:	60fb      	str	r3, [r7, #12]
}
 801ad56:	bf00      	nop
 801ad58:	e7fe      	b.n	801ad58 <pvPortMalloc+0x174>
	return pvReturn;
 801ad5a:	69fb      	ldr	r3, [r7, #28]
}
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	3728      	adds	r7, #40	; 0x28
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bd80      	pop	{r7, pc}
 801ad64:	20040020 	.word	0x20040020
 801ad68:	2004002c 	.word	0x2004002c
 801ad6c:	20040024 	.word	0x20040024
 801ad70:	20040018 	.word	0x20040018
 801ad74:	20040028 	.word	0x20040028

0801ad78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b086      	sub	sp, #24
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d04c      	beq.n	801ae24 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ad8a:	2308      	movs	r3, #8
 801ad8c:	425b      	negs	r3, r3
 801ad8e:	697a      	ldr	r2, [r7, #20]
 801ad90:	4413      	add	r3, r2
 801ad92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ad94:	697b      	ldr	r3, [r7, #20]
 801ad96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ad98:	693b      	ldr	r3, [r7, #16]
 801ad9a:	685a      	ldr	r2, [r3, #4]
 801ad9c:	4b23      	ldr	r3, [pc, #140]	; (801ae2c <vPortFree+0xb4>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	4013      	ands	r3, r2
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d10c      	bne.n	801adc0 <vPortFree+0x48>
	__asm volatile
 801ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adaa:	b672      	cpsid	i
 801adac:	f383 8811 	msr	BASEPRI, r3
 801adb0:	f3bf 8f6f 	isb	sy
 801adb4:	f3bf 8f4f 	dsb	sy
 801adb8:	b662      	cpsie	i
 801adba:	60fb      	str	r3, [r7, #12]
}
 801adbc:	bf00      	nop
 801adbe:	e7fe      	b.n	801adbe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801adc0:	693b      	ldr	r3, [r7, #16]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d00c      	beq.n	801ade2 <vPortFree+0x6a>
	__asm volatile
 801adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adcc:	b672      	cpsid	i
 801adce:	f383 8811 	msr	BASEPRI, r3
 801add2:	f3bf 8f6f 	isb	sy
 801add6:	f3bf 8f4f 	dsb	sy
 801adda:	b662      	cpsie	i
 801addc:	60bb      	str	r3, [r7, #8]
}
 801adde:	bf00      	nop
 801ade0:	e7fe      	b.n	801ade0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ade2:	693b      	ldr	r3, [r7, #16]
 801ade4:	685a      	ldr	r2, [r3, #4]
 801ade6:	4b11      	ldr	r3, [pc, #68]	; (801ae2c <vPortFree+0xb4>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	4013      	ands	r3, r2
 801adec:	2b00      	cmp	r3, #0
 801adee:	d019      	beq.n	801ae24 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801adf0:	693b      	ldr	r3, [r7, #16]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d115      	bne.n	801ae24 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801adf8:	693b      	ldr	r3, [r7, #16]
 801adfa:	685a      	ldr	r2, [r3, #4]
 801adfc:	4b0b      	ldr	r3, [pc, #44]	; (801ae2c <vPortFree+0xb4>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	43db      	mvns	r3, r3
 801ae02:	401a      	ands	r2, r3
 801ae04:	693b      	ldr	r3, [r7, #16]
 801ae06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ae08:	f7fe fa26 	bl	8019258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ae0c:	693b      	ldr	r3, [r7, #16]
 801ae0e:	685a      	ldr	r2, [r3, #4]
 801ae10:	4b07      	ldr	r3, [pc, #28]	; (801ae30 <vPortFree+0xb8>)
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	4413      	add	r3, r2
 801ae16:	4a06      	ldr	r2, [pc, #24]	; (801ae30 <vPortFree+0xb8>)
 801ae18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ae1a:	6938      	ldr	r0, [r7, #16]
 801ae1c:	f000 f86e 	bl	801aefc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801ae20:	f7fe fa28 	bl	8019274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ae24:	bf00      	nop
 801ae26:	3718      	adds	r7, #24
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}
 801ae2c:	2004002c 	.word	0x2004002c
 801ae30:	20040024 	.word	0x20040024

0801ae34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ae34:	b480      	push	{r7}
 801ae36:	b085      	sub	sp, #20
 801ae38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ae3a:	4b29      	ldr	r3, [pc, #164]	; (801aee0 <prvHeapInit+0xac>)
 801ae3c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ae3e:	4b29      	ldr	r3, [pc, #164]	; (801aee4 <prvHeapInit+0xb0>)
 801ae40:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	f003 0307 	and.w	r3, r3, #7
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d00c      	beq.n	801ae66 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	3307      	adds	r3, #7
 801ae50:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	f023 0307 	bic.w	r3, r3, #7
 801ae58:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ae5a:	68ba      	ldr	r2, [r7, #8]
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	1ad3      	subs	r3, r2, r3
 801ae60:	4a20      	ldr	r2, [pc, #128]	; (801aee4 <prvHeapInit+0xb0>)
 801ae62:	4413      	add	r3, r2
 801ae64:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ae6a:	4a1f      	ldr	r2, [pc, #124]	; (801aee8 <prvHeapInit+0xb4>)
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801ae70:	4b1d      	ldr	r3, [pc, #116]	; (801aee8 <prvHeapInit+0xb4>)
 801ae72:	2200      	movs	r2, #0
 801ae74:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	68ba      	ldr	r2, [r7, #8]
 801ae7a:	4413      	add	r3, r2
 801ae7c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ae7e:	2208      	movs	r2, #8
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	1a9b      	subs	r3, r3, r2
 801ae84:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	f023 0307 	bic.w	r3, r3, #7
 801ae8c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	4a16      	ldr	r2, [pc, #88]	; (801aeec <prvHeapInit+0xb8>)
 801ae92:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ae94:	4b15      	ldr	r3, [pc, #84]	; (801aeec <prvHeapInit+0xb8>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2200      	movs	r2, #0
 801ae9a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ae9c:	4b13      	ldr	r3, [pc, #76]	; (801aeec <prvHeapInit+0xb8>)
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	2200      	movs	r2, #0
 801aea2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	68fa      	ldr	r2, [r7, #12]
 801aeac:	1ad2      	subs	r2, r2, r3
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801aeb2:	4b0e      	ldr	r3, [pc, #56]	; (801aeec <prvHeapInit+0xb8>)
 801aeb4:	681a      	ldr	r2, [r3, #0]
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801aeba:	683b      	ldr	r3, [r7, #0]
 801aebc:	685b      	ldr	r3, [r3, #4]
 801aebe:	4a0c      	ldr	r2, [pc, #48]	; (801aef0 <prvHeapInit+0xbc>)
 801aec0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	685b      	ldr	r3, [r3, #4]
 801aec6:	4a0b      	ldr	r2, [pc, #44]	; (801aef4 <prvHeapInit+0xc0>)
 801aec8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801aeca:	4b0b      	ldr	r3, [pc, #44]	; (801aef8 <prvHeapInit+0xc4>)
 801aecc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801aed0:	601a      	str	r2, [r3, #0]
}
 801aed2:	bf00      	nop
 801aed4:	3714      	adds	r7, #20
 801aed6:	46bd      	mov	sp, r7
 801aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aedc:	4770      	bx	lr
 801aede:	bf00      	nop
 801aee0:	0003d090 	.word	0x0003d090
 801aee4:	20002f88 	.word	0x20002f88
 801aee8:	20040018 	.word	0x20040018
 801aeec:	20040020 	.word	0x20040020
 801aef0:	20040028 	.word	0x20040028
 801aef4:	20040024 	.word	0x20040024
 801aef8:	2004002c 	.word	0x2004002c

0801aefc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801aefc:	b480      	push	{r7}
 801aefe:	b085      	sub	sp, #20
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801af04:	4b28      	ldr	r3, [pc, #160]	; (801afa8 <prvInsertBlockIntoFreeList+0xac>)
 801af06:	60fb      	str	r3, [r7, #12]
 801af08:	e002      	b.n	801af10 <prvInsertBlockIntoFreeList+0x14>
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	60fb      	str	r3, [r7, #12]
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	687a      	ldr	r2, [r7, #4]
 801af16:	429a      	cmp	r2, r3
 801af18:	d8f7      	bhi.n	801af0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	685b      	ldr	r3, [r3, #4]
 801af22:	68ba      	ldr	r2, [r7, #8]
 801af24:	4413      	add	r3, r2
 801af26:	687a      	ldr	r2, [r7, #4]
 801af28:	429a      	cmp	r2, r3
 801af2a:	d108      	bne.n	801af3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	685a      	ldr	r2, [r3, #4]
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	685b      	ldr	r3, [r3, #4]
 801af34:	441a      	add	r2, r3
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	685b      	ldr	r3, [r3, #4]
 801af46:	68ba      	ldr	r2, [r7, #8]
 801af48:	441a      	add	r2, r3
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	429a      	cmp	r2, r3
 801af50:	d118      	bne.n	801af84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	681a      	ldr	r2, [r3, #0]
 801af56:	4b15      	ldr	r3, [pc, #84]	; (801afac <prvInsertBlockIntoFreeList+0xb0>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	429a      	cmp	r2, r3
 801af5c:	d00d      	beq.n	801af7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	685a      	ldr	r2, [r3, #4]
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	685b      	ldr	r3, [r3, #4]
 801af68:	441a      	add	r2, r3
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	681a      	ldr	r2, [r3, #0]
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	601a      	str	r2, [r3, #0]
 801af78:	e008      	b.n	801af8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801af7a:	4b0c      	ldr	r3, [pc, #48]	; (801afac <prvInsertBlockIntoFreeList+0xb0>)
 801af7c:	681a      	ldr	r2, [r3, #0]
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	601a      	str	r2, [r3, #0]
 801af82:	e003      	b.n	801af8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	681a      	ldr	r2, [r3, #0]
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801af8c:	68fa      	ldr	r2, [r7, #12]
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	429a      	cmp	r2, r3
 801af92:	d002      	beq.n	801af9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	687a      	ldr	r2, [r7, #4]
 801af98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af9a:	bf00      	nop
 801af9c:	3714      	adds	r7, #20
 801af9e:	46bd      	mov	sp, r7
 801afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa4:	4770      	bx	lr
 801afa6:	bf00      	nop
 801afa8:	20040018 	.word	0x20040018
 801afac:	20040020 	.word	0x20040020

0801afb0 <__errno>:
 801afb0:	4b01      	ldr	r3, [pc, #4]	; (801afb8 <__errno+0x8>)
 801afb2:	6818      	ldr	r0, [r3, #0]
 801afb4:	4770      	bx	lr
 801afb6:	bf00      	nop
 801afb8:	2000006c 	.word	0x2000006c

0801afbc <std>:
 801afbc:	2300      	movs	r3, #0
 801afbe:	b510      	push	{r4, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	e9c0 3300 	strd	r3, r3, [r0]
 801afc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801afca:	6083      	str	r3, [r0, #8]
 801afcc:	8181      	strh	r1, [r0, #12]
 801afce:	6643      	str	r3, [r0, #100]	; 0x64
 801afd0:	81c2      	strh	r2, [r0, #14]
 801afd2:	6183      	str	r3, [r0, #24]
 801afd4:	4619      	mov	r1, r3
 801afd6:	2208      	movs	r2, #8
 801afd8:	305c      	adds	r0, #92	; 0x5c
 801afda:	f000 f91a 	bl	801b212 <memset>
 801afde:	4b05      	ldr	r3, [pc, #20]	; (801aff4 <std+0x38>)
 801afe0:	6263      	str	r3, [r4, #36]	; 0x24
 801afe2:	4b05      	ldr	r3, [pc, #20]	; (801aff8 <std+0x3c>)
 801afe4:	62a3      	str	r3, [r4, #40]	; 0x28
 801afe6:	4b05      	ldr	r3, [pc, #20]	; (801affc <std+0x40>)
 801afe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801afea:	4b05      	ldr	r3, [pc, #20]	; (801b000 <std+0x44>)
 801afec:	6224      	str	r4, [r4, #32]
 801afee:	6323      	str	r3, [r4, #48]	; 0x30
 801aff0:	bd10      	pop	{r4, pc}
 801aff2:	bf00      	nop
 801aff4:	0801c151 	.word	0x0801c151
 801aff8:	0801c173 	.word	0x0801c173
 801affc:	0801c1ab 	.word	0x0801c1ab
 801b000:	0801c1cf 	.word	0x0801c1cf

0801b004 <_cleanup_r>:
 801b004:	4901      	ldr	r1, [pc, #4]	; (801b00c <_cleanup_r+0x8>)
 801b006:	f000 b8af 	b.w	801b168 <_fwalk_reent>
 801b00a:	bf00      	nop
 801b00c:	0801dbd9 	.word	0x0801dbd9

0801b010 <__sfmoreglue>:
 801b010:	b570      	push	{r4, r5, r6, lr}
 801b012:	2268      	movs	r2, #104	; 0x68
 801b014:	1e4d      	subs	r5, r1, #1
 801b016:	4355      	muls	r5, r2
 801b018:	460e      	mov	r6, r1
 801b01a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b01e:	f000 f921 	bl	801b264 <_malloc_r>
 801b022:	4604      	mov	r4, r0
 801b024:	b140      	cbz	r0, 801b038 <__sfmoreglue+0x28>
 801b026:	2100      	movs	r1, #0
 801b028:	e9c0 1600 	strd	r1, r6, [r0]
 801b02c:	300c      	adds	r0, #12
 801b02e:	60a0      	str	r0, [r4, #8]
 801b030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b034:	f000 f8ed 	bl	801b212 <memset>
 801b038:	4620      	mov	r0, r4
 801b03a:	bd70      	pop	{r4, r5, r6, pc}

0801b03c <__sfp_lock_acquire>:
 801b03c:	4801      	ldr	r0, [pc, #4]	; (801b044 <__sfp_lock_acquire+0x8>)
 801b03e:	f000 b8d8 	b.w	801b1f2 <__retarget_lock_acquire_recursive>
 801b042:	bf00      	nop
 801b044:	20040031 	.word	0x20040031

0801b048 <__sfp_lock_release>:
 801b048:	4801      	ldr	r0, [pc, #4]	; (801b050 <__sfp_lock_release+0x8>)
 801b04a:	f000 b8d3 	b.w	801b1f4 <__retarget_lock_release_recursive>
 801b04e:	bf00      	nop
 801b050:	20040031 	.word	0x20040031

0801b054 <__sinit_lock_acquire>:
 801b054:	4801      	ldr	r0, [pc, #4]	; (801b05c <__sinit_lock_acquire+0x8>)
 801b056:	f000 b8cc 	b.w	801b1f2 <__retarget_lock_acquire_recursive>
 801b05a:	bf00      	nop
 801b05c:	20040032 	.word	0x20040032

0801b060 <__sinit_lock_release>:
 801b060:	4801      	ldr	r0, [pc, #4]	; (801b068 <__sinit_lock_release+0x8>)
 801b062:	f000 b8c7 	b.w	801b1f4 <__retarget_lock_release_recursive>
 801b066:	bf00      	nop
 801b068:	20040032 	.word	0x20040032

0801b06c <__sinit>:
 801b06c:	b510      	push	{r4, lr}
 801b06e:	4604      	mov	r4, r0
 801b070:	f7ff fff0 	bl	801b054 <__sinit_lock_acquire>
 801b074:	69a3      	ldr	r3, [r4, #24]
 801b076:	b11b      	cbz	r3, 801b080 <__sinit+0x14>
 801b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b07c:	f7ff bff0 	b.w	801b060 <__sinit_lock_release>
 801b080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b084:	6523      	str	r3, [r4, #80]	; 0x50
 801b086:	4b13      	ldr	r3, [pc, #76]	; (801b0d4 <__sinit+0x68>)
 801b088:	4a13      	ldr	r2, [pc, #76]	; (801b0d8 <__sinit+0x6c>)
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b08e:	42a3      	cmp	r3, r4
 801b090:	bf04      	itt	eq
 801b092:	2301      	moveq	r3, #1
 801b094:	61a3      	streq	r3, [r4, #24]
 801b096:	4620      	mov	r0, r4
 801b098:	f000 f820 	bl	801b0dc <__sfp>
 801b09c:	6060      	str	r0, [r4, #4]
 801b09e:	4620      	mov	r0, r4
 801b0a0:	f000 f81c 	bl	801b0dc <__sfp>
 801b0a4:	60a0      	str	r0, [r4, #8]
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	f000 f818 	bl	801b0dc <__sfp>
 801b0ac:	2200      	movs	r2, #0
 801b0ae:	60e0      	str	r0, [r4, #12]
 801b0b0:	2104      	movs	r1, #4
 801b0b2:	6860      	ldr	r0, [r4, #4]
 801b0b4:	f7ff ff82 	bl	801afbc <std>
 801b0b8:	68a0      	ldr	r0, [r4, #8]
 801b0ba:	2201      	movs	r2, #1
 801b0bc:	2109      	movs	r1, #9
 801b0be:	f7ff ff7d 	bl	801afbc <std>
 801b0c2:	68e0      	ldr	r0, [r4, #12]
 801b0c4:	2202      	movs	r2, #2
 801b0c6:	2112      	movs	r1, #18
 801b0c8:	f7ff ff78 	bl	801afbc <std>
 801b0cc:	2301      	movs	r3, #1
 801b0ce:	61a3      	str	r3, [r4, #24]
 801b0d0:	e7d2      	b.n	801b078 <__sinit+0xc>
 801b0d2:	bf00      	nop
 801b0d4:	08020774 	.word	0x08020774
 801b0d8:	0801b005 	.word	0x0801b005

0801b0dc <__sfp>:
 801b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0de:	4607      	mov	r7, r0
 801b0e0:	f7ff ffac 	bl	801b03c <__sfp_lock_acquire>
 801b0e4:	4b1e      	ldr	r3, [pc, #120]	; (801b160 <__sfp+0x84>)
 801b0e6:	681e      	ldr	r6, [r3, #0]
 801b0e8:	69b3      	ldr	r3, [r6, #24]
 801b0ea:	b913      	cbnz	r3, 801b0f2 <__sfp+0x16>
 801b0ec:	4630      	mov	r0, r6
 801b0ee:	f7ff ffbd 	bl	801b06c <__sinit>
 801b0f2:	3648      	adds	r6, #72	; 0x48
 801b0f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b0f8:	3b01      	subs	r3, #1
 801b0fa:	d503      	bpl.n	801b104 <__sfp+0x28>
 801b0fc:	6833      	ldr	r3, [r6, #0]
 801b0fe:	b30b      	cbz	r3, 801b144 <__sfp+0x68>
 801b100:	6836      	ldr	r6, [r6, #0]
 801b102:	e7f7      	b.n	801b0f4 <__sfp+0x18>
 801b104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b108:	b9d5      	cbnz	r5, 801b140 <__sfp+0x64>
 801b10a:	4b16      	ldr	r3, [pc, #88]	; (801b164 <__sfp+0x88>)
 801b10c:	60e3      	str	r3, [r4, #12]
 801b10e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b112:	6665      	str	r5, [r4, #100]	; 0x64
 801b114:	f000 f86c 	bl	801b1f0 <__retarget_lock_init_recursive>
 801b118:	f7ff ff96 	bl	801b048 <__sfp_lock_release>
 801b11c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b124:	6025      	str	r5, [r4, #0]
 801b126:	61a5      	str	r5, [r4, #24]
 801b128:	2208      	movs	r2, #8
 801b12a:	4629      	mov	r1, r5
 801b12c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b130:	f000 f86f 	bl	801b212 <memset>
 801b134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b13c:	4620      	mov	r0, r4
 801b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b140:	3468      	adds	r4, #104	; 0x68
 801b142:	e7d9      	b.n	801b0f8 <__sfp+0x1c>
 801b144:	2104      	movs	r1, #4
 801b146:	4638      	mov	r0, r7
 801b148:	f7ff ff62 	bl	801b010 <__sfmoreglue>
 801b14c:	4604      	mov	r4, r0
 801b14e:	6030      	str	r0, [r6, #0]
 801b150:	2800      	cmp	r0, #0
 801b152:	d1d5      	bne.n	801b100 <__sfp+0x24>
 801b154:	f7ff ff78 	bl	801b048 <__sfp_lock_release>
 801b158:	230c      	movs	r3, #12
 801b15a:	603b      	str	r3, [r7, #0]
 801b15c:	e7ee      	b.n	801b13c <__sfp+0x60>
 801b15e:	bf00      	nop
 801b160:	08020774 	.word	0x08020774
 801b164:	ffff0001 	.word	0xffff0001

0801b168 <_fwalk_reent>:
 801b168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b16c:	4606      	mov	r6, r0
 801b16e:	4688      	mov	r8, r1
 801b170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b174:	2700      	movs	r7, #0
 801b176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b17a:	f1b9 0901 	subs.w	r9, r9, #1
 801b17e:	d505      	bpl.n	801b18c <_fwalk_reent+0x24>
 801b180:	6824      	ldr	r4, [r4, #0]
 801b182:	2c00      	cmp	r4, #0
 801b184:	d1f7      	bne.n	801b176 <_fwalk_reent+0xe>
 801b186:	4638      	mov	r0, r7
 801b188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b18c:	89ab      	ldrh	r3, [r5, #12]
 801b18e:	2b01      	cmp	r3, #1
 801b190:	d907      	bls.n	801b1a2 <_fwalk_reent+0x3a>
 801b192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b196:	3301      	adds	r3, #1
 801b198:	d003      	beq.n	801b1a2 <_fwalk_reent+0x3a>
 801b19a:	4629      	mov	r1, r5
 801b19c:	4630      	mov	r0, r6
 801b19e:	47c0      	blx	r8
 801b1a0:	4307      	orrs	r7, r0
 801b1a2:	3568      	adds	r5, #104	; 0x68
 801b1a4:	e7e9      	b.n	801b17a <_fwalk_reent+0x12>
	...

0801b1a8 <__libc_init_array>:
 801b1a8:	b570      	push	{r4, r5, r6, lr}
 801b1aa:	4d0d      	ldr	r5, [pc, #52]	; (801b1e0 <__libc_init_array+0x38>)
 801b1ac:	4c0d      	ldr	r4, [pc, #52]	; (801b1e4 <__libc_init_array+0x3c>)
 801b1ae:	1b64      	subs	r4, r4, r5
 801b1b0:	10a4      	asrs	r4, r4, #2
 801b1b2:	2600      	movs	r6, #0
 801b1b4:	42a6      	cmp	r6, r4
 801b1b6:	d109      	bne.n	801b1cc <__libc_init_array+0x24>
 801b1b8:	4d0b      	ldr	r5, [pc, #44]	; (801b1e8 <__libc_init_array+0x40>)
 801b1ba:	4c0c      	ldr	r4, [pc, #48]	; (801b1ec <__libc_init_array+0x44>)
 801b1bc:	f004 ff1c 	bl	801fff8 <_init>
 801b1c0:	1b64      	subs	r4, r4, r5
 801b1c2:	10a4      	asrs	r4, r4, #2
 801b1c4:	2600      	movs	r6, #0
 801b1c6:	42a6      	cmp	r6, r4
 801b1c8:	d105      	bne.n	801b1d6 <__libc_init_array+0x2e>
 801b1ca:	bd70      	pop	{r4, r5, r6, pc}
 801b1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1d0:	4798      	blx	r3
 801b1d2:	3601      	adds	r6, #1
 801b1d4:	e7ee      	b.n	801b1b4 <__libc_init_array+0xc>
 801b1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1da:	4798      	blx	r3
 801b1dc:	3601      	adds	r6, #1
 801b1de:	e7f2      	b.n	801b1c6 <__libc_init_array+0x1e>
 801b1e0:	080225a0 	.word	0x080225a0
 801b1e4:	080225a0 	.word	0x080225a0
 801b1e8:	080225a0 	.word	0x080225a0
 801b1ec:	080225a4 	.word	0x080225a4

0801b1f0 <__retarget_lock_init_recursive>:
 801b1f0:	4770      	bx	lr

0801b1f2 <__retarget_lock_acquire_recursive>:
 801b1f2:	4770      	bx	lr

0801b1f4 <__retarget_lock_release_recursive>:
 801b1f4:	4770      	bx	lr

0801b1f6 <memcpy>:
 801b1f6:	440a      	add	r2, r1
 801b1f8:	4291      	cmp	r1, r2
 801b1fa:	f100 33ff 	add.w	r3, r0, #4294967295
 801b1fe:	d100      	bne.n	801b202 <memcpy+0xc>
 801b200:	4770      	bx	lr
 801b202:	b510      	push	{r4, lr}
 801b204:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b208:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b20c:	4291      	cmp	r1, r2
 801b20e:	d1f9      	bne.n	801b204 <memcpy+0xe>
 801b210:	bd10      	pop	{r4, pc}

0801b212 <memset>:
 801b212:	4402      	add	r2, r0
 801b214:	4603      	mov	r3, r0
 801b216:	4293      	cmp	r3, r2
 801b218:	d100      	bne.n	801b21c <memset+0xa>
 801b21a:	4770      	bx	lr
 801b21c:	f803 1b01 	strb.w	r1, [r3], #1
 801b220:	e7f9      	b.n	801b216 <memset+0x4>
	...

0801b224 <sbrk_aligned>:
 801b224:	b570      	push	{r4, r5, r6, lr}
 801b226:	4e0e      	ldr	r6, [pc, #56]	; (801b260 <sbrk_aligned+0x3c>)
 801b228:	460c      	mov	r4, r1
 801b22a:	6831      	ldr	r1, [r6, #0]
 801b22c:	4605      	mov	r5, r0
 801b22e:	b911      	cbnz	r1, 801b236 <sbrk_aligned+0x12>
 801b230:	f000 ff58 	bl	801c0e4 <_sbrk_r>
 801b234:	6030      	str	r0, [r6, #0]
 801b236:	4621      	mov	r1, r4
 801b238:	4628      	mov	r0, r5
 801b23a:	f000 ff53 	bl	801c0e4 <_sbrk_r>
 801b23e:	1c43      	adds	r3, r0, #1
 801b240:	d00a      	beq.n	801b258 <sbrk_aligned+0x34>
 801b242:	1cc4      	adds	r4, r0, #3
 801b244:	f024 0403 	bic.w	r4, r4, #3
 801b248:	42a0      	cmp	r0, r4
 801b24a:	d007      	beq.n	801b25c <sbrk_aligned+0x38>
 801b24c:	1a21      	subs	r1, r4, r0
 801b24e:	4628      	mov	r0, r5
 801b250:	f000 ff48 	bl	801c0e4 <_sbrk_r>
 801b254:	3001      	adds	r0, #1
 801b256:	d101      	bne.n	801b25c <sbrk_aligned+0x38>
 801b258:	f04f 34ff 	mov.w	r4, #4294967295
 801b25c:	4620      	mov	r0, r4
 801b25e:	bd70      	pop	{r4, r5, r6, pc}
 801b260:	20040038 	.word	0x20040038

0801b264 <_malloc_r>:
 801b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b268:	1ccd      	adds	r5, r1, #3
 801b26a:	f025 0503 	bic.w	r5, r5, #3
 801b26e:	3508      	adds	r5, #8
 801b270:	2d0c      	cmp	r5, #12
 801b272:	bf38      	it	cc
 801b274:	250c      	movcc	r5, #12
 801b276:	2d00      	cmp	r5, #0
 801b278:	4607      	mov	r7, r0
 801b27a:	db01      	blt.n	801b280 <_malloc_r+0x1c>
 801b27c:	42a9      	cmp	r1, r5
 801b27e:	d905      	bls.n	801b28c <_malloc_r+0x28>
 801b280:	230c      	movs	r3, #12
 801b282:	603b      	str	r3, [r7, #0]
 801b284:	2600      	movs	r6, #0
 801b286:	4630      	mov	r0, r6
 801b288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b28c:	4e2e      	ldr	r6, [pc, #184]	; (801b348 <_malloc_r+0xe4>)
 801b28e:	f003 f87f 	bl	801e390 <__malloc_lock>
 801b292:	6833      	ldr	r3, [r6, #0]
 801b294:	461c      	mov	r4, r3
 801b296:	bb34      	cbnz	r4, 801b2e6 <_malloc_r+0x82>
 801b298:	4629      	mov	r1, r5
 801b29a:	4638      	mov	r0, r7
 801b29c:	f7ff ffc2 	bl	801b224 <sbrk_aligned>
 801b2a0:	1c43      	adds	r3, r0, #1
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	d14d      	bne.n	801b342 <_malloc_r+0xde>
 801b2a6:	6834      	ldr	r4, [r6, #0]
 801b2a8:	4626      	mov	r6, r4
 801b2aa:	2e00      	cmp	r6, #0
 801b2ac:	d140      	bne.n	801b330 <_malloc_r+0xcc>
 801b2ae:	6823      	ldr	r3, [r4, #0]
 801b2b0:	4631      	mov	r1, r6
 801b2b2:	4638      	mov	r0, r7
 801b2b4:	eb04 0803 	add.w	r8, r4, r3
 801b2b8:	f000 ff14 	bl	801c0e4 <_sbrk_r>
 801b2bc:	4580      	cmp	r8, r0
 801b2be:	d13a      	bne.n	801b336 <_malloc_r+0xd2>
 801b2c0:	6821      	ldr	r1, [r4, #0]
 801b2c2:	3503      	adds	r5, #3
 801b2c4:	1a6d      	subs	r5, r5, r1
 801b2c6:	f025 0503 	bic.w	r5, r5, #3
 801b2ca:	3508      	adds	r5, #8
 801b2cc:	2d0c      	cmp	r5, #12
 801b2ce:	bf38      	it	cc
 801b2d0:	250c      	movcc	r5, #12
 801b2d2:	4629      	mov	r1, r5
 801b2d4:	4638      	mov	r0, r7
 801b2d6:	f7ff ffa5 	bl	801b224 <sbrk_aligned>
 801b2da:	3001      	adds	r0, #1
 801b2dc:	d02b      	beq.n	801b336 <_malloc_r+0xd2>
 801b2de:	6823      	ldr	r3, [r4, #0]
 801b2e0:	442b      	add	r3, r5
 801b2e2:	6023      	str	r3, [r4, #0]
 801b2e4:	e00e      	b.n	801b304 <_malloc_r+0xa0>
 801b2e6:	6822      	ldr	r2, [r4, #0]
 801b2e8:	1b52      	subs	r2, r2, r5
 801b2ea:	d41e      	bmi.n	801b32a <_malloc_r+0xc6>
 801b2ec:	2a0b      	cmp	r2, #11
 801b2ee:	d916      	bls.n	801b31e <_malloc_r+0xba>
 801b2f0:	1961      	adds	r1, r4, r5
 801b2f2:	42a3      	cmp	r3, r4
 801b2f4:	6025      	str	r5, [r4, #0]
 801b2f6:	bf18      	it	ne
 801b2f8:	6059      	strne	r1, [r3, #4]
 801b2fa:	6863      	ldr	r3, [r4, #4]
 801b2fc:	bf08      	it	eq
 801b2fe:	6031      	streq	r1, [r6, #0]
 801b300:	5162      	str	r2, [r4, r5]
 801b302:	604b      	str	r3, [r1, #4]
 801b304:	4638      	mov	r0, r7
 801b306:	f104 060b 	add.w	r6, r4, #11
 801b30a:	f003 f847 	bl	801e39c <__malloc_unlock>
 801b30e:	f026 0607 	bic.w	r6, r6, #7
 801b312:	1d23      	adds	r3, r4, #4
 801b314:	1af2      	subs	r2, r6, r3
 801b316:	d0b6      	beq.n	801b286 <_malloc_r+0x22>
 801b318:	1b9b      	subs	r3, r3, r6
 801b31a:	50a3      	str	r3, [r4, r2]
 801b31c:	e7b3      	b.n	801b286 <_malloc_r+0x22>
 801b31e:	6862      	ldr	r2, [r4, #4]
 801b320:	42a3      	cmp	r3, r4
 801b322:	bf0c      	ite	eq
 801b324:	6032      	streq	r2, [r6, #0]
 801b326:	605a      	strne	r2, [r3, #4]
 801b328:	e7ec      	b.n	801b304 <_malloc_r+0xa0>
 801b32a:	4623      	mov	r3, r4
 801b32c:	6864      	ldr	r4, [r4, #4]
 801b32e:	e7b2      	b.n	801b296 <_malloc_r+0x32>
 801b330:	4634      	mov	r4, r6
 801b332:	6876      	ldr	r6, [r6, #4]
 801b334:	e7b9      	b.n	801b2aa <_malloc_r+0x46>
 801b336:	230c      	movs	r3, #12
 801b338:	603b      	str	r3, [r7, #0]
 801b33a:	4638      	mov	r0, r7
 801b33c:	f003 f82e 	bl	801e39c <__malloc_unlock>
 801b340:	e7a1      	b.n	801b286 <_malloc_r+0x22>
 801b342:	6025      	str	r5, [r4, #0]
 801b344:	e7de      	b.n	801b304 <_malloc_r+0xa0>
 801b346:	bf00      	nop
 801b348:	20040034 	.word	0x20040034

0801b34c <__cvt>:
 801b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b34e:	ed2d 8b02 	vpush	{d8}
 801b352:	eeb0 8b40 	vmov.f64	d8, d0
 801b356:	b085      	sub	sp, #20
 801b358:	4617      	mov	r7, r2
 801b35a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b35c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b35e:	ee18 2a90 	vmov	r2, s17
 801b362:	f025 0520 	bic.w	r5, r5, #32
 801b366:	2a00      	cmp	r2, #0
 801b368:	bfb6      	itet	lt
 801b36a:	222d      	movlt	r2, #45	; 0x2d
 801b36c:	2200      	movge	r2, #0
 801b36e:	eeb1 8b40 	vneglt.f64	d8, d0
 801b372:	2d46      	cmp	r5, #70	; 0x46
 801b374:	460c      	mov	r4, r1
 801b376:	701a      	strb	r2, [r3, #0]
 801b378:	d004      	beq.n	801b384 <__cvt+0x38>
 801b37a:	2d45      	cmp	r5, #69	; 0x45
 801b37c:	d100      	bne.n	801b380 <__cvt+0x34>
 801b37e:	3401      	adds	r4, #1
 801b380:	2102      	movs	r1, #2
 801b382:	e000      	b.n	801b386 <__cvt+0x3a>
 801b384:	2103      	movs	r1, #3
 801b386:	ab03      	add	r3, sp, #12
 801b388:	9301      	str	r3, [sp, #4]
 801b38a:	ab02      	add	r3, sp, #8
 801b38c:	9300      	str	r3, [sp, #0]
 801b38e:	4622      	mov	r2, r4
 801b390:	4633      	mov	r3, r6
 801b392:	eeb0 0b48 	vmov.f64	d0, d8
 801b396:	f001 fe2b 	bl	801cff0 <_dtoa_r>
 801b39a:	2d47      	cmp	r5, #71	; 0x47
 801b39c:	d101      	bne.n	801b3a2 <__cvt+0x56>
 801b39e:	07fb      	lsls	r3, r7, #31
 801b3a0:	d51a      	bpl.n	801b3d8 <__cvt+0x8c>
 801b3a2:	2d46      	cmp	r5, #70	; 0x46
 801b3a4:	eb00 0204 	add.w	r2, r0, r4
 801b3a8:	d10c      	bne.n	801b3c4 <__cvt+0x78>
 801b3aa:	7803      	ldrb	r3, [r0, #0]
 801b3ac:	2b30      	cmp	r3, #48	; 0x30
 801b3ae:	d107      	bne.n	801b3c0 <__cvt+0x74>
 801b3b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3b8:	bf1c      	itt	ne
 801b3ba:	f1c4 0401 	rsbne	r4, r4, #1
 801b3be:	6034      	strne	r4, [r6, #0]
 801b3c0:	6833      	ldr	r3, [r6, #0]
 801b3c2:	441a      	add	r2, r3
 801b3c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3cc:	bf08      	it	eq
 801b3ce:	9203      	streq	r2, [sp, #12]
 801b3d0:	2130      	movs	r1, #48	; 0x30
 801b3d2:	9b03      	ldr	r3, [sp, #12]
 801b3d4:	4293      	cmp	r3, r2
 801b3d6:	d307      	bcc.n	801b3e8 <__cvt+0x9c>
 801b3d8:	9b03      	ldr	r3, [sp, #12]
 801b3da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b3dc:	1a1b      	subs	r3, r3, r0
 801b3de:	6013      	str	r3, [r2, #0]
 801b3e0:	b005      	add	sp, #20
 801b3e2:	ecbd 8b02 	vpop	{d8}
 801b3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3e8:	1c5c      	adds	r4, r3, #1
 801b3ea:	9403      	str	r4, [sp, #12]
 801b3ec:	7019      	strb	r1, [r3, #0]
 801b3ee:	e7f0      	b.n	801b3d2 <__cvt+0x86>

0801b3f0 <__exponent>:
 801b3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	2900      	cmp	r1, #0
 801b3f6:	bfb8      	it	lt
 801b3f8:	4249      	neglt	r1, r1
 801b3fa:	f803 2b02 	strb.w	r2, [r3], #2
 801b3fe:	bfb4      	ite	lt
 801b400:	222d      	movlt	r2, #45	; 0x2d
 801b402:	222b      	movge	r2, #43	; 0x2b
 801b404:	2909      	cmp	r1, #9
 801b406:	7042      	strb	r2, [r0, #1]
 801b408:	dd2a      	ble.n	801b460 <__exponent+0x70>
 801b40a:	f10d 0407 	add.w	r4, sp, #7
 801b40e:	46a4      	mov	ip, r4
 801b410:	270a      	movs	r7, #10
 801b412:	46a6      	mov	lr, r4
 801b414:	460a      	mov	r2, r1
 801b416:	fb91 f6f7 	sdiv	r6, r1, r7
 801b41a:	fb07 1516 	mls	r5, r7, r6, r1
 801b41e:	3530      	adds	r5, #48	; 0x30
 801b420:	2a63      	cmp	r2, #99	; 0x63
 801b422:	f104 34ff 	add.w	r4, r4, #4294967295
 801b426:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b42a:	4631      	mov	r1, r6
 801b42c:	dcf1      	bgt.n	801b412 <__exponent+0x22>
 801b42e:	3130      	adds	r1, #48	; 0x30
 801b430:	f1ae 0502 	sub.w	r5, lr, #2
 801b434:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b438:	1c44      	adds	r4, r0, #1
 801b43a:	4629      	mov	r1, r5
 801b43c:	4561      	cmp	r1, ip
 801b43e:	d30a      	bcc.n	801b456 <__exponent+0x66>
 801b440:	f10d 0209 	add.w	r2, sp, #9
 801b444:	eba2 020e 	sub.w	r2, r2, lr
 801b448:	4565      	cmp	r5, ip
 801b44a:	bf88      	it	hi
 801b44c:	2200      	movhi	r2, #0
 801b44e:	4413      	add	r3, r2
 801b450:	1a18      	subs	r0, r3, r0
 801b452:	b003      	add	sp, #12
 801b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b456:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b45a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b45e:	e7ed      	b.n	801b43c <__exponent+0x4c>
 801b460:	2330      	movs	r3, #48	; 0x30
 801b462:	3130      	adds	r1, #48	; 0x30
 801b464:	7083      	strb	r3, [r0, #2]
 801b466:	70c1      	strb	r1, [r0, #3]
 801b468:	1d03      	adds	r3, r0, #4
 801b46a:	e7f1      	b.n	801b450 <__exponent+0x60>
 801b46c:	0000      	movs	r0, r0
	...

0801b470 <_printf_float>:
 801b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b474:	b08b      	sub	sp, #44	; 0x2c
 801b476:	460c      	mov	r4, r1
 801b478:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b47c:	4616      	mov	r6, r2
 801b47e:	461f      	mov	r7, r3
 801b480:	4605      	mov	r5, r0
 801b482:	f002 ff55 	bl	801e330 <_localeconv_r>
 801b486:	f8d0 b000 	ldr.w	fp, [r0]
 801b48a:	4658      	mov	r0, fp
 801b48c:	f7e4 fed8 	bl	8000240 <strlen>
 801b490:	2300      	movs	r3, #0
 801b492:	9308      	str	r3, [sp, #32]
 801b494:	f8d8 3000 	ldr.w	r3, [r8]
 801b498:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b49c:	6822      	ldr	r2, [r4, #0]
 801b49e:	3307      	adds	r3, #7
 801b4a0:	f023 0307 	bic.w	r3, r3, #7
 801b4a4:	f103 0108 	add.w	r1, r3, #8
 801b4a8:	f8c8 1000 	str.w	r1, [r8]
 801b4ac:	4682      	mov	sl, r0
 801b4ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b4b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b4b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b718 <_printf_float+0x2a8>
 801b4ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b4be:	eeb0 6bc0 	vabs.f64	d6, d0
 801b4c2:	eeb4 6b47 	vcmp.f64	d6, d7
 801b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ca:	dd24      	ble.n	801b516 <_printf_float+0xa6>
 801b4cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d4:	d502      	bpl.n	801b4dc <_printf_float+0x6c>
 801b4d6:	232d      	movs	r3, #45	; 0x2d
 801b4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4dc:	4b90      	ldr	r3, [pc, #576]	; (801b720 <_printf_float+0x2b0>)
 801b4de:	4891      	ldr	r0, [pc, #580]	; (801b724 <_printf_float+0x2b4>)
 801b4e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b4e4:	bf94      	ite	ls
 801b4e6:	4698      	movls	r8, r3
 801b4e8:	4680      	movhi	r8, r0
 801b4ea:	2303      	movs	r3, #3
 801b4ec:	6123      	str	r3, [r4, #16]
 801b4ee:	f022 0204 	bic.w	r2, r2, #4
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	6022      	str	r2, [r4, #0]
 801b4f6:	9304      	str	r3, [sp, #16]
 801b4f8:	9700      	str	r7, [sp, #0]
 801b4fa:	4633      	mov	r3, r6
 801b4fc:	aa09      	add	r2, sp, #36	; 0x24
 801b4fe:	4621      	mov	r1, r4
 801b500:	4628      	mov	r0, r5
 801b502:	f000 f9d3 	bl	801b8ac <_printf_common>
 801b506:	3001      	adds	r0, #1
 801b508:	f040 808a 	bne.w	801b620 <_printf_float+0x1b0>
 801b50c:	f04f 30ff 	mov.w	r0, #4294967295
 801b510:	b00b      	add	sp, #44	; 0x2c
 801b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b516:	eeb4 0b40 	vcmp.f64	d0, d0
 801b51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b51e:	d709      	bvc.n	801b534 <_printf_float+0xc4>
 801b520:	ee10 3a90 	vmov	r3, s1
 801b524:	2b00      	cmp	r3, #0
 801b526:	bfbc      	itt	lt
 801b528:	232d      	movlt	r3, #45	; 0x2d
 801b52a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b52e:	487e      	ldr	r0, [pc, #504]	; (801b728 <_printf_float+0x2b8>)
 801b530:	4b7e      	ldr	r3, [pc, #504]	; (801b72c <_printf_float+0x2bc>)
 801b532:	e7d5      	b.n	801b4e0 <_printf_float+0x70>
 801b534:	6863      	ldr	r3, [r4, #4]
 801b536:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b53a:	9104      	str	r1, [sp, #16]
 801b53c:	1c59      	adds	r1, r3, #1
 801b53e:	d13c      	bne.n	801b5ba <_printf_float+0x14a>
 801b540:	2306      	movs	r3, #6
 801b542:	6063      	str	r3, [r4, #4]
 801b544:	2300      	movs	r3, #0
 801b546:	9303      	str	r3, [sp, #12]
 801b548:	ab08      	add	r3, sp, #32
 801b54a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b54e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b552:	ab07      	add	r3, sp, #28
 801b554:	6861      	ldr	r1, [r4, #4]
 801b556:	9300      	str	r3, [sp, #0]
 801b558:	6022      	str	r2, [r4, #0]
 801b55a:	f10d 031b 	add.w	r3, sp, #27
 801b55e:	4628      	mov	r0, r5
 801b560:	f7ff fef4 	bl	801b34c <__cvt>
 801b564:	9b04      	ldr	r3, [sp, #16]
 801b566:	9907      	ldr	r1, [sp, #28]
 801b568:	2b47      	cmp	r3, #71	; 0x47
 801b56a:	4680      	mov	r8, r0
 801b56c:	d108      	bne.n	801b580 <_printf_float+0x110>
 801b56e:	1cc8      	adds	r0, r1, #3
 801b570:	db02      	blt.n	801b578 <_printf_float+0x108>
 801b572:	6863      	ldr	r3, [r4, #4]
 801b574:	4299      	cmp	r1, r3
 801b576:	dd41      	ble.n	801b5fc <_printf_float+0x18c>
 801b578:	f1a9 0902 	sub.w	r9, r9, #2
 801b57c:	fa5f f989 	uxtb.w	r9, r9
 801b580:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b584:	d820      	bhi.n	801b5c8 <_printf_float+0x158>
 801b586:	3901      	subs	r1, #1
 801b588:	464a      	mov	r2, r9
 801b58a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b58e:	9107      	str	r1, [sp, #28]
 801b590:	f7ff ff2e 	bl	801b3f0 <__exponent>
 801b594:	9a08      	ldr	r2, [sp, #32]
 801b596:	9004      	str	r0, [sp, #16]
 801b598:	1813      	adds	r3, r2, r0
 801b59a:	2a01      	cmp	r2, #1
 801b59c:	6123      	str	r3, [r4, #16]
 801b59e:	dc02      	bgt.n	801b5a6 <_printf_float+0x136>
 801b5a0:	6822      	ldr	r2, [r4, #0]
 801b5a2:	07d2      	lsls	r2, r2, #31
 801b5a4:	d501      	bpl.n	801b5aa <_printf_float+0x13a>
 801b5a6:	3301      	adds	r3, #1
 801b5a8:	6123      	str	r3, [r4, #16]
 801b5aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d0a2      	beq.n	801b4f8 <_printf_float+0x88>
 801b5b2:	232d      	movs	r3, #45	; 0x2d
 801b5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5b8:	e79e      	b.n	801b4f8 <_printf_float+0x88>
 801b5ba:	9904      	ldr	r1, [sp, #16]
 801b5bc:	2947      	cmp	r1, #71	; 0x47
 801b5be:	d1c1      	bne.n	801b544 <_printf_float+0xd4>
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d1bf      	bne.n	801b544 <_printf_float+0xd4>
 801b5c4:	2301      	movs	r3, #1
 801b5c6:	e7bc      	b.n	801b542 <_printf_float+0xd2>
 801b5c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b5cc:	d118      	bne.n	801b600 <_printf_float+0x190>
 801b5ce:	2900      	cmp	r1, #0
 801b5d0:	6863      	ldr	r3, [r4, #4]
 801b5d2:	dd0b      	ble.n	801b5ec <_printf_float+0x17c>
 801b5d4:	6121      	str	r1, [r4, #16]
 801b5d6:	b913      	cbnz	r3, 801b5de <_printf_float+0x16e>
 801b5d8:	6822      	ldr	r2, [r4, #0]
 801b5da:	07d0      	lsls	r0, r2, #31
 801b5dc:	d502      	bpl.n	801b5e4 <_printf_float+0x174>
 801b5de:	3301      	adds	r3, #1
 801b5e0:	440b      	add	r3, r1
 801b5e2:	6123      	str	r3, [r4, #16]
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	65a1      	str	r1, [r4, #88]	; 0x58
 801b5e8:	9304      	str	r3, [sp, #16]
 801b5ea:	e7de      	b.n	801b5aa <_printf_float+0x13a>
 801b5ec:	b913      	cbnz	r3, 801b5f4 <_printf_float+0x184>
 801b5ee:	6822      	ldr	r2, [r4, #0]
 801b5f0:	07d2      	lsls	r2, r2, #31
 801b5f2:	d501      	bpl.n	801b5f8 <_printf_float+0x188>
 801b5f4:	3302      	adds	r3, #2
 801b5f6:	e7f4      	b.n	801b5e2 <_printf_float+0x172>
 801b5f8:	2301      	movs	r3, #1
 801b5fa:	e7f2      	b.n	801b5e2 <_printf_float+0x172>
 801b5fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b600:	9b08      	ldr	r3, [sp, #32]
 801b602:	4299      	cmp	r1, r3
 801b604:	db05      	blt.n	801b612 <_printf_float+0x1a2>
 801b606:	6823      	ldr	r3, [r4, #0]
 801b608:	6121      	str	r1, [r4, #16]
 801b60a:	07d8      	lsls	r0, r3, #31
 801b60c:	d5ea      	bpl.n	801b5e4 <_printf_float+0x174>
 801b60e:	1c4b      	adds	r3, r1, #1
 801b610:	e7e7      	b.n	801b5e2 <_printf_float+0x172>
 801b612:	2900      	cmp	r1, #0
 801b614:	bfd4      	ite	le
 801b616:	f1c1 0202 	rsble	r2, r1, #2
 801b61a:	2201      	movgt	r2, #1
 801b61c:	4413      	add	r3, r2
 801b61e:	e7e0      	b.n	801b5e2 <_printf_float+0x172>
 801b620:	6823      	ldr	r3, [r4, #0]
 801b622:	055a      	lsls	r2, r3, #21
 801b624:	d407      	bmi.n	801b636 <_printf_float+0x1c6>
 801b626:	6923      	ldr	r3, [r4, #16]
 801b628:	4642      	mov	r2, r8
 801b62a:	4631      	mov	r1, r6
 801b62c:	4628      	mov	r0, r5
 801b62e:	47b8      	blx	r7
 801b630:	3001      	adds	r0, #1
 801b632:	d12a      	bne.n	801b68a <_printf_float+0x21a>
 801b634:	e76a      	b.n	801b50c <_printf_float+0x9c>
 801b636:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b63a:	f240 80e2 	bls.w	801b802 <_printf_float+0x392>
 801b63e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b64a:	d133      	bne.n	801b6b4 <_printf_float+0x244>
 801b64c:	4a38      	ldr	r2, [pc, #224]	; (801b730 <_printf_float+0x2c0>)
 801b64e:	2301      	movs	r3, #1
 801b650:	4631      	mov	r1, r6
 801b652:	4628      	mov	r0, r5
 801b654:	47b8      	blx	r7
 801b656:	3001      	adds	r0, #1
 801b658:	f43f af58 	beq.w	801b50c <_printf_float+0x9c>
 801b65c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b660:	429a      	cmp	r2, r3
 801b662:	db02      	blt.n	801b66a <_printf_float+0x1fa>
 801b664:	6823      	ldr	r3, [r4, #0]
 801b666:	07d8      	lsls	r0, r3, #31
 801b668:	d50f      	bpl.n	801b68a <_printf_float+0x21a>
 801b66a:	4653      	mov	r3, sl
 801b66c:	465a      	mov	r2, fp
 801b66e:	4631      	mov	r1, r6
 801b670:	4628      	mov	r0, r5
 801b672:	47b8      	blx	r7
 801b674:	3001      	adds	r0, #1
 801b676:	f43f af49 	beq.w	801b50c <_printf_float+0x9c>
 801b67a:	f04f 0800 	mov.w	r8, #0
 801b67e:	f104 091a 	add.w	r9, r4, #26
 801b682:	9b08      	ldr	r3, [sp, #32]
 801b684:	3b01      	subs	r3, #1
 801b686:	4543      	cmp	r3, r8
 801b688:	dc09      	bgt.n	801b69e <_printf_float+0x22e>
 801b68a:	6823      	ldr	r3, [r4, #0]
 801b68c:	079b      	lsls	r3, r3, #30
 801b68e:	f100 8108 	bmi.w	801b8a2 <_printf_float+0x432>
 801b692:	68e0      	ldr	r0, [r4, #12]
 801b694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b696:	4298      	cmp	r0, r3
 801b698:	bfb8      	it	lt
 801b69a:	4618      	movlt	r0, r3
 801b69c:	e738      	b.n	801b510 <_printf_float+0xa0>
 801b69e:	2301      	movs	r3, #1
 801b6a0:	464a      	mov	r2, r9
 801b6a2:	4631      	mov	r1, r6
 801b6a4:	4628      	mov	r0, r5
 801b6a6:	47b8      	blx	r7
 801b6a8:	3001      	adds	r0, #1
 801b6aa:	f43f af2f 	beq.w	801b50c <_printf_float+0x9c>
 801b6ae:	f108 0801 	add.w	r8, r8, #1
 801b6b2:	e7e6      	b.n	801b682 <_printf_float+0x212>
 801b6b4:	9b07      	ldr	r3, [sp, #28]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	dc3c      	bgt.n	801b734 <_printf_float+0x2c4>
 801b6ba:	4a1d      	ldr	r2, [pc, #116]	; (801b730 <_printf_float+0x2c0>)
 801b6bc:	2301      	movs	r3, #1
 801b6be:	4631      	mov	r1, r6
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	47b8      	blx	r7
 801b6c4:	3001      	adds	r0, #1
 801b6c6:	f43f af21 	beq.w	801b50c <_printf_float+0x9c>
 801b6ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b6ce:	4313      	orrs	r3, r2
 801b6d0:	d102      	bne.n	801b6d8 <_printf_float+0x268>
 801b6d2:	6823      	ldr	r3, [r4, #0]
 801b6d4:	07d9      	lsls	r1, r3, #31
 801b6d6:	d5d8      	bpl.n	801b68a <_printf_float+0x21a>
 801b6d8:	4653      	mov	r3, sl
 801b6da:	465a      	mov	r2, fp
 801b6dc:	4631      	mov	r1, r6
 801b6de:	4628      	mov	r0, r5
 801b6e0:	47b8      	blx	r7
 801b6e2:	3001      	adds	r0, #1
 801b6e4:	f43f af12 	beq.w	801b50c <_printf_float+0x9c>
 801b6e8:	f04f 0900 	mov.w	r9, #0
 801b6ec:	f104 0a1a 	add.w	sl, r4, #26
 801b6f0:	9b07      	ldr	r3, [sp, #28]
 801b6f2:	425b      	negs	r3, r3
 801b6f4:	454b      	cmp	r3, r9
 801b6f6:	dc01      	bgt.n	801b6fc <_printf_float+0x28c>
 801b6f8:	9b08      	ldr	r3, [sp, #32]
 801b6fa:	e795      	b.n	801b628 <_printf_float+0x1b8>
 801b6fc:	2301      	movs	r3, #1
 801b6fe:	4652      	mov	r2, sl
 801b700:	4631      	mov	r1, r6
 801b702:	4628      	mov	r0, r5
 801b704:	47b8      	blx	r7
 801b706:	3001      	adds	r0, #1
 801b708:	f43f af00 	beq.w	801b50c <_printf_float+0x9c>
 801b70c:	f109 0901 	add.w	r9, r9, #1
 801b710:	e7ee      	b.n	801b6f0 <_printf_float+0x280>
 801b712:	bf00      	nop
 801b714:	f3af 8000 	nop.w
 801b718:	ffffffff 	.word	0xffffffff
 801b71c:	7fefffff 	.word	0x7fefffff
 801b720:	08020778 	.word	0x08020778
 801b724:	0802077c 	.word	0x0802077c
 801b728:	08020784 	.word	0x08020784
 801b72c:	08020780 	.word	0x08020780
 801b730:	08020788 	.word	0x08020788
 801b734:	9a08      	ldr	r2, [sp, #32]
 801b736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b738:	429a      	cmp	r2, r3
 801b73a:	bfa8      	it	ge
 801b73c:	461a      	movge	r2, r3
 801b73e:	2a00      	cmp	r2, #0
 801b740:	4691      	mov	r9, r2
 801b742:	dc38      	bgt.n	801b7b6 <_printf_float+0x346>
 801b744:	2300      	movs	r3, #0
 801b746:	9305      	str	r3, [sp, #20]
 801b748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b74c:	f104 021a 	add.w	r2, r4, #26
 801b750:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b752:	9905      	ldr	r1, [sp, #20]
 801b754:	9304      	str	r3, [sp, #16]
 801b756:	eba3 0309 	sub.w	r3, r3, r9
 801b75a:	428b      	cmp	r3, r1
 801b75c:	dc33      	bgt.n	801b7c6 <_printf_float+0x356>
 801b75e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b762:	429a      	cmp	r2, r3
 801b764:	db3c      	blt.n	801b7e0 <_printf_float+0x370>
 801b766:	6823      	ldr	r3, [r4, #0]
 801b768:	07da      	lsls	r2, r3, #31
 801b76a:	d439      	bmi.n	801b7e0 <_printf_float+0x370>
 801b76c:	9b08      	ldr	r3, [sp, #32]
 801b76e:	9a04      	ldr	r2, [sp, #16]
 801b770:	9907      	ldr	r1, [sp, #28]
 801b772:	1a9a      	subs	r2, r3, r2
 801b774:	eba3 0901 	sub.w	r9, r3, r1
 801b778:	4591      	cmp	r9, r2
 801b77a:	bfa8      	it	ge
 801b77c:	4691      	movge	r9, r2
 801b77e:	f1b9 0f00 	cmp.w	r9, #0
 801b782:	dc35      	bgt.n	801b7f0 <_printf_float+0x380>
 801b784:	f04f 0800 	mov.w	r8, #0
 801b788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b78c:	f104 0a1a 	add.w	sl, r4, #26
 801b790:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b794:	1a9b      	subs	r3, r3, r2
 801b796:	eba3 0309 	sub.w	r3, r3, r9
 801b79a:	4543      	cmp	r3, r8
 801b79c:	f77f af75 	ble.w	801b68a <_printf_float+0x21a>
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	4652      	mov	r2, sl
 801b7a4:	4631      	mov	r1, r6
 801b7a6:	4628      	mov	r0, r5
 801b7a8:	47b8      	blx	r7
 801b7aa:	3001      	adds	r0, #1
 801b7ac:	f43f aeae 	beq.w	801b50c <_printf_float+0x9c>
 801b7b0:	f108 0801 	add.w	r8, r8, #1
 801b7b4:	e7ec      	b.n	801b790 <_printf_float+0x320>
 801b7b6:	4613      	mov	r3, r2
 801b7b8:	4631      	mov	r1, r6
 801b7ba:	4642      	mov	r2, r8
 801b7bc:	4628      	mov	r0, r5
 801b7be:	47b8      	blx	r7
 801b7c0:	3001      	adds	r0, #1
 801b7c2:	d1bf      	bne.n	801b744 <_printf_float+0x2d4>
 801b7c4:	e6a2      	b.n	801b50c <_printf_float+0x9c>
 801b7c6:	2301      	movs	r3, #1
 801b7c8:	4631      	mov	r1, r6
 801b7ca:	4628      	mov	r0, r5
 801b7cc:	9204      	str	r2, [sp, #16]
 801b7ce:	47b8      	blx	r7
 801b7d0:	3001      	adds	r0, #1
 801b7d2:	f43f ae9b 	beq.w	801b50c <_printf_float+0x9c>
 801b7d6:	9b05      	ldr	r3, [sp, #20]
 801b7d8:	9a04      	ldr	r2, [sp, #16]
 801b7da:	3301      	adds	r3, #1
 801b7dc:	9305      	str	r3, [sp, #20]
 801b7de:	e7b7      	b.n	801b750 <_printf_float+0x2e0>
 801b7e0:	4653      	mov	r3, sl
 801b7e2:	465a      	mov	r2, fp
 801b7e4:	4631      	mov	r1, r6
 801b7e6:	4628      	mov	r0, r5
 801b7e8:	47b8      	blx	r7
 801b7ea:	3001      	adds	r0, #1
 801b7ec:	d1be      	bne.n	801b76c <_printf_float+0x2fc>
 801b7ee:	e68d      	b.n	801b50c <_printf_float+0x9c>
 801b7f0:	9a04      	ldr	r2, [sp, #16]
 801b7f2:	464b      	mov	r3, r9
 801b7f4:	4442      	add	r2, r8
 801b7f6:	4631      	mov	r1, r6
 801b7f8:	4628      	mov	r0, r5
 801b7fa:	47b8      	blx	r7
 801b7fc:	3001      	adds	r0, #1
 801b7fe:	d1c1      	bne.n	801b784 <_printf_float+0x314>
 801b800:	e684      	b.n	801b50c <_printf_float+0x9c>
 801b802:	9a08      	ldr	r2, [sp, #32]
 801b804:	2a01      	cmp	r2, #1
 801b806:	dc01      	bgt.n	801b80c <_printf_float+0x39c>
 801b808:	07db      	lsls	r3, r3, #31
 801b80a:	d537      	bpl.n	801b87c <_printf_float+0x40c>
 801b80c:	2301      	movs	r3, #1
 801b80e:	4642      	mov	r2, r8
 801b810:	4631      	mov	r1, r6
 801b812:	4628      	mov	r0, r5
 801b814:	47b8      	blx	r7
 801b816:	3001      	adds	r0, #1
 801b818:	f43f ae78 	beq.w	801b50c <_printf_float+0x9c>
 801b81c:	4653      	mov	r3, sl
 801b81e:	465a      	mov	r2, fp
 801b820:	4631      	mov	r1, r6
 801b822:	4628      	mov	r0, r5
 801b824:	47b8      	blx	r7
 801b826:	3001      	adds	r0, #1
 801b828:	f43f ae70 	beq.w	801b50c <_printf_float+0x9c>
 801b82c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b830:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b838:	d01b      	beq.n	801b872 <_printf_float+0x402>
 801b83a:	9b08      	ldr	r3, [sp, #32]
 801b83c:	f108 0201 	add.w	r2, r8, #1
 801b840:	3b01      	subs	r3, #1
 801b842:	4631      	mov	r1, r6
 801b844:	4628      	mov	r0, r5
 801b846:	47b8      	blx	r7
 801b848:	3001      	adds	r0, #1
 801b84a:	d10e      	bne.n	801b86a <_printf_float+0x3fa>
 801b84c:	e65e      	b.n	801b50c <_printf_float+0x9c>
 801b84e:	2301      	movs	r3, #1
 801b850:	464a      	mov	r2, r9
 801b852:	4631      	mov	r1, r6
 801b854:	4628      	mov	r0, r5
 801b856:	47b8      	blx	r7
 801b858:	3001      	adds	r0, #1
 801b85a:	f43f ae57 	beq.w	801b50c <_printf_float+0x9c>
 801b85e:	f108 0801 	add.w	r8, r8, #1
 801b862:	9b08      	ldr	r3, [sp, #32]
 801b864:	3b01      	subs	r3, #1
 801b866:	4543      	cmp	r3, r8
 801b868:	dcf1      	bgt.n	801b84e <_printf_float+0x3de>
 801b86a:	9b04      	ldr	r3, [sp, #16]
 801b86c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b870:	e6db      	b.n	801b62a <_printf_float+0x1ba>
 801b872:	f04f 0800 	mov.w	r8, #0
 801b876:	f104 091a 	add.w	r9, r4, #26
 801b87a:	e7f2      	b.n	801b862 <_printf_float+0x3f2>
 801b87c:	2301      	movs	r3, #1
 801b87e:	4642      	mov	r2, r8
 801b880:	e7df      	b.n	801b842 <_printf_float+0x3d2>
 801b882:	2301      	movs	r3, #1
 801b884:	464a      	mov	r2, r9
 801b886:	4631      	mov	r1, r6
 801b888:	4628      	mov	r0, r5
 801b88a:	47b8      	blx	r7
 801b88c:	3001      	adds	r0, #1
 801b88e:	f43f ae3d 	beq.w	801b50c <_printf_float+0x9c>
 801b892:	f108 0801 	add.w	r8, r8, #1
 801b896:	68e3      	ldr	r3, [r4, #12]
 801b898:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b89a:	1a5b      	subs	r3, r3, r1
 801b89c:	4543      	cmp	r3, r8
 801b89e:	dcf0      	bgt.n	801b882 <_printf_float+0x412>
 801b8a0:	e6f7      	b.n	801b692 <_printf_float+0x222>
 801b8a2:	f04f 0800 	mov.w	r8, #0
 801b8a6:	f104 0919 	add.w	r9, r4, #25
 801b8aa:	e7f4      	b.n	801b896 <_printf_float+0x426>

0801b8ac <_printf_common>:
 801b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8b0:	4616      	mov	r6, r2
 801b8b2:	4699      	mov	r9, r3
 801b8b4:	688a      	ldr	r2, [r1, #8]
 801b8b6:	690b      	ldr	r3, [r1, #16]
 801b8b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b8bc:	4293      	cmp	r3, r2
 801b8be:	bfb8      	it	lt
 801b8c0:	4613      	movlt	r3, r2
 801b8c2:	6033      	str	r3, [r6, #0]
 801b8c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b8c8:	4607      	mov	r7, r0
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	b10a      	cbz	r2, 801b8d2 <_printf_common+0x26>
 801b8ce:	3301      	adds	r3, #1
 801b8d0:	6033      	str	r3, [r6, #0]
 801b8d2:	6823      	ldr	r3, [r4, #0]
 801b8d4:	0699      	lsls	r1, r3, #26
 801b8d6:	bf42      	ittt	mi
 801b8d8:	6833      	ldrmi	r3, [r6, #0]
 801b8da:	3302      	addmi	r3, #2
 801b8dc:	6033      	strmi	r3, [r6, #0]
 801b8de:	6825      	ldr	r5, [r4, #0]
 801b8e0:	f015 0506 	ands.w	r5, r5, #6
 801b8e4:	d106      	bne.n	801b8f4 <_printf_common+0x48>
 801b8e6:	f104 0a19 	add.w	sl, r4, #25
 801b8ea:	68e3      	ldr	r3, [r4, #12]
 801b8ec:	6832      	ldr	r2, [r6, #0]
 801b8ee:	1a9b      	subs	r3, r3, r2
 801b8f0:	42ab      	cmp	r3, r5
 801b8f2:	dc26      	bgt.n	801b942 <_printf_common+0x96>
 801b8f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b8f8:	1e13      	subs	r3, r2, #0
 801b8fa:	6822      	ldr	r2, [r4, #0]
 801b8fc:	bf18      	it	ne
 801b8fe:	2301      	movne	r3, #1
 801b900:	0692      	lsls	r2, r2, #26
 801b902:	d42b      	bmi.n	801b95c <_printf_common+0xb0>
 801b904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b908:	4649      	mov	r1, r9
 801b90a:	4638      	mov	r0, r7
 801b90c:	47c0      	blx	r8
 801b90e:	3001      	adds	r0, #1
 801b910:	d01e      	beq.n	801b950 <_printf_common+0xa4>
 801b912:	6823      	ldr	r3, [r4, #0]
 801b914:	68e5      	ldr	r5, [r4, #12]
 801b916:	6832      	ldr	r2, [r6, #0]
 801b918:	f003 0306 	and.w	r3, r3, #6
 801b91c:	2b04      	cmp	r3, #4
 801b91e:	bf08      	it	eq
 801b920:	1aad      	subeq	r5, r5, r2
 801b922:	68a3      	ldr	r3, [r4, #8]
 801b924:	6922      	ldr	r2, [r4, #16]
 801b926:	bf0c      	ite	eq
 801b928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b92c:	2500      	movne	r5, #0
 801b92e:	4293      	cmp	r3, r2
 801b930:	bfc4      	itt	gt
 801b932:	1a9b      	subgt	r3, r3, r2
 801b934:	18ed      	addgt	r5, r5, r3
 801b936:	2600      	movs	r6, #0
 801b938:	341a      	adds	r4, #26
 801b93a:	42b5      	cmp	r5, r6
 801b93c:	d11a      	bne.n	801b974 <_printf_common+0xc8>
 801b93e:	2000      	movs	r0, #0
 801b940:	e008      	b.n	801b954 <_printf_common+0xa8>
 801b942:	2301      	movs	r3, #1
 801b944:	4652      	mov	r2, sl
 801b946:	4649      	mov	r1, r9
 801b948:	4638      	mov	r0, r7
 801b94a:	47c0      	blx	r8
 801b94c:	3001      	adds	r0, #1
 801b94e:	d103      	bne.n	801b958 <_printf_common+0xac>
 801b950:	f04f 30ff 	mov.w	r0, #4294967295
 801b954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b958:	3501      	adds	r5, #1
 801b95a:	e7c6      	b.n	801b8ea <_printf_common+0x3e>
 801b95c:	18e1      	adds	r1, r4, r3
 801b95e:	1c5a      	adds	r2, r3, #1
 801b960:	2030      	movs	r0, #48	; 0x30
 801b962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b966:	4422      	add	r2, r4
 801b968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b970:	3302      	adds	r3, #2
 801b972:	e7c7      	b.n	801b904 <_printf_common+0x58>
 801b974:	2301      	movs	r3, #1
 801b976:	4622      	mov	r2, r4
 801b978:	4649      	mov	r1, r9
 801b97a:	4638      	mov	r0, r7
 801b97c:	47c0      	blx	r8
 801b97e:	3001      	adds	r0, #1
 801b980:	d0e6      	beq.n	801b950 <_printf_common+0xa4>
 801b982:	3601      	adds	r6, #1
 801b984:	e7d9      	b.n	801b93a <_printf_common+0x8e>
	...

0801b988 <_printf_i>:
 801b988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b98c:	7e0f      	ldrb	r7, [r1, #24]
 801b98e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b990:	2f78      	cmp	r7, #120	; 0x78
 801b992:	4691      	mov	r9, r2
 801b994:	4680      	mov	r8, r0
 801b996:	460c      	mov	r4, r1
 801b998:	469a      	mov	sl, r3
 801b99a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b99e:	d807      	bhi.n	801b9b0 <_printf_i+0x28>
 801b9a0:	2f62      	cmp	r7, #98	; 0x62
 801b9a2:	d80a      	bhi.n	801b9ba <_printf_i+0x32>
 801b9a4:	2f00      	cmp	r7, #0
 801b9a6:	f000 80d8 	beq.w	801bb5a <_printf_i+0x1d2>
 801b9aa:	2f58      	cmp	r7, #88	; 0x58
 801b9ac:	f000 80a3 	beq.w	801baf6 <_printf_i+0x16e>
 801b9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b9b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b9b8:	e03a      	b.n	801ba30 <_printf_i+0xa8>
 801b9ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b9be:	2b15      	cmp	r3, #21
 801b9c0:	d8f6      	bhi.n	801b9b0 <_printf_i+0x28>
 801b9c2:	a101      	add	r1, pc, #4	; (adr r1, 801b9c8 <_printf_i+0x40>)
 801b9c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b9c8:	0801ba21 	.word	0x0801ba21
 801b9cc:	0801ba35 	.word	0x0801ba35
 801b9d0:	0801b9b1 	.word	0x0801b9b1
 801b9d4:	0801b9b1 	.word	0x0801b9b1
 801b9d8:	0801b9b1 	.word	0x0801b9b1
 801b9dc:	0801b9b1 	.word	0x0801b9b1
 801b9e0:	0801ba35 	.word	0x0801ba35
 801b9e4:	0801b9b1 	.word	0x0801b9b1
 801b9e8:	0801b9b1 	.word	0x0801b9b1
 801b9ec:	0801b9b1 	.word	0x0801b9b1
 801b9f0:	0801b9b1 	.word	0x0801b9b1
 801b9f4:	0801bb41 	.word	0x0801bb41
 801b9f8:	0801ba65 	.word	0x0801ba65
 801b9fc:	0801bb23 	.word	0x0801bb23
 801ba00:	0801b9b1 	.word	0x0801b9b1
 801ba04:	0801b9b1 	.word	0x0801b9b1
 801ba08:	0801bb63 	.word	0x0801bb63
 801ba0c:	0801b9b1 	.word	0x0801b9b1
 801ba10:	0801ba65 	.word	0x0801ba65
 801ba14:	0801b9b1 	.word	0x0801b9b1
 801ba18:	0801b9b1 	.word	0x0801b9b1
 801ba1c:	0801bb2b 	.word	0x0801bb2b
 801ba20:	682b      	ldr	r3, [r5, #0]
 801ba22:	1d1a      	adds	r2, r3, #4
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	602a      	str	r2, [r5, #0]
 801ba28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ba30:	2301      	movs	r3, #1
 801ba32:	e0a3      	b.n	801bb7c <_printf_i+0x1f4>
 801ba34:	6820      	ldr	r0, [r4, #0]
 801ba36:	6829      	ldr	r1, [r5, #0]
 801ba38:	0606      	lsls	r6, r0, #24
 801ba3a:	f101 0304 	add.w	r3, r1, #4
 801ba3e:	d50a      	bpl.n	801ba56 <_printf_i+0xce>
 801ba40:	680e      	ldr	r6, [r1, #0]
 801ba42:	602b      	str	r3, [r5, #0]
 801ba44:	2e00      	cmp	r6, #0
 801ba46:	da03      	bge.n	801ba50 <_printf_i+0xc8>
 801ba48:	232d      	movs	r3, #45	; 0x2d
 801ba4a:	4276      	negs	r6, r6
 801ba4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba50:	485e      	ldr	r0, [pc, #376]	; (801bbcc <_printf_i+0x244>)
 801ba52:	230a      	movs	r3, #10
 801ba54:	e019      	b.n	801ba8a <_printf_i+0x102>
 801ba56:	680e      	ldr	r6, [r1, #0]
 801ba58:	602b      	str	r3, [r5, #0]
 801ba5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ba5e:	bf18      	it	ne
 801ba60:	b236      	sxthne	r6, r6
 801ba62:	e7ef      	b.n	801ba44 <_printf_i+0xbc>
 801ba64:	682b      	ldr	r3, [r5, #0]
 801ba66:	6820      	ldr	r0, [r4, #0]
 801ba68:	1d19      	adds	r1, r3, #4
 801ba6a:	6029      	str	r1, [r5, #0]
 801ba6c:	0601      	lsls	r1, r0, #24
 801ba6e:	d501      	bpl.n	801ba74 <_printf_i+0xec>
 801ba70:	681e      	ldr	r6, [r3, #0]
 801ba72:	e002      	b.n	801ba7a <_printf_i+0xf2>
 801ba74:	0646      	lsls	r6, r0, #25
 801ba76:	d5fb      	bpl.n	801ba70 <_printf_i+0xe8>
 801ba78:	881e      	ldrh	r6, [r3, #0]
 801ba7a:	4854      	ldr	r0, [pc, #336]	; (801bbcc <_printf_i+0x244>)
 801ba7c:	2f6f      	cmp	r7, #111	; 0x6f
 801ba7e:	bf0c      	ite	eq
 801ba80:	2308      	moveq	r3, #8
 801ba82:	230a      	movne	r3, #10
 801ba84:	2100      	movs	r1, #0
 801ba86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ba8a:	6865      	ldr	r5, [r4, #4]
 801ba8c:	60a5      	str	r5, [r4, #8]
 801ba8e:	2d00      	cmp	r5, #0
 801ba90:	bfa2      	ittt	ge
 801ba92:	6821      	ldrge	r1, [r4, #0]
 801ba94:	f021 0104 	bicge.w	r1, r1, #4
 801ba98:	6021      	strge	r1, [r4, #0]
 801ba9a:	b90e      	cbnz	r6, 801baa0 <_printf_i+0x118>
 801ba9c:	2d00      	cmp	r5, #0
 801ba9e:	d04d      	beq.n	801bb3c <_printf_i+0x1b4>
 801baa0:	4615      	mov	r5, r2
 801baa2:	fbb6 f1f3 	udiv	r1, r6, r3
 801baa6:	fb03 6711 	mls	r7, r3, r1, r6
 801baaa:	5dc7      	ldrb	r7, [r0, r7]
 801baac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bab0:	4637      	mov	r7, r6
 801bab2:	42bb      	cmp	r3, r7
 801bab4:	460e      	mov	r6, r1
 801bab6:	d9f4      	bls.n	801baa2 <_printf_i+0x11a>
 801bab8:	2b08      	cmp	r3, #8
 801baba:	d10b      	bne.n	801bad4 <_printf_i+0x14c>
 801babc:	6823      	ldr	r3, [r4, #0]
 801babe:	07de      	lsls	r6, r3, #31
 801bac0:	d508      	bpl.n	801bad4 <_printf_i+0x14c>
 801bac2:	6923      	ldr	r3, [r4, #16]
 801bac4:	6861      	ldr	r1, [r4, #4]
 801bac6:	4299      	cmp	r1, r3
 801bac8:	bfde      	ittt	le
 801baca:	2330      	movle	r3, #48	; 0x30
 801bacc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bad0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bad4:	1b52      	subs	r2, r2, r5
 801bad6:	6122      	str	r2, [r4, #16]
 801bad8:	f8cd a000 	str.w	sl, [sp]
 801badc:	464b      	mov	r3, r9
 801bade:	aa03      	add	r2, sp, #12
 801bae0:	4621      	mov	r1, r4
 801bae2:	4640      	mov	r0, r8
 801bae4:	f7ff fee2 	bl	801b8ac <_printf_common>
 801bae8:	3001      	adds	r0, #1
 801baea:	d14c      	bne.n	801bb86 <_printf_i+0x1fe>
 801baec:	f04f 30ff 	mov.w	r0, #4294967295
 801baf0:	b004      	add	sp, #16
 801baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801baf6:	4835      	ldr	r0, [pc, #212]	; (801bbcc <_printf_i+0x244>)
 801baf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bafc:	6829      	ldr	r1, [r5, #0]
 801bafe:	6823      	ldr	r3, [r4, #0]
 801bb00:	f851 6b04 	ldr.w	r6, [r1], #4
 801bb04:	6029      	str	r1, [r5, #0]
 801bb06:	061d      	lsls	r5, r3, #24
 801bb08:	d514      	bpl.n	801bb34 <_printf_i+0x1ac>
 801bb0a:	07df      	lsls	r7, r3, #31
 801bb0c:	bf44      	itt	mi
 801bb0e:	f043 0320 	orrmi.w	r3, r3, #32
 801bb12:	6023      	strmi	r3, [r4, #0]
 801bb14:	b91e      	cbnz	r6, 801bb1e <_printf_i+0x196>
 801bb16:	6823      	ldr	r3, [r4, #0]
 801bb18:	f023 0320 	bic.w	r3, r3, #32
 801bb1c:	6023      	str	r3, [r4, #0]
 801bb1e:	2310      	movs	r3, #16
 801bb20:	e7b0      	b.n	801ba84 <_printf_i+0xfc>
 801bb22:	6823      	ldr	r3, [r4, #0]
 801bb24:	f043 0320 	orr.w	r3, r3, #32
 801bb28:	6023      	str	r3, [r4, #0]
 801bb2a:	2378      	movs	r3, #120	; 0x78
 801bb2c:	4828      	ldr	r0, [pc, #160]	; (801bbd0 <_printf_i+0x248>)
 801bb2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bb32:	e7e3      	b.n	801bafc <_printf_i+0x174>
 801bb34:	0659      	lsls	r1, r3, #25
 801bb36:	bf48      	it	mi
 801bb38:	b2b6      	uxthmi	r6, r6
 801bb3a:	e7e6      	b.n	801bb0a <_printf_i+0x182>
 801bb3c:	4615      	mov	r5, r2
 801bb3e:	e7bb      	b.n	801bab8 <_printf_i+0x130>
 801bb40:	682b      	ldr	r3, [r5, #0]
 801bb42:	6826      	ldr	r6, [r4, #0]
 801bb44:	6961      	ldr	r1, [r4, #20]
 801bb46:	1d18      	adds	r0, r3, #4
 801bb48:	6028      	str	r0, [r5, #0]
 801bb4a:	0635      	lsls	r5, r6, #24
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	d501      	bpl.n	801bb54 <_printf_i+0x1cc>
 801bb50:	6019      	str	r1, [r3, #0]
 801bb52:	e002      	b.n	801bb5a <_printf_i+0x1d2>
 801bb54:	0670      	lsls	r0, r6, #25
 801bb56:	d5fb      	bpl.n	801bb50 <_printf_i+0x1c8>
 801bb58:	8019      	strh	r1, [r3, #0]
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	6123      	str	r3, [r4, #16]
 801bb5e:	4615      	mov	r5, r2
 801bb60:	e7ba      	b.n	801bad8 <_printf_i+0x150>
 801bb62:	682b      	ldr	r3, [r5, #0]
 801bb64:	1d1a      	adds	r2, r3, #4
 801bb66:	602a      	str	r2, [r5, #0]
 801bb68:	681d      	ldr	r5, [r3, #0]
 801bb6a:	6862      	ldr	r2, [r4, #4]
 801bb6c:	2100      	movs	r1, #0
 801bb6e:	4628      	mov	r0, r5
 801bb70:	f7e4 fb6e 	bl	8000250 <memchr>
 801bb74:	b108      	cbz	r0, 801bb7a <_printf_i+0x1f2>
 801bb76:	1b40      	subs	r0, r0, r5
 801bb78:	6060      	str	r0, [r4, #4]
 801bb7a:	6863      	ldr	r3, [r4, #4]
 801bb7c:	6123      	str	r3, [r4, #16]
 801bb7e:	2300      	movs	r3, #0
 801bb80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb84:	e7a8      	b.n	801bad8 <_printf_i+0x150>
 801bb86:	6923      	ldr	r3, [r4, #16]
 801bb88:	462a      	mov	r2, r5
 801bb8a:	4649      	mov	r1, r9
 801bb8c:	4640      	mov	r0, r8
 801bb8e:	47d0      	blx	sl
 801bb90:	3001      	adds	r0, #1
 801bb92:	d0ab      	beq.n	801baec <_printf_i+0x164>
 801bb94:	6823      	ldr	r3, [r4, #0]
 801bb96:	079b      	lsls	r3, r3, #30
 801bb98:	d413      	bmi.n	801bbc2 <_printf_i+0x23a>
 801bb9a:	68e0      	ldr	r0, [r4, #12]
 801bb9c:	9b03      	ldr	r3, [sp, #12]
 801bb9e:	4298      	cmp	r0, r3
 801bba0:	bfb8      	it	lt
 801bba2:	4618      	movlt	r0, r3
 801bba4:	e7a4      	b.n	801baf0 <_printf_i+0x168>
 801bba6:	2301      	movs	r3, #1
 801bba8:	4632      	mov	r2, r6
 801bbaa:	4649      	mov	r1, r9
 801bbac:	4640      	mov	r0, r8
 801bbae:	47d0      	blx	sl
 801bbb0:	3001      	adds	r0, #1
 801bbb2:	d09b      	beq.n	801baec <_printf_i+0x164>
 801bbb4:	3501      	adds	r5, #1
 801bbb6:	68e3      	ldr	r3, [r4, #12]
 801bbb8:	9903      	ldr	r1, [sp, #12]
 801bbba:	1a5b      	subs	r3, r3, r1
 801bbbc:	42ab      	cmp	r3, r5
 801bbbe:	dcf2      	bgt.n	801bba6 <_printf_i+0x21e>
 801bbc0:	e7eb      	b.n	801bb9a <_printf_i+0x212>
 801bbc2:	2500      	movs	r5, #0
 801bbc4:	f104 0619 	add.w	r6, r4, #25
 801bbc8:	e7f5      	b.n	801bbb6 <_printf_i+0x22e>
 801bbca:	bf00      	nop
 801bbcc:	0802078a 	.word	0x0802078a
 801bbd0:	0802079b 	.word	0x0802079b

0801bbd4 <_scanf_float>:
 801bbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd8:	b087      	sub	sp, #28
 801bbda:	4617      	mov	r7, r2
 801bbdc:	9303      	str	r3, [sp, #12]
 801bbde:	688b      	ldr	r3, [r1, #8]
 801bbe0:	1e5a      	subs	r2, r3, #1
 801bbe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bbe6:	bf83      	ittte	hi
 801bbe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bbec:	195b      	addhi	r3, r3, r5
 801bbee:	9302      	strhi	r3, [sp, #8]
 801bbf0:	2300      	movls	r3, #0
 801bbf2:	bf86      	itte	hi
 801bbf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bbf8:	608b      	strhi	r3, [r1, #8]
 801bbfa:	9302      	strls	r3, [sp, #8]
 801bbfc:	680b      	ldr	r3, [r1, #0]
 801bbfe:	468b      	mov	fp, r1
 801bc00:	2500      	movs	r5, #0
 801bc02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bc06:	f84b 3b1c 	str.w	r3, [fp], #28
 801bc0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bc0e:	4680      	mov	r8, r0
 801bc10:	460c      	mov	r4, r1
 801bc12:	465e      	mov	r6, fp
 801bc14:	46aa      	mov	sl, r5
 801bc16:	46a9      	mov	r9, r5
 801bc18:	9501      	str	r5, [sp, #4]
 801bc1a:	68a2      	ldr	r2, [r4, #8]
 801bc1c:	b152      	cbz	r2, 801bc34 <_scanf_float+0x60>
 801bc1e:	683b      	ldr	r3, [r7, #0]
 801bc20:	781b      	ldrb	r3, [r3, #0]
 801bc22:	2b4e      	cmp	r3, #78	; 0x4e
 801bc24:	d864      	bhi.n	801bcf0 <_scanf_float+0x11c>
 801bc26:	2b40      	cmp	r3, #64	; 0x40
 801bc28:	d83c      	bhi.n	801bca4 <_scanf_float+0xd0>
 801bc2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801bc2e:	b2c8      	uxtb	r0, r1
 801bc30:	280e      	cmp	r0, #14
 801bc32:	d93a      	bls.n	801bcaa <_scanf_float+0xd6>
 801bc34:	f1b9 0f00 	cmp.w	r9, #0
 801bc38:	d003      	beq.n	801bc42 <_scanf_float+0x6e>
 801bc3a:	6823      	ldr	r3, [r4, #0]
 801bc3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bc40:	6023      	str	r3, [r4, #0]
 801bc42:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc46:	f1ba 0f01 	cmp.w	sl, #1
 801bc4a:	f200 8113 	bhi.w	801be74 <_scanf_float+0x2a0>
 801bc4e:	455e      	cmp	r6, fp
 801bc50:	f200 8105 	bhi.w	801be5e <_scanf_float+0x28a>
 801bc54:	2501      	movs	r5, #1
 801bc56:	4628      	mov	r0, r5
 801bc58:	b007      	add	sp, #28
 801bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801bc62:	2a0d      	cmp	r2, #13
 801bc64:	d8e6      	bhi.n	801bc34 <_scanf_float+0x60>
 801bc66:	a101      	add	r1, pc, #4	; (adr r1, 801bc6c <_scanf_float+0x98>)
 801bc68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bc6c:	0801bdab 	.word	0x0801bdab
 801bc70:	0801bc35 	.word	0x0801bc35
 801bc74:	0801bc35 	.word	0x0801bc35
 801bc78:	0801bc35 	.word	0x0801bc35
 801bc7c:	0801be0b 	.word	0x0801be0b
 801bc80:	0801bde3 	.word	0x0801bde3
 801bc84:	0801bc35 	.word	0x0801bc35
 801bc88:	0801bc35 	.word	0x0801bc35
 801bc8c:	0801bdb9 	.word	0x0801bdb9
 801bc90:	0801bc35 	.word	0x0801bc35
 801bc94:	0801bc35 	.word	0x0801bc35
 801bc98:	0801bc35 	.word	0x0801bc35
 801bc9c:	0801bc35 	.word	0x0801bc35
 801bca0:	0801bd71 	.word	0x0801bd71
 801bca4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bca8:	e7db      	b.n	801bc62 <_scanf_float+0x8e>
 801bcaa:	290e      	cmp	r1, #14
 801bcac:	d8c2      	bhi.n	801bc34 <_scanf_float+0x60>
 801bcae:	a001      	add	r0, pc, #4	; (adr r0, 801bcb4 <_scanf_float+0xe0>)
 801bcb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bcb4:	0801bd63 	.word	0x0801bd63
 801bcb8:	0801bc35 	.word	0x0801bc35
 801bcbc:	0801bd63 	.word	0x0801bd63
 801bcc0:	0801bdf7 	.word	0x0801bdf7
 801bcc4:	0801bc35 	.word	0x0801bc35
 801bcc8:	0801bd11 	.word	0x0801bd11
 801bccc:	0801bd4d 	.word	0x0801bd4d
 801bcd0:	0801bd4d 	.word	0x0801bd4d
 801bcd4:	0801bd4d 	.word	0x0801bd4d
 801bcd8:	0801bd4d 	.word	0x0801bd4d
 801bcdc:	0801bd4d 	.word	0x0801bd4d
 801bce0:	0801bd4d 	.word	0x0801bd4d
 801bce4:	0801bd4d 	.word	0x0801bd4d
 801bce8:	0801bd4d 	.word	0x0801bd4d
 801bcec:	0801bd4d 	.word	0x0801bd4d
 801bcf0:	2b6e      	cmp	r3, #110	; 0x6e
 801bcf2:	d809      	bhi.n	801bd08 <_scanf_float+0x134>
 801bcf4:	2b60      	cmp	r3, #96	; 0x60
 801bcf6:	d8b2      	bhi.n	801bc5e <_scanf_float+0x8a>
 801bcf8:	2b54      	cmp	r3, #84	; 0x54
 801bcfa:	d077      	beq.n	801bdec <_scanf_float+0x218>
 801bcfc:	2b59      	cmp	r3, #89	; 0x59
 801bcfe:	d199      	bne.n	801bc34 <_scanf_float+0x60>
 801bd00:	2d07      	cmp	r5, #7
 801bd02:	d197      	bne.n	801bc34 <_scanf_float+0x60>
 801bd04:	2508      	movs	r5, #8
 801bd06:	e029      	b.n	801bd5c <_scanf_float+0x188>
 801bd08:	2b74      	cmp	r3, #116	; 0x74
 801bd0a:	d06f      	beq.n	801bdec <_scanf_float+0x218>
 801bd0c:	2b79      	cmp	r3, #121	; 0x79
 801bd0e:	e7f6      	b.n	801bcfe <_scanf_float+0x12a>
 801bd10:	6821      	ldr	r1, [r4, #0]
 801bd12:	05c8      	lsls	r0, r1, #23
 801bd14:	d51a      	bpl.n	801bd4c <_scanf_float+0x178>
 801bd16:	9b02      	ldr	r3, [sp, #8]
 801bd18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bd1c:	6021      	str	r1, [r4, #0]
 801bd1e:	f109 0901 	add.w	r9, r9, #1
 801bd22:	b11b      	cbz	r3, 801bd2c <_scanf_float+0x158>
 801bd24:	3b01      	subs	r3, #1
 801bd26:	3201      	adds	r2, #1
 801bd28:	9302      	str	r3, [sp, #8]
 801bd2a:	60a2      	str	r2, [r4, #8]
 801bd2c:	68a3      	ldr	r3, [r4, #8]
 801bd2e:	3b01      	subs	r3, #1
 801bd30:	60a3      	str	r3, [r4, #8]
 801bd32:	6923      	ldr	r3, [r4, #16]
 801bd34:	3301      	adds	r3, #1
 801bd36:	6123      	str	r3, [r4, #16]
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	3b01      	subs	r3, #1
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	607b      	str	r3, [r7, #4]
 801bd40:	f340 8084 	ble.w	801be4c <_scanf_float+0x278>
 801bd44:	683b      	ldr	r3, [r7, #0]
 801bd46:	3301      	adds	r3, #1
 801bd48:	603b      	str	r3, [r7, #0]
 801bd4a:	e766      	b.n	801bc1a <_scanf_float+0x46>
 801bd4c:	eb1a 0f05 	cmn.w	sl, r5
 801bd50:	f47f af70 	bne.w	801bc34 <_scanf_float+0x60>
 801bd54:	6822      	ldr	r2, [r4, #0]
 801bd56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bd5a:	6022      	str	r2, [r4, #0]
 801bd5c:	f806 3b01 	strb.w	r3, [r6], #1
 801bd60:	e7e4      	b.n	801bd2c <_scanf_float+0x158>
 801bd62:	6822      	ldr	r2, [r4, #0]
 801bd64:	0610      	lsls	r0, r2, #24
 801bd66:	f57f af65 	bpl.w	801bc34 <_scanf_float+0x60>
 801bd6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bd6e:	e7f4      	b.n	801bd5a <_scanf_float+0x186>
 801bd70:	f1ba 0f00 	cmp.w	sl, #0
 801bd74:	d10e      	bne.n	801bd94 <_scanf_float+0x1c0>
 801bd76:	f1b9 0f00 	cmp.w	r9, #0
 801bd7a:	d10e      	bne.n	801bd9a <_scanf_float+0x1c6>
 801bd7c:	6822      	ldr	r2, [r4, #0]
 801bd7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bd82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bd86:	d108      	bne.n	801bd9a <_scanf_float+0x1c6>
 801bd88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bd8c:	6022      	str	r2, [r4, #0]
 801bd8e:	f04f 0a01 	mov.w	sl, #1
 801bd92:	e7e3      	b.n	801bd5c <_scanf_float+0x188>
 801bd94:	f1ba 0f02 	cmp.w	sl, #2
 801bd98:	d055      	beq.n	801be46 <_scanf_float+0x272>
 801bd9a:	2d01      	cmp	r5, #1
 801bd9c:	d002      	beq.n	801bda4 <_scanf_float+0x1d0>
 801bd9e:	2d04      	cmp	r5, #4
 801bda0:	f47f af48 	bne.w	801bc34 <_scanf_float+0x60>
 801bda4:	3501      	adds	r5, #1
 801bda6:	b2ed      	uxtb	r5, r5
 801bda8:	e7d8      	b.n	801bd5c <_scanf_float+0x188>
 801bdaa:	f1ba 0f01 	cmp.w	sl, #1
 801bdae:	f47f af41 	bne.w	801bc34 <_scanf_float+0x60>
 801bdb2:	f04f 0a02 	mov.w	sl, #2
 801bdb6:	e7d1      	b.n	801bd5c <_scanf_float+0x188>
 801bdb8:	b97d      	cbnz	r5, 801bdda <_scanf_float+0x206>
 801bdba:	f1b9 0f00 	cmp.w	r9, #0
 801bdbe:	f47f af3c 	bne.w	801bc3a <_scanf_float+0x66>
 801bdc2:	6822      	ldr	r2, [r4, #0]
 801bdc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bdc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bdcc:	f47f af39 	bne.w	801bc42 <_scanf_float+0x6e>
 801bdd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bdd4:	6022      	str	r2, [r4, #0]
 801bdd6:	2501      	movs	r5, #1
 801bdd8:	e7c0      	b.n	801bd5c <_scanf_float+0x188>
 801bdda:	2d03      	cmp	r5, #3
 801bddc:	d0e2      	beq.n	801bda4 <_scanf_float+0x1d0>
 801bdde:	2d05      	cmp	r5, #5
 801bde0:	e7de      	b.n	801bda0 <_scanf_float+0x1cc>
 801bde2:	2d02      	cmp	r5, #2
 801bde4:	f47f af26 	bne.w	801bc34 <_scanf_float+0x60>
 801bde8:	2503      	movs	r5, #3
 801bdea:	e7b7      	b.n	801bd5c <_scanf_float+0x188>
 801bdec:	2d06      	cmp	r5, #6
 801bdee:	f47f af21 	bne.w	801bc34 <_scanf_float+0x60>
 801bdf2:	2507      	movs	r5, #7
 801bdf4:	e7b2      	b.n	801bd5c <_scanf_float+0x188>
 801bdf6:	6822      	ldr	r2, [r4, #0]
 801bdf8:	0591      	lsls	r1, r2, #22
 801bdfa:	f57f af1b 	bpl.w	801bc34 <_scanf_float+0x60>
 801bdfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801be02:	6022      	str	r2, [r4, #0]
 801be04:	f8cd 9004 	str.w	r9, [sp, #4]
 801be08:	e7a8      	b.n	801bd5c <_scanf_float+0x188>
 801be0a:	6822      	ldr	r2, [r4, #0]
 801be0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801be10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801be14:	d006      	beq.n	801be24 <_scanf_float+0x250>
 801be16:	0550      	lsls	r0, r2, #21
 801be18:	f57f af0c 	bpl.w	801bc34 <_scanf_float+0x60>
 801be1c:	f1b9 0f00 	cmp.w	r9, #0
 801be20:	f43f af0f 	beq.w	801bc42 <_scanf_float+0x6e>
 801be24:	0591      	lsls	r1, r2, #22
 801be26:	bf58      	it	pl
 801be28:	9901      	ldrpl	r1, [sp, #4]
 801be2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801be2e:	bf58      	it	pl
 801be30:	eba9 0101 	subpl.w	r1, r9, r1
 801be34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801be38:	bf58      	it	pl
 801be3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801be3e:	6022      	str	r2, [r4, #0]
 801be40:	f04f 0900 	mov.w	r9, #0
 801be44:	e78a      	b.n	801bd5c <_scanf_float+0x188>
 801be46:	f04f 0a03 	mov.w	sl, #3
 801be4a:	e787      	b.n	801bd5c <_scanf_float+0x188>
 801be4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801be50:	4639      	mov	r1, r7
 801be52:	4640      	mov	r0, r8
 801be54:	4798      	blx	r3
 801be56:	2800      	cmp	r0, #0
 801be58:	f43f aedf 	beq.w	801bc1a <_scanf_float+0x46>
 801be5c:	e6ea      	b.n	801bc34 <_scanf_float+0x60>
 801be5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801be66:	463a      	mov	r2, r7
 801be68:	4640      	mov	r0, r8
 801be6a:	4798      	blx	r3
 801be6c:	6923      	ldr	r3, [r4, #16]
 801be6e:	3b01      	subs	r3, #1
 801be70:	6123      	str	r3, [r4, #16]
 801be72:	e6ec      	b.n	801bc4e <_scanf_float+0x7a>
 801be74:	1e6b      	subs	r3, r5, #1
 801be76:	2b06      	cmp	r3, #6
 801be78:	d825      	bhi.n	801bec6 <_scanf_float+0x2f2>
 801be7a:	2d02      	cmp	r5, #2
 801be7c:	d836      	bhi.n	801beec <_scanf_float+0x318>
 801be7e:	455e      	cmp	r6, fp
 801be80:	f67f aee8 	bls.w	801bc54 <_scanf_float+0x80>
 801be84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801be8c:	463a      	mov	r2, r7
 801be8e:	4640      	mov	r0, r8
 801be90:	4798      	blx	r3
 801be92:	6923      	ldr	r3, [r4, #16]
 801be94:	3b01      	subs	r3, #1
 801be96:	6123      	str	r3, [r4, #16]
 801be98:	e7f1      	b.n	801be7e <_scanf_float+0x2aa>
 801be9a:	9802      	ldr	r0, [sp, #8]
 801be9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bea0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bea4:	9002      	str	r0, [sp, #8]
 801bea6:	463a      	mov	r2, r7
 801bea8:	4640      	mov	r0, r8
 801beaa:	4798      	blx	r3
 801beac:	6923      	ldr	r3, [r4, #16]
 801beae:	3b01      	subs	r3, #1
 801beb0:	6123      	str	r3, [r4, #16]
 801beb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801beb6:	fa5f fa8a 	uxtb.w	sl, sl
 801beba:	f1ba 0f02 	cmp.w	sl, #2
 801bebe:	d1ec      	bne.n	801be9a <_scanf_float+0x2c6>
 801bec0:	3d03      	subs	r5, #3
 801bec2:	b2ed      	uxtb	r5, r5
 801bec4:	1b76      	subs	r6, r6, r5
 801bec6:	6823      	ldr	r3, [r4, #0]
 801bec8:	05da      	lsls	r2, r3, #23
 801beca:	d52f      	bpl.n	801bf2c <_scanf_float+0x358>
 801becc:	055b      	lsls	r3, r3, #21
 801bece:	d510      	bpl.n	801bef2 <_scanf_float+0x31e>
 801bed0:	455e      	cmp	r6, fp
 801bed2:	f67f aebf 	bls.w	801bc54 <_scanf_float+0x80>
 801bed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801beda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bede:	463a      	mov	r2, r7
 801bee0:	4640      	mov	r0, r8
 801bee2:	4798      	blx	r3
 801bee4:	6923      	ldr	r3, [r4, #16]
 801bee6:	3b01      	subs	r3, #1
 801bee8:	6123      	str	r3, [r4, #16]
 801beea:	e7f1      	b.n	801bed0 <_scanf_float+0x2fc>
 801beec:	46aa      	mov	sl, r5
 801beee:	9602      	str	r6, [sp, #8]
 801bef0:	e7df      	b.n	801beb2 <_scanf_float+0x2de>
 801bef2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bef6:	6923      	ldr	r3, [r4, #16]
 801bef8:	2965      	cmp	r1, #101	; 0x65
 801befa:	f103 33ff 	add.w	r3, r3, #4294967295
 801befe:	f106 35ff 	add.w	r5, r6, #4294967295
 801bf02:	6123      	str	r3, [r4, #16]
 801bf04:	d00c      	beq.n	801bf20 <_scanf_float+0x34c>
 801bf06:	2945      	cmp	r1, #69	; 0x45
 801bf08:	d00a      	beq.n	801bf20 <_scanf_float+0x34c>
 801bf0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf0e:	463a      	mov	r2, r7
 801bf10:	4640      	mov	r0, r8
 801bf12:	4798      	blx	r3
 801bf14:	6923      	ldr	r3, [r4, #16]
 801bf16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bf1a:	3b01      	subs	r3, #1
 801bf1c:	1eb5      	subs	r5, r6, #2
 801bf1e:	6123      	str	r3, [r4, #16]
 801bf20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bf24:	463a      	mov	r2, r7
 801bf26:	4640      	mov	r0, r8
 801bf28:	4798      	blx	r3
 801bf2a:	462e      	mov	r6, r5
 801bf2c:	6825      	ldr	r5, [r4, #0]
 801bf2e:	f015 0510 	ands.w	r5, r5, #16
 801bf32:	d14e      	bne.n	801bfd2 <_scanf_float+0x3fe>
 801bf34:	7035      	strb	r5, [r6, #0]
 801bf36:	6823      	ldr	r3, [r4, #0]
 801bf38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bf3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf40:	d119      	bne.n	801bf76 <_scanf_float+0x3a2>
 801bf42:	9b01      	ldr	r3, [sp, #4]
 801bf44:	454b      	cmp	r3, r9
 801bf46:	eba3 0209 	sub.w	r2, r3, r9
 801bf4a:	d121      	bne.n	801bf90 <_scanf_float+0x3bc>
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	4659      	mov	r1, fp
 801bf50:	4640      	mov	r0, r8
 801bf52:	f000 ff13 	bl	801cd7c <_strtod_r>
 801bf56:	6822      	ldr	r2, [r4, #0]
 801bf58:	9b03      	ldr	r3, [sp, #12]
 801bf5a:	f012 0f02 	tst.w	r2, #2
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	d021      	beq.n	801bfa6 <_scanf_float+0x3d2>
 801bf62:	9903      	ldr	r1, [sp, #12]
 801bf64:	1d1a      	adds	r2, r3, #4
 801bf66:	600a      	str	r2, [r1, #0]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	ed83 0b00 	vstr	d0, [r3]
 801bf6e:	68e3      	ldr	r3, [r4, #12]
 801bf70:	3301      	adds	r3, #1
 801bf72:	60e3      	str	r3, [r4, #12]
 801bf74:	e66f      	b.n	801bc56 <_scanf_float+0x82>
 801bf76:	9b04      	ldr	r3, [sp, #16]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d0e7      	beq.n	801bf4c <_scanf_float+0x378>
 801bf7c:	9905      	ldr	r1, [sp, #20]
 801bf7e:	230a      	movs	r3, #10
 801bf80:	462a      	mov	r2, r5
 801bf82:	3101      	adds	r1, #1
 801bf84:	4640      	mov	r0, r8
 801bf86:	f000 ff81 	bl	801ce8c <_strtol_r>
 801bf8a:	9b04      	ldr	r3, [sp, #16]
 801bf8c:	9e05      	ldr	r6, [sp, #20]
 801bf8e:	1ac2      	subs	r2, r0, r3
 801bf90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bf94:	429e      	cmp	r6, r3
 801bf96:	bf28      	it	cs
 801bf98:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bf9c:	490e      	ldr	r1, [pc, #56]	; (801bfd8 <_scanf_float+0x404>)
 801bf9e:	4630      	mov	r0, r6
 801bfa0:	f000 f8b6 	bl	801c110 <siprintf>
 801bfa4:	e7d2      	b.n	801bf4c <_scanf_float+0x378>
 801bfa6:	9903      	ldr	r1, [sp, #12]
 801bfa8:	f012 0f04 	tst.w	r2, #4
 801bfac:	f103 0204 	add.w	r2, r3, #4
 801bfb0:	600a      	str	r2, [r1, #0]
 801bfb2:	d1d9      	bne.n	801bf68 <_scanf_float+0x394>
 801bfb4:	eeb4 0b40 	vcmp.f64	d0, d0
 801bfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfbc:	681e      	ldr	r6, [r3, #0]
 801bfbe:	d705      	bvc.n	801bfcc <_scanf_float+0x3f8>
 801bfc0:	4806      	ldr	r0, [pc, #24]	; (801bfdc <_scanf_float+0x408>)
 801bfc2:	f000 f89f 	bl	801c104 <nanf>
 801bfc6:	ed86 0a00 	vstr	s0, [r6]
 801bfca:	e7d0      	b.n	801bf6e <_scanf_float+0x39a>
 801bfcc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bfd0:	e7f9      	b.n	801bfc6 <_scanf_float+0x3f2>
 801bfd2:	2500      	movs	r5, #0
 801bfd4:	e63f      	b.n	801bc56 <_scanf_float+0x82>
 801bfd6:	bf00      	nop
 801bfd8:	080207ac 	.word	0x080207ac
 801bfdc:	08020bb8 	.word	0x08020bb8

0801bfe0 <iprintf>:
 801bfe0:	b40f      	push	{r0, r1, r2, r3}
 801bfe2:	4b0a      	ldr	r3, [pc, #40]	; (801c00c <iprintf+0x2c>)
 801bfe4:	b513      	push	{r0, r1, r4, lr}
 801bfe6:	681c      	ldr	r4, [r3, #0]
 801bfe8:	b124      	cbz	r4, 801bff4 <iprintf+0x14>
 801bfea:	69a3      	ldr	r3, [r4, #24]
 801bfec:	b913      	cbnz	r3, 801bff4 <iprintf+0x14>
 801bfee:	4620      	mov	r0, r4
 801bff0:	f7ff f83c 	bl	801b06c <__sinit>
 801bff4:	ab05      	add	r3, sp, #20
 801bff6:	9a04      	ldr	r2, [sp, #16]
 801bff8:	68a1      	ldr	r1, [r4, #8]
 801bffa:	9301      	str	r3, [sp, #4]
 801bffc:	4620      	mov	r0, r4
 801bffe:	f003 f879 	bl	801f0f4 <_vfiprintf_r>
 801c002:	b002      	add	sp, #8
 801c004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c008:	b004      	add	sp, #16
 801c00a:	4770      	bx	lr
 801c00c:	2000006c 	.word	0x2000006c

0801c010 <cleanup_glue>:
 801c010:	b538      	push	{r3, r4, r5, lr}
 801c012:	460c      	mov	r4, r1
 801c014:	6809      	ldr	r1, [r1, #0]
 801c016:	4605      	mov	r5, r0
 801c018:	b109      	cbz	r1, 801c01e <cleanup_glue+0xe>
 801c01a:	f7ff fff9 	bl	801c010 <cleanup_glue>
 801c01e:	4621      	mov	r1, r4
 801c020:	4628      	mov	r0, r5
 801c022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c026:	f002 be93 	b.w	801ed50 <_free_r>
	...

0801c02c <_reclaim_reent>:
 801c02c:	4b2c      	ldr	r3, [pc, #176]	; (801c0e0 <_reclaim_reent+0xb4>)
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	4283      	cmp	r3, r0
 801c032:	b570      	push	{r4, r5, r6, lr}
 801c034:	4604      	mov	r4, r0
 801c036:	d051      	beq.n	801c0dc <_reclaim_reent+0xb0>
 801c038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c03a:	b143      	cbz	r3, 801c04e <_reclaim_reent+0x22>
 801c03c:	68db      	ldr	r3, [r3, #12]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d14a      	bne.n	801c0d8 <_reclaim_reent+0xac>
 801c042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c044:	6819      	ldr	r1, [r3, #0]
 801c046:	b111      	cbz	r1, 801c04e <_reclaim_reent+0x22>
 801c048:	4620      	mov	r0, r4
 801c04a:	f002 fe81 	bl	801ed50 <_free_r>
 801c04e:	6961      	ldr	r1, [r4, #20]
 801c050:	b111      	cbz	r1, 801c058 <_reclaim_reent+0x2c>
 801c052:	4620      	mov	r0, r4
 801c054:	f002 fe7c 	bl	801ed50 <_free_r>
 801c058:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c05a:	b111      	cbz	r1, 801c062 <_reclaim_reent+0x36>
 801c05c:	4620      	mov	r0, r4
 801c05e:	f002 fe77 	bl	801ed50 <_free_r>
 801c062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c064:	b111      	cbz	r1, 801c06c <_reclaim_reent+0x40>
 801c066:	4620      	mov	r0, r4
 801c068:	f002 fe72 	bl	801ed50 <_free_r>
 801c06c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c06e:	b111      	cbz	r1, 801c076 <_reclaim_reent+0x4a>
 801c070:	4620      	mov	r0, r4
 801c072:	f002 fe6d 	bl	801ed50 <_free_r>
 801c076:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c078:	b111      	cbz	r1, 801c080 <_reclaim_reent+0x54>
 801c07a:	4620      	mov	r0, r4
 801c07c:	f002 fe68 	bl	801ed50 <_free_r>
 801c080:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801c082:	b111      	cbz	r1, 801c08a <_reclaim_reent+0x5e>
 801c084:	4620      	mov	r0, r4
 801c086:	f002 fe63 	bl	801ed50 <_free_r>
 801c08a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c08c:	b111      	cbz	r1, 801c094 <_reclaim_reent+0x68>
 801c08e:	4620      	mov	r0, r4
 801c090:	f002 fe5e 	bl	801ed50 <_free_r>
 801c094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c096:	b111      	cbz	r1, 801c09e <_reclaim_reent+0x72>
 801c098:	4620      	mov	r0, r4
 801c09a:	f002 fe59 	bl	801ed50 <_free_r>
 801c09e:	69a3      	ldr	r3, [r4, #24]
 801c0a0:	b1e3      	cbz	r3, 801c0dc <_reclaim_reent+0xb0>
 801c0a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	4798      	blx	r3
 801c0a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c0aa:	b1b9      	cbz	r1, 801c0dc <_reclaim_reent+0xb0>
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0b2:	f7ff bfad 	b.w	801c010 <cleanup_glue>
 801c0b6:	5949      	ldr	r1, [r1, r5]
 801c0b8:	b941      	cbnz	r1, 801c0cc <_reclaim_reent+0xa0>
 801c0ba:	3504      	adds	r5, #4
 801c0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0be:	2d80      	cmp	r5, #128	; 0x80
 801c0c0:	68d9      	ldr	r1, [r3, #12]
 801c0c2:	d1f8      	bne.n	801c0b6 <_reclaim_reent+0x8a>
 801c0c4:	4620      	mov	r0, r4
 801c0c6:	f002 fe43 	bl	801ed50 <_free_r>
 801c0ca:	e7ba      	b.n	801c042 <_reclaim_reent+0x16>
 801c0cc:	680e      	ldr	r6, [r1, #0]
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	f002 fe3e 	bl	801ed50 <_free_r>
 801c0d4:	4631      	mov	r1, r6
 801c0d6:	e7ef      	b.n	801c0b8 <_reclaim_reent+0x8c>
 801c0d8:	2500      	movs	r5, #0
 801c0da:	e7ef      	b.n	801c0bc <_reclaim_reent+0x90>
 801c0dc:	bd70      	pop	{r4, r5, r6, pc}
 801c0de:	bf00      	nop
 801c0e0:	2000006c 	.word	0x2000006c

0801c0e4 <_sbrk_r>:
 801c0e4:	b538      	push	{r3, r4, r5, lr}
 801c0e6:	4d06      	ldr	r5, [pc, #24]	; (801c100 <_sbrk_r+0x1c>)
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	4604      	mov	r4, r0
 801c0ec:	4608      	mov	r0, r1
 801c0ee:	602b      	str	r3, [r5, #0]
 801c0f0:	f7f4 f842 	bl	8010178 <_sbrk>
 801c0f4:	1c43      	adds	r3, r0, #1
 801c0f6:	d102      	bne.n	801c0fe <_sbrk_r+0x1a>
 801c0f8:	682b      	ldr	r3, [r5, #0]
 801c0fa:	b103      	cbz	r3, 801c0fe <_sbrk_r+0x1a>
 801c0fc:	6023      	str	r3, [r4, #0]
 801c0fe:	bd38      	pop	{r3, r4, r5, pc}
 801c100:	2004003c 	.word	0x2004003c

0801c104 <nanf>:
 801c104:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c10c <nanf+0x8>
 801c108:	4770      	bx	lr
 801c10a:	bf00      	nop
 801c10c:	7fc00000 	.word	0x7fc00000

0801c110 <siprintf>:
 801c110:	b40e      	push	{r1, r2, r3}
 801c112:	b500      	push	{lr}
 801c114:	b09c      	sub	sp, #112	; 0x70
 801c116:	ab1d      	add	r3, sp, #116	; 0x74
 801c118:	9002      	str	r0, [sp, #8]
 801c11a:	9006      	str	r0, [sp, #24]
 801c11c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c120:	4809      	ldr	r0, [pc, #36]	; (801c148 <siprintf+0x38>)
 801c122:	9107      	str	r1, [sp, #28]
 801c124:	9104      	str	r1, [sp, #16]
 801c126:	4909      	ldr	r1, [pc, #36]	; (801c14c <siprintf+0x3c>)
 801c128:	f853 2b04 	ldr.w	r2, [r3], #4
 801c12c:	9105      	str	r1, [sp, #20]
 801c12e:	6800      	ldr	r0, [r0, #0]
 801c130:	9301      	str	r3, [sp, #4]
 801c132:	a902      	add	r1, sp, #8
 801c134:	f002 feb4 	bl	801eea0 <_svfiprintf_r>
 801c138:	9b02      	ldr	r3, [sp, #8]
 801c13a:	2200      	movs	r2, #0
 801c13c:	701a      	strb	r2, [r3, #0]
 801c13e:	b01c      	add	sp, #112	; 0x70
 801c140:	f85d eb04 	ldr.w	lr, [sp], #4
 801c144:	b003      	add	sp, #12
 801c146:	4770      	bx	lr
 801c148:	2000006c 	.word	0x2000006c
 801c14c:	ffff0208 	.word	0xffff0208

0801c150 <__sread>:
 801c150:	b510      	push	{r4, lr}
 801c152:	460c      	mov	r4, r1
 801c154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c158:	f003 f8fc 	bl	801f354 <_read_r>
 801c15c:	2800      	cmp	r0, #0
 801c15e:	bfab      	itete	ge
 801c160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c162:	89a3      	ldrhlt	r3, [r4, #12]
 801c164:	181b      	addge	r3, r3, r0
 801c166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c16a:	bfac      	ite	ge
 801c16c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c16e:	81a3      	strhlt	r3, [r4, #12]
 801c170:	bd10      	pop	{r4, pc}

0801c172 <__swrite>:
 801c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c176:	461f      	mov	r7, r3
 801c178:	898b      	ldrh	r3, [r1, #12]
 801c17a:	05db      	lsls	r3, r3, #23
 801c17c:	4605      	mov	r5, r0
 801c17e:	460c      	mov	r4, r1
 801c180:	4616      	mov	r6, r2
 801c182:	d505      	bpl.n	801c190 <__swrite+0x1e>
 801c184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c188:	2302      	movs	r3, #2
 801c18a:	2200      	movs	r2, #0
 801c18c:	f002 f8d4 	bl	801e338 <_lseek_r>
 801c190:	89a3      	ldrh	r3, [r4, #12]
 801c192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c19a:	81a3      	strh	r3, [r4, #12]
 801c19c:	4632      	mov	r2, r6
 801c19e:	463b      	mov	r3, r7
 801c1a0:	4628      	mov	r0, r5
 801c1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1a6:	f000 be73 	b.w	801ce90 <_write_r>

0801c1aa <__sseek>:
 801c1aa:	b510      	push	{r4, lr}
 801c1ac:	460c      	mov	r4, r1
 801c1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1b2:	f002 f8c1 	bl	801e338 <_lseek_r>
 801c1b6:	1c43      	adds	r3, r0, #1
 801c1b8:	89a3      	ldrh	r3, [r4, #12]
 801c1ba:	bf15      	itete	ne
 801c1bc:	6560      	strne	r0, [r4, #84]	; 0x54
 801c1be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c1c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c1c6:	81a3      	strheq	r3, [r4, #12]
 801c1c8:	bf18      	it	ne
 801c1ca:	81a3      	strhne	r3, [r4, #12]
 801c1cc:	bd10      	pop	{r4, pc}

0801c1ce <__sclose>:
 801c1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1d2:	f000 be6f 	b.w	801ceb4 <_close_r>

0801c1d6 <sulp>:
 801c1d6:	b570      	push	{r4, r5, r6, lr}
 801c1d8:	4604      	mov	r4, r0
 801c1da:	460d      	mov	r5, r1
 801c1dc:	4616      	mov	r6, r2
 801c1de:	ec45 4b10 	vmov	d0, r4, r5
 801c1e2:	f002 fc53 	bl	801ea8c <__ulp>
 801c1e6:	b17e      	cbz	r6, 801c208 <sulp+0x32>
 801c1e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c1ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	dd09      	ble.n	801c208 <sulp+0x32>
 801c1f4:	051b      	lsls	r3, r3, #20
 801c1f6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801c1fa:	2000      	movs	r0, #0
 801c1fc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801c200:	ec41 0b17 	vmov	d7, r0, r1
 801c204:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c208:	bd70      	pop	{r4, r5, r6, pc}
 801c20a:	0000      	movs	r0, r0
 801c20c:	0000      	movs	r0, r0
	...

0801c210 <_strtod_l>:
 801c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c214:	ed2d 8b0e 	vpush	{d8-d14}
 801c218:	b097      	sub	sp, #92	; 0x5c
 801c21a:	461f      	mov	r7, r3
 801c21c:	2300      	movs	r3, #0
 801c21e:	9312      	str	r3, [sp, #72]	; 0x48
 801c220:	4ba1      	ldr	r3, [pc, #644]	; (801c4a8 <_strtod_l+0x298>)
 801c222:	920d      	str	r2, [sp, #52]	; 0x34
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	9307      	str	r3, [sp, #28]
 801c228:	4604      	mov	r4, r0
 801c22a:	4618      	mov	r0, r3
 801c22c:	468b      	mov	fp, r1
 801c22e:	f7e4 f807 	bl	8000240 <strlen>
 801c232:	f04f 0800 	mov.w	r8, #0
 801c236:	4605      	mov	r5, r0
 801c238:	f04f 0900 	mov.w	r9, #0
 801c23c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801c240:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c242:	7813      	ldrb	r3, [r2, #0]
 801c244:	2b2b      	cmp	r3, #43	; 0x2b
 801c246:	d04d      	beq.n	801c2e4 <_strtod_l+0xd4>
 801c248:	d83a      	bhi.n	801c2c0 <_strtod_l+0xb0>
 801c24a:	2b0d      	cmp	r3, #13
 801c24c:	d833      	bhi.n	801c2b6 <_strtod_l+0xa6>
 801c24e:	2b08      	cmp	r3, #8
 801c250:	d833      	bhi.n	801c2ba <_strtod_l+0xaa>
 801c252:	2b00      	cmp	r3, #0
 801c254:	d03d      	beq.n	801c2d2 <_strtod_l+0xc2>
 801c256:	2300      	movs	r3, #0
 801c258:	9308      	str	r3, [sp, #32]
 801c25a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c25c:	7833      	ldrb	r3, [r6, #0]
 801c25e:	2b30      	cmp	r3, #48	; 0x30
 801c260:	f040 80b0 	bne.w	801c3c4 <_strtod_l+0x1b4>
 801c264:	7873      	ldrb	r3, [r6, #1]
 801c266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c26a:	2b58      	cmp	r3, #88	; 0x58
 801c26c:	d167      	bne.n	801c33e <_strtod_l+0x12e>
 801c26e:	9b08      	ldr	r3, [sp, #32]
 801c270:	9301      	str	r3, [sp, #4]
 801c272:	ab12      	add	r3, sp, #72	; 0x48
 801c274:	9702      	str	r7, [sp, #8]
 801c276:	9300      	str	r3, [sp, #0]
 801c278:	4a8c      	ldr	r2, [pc, #560]	; (801c4ac <_strtod_l+0x29c>)
 801c27a:	ab13      	add	r3, sp, #76	; 0x4c
 801c27c:	a911      	add	r1, sp, #68	; 0x44
 801c27e:	4620      	mov	r0, r4
 801c280:	f001 fd4e 	bl	801dd20 <__gethex>
 801c284:	f010 0507 	ands.w	r5, r0, #7
 801c288:	4607      	mov	r7, r0
 801c28a:	d005      	beq.n	801c298 <_strtod_l+0x88>
 801c28c:	2d06      	cmp	r5, #6
 801c28e:	d12b      	bne.n	801c2e8 <_strtod_l+0xd8>
 801c290:	3601      	adds	r6, #1
 801c292:	2300      	movs	r3, #0
 801c294:	9611      	str	r6, [sp, #68]	; 0x44
 801c296:	9308      	str	r3, [sp, #32]
 801c298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	f040 854e 	bne.w	801cd3c <_strtod_l+0xb2c>
 801c2a0:	9b08      	ldr	r3, [sp, #32]
 801c2a2:	b1e3      	cbz	r3, 801c2de <_strtod_l+0xce>
 801c2a4:	ec49 8b17 	vmov	d7, r8, r9
 801c2a8:	eeb1 0b47 	vneg.f64	d0, d7
 801c2ac:	b017      	add	sp, #92	; 0x5c
 801c2ae:	ecbd 8b0e 	vpop	{d8-d14}
 801c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b6:	2b20      	cmp	r3, #32
 801c2b8:	d1cd      	bne.n	801c256 <_strtod_l+0x46>
 801c2ba:	3201      	adds	r2, #1
 801c2bc:	9211      	str	r2, [sp, #68]	; 0x44
 801c2be:	e7bf      	b.n	801c240 <_strtod_l+0x30>
 801c2c0:	2b2d      	cmp	r3, #45	; 0x2d
 801c2c2:	d1c8      	bne.n	801c256 <_strtod_l+0x46>
 801c2c4:	2301      	movs	r3, #1
 801c2c6:	9308      	str	r3, [sp, #32]
 801c2c8:	1c53      	adds	r3, r2, #1
 801c2ca:	9311      	str	r3, [sp, #68]	; 0x44
 801c2cc:	7853      	ldrb	r3, [r2, #1]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d1c3      	bne.n	801c25a <_strtod_l+0x4a>
 801c2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	f040 852d 	bne.w	801cd38 <_strtod_l+0xb28>
 801c2de:	ec49 8b10 	vmov	d0, r8, r9
 801c2e2:	e7e3      	b.n	801c2ac <_strtod_l+0x9c>
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	e7ee      	b.n	801c2c6 <_strtod_l+0xb6>
 801c2e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2ea:	b13a      	cbz	r2, 801c2fc <_strtod_l+0xec>
 801c2ec:	2135      	movs	r1, #53	; 0x35
 801c2ee:	a814      	add	r0, sp, #80	; 0x50
 801c2f0:	f002 fcd4 	bl	801ec9c <__copybits>
 801c2f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c2f6:	4620      	mov	r0, r4
 801c2f8:	f002 f896 	bl	801e428 <_Bfree>
 801c2fc:	3d01      	subs	r5, #1
 801c2fe:	2d04      	cmp	r5, #4
 801c300:	d806      	bhi.n	801c310 <_strtod_l+0x100>
 801c302:	e8df f005 	tbb	[pc, r5]
 801c306:	030a      	.short	0x030a
 801c308:	1714      	.short	0x1714
 801c30a:	0a          	.byte	0x0a
 801c30b:	00          	.byte	0x00
 801c30c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801c310:	073f      	lsls	r7, r7, #28
 801c312:	d5c1      	bpl.n	801c298 <_strtod_l+0x88>
 801c314:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801c318:	e7be      	b.n	801c298 <_strtod_l+0x88>
 801c31a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801c31e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c320:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c324:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c328:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c32c:	e7f0      	b.n	801c310 <_strtod_l+0x100>
 801c32e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801c4b0 <_strtod_l+0x2a0>
 801c332:	e7ed      	b.n	801c310 <_strtod_l+0x100>
 801c334:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c338:	f04f 38ff 	mov.w	r8, #4294967295
 801c33c:	e7e8      	b.n	801c310 <_strtod_l+0x100>
 801c33e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c340:	1c5a      	adds	r2, r3, #1
 801c342:	9211      	str	r2, [sp, #68]	; 0x44
 801c344:	785b      	ldrb	r3, [r3, #1]
 801c346:	2b30      	cmp	r3, #48	; 0x30
 801c348:	d0f9      	beq.n	801c33e <_strtod_l+0x12e>
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d0a4      	beq.n	801c298 <_strtod_l+0x88>
 801c34e:	2301      	movs	r3, #1
 801c350:	f04f 0a00 	mov.w	sl, #0
 801c354:	9304      	str	r3, [sp, #16]
 801c356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c358:	930a      	str	r3, [sp, #40]	; 0x28
 801c35a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c35e:	f8cd a018 	str.w	sl, [sp, #24]
 801c362:	220a      	movs	r2, #10
 801c364:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c366:	7807      	ldrb	r7, [r0, #0]
 801c368:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801c36c:	b2d9      	uxtb	r1, r3
 801c36e:	2909      	cmp	r1, #9
 801c370:	d92a      	bls.n	801c3c8 <_strtod_l+0x1b8>
 801c372:	9907      	ldr	r1, [sp, #28]
 801c374:	462a      	mov	r2, r5
 801c376:	f003 f807 	bl	801f388 <strncmp>
 801c37a:	2800      	cmp	r0, #0
 801c37c:	d033      	beq.n	801c3e6 <_strtod_l+0x1d6>
 801c37e:	2000      	movs	r0, #0
 801c380:	9b06      	ldr	r3, [sp, #24]
 801c382:	463a      	mov	r2, r7
 801c384:	4601      	mov	r1, r0
 801c386:	4607      	mov	r7, r0
 801c388:	2a65      	cmp	r2, #101	; 0x65
 801c38a:	d001      	beq.n	801c390 <_strtod_l+0x180>
 801c38c:	2a45      	cmp	r2, #69	; 0x45
 801c38e:	d117      	bne.n	801c3c0 <_strtod_l+0x1b0>
 801c390:	b91b      	cbnz	r3, 801c39a <_strtod_l+0x18a>
 801c392:	9b04      	ldr	r3, [sp, #16]
 801c394:	4303      	orrs	r3, r0
 801c396:	d09c      	beq.n	801c2d2 <_strtod_l+0xc2>
 801c398:	2300      	movs	r3, #0
 801c39a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801c39e:	f10b 0201 	add.w	r2, fp, #1
 801c3a2:	9211      	str	r2, [sp, #68]	; 0x44
 801c3a4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801c3a8:	2a2b      	cmp	r2, #43	; 0x2b
 801c3aa:	d071      	beq.n	801c490 <_strtod_l+0x280>
 801c3ac:	2a2d      	cmp	r2, #45	; 0x2d
 801c3ae:	d077      	beq.n	801c4a0 <_strtod_l+0x290>
 801c3b0:	f04f 0e00 	mov.w	lr, #0
 801c3b4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801c3b8:	2d09      	cmp	r5, #9
 801c3ba:	d97f      	bls.n	801c4bc <_strtod_l+0x2ac>
 801c3bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801c3c0:	2500      	movs	r5, #0
 801c3c2:	e09b      	b.n	801c4fc <_strtod_l+0x2ec>
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	e7c3      	b.n	801c350 <_strtod_l+0x140>
 801c3c8:	9906      	ldr	r1, [sp, #24]
 801c3ca:	2908      	cmp	r1, #8
 801c3cc:	bfdd      	ittte	le
 801c3ce:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801c3d0:	fb02 3301 	mlale	r3, r2, r1, r3
 801c3d4:	9309      	strle	r3, [sp, #36]	; 0x24
 801c3d6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801c3da:	9b06      	ldr	r3, [sp, #24]
 801c3dc:	3001      	adds	r0, #1
 801c3de:	3301      	adds	r3, #1
 801c3e0:	9306      	str	r3, [sp, #24]
 801c3e2:	9011      	str	r0, [sp, #68]	; 0x44
 801c3e4:	e7be      	b.n	801c364 <_strtod_l+0x154>
 801c3e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c3e8:	195a      	adds	r2, r3, r5
 801c3ea:	9211      	str	r2, [sp, #68]	; 0x44
 801c3ec:	5d5a      	ldrb	r2, [r3, r5]
 801c3ee:	9b06      	ldr	r3, [sp, #24]
 801c3f0:	b3a3      	cbz	r3, 801c45c <_strtod_l+0x24c>
 801c3f2:	4607      	mov	r7, r0
 801c3f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c3f8:	2909      	cmp	r1, #9
 801c3fa:	d912      	bls.n	801c422 <_strtod_l+0x212>
 801c3fc:	2101      	movs	r1, #1
 801c3fe:	e7c3      	b.n	801c388 <_strtod_l+0x178>
 801c400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c402:	1c5a      	adds	r2, r3, #1
 801c404:	9211      	str	r2, [sp, #68]	; 0x44
 801c406:	785a      	ldrb	r2, [r3, #1]
 801c408:	3001      	adds	r0, #1
 801c40a:	2a30      	cmp	r2, #48	; 0x30
 801c40c:	d0f8      	beq.n	801c400 <_strtod_l+0x1f0>
 801c40e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c412:	2b08      	cmp	r3, #8
 801c414:	f200 8497 	bhi.w	801cd46 <_strtod_l+0xb36>
 801c418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c41a:	930a      	str	r3, [sp, #40]	; 0x28
 801c41c:	4607      	mov	r7, r0
 801c41e:	2000      	movs	r0, #0
 801c420:	4603      	mov	r3, r0
 801c422:	3a30      	subs	r2, #48	; 0x30
 801c424:	f100 0101 	add.w	r1, r0, #1
 801c428:	d012      	beq.n	801c450 <_strtod_l+0x240>
 801c42a:	440f      	add	r7, r1
 801c42c:	eb00 0c03 	add.w	ip, r0, r3
 801c430:	4619      	mov	r1, r3
 801c432:	250a      	movs	r5, #10
 801c434:	4561      	cmp	r1, ip
 801c436:	d113      	bne.n	801c460 <_strtod_l+0x250>
 801c438:	1819      	adds	r1, r3, r0
 801c43a:	2908      	cmp	r1, #8
 801c43c:	f103 0301 	add.w	r3, r3, #1
 801c440:	4403      	add	r3, r0
 801c442:	dc1c      	bgt.n	801c47e <_strtod_l+0x26e>
 801c444:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c446:	210a      	movs	r1, #10
 801c448:	fb01 2200 	mla	r2, r1, r0, r2
 801c44c:	9209      	str	r2, [sp, #36]	; 0x24
 801c44e:	2100      	movs	r1, #0
 801c450:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c452:	1c50      	adds	r0, r2, #1
 801c454:	9011      	str	r0, [sp, #68]	; 0x44
 801c456:	7852      	ldrb	r2, [r2, #1]
 801c458:	4608      	mov	r0, r1
 801c45a:	e7cb      	b.n	801c3f4 <_strtod_l+0x1e4>
 801c45c:	9806      	ldr	r0, [sp, #24]
 801c45e:	e7d4      	b.n	801c40a <_strtod_l+0x1fa>
 801c460:	2908      	cmp	r1, #8
 801c462:	dc04      	bgt.n	801c46e <_strtod_l+0x25e>
 801c464:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c466:	436e      	muls	r6, r5
 801c468:	9609      	str	r6, [sp, #36]	; 0x24
 801c46a:	3101      	adds	r1, #1
 801c46c:	e7e2      	b.n	801c434 <_strtod_l+0x224>
 801c46e:	f101 0e01 	add.w	lr, r1, #1
 801c472:	f1be 0f10 	cmp.w	lr, #16
 801c476:	bfd8      	it	le
 801c478:	fb05 fa0a 	mulle.w	sl, r5, sl
 801c47c:	e7f5      	b.n	801c46a <_strtod_l+0x25a>
 801c47e:	2b10      	cmp	r3, #16
 801c480:	bfdc      	itt	le
 801c482:	210a      	movle	r1, #10
 801c484:	fb01 2a0a 	mlale	sl, r1, sl, r2
 801c488:	e7e1      	b.n	801c44e <_strtod_l+0x23e>
 801c48a:	2700      	movs	r7, #0
 801c48c:	2101      	movs	r1, #1
 801c48e:	e780      	b.n	801c392 <_strtod_l+0x182>
 801c490:	f04f 0e00 	mov.w	lr, #0
 801c494:	f10b 0202 	add.w	r2, fp, #2
 801c498:	9211      	str	r2, [sp, #68]	; 0x44
 801c49a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801c49e:	e789      	b.n	801c3b4 <_strtod_l+0x1a4>
 801c4a0:	f04f 0e01 	mov.w	lr, #1
 801c4a4:	e7f6      	b.n	801c494 <_strtod_l+0x284>
 801c4a6:	bf00      	nop
 801c4a8:	08020a00 	.word	0x08020a00
 801c4ac:	080207b4 	.word	0x080207b4
 801c4b0:	7ff00000 	.word	0x7ff00000
 801c4b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4b6:	1c55      	adds	r5, r2, #1
 801c4b8:	9511      	str	r5, [sp, #68]	; 0x44
 801c4ba:	7852      	ldrb	r2, [r2, #1]
 801c4bc:	2a30      	cmp	r2, #48	; 0x30
 801c4be:	d0f9      	beq.n	801c4b4 <_strtod_l+0x2a4>
 801c4c0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801c4c4:	2d08      	cmp	r5, #8
 801c4c6:	f63f af7b 	bhi.w	801c3c0 <_strtod_l+0x1b0>
 801c4ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801c4ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4d0:	9207      	str	r2, [sp, #28]
 801c4d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4d4:	1c55      	adds	r5, r2, #1
 801c4d6:	9511      	str	r5, [sp, #68]	; 0x44
 801c4d8:	7852      	ldrb	r2, [r2, #1]
 801c4da:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c4de:	2e09      	cmp	r6, #9
 801c4e0:	d937      	bls.n	801c552 <_strtod_l+0x342>
 801c4e2:	9e07      	ldr	r6, [sp, #28]
 801c4e4:	1bad      	subs	r5, r5, r6
 801c4e6:	2d08      	cmp	r5, #8
 801c4e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801c4ec:	dc02      	bgt.n	801c4f4 <_strtod_l+0x2e4>
 801c4ee:	4565      	cmp	r5, ip
 801c4f0:	bfa8      	it	ge
 801c4f2:	4665      	movge	r5, ip
 801c4f4:	f1be 0f00 	cmp.w	lr, #0
 801c4f8:	d000      	beq.n	801c4fc <_strtod_l+0x2ec>
 801c4fa:	426d      	negs	r5, r5
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d14d      	bne.n	801c59c <_strtod_l+0x38c>
 801c500:	9b04      	ldr	r3, [sp, #16]
 801c502:	4303      	orrs	r3, r0
 801c504:	f47f aec8 	bne.w	801c298 <_strtod_l+0x88>
 801c508:	2900      	cmp	r1, #0
 801c50a:	f47f aee2 	bne.w	801c2d2 <_strtod_l+0xc2>
 801c50e:	2a69      	cmp	r2, #105	; 0x69
 801c510:	d027      	beq.n	801c562 <_strtod_l+0x352>
 801c512:	dc24      	bgt.n	801c55e <_strtod_l+0x34e>
 801c514:	2a49      	cmp	r2, #73	; 0x49
 801c516:	d024      	beq.n	801c562 <_strtod_l+0x352>
 801c518:	2a4e      	cmp	r2, #78	; 0x4e
 801c51a:	f47f aeda 	bne.w	801c2d2 <_strtod_l+0xc2>
 801c51e:	4996      	ldr	r1, [pc, #600]	; (801c778 <_strtod_l+0x568>)
 801c520:	a811      	add	r0, sp, #68	; 0x44
 801c522:	f001 fe55 	bl	801e1d0 <__match>
 801c526:	2800      	cmp	r0, #0
 801c528:	f43f aed3 	beq.w	801c2d2 <_strtod_l+0xc2>
 801c52c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c52e:	781b      	ldrb	r3, [r3, #0]
 801c530:	2b28      	cmp	r3, #40	; 0x28
 801c532:	d12d      	bne.n	801c590 <_strtod_l+0x380>
 801c534:	4991      	ldr	r1, [pc, #580]	; (801c77c <_strtod_l+0x56c>)
 801c536:	aa14      	add	r2, sp, #80	; 0x50
 801c538:	a811      	add	r0, sp, #68	; 0x44
 801c53a:	f001 fe5d 	bl	801e1f8 <__hexnan>
 801c53e:	2805      	cmp	r0, #5
 801c540:	d126      	bne.n	801c590 <_strtod_l+0x380>
 801c542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c544:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801c548:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801c54c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801c550:	e6a2      	b.n	801c298 <_strtod_l+0x88>
 801c552:	250a      	movs	r5, #10
 801c554:	fb05 250c 	mla	r5, r5, ip, r2
 801c558:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801c55c:	e7b9      	b.n	801c4d2 <_strtod_l+0x2c2>
 801c55e:	2a6e      	cmp	r2, #110	; 0x6e
 801c560:	e7db      	b.n	801c51a <_strtod_l+0x30a>
 801c562:	4987      	ldr	r1, [pc, #540]	; (801c780 <_strtod_l+0x570>)
 801c564:	a811      	add	r0, sp, #68	; 0x44
 801c566:	f001 fe33 	bl	801e1d0 <__match>
 801c56a:	2800      	cmp	r0, #0
 801c56c:	f43f aeb1 	beq.w	801c2d2 <_strtod_l+0xc2>
 801c570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c572:	4984      	ldr	r1, [pc, #528]	; (801c784 <_strtod_l+0x574>)
 801c574:	3b01      	subs	r3, #1
 801c576:	a811      	add	r0, sp, #68	; 0x44
 801c578:	9311      	str	r3, [sp, #68]	; 0x44
 801c57a:	f001 fe29 	bl	801e1d0 <__match>
 801c57e:	b910      	cbnz	r0, 801c586 <_strtod_l+0x376>
 801c580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c582:	3301      	adds	r3, #1
 801c584:	9311      	str	r3, [sp, #68]	; 0x44
 801c586:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801c798 <_strtod_l+0x588>
 801c58a:	f04f 0800 	mov.w	r8, #0
 801c58e:	e683      	b.n	801c298 <_strtod_l+0x88>
 801c590:	487d      	ldr	r0, [pc, #500]	; (801c788 <_strtod_l+0x578>)
 801c592:	f002 fef1 	bl	801f378 <nan>
 801c596:	ec59 8b10 	vmov	r8, r9, d0
 801c59a:	e67d      	b.n	801c298 <_strtod_l+0x88>
 801c59c:	1bea      	subs	r2, r5, r7
 801c59e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801c5a2:	9207      	str	r2, [sp, #28]
 801c5a4:	9a06      	ldr	r2, [sp, #24]
 801c5a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c5aa:	2a00      	cmp	r2, #0
 801c5ac:	bf08      	it	eq
 801c5ae:	461a      	moveq	r2, r3
 801c5b0:	2b10      	cmp	r3, #16
 801c5b2:	9206      	str	r2, [sp, #24]
 801c5b4:	461a      	mov	r2, r3
 801c5b6:	bfa8      	it	ge
 801c5b8:	2210      	movge	r2, #16
 801c5ba:	2b09      	cmp	r3, #9
 801c5bc:	ec59 8b17 	vmov	r8, r9, d7
 801c5c0:	dd0c      	ble.n	801c5dc <_strtod_l+0x3cc>
 801c5c2:	4972      	ldr	r1, [pc, #456]	; (801c78c <_strtod_l+0x57c>)
 801c5c4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c5c8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801c5cc:	ee06 aa90 	vmov	s13, sl
 801c5d0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801c5d4:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c5d8:	ec59 8b16 	vmov	r8, r9, d6
 801c5dc:	2b0f      	cmp	r3, #15
 801c5de:	dc36      	bgt.n	801c64e <_strtod_l+0x43e>
 801c5e0:	9907      	ldr	r1, [sp, #28]
 801c5e2:	2900      	cmp	r1, #0
 801c5e4:	f43f ae58 	beq.w	801c298 <_strtod_l+0x88>
 801c5e8:	dd23      	ble.n	801c632 <_strtod_l+0x422>
 801c5ea:	2916      	cmp	r1, #22
 801c5ec:	dc0b      	bgt.n	801c606 <_strtod_l+0x3f6>
 801c5ee:	4b67      	ldr	r3, [pc, #412]	; (801c78c <_strtod_l+0x57c>)
 801c5f0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c5f4:	ed93 7b00 	vldr	d7, [r3]
 801c5f8:	ec49 8b16 	vmov	d6, r8, r9
 801c5fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c600:	ec59 8b17 	vmov	r8, r9, d7
 801c604:	e648      	b.n	801c298 <_strtod_l+0x88>
 801c606:	9807      	ldr	r0, [sp, #28]
 801c608:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801c60c:	4281      	cmp	r1, r0
 801c60e:	db1e      	blt.n	801c64e <_strtod_l+0x43e>
 801c610:	4a5e      	ldr	r2, [pc, #376]	; (801c78c <_strtod_l+0x57c>)
 801c612:	f1c3 030f 	rsb	r3, r3, #15
 801c616:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801c61a:	ed91 7b00 	vldr	d7, [r1]
 801c61e:	ec49 8b16 	vmov	d6, r8, r9
 801c622:	1ac3      	subs	r3, r0, r3
 801c624:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c628:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c62c:	ed92 6b00 	vldr	d6, [r2]
 801c630:	e7e4      	b.n	801c5fc <_strtod_l+0x3ec>
 801c632:	9907      	ldr	r1, [sp, #28]
 801c634:	3116      	adds	r1, #22
 801c636:	db0a      	blt.n	801c64e <_strtod_l+0x43e>
 801c638:	4b54      	ldr	r3, [pc, #336]	; (801c78c <_strtod_l+0x57c>)
 801c63a:	1b7d      	subs	r5, r7, r5
 801c63c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c640:	ed95 7b00 	vldr	d7, [r5]
 801c644:	ec49 8b16 	vmov	d6, r8, r9
 801c648:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c64c:	e7d8      	b.n	801c600 <_strtod_l+0x3f0>
 801c64e:	9907      	ldr	r1, [sp, #28]
 801c650:	1a9a      	subs	r2, r3, r2
 801c652:	440a      	add	r2, r1
 801c654:	2a00      	cmp	r2, #0
 801c656:	dd6f      	ble.n	801c738 <_strtod_l+0x528>
 801c658:	f012 000f 	ands.w	r0, r2, #15
 801c65c:	d00a      	beq.n	801c674 <_strtod_l+0x464>
 801c65e:	494b      	ldr	r1, [pc, #300]	; (801c78c <_strtod_l+0x57c>)
 801c660:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c664:	ed91 7b00 	vldr	d7, [r1]
 801c668:	ec49 8b16 	vmov	d6, r8, r9
 801c66c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c670:	ec59 8b17 	vmov	r8, r9, d7
 801c674:	f032 020f 	bics.w	r2, r2, #15
 801c678:	d04f      	beq.n	801c71a <_strtod_l+0x50a>
 801c67a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801c67e:	dd22      	ble.n	801c6c6 <_strtod_l+0x4b6>
 801c680:	2500      	movs	r5, #0
 801c682:	462e      	mov	r6, r5
 801c684:	9506      	str	r5, [sp, #24]
 801c686:	462f      	mov	r7, r5
 801c688:	2322      	movs	r3, #34	; 0x22
 801c68a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801c798 <_strtod_l+0x588>
 801c68e:	6023      	str	r3, [r4, #0]
 801c690:	f04f 0800 	mov.w	r8, #0
 801c694:	9b06      	ldr	r3, [sp, #24]
 801c696:	2b00      	cmp	r3, #0
 801c698:	f43f adfe 	beq.w	801c298 <_strtod_l+0x88>
 801c69c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c69e:	4620      	mov	r0, r4
 801c6a0:	f001 fec2 	bl	801e428 <_Bfree>
 801c6a4:	4639      	mov	r1, r7
 801c6a6:	4620      	mov	r0, r4
 801c6a8:	f001 febe 	bl	801e428 <_Bfree>
 801c6ac:	4631      	mov	r1, r6
 801c6ae:	4620      	mov	r0, r4
 801c6b0:	f001 feba 	bl	801e428 <_Bfree>
 801c6b4:	9906      	ldr	r1, [sp, #24]
 801c6b6:	4620      	mov	r0, r4
 801c6b8:	f001 feb6 	bl	801e428 <_Bfree>
 801c6bc:	4629      	mov	r1, r5
 801c6be:	4620      	mov	r0, r4
 801c6c0:	f001 feb2 	bl	801e428 <_Bfree>
 801c6c4:	e5e8      	b.n	801c298 <_strtod_l+0x88>
 801c6c6:	2000      	movs	r0, #0
 801c6c8:	ec49 8b17 	vmov	d7, r8, r9
 801c6cc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801c790 <_strtod_l+0x580>
 801c6d0:	1112      	asrs	r2, r2, #4
 801c6d2:	4601      	mov	r1, r0
 801c6d4:	2a01      	cmp	r2, #1
 801c6d6:	dc23      	bgt.n	801c720 <_strtod_l+0x510>
 801c6d8:	b108      	cbz	r0, 801c6de <_strtod_l+0x4ce>
 801c6da:	ec59 8b17 	vmov	r8, r9, d7
 801c6de:	4a2c      	ldr	r2, [pc, #176]	; (801c790 <_strtod_l+0x580>)
 801c6e0:	482c      	ldr	r0, [pc, #176]	; (801c794 <_strtod_l+0x584>)
 801c6e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c6e6:	ed92 7b00 	vldr	d7, [r2]
 801c6ea:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c6ee:	ec49 8b16 	vmov	d6, r8, r9
 801c6f2:	4a29      	ldr	r2, [pc, #164]	; (801c798 <_strtod_l+0x588>)
 801c6f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6f8:	ee17 1a90 	vmov	r1, s15
 801c6fc:	400a      	ands	r2, r1
 801c6fe:	4282      	cmp	r2, r0
 801c700:	ec59 8b17 	vmov	r8, r9, d7
 801c704:	d8bc      	bhi.n	801c680 <_strtod_l+0x470>
 801c706:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c70a:	4282      	cmp	r2, r0
 801c70c:	bf86      	itte	hi
 801c70e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801c79c <_strtod_l+0x58c>
 801c712:	f04f 38ff 	movhi.w	r8, #4294967295
 801c716:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c71a:	2200      	movs	r2, #0
 801c71c:	9204      	str	r2, [sp, #16]
 801c71e:	e078      	b.n	801c812 <_strtod_l+0x602>
 801c720:	07d6      	lsls	r6, r2, #31
 801c722:	d504      	bpl.n	801c72e <_strtod_l+0x51e>
 801c724:	ed9c 6b00 	vldr	d6, [ip]
 801c728:	2001      	movs	r0, #1
 801c72a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c72e:	3101      	adds	r1, #1
 801c730:	1052      	asrs	r2, r2, #1
 801c732:	f10c 0c08 	add.w	ip, ip, #8
 801c736:	e7cd      	b.n	801c6d4 <_strtod_l+0x4c4>
 801c738:	d0ef      	beq.n	801c71a <_strtod_l+0x50a>
 801c73a:	4252      	negs	r2, r2
 801c73c:	f012 000f 	ands.w	r0, r2, #15
 801c740:	d00a      	beq.n	801c758 <_strtod_l+0x548>
 801c742:	4912      	ldr	r1, [pc, #72]	; (801c78c <_strtod_l+0x57c>)
 801c744:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c748:	ed91 7b00 	vldr	d7, [r1]
 801c74c:	ec49 8b16 	vmov	d6, r8, r9
 801c750:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c754:	ec59 8b17 	vmov	r8, r9, d7
 801c758:	1112      	asrs	r2, r2, #4
 801c75a:	d0de      	beq.n	801c71a <_strtod_l+0x50a>
 801c75c:	2a1f      	cmp	r2, #31
 801c75e:	dd1f      	ble.n	801c7a0 <_strtod_l+0x590>
 801c760:	2500      	movs	r5, #0
 801c762:	462e      	mov	r6, r5
 801c764:	9506      	str	r5, [sp, #24]
 801c766:	462f      	mov	r7, r5
 801c768:	2322      	movs	r3, #34	; 0x22
 801c76a:	f04f 0800 	mov.w	r8, #0
 801c76e:	f04f 0900 	mov.w	r9, #0
 801c772:	6023      	str	r3, [r4, #0]
 801c774:	e78e      	b.n	801c694 <_strtod_l+0x484>
 801c776:	bf00      	nop
 801c778:	08020785 	.word	0x08020785
 801c77c:	080207c8 	.word	0x080207c8
 801c780:	0802077d 	.word	0x0802077d
 801c784:	0802090c 	.word	0x0802090c
 801c788:	08020bb8 	.word	0x08020bb8
 801c78c:	08020a98 	.word	0x08020a98
 801c790:	08020a70 	.word	0x08020a70
 801c794:	7ca00000 	.word	0x7ca00000
 801c798:	7ff00000 	.word	0x7ff00000
 801c79c:	7fefffff 	.word	0x7fefffff
 801c7a0:	f012 0110 	ands.w	r1, r2, #16
 801c7a4:	bf18      	it	ne
 801c7a6:	216a      	movne	r1, #106	; 0x6a
 801c7a8:	9104      	str	r1, [sp, #16]
 801c7aa:	ec49 8b17 	vmov	d7, r8, r9
 801c7ae:	49be      	ldr	r1, [pc, #760]	; (801caa8 <_strtod_l+0x898>)
 801c7b0:	2000      	movs	r0, #0
 801c7b2:	07d6      	lsls	r6, r2, #31
 801c7b4:	d504      	bpl.n	801c7c0 <_strtod_l+0x5b0>
 801c7b6:	ed91 6b00 	vldr	d6, [r1]
 801c7ba:	2001      	movs	r0, #1
 801c7bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c7c0:	1052      	asrs	r2, r2, #1
 801c7c2:	f101 0108 	add.w	r1, r1, #8
 801c7c6:	d1f4      	bne.n	801c7b2 <_strtod_l+0x5a2>
 801c7c8:	b108      	cbz	r0, 801c7ce <_strtod_l+0x5be>
 801c7ca:	ec59 8b17 	vmov	r8, r9, d7
 801c7ce:	9a04      	ldr	r2, [sp, #16]
 801c7d0:	b1c2      	cbz	r2, 801c804 <_strtod_l+0x5f4>
 801c7d2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801c7d6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801c7da:	2a00      	cmp	r2, #0
 801c7dc:	4648      	mov	r0, r9
 801c7de:	dd11      	ble.n	801c804 <_strtod_l+0x5f4>
 801c7e0:	2a1f      	cmp	r2, #31
 801c7e2:	f340 812e 	ble.w	801ca42 <_strtod_l+0x832>
 801c7e6:	2a34      	cmp	r2, #52	; 0x34
 801c7e8:	bfde      	ittt	le
 801c7ea:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801c7ee:	f04f 32ff 	movle.w	r2, #4294967295
 801c7f2:	fa02 f101 	lslle.w	r1, r2, r1
 801c7f6:	f04f 0800 	mov.w	r8, #0
 801c7fa:	bfcc      	ite	gt
 801c7fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c800:	ea01 0900 	andle.w	r9, r1, r0
 801c804:	ec49 8b17 	vmov	d7, r8, r9
 801c808:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c810:	d0a6      	beq.n	801c760 <_strtod_l+0x550>
 801c812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c814:	9200      	str	r2, [sp, #0]
 801c816:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c818:	9a06      	ldr	r2, [sp, #24]
 801c81a:	4620      	mov	r0, r4
 801c81c:	f001 fe6c 	bl	801e4f8 <__s2b>
 801c820:	9006      	str	r0, [sp, #24]
 801c822:	2800      	cmp	r0, #0
 801c824:	f43f af2c 	beq.w	801c680 <_strtod_l+0x470>
 801c828:	9b07      	ldr	r3, [sp, #28]
 801c82a:	1b7d      	subs	r5, r7, r5
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	bfb4      	ite	lt
 801c830:	462b      	movlt	r3, r5
 801c832:	2300      	movge	r3, #0
 801c834:	9309      	str	r3, [sp, #36]	; 0x24
 801c836:	9b07      	ldr	r3, [sp, #28]
 801c838:	ed9f 9b93 	vldr	d9, [pc, #588]	; 801ca88 <_strtod_l+0x878>
 801c83c:	ed9f ab94 	vldr	d10, [pc, #592]	; 801ca90 <_strtod_l+0x880>
 801c840:	ed9f bb95 	vldr	d11, [pc, #596]	; 801ca98 <_strtod_l+0x888>
 801c844:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c848:	2500      	movs	r5, #0
 801c84a:	930c      	str	r3, [sp, #48]	; 0x30
 801c84c:	462e      	mov	r6, r5
 801c84e:	9b06      	ldr	r3, [sp, #24]
 801c850:	4620      	mov	r0, r4
 801c852:	6859      	ldr	r1, [r3, #4]
 801c854:	f001 fda8 	bl	801e3a8 <_Balloc>
 801c858:	4607      	mov	r7, r0
 801c85a:	2800      	cmp	r0, #0
 801c85c:	f43f af14 	beq.w	801c688 <_strtod_l+0x478>
 801c860:	9b06      	ldr	r3, [sp, #24]
 801c862:	691a      	ldr	r2, [r3, #16]
 801c864:	3202      	adds	r2, #2
 801c866:	f103 010c 	add.w	r1, r3, #12
 801c86a:	0092      	lsls	r2, r2, #2
 801c86c:	300c      	adds	r0, #12
 801c86e:	f7fe fcc2 	bl	801b1f6 <memcpy>
 801c872:	ec49 8b10 	vmov	d0, r8, r9
 801c876:	aa14      	add	r2, sp, #80	; 0x50
 801c878:	a913      	add	r1, sp, #76	; 0x4c
 801c87a:	4620      	mov	r0, r4
 801c87c:	f002 f982 	bl	801eb84 <__d2b>
 801c880:	ec49 8b18 	vmov	d8, r8, r9
 801c884:	9012      	str	r0, [sp, #72]	; 0x48
 801c886:	2800      	cmp	r0, #0
 801c888:	f43f aefe 	beq.w	801c688 <_strtod_l+0x478>
 801c88c:	2101      	movs	r1, #1
 801c88e:	4620      	mov	r0, r4
 801c890:	f001 fecc 	bl	801e62c <__i2b>
 801c894:	4606      	mov	r6, r0
 801c896:	2800      	cmp	r0, #0
 801c898:	f43f aef6 	beq.w	801c688 <_strtod_l+0x478>
 801c89c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c89e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	bfab      	itete	ge
 801c8a4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801c8a6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801c8a8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801c8ac:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801c8b0:	bfac      	ite	ge
 801c8b2:	eb03 0b02 	addge.w	fp, r3, r2
 801c8b6:	eba2 0a03 	sublt.w	sl, r2, r3
 801c8ba:	9a04      	ldr	r2, [sp, #16]
 801c8bc:	1a9b      	subs	r3, r3, r2
 801c8be:	440b      	add	r3, r1
 801c8c0:	4a7a      	ldr	r2, [pc, #488]	; (801caac <_strtod_l+0x89c>)
 801c8c2:	3b01      	subs	r3, #1
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c8ca:	f280 80cd 	bge.w	801ca68 <_strtod_l+0x858>
 801c8ce:	1ad2      	subs	r2, r2, r3
 801c8d0:	2a1f      	cmp	r2, #31
 801c8d2:	eba1 0102 	sub.w	r1, r1, r2
 801c8d6:	f04f 0001 	mov.w	r0, #1
 801c8da:	f300 80b9 	bgt.w	801ca50 <_strtod_l+0x840>
 801c8de:	fa00 f302 	lsl.w	r3, r0, r2
 801c8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	930a      	str	r3, [sp, #40]	; 0x28
 801c8e8:	eb0b 0301 	add.w	r3, fp, r1
 801c8ec:	9a04      	ldr	r2, [sp, #16]
 801c8ee:	459b      	cmp	fp, r3
 801c8f0:	448a      	add	sl, r1
 801c8f2:	4492      	add	sl, r2
 801c8f4:	465a      	mov	r2, fp
 801c8f6:	bfa8      	it	ge
 801c8f8:	461a      	movge	r2, r3
 801c8fa:	4552      	cmp	r2, sl
 801c8fc:	bfa8      	it	ge
 801c8fe:	4652      	movge	r2, sl
 801c900:	2a00      	cmp	r2, #0
 801c902:	bfc2      	ittt	gt
 801c904:	1a9b      	subgt	r3, r3, r2
 801c906:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c90a:	ebab 0b02 	subgt.w	fp, fp, r2
 801c90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c910:	2a00      	cmp	r2, #0
 801c912:	dd18      	ble.n	801c946 <_strtod_l+0x736>
 801c914:	4631      	mov	r1, r6
 801c916:	4620      	mov	r0, r4
 801c918:	930f      	str	r3, [sp, #60]	; 0x3c
 801c91a:	f001 ff47 	bl	801e7ac <__pow5mult>
 801c91e:	4606      	mov	r6, r0
 801c920:	2800      	cmp	r0, #0
 801c922:	f43f aeb1 	beq.w	801c688 <_strtod_l+0x478>
 801c926:	4601      	mov	r1, r0
 801c928:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c92a:	4620      	mov	r0, r4
 801c92c:	f001 fe94 	bl	801e658 <__multiply>
 801c930:	900e      	str	r0, [sp, #56]	; 0x38
 801c932:	2800      	cmp	r0, #0
 801c934:	f43f aea8 	beq.w	801c688 <_strtod_l+0x478>
 801c938:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c93a:	4620      	mov	r0, r4
 801c93c:	f001 fd74 	bl	801e428 <_Bfree>
 801c940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c944:	9212      	str	r2, [sp, #72]	; 0x48
 801c946:	2b00      	cmp	r3, #0
 801c948:	f300 8093 	bgt.w	801ca72 <_strtod_l+0x862>
 801c94c:	9b07      	ldr	r3, [sp, #28]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	dd08      	ble.n	801c964 <_strtod_l+0x754>
 801c952:	4639      	mov	r1, r7
 801c954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c956:	4620      	mov	r0, r4
 801c958:	f001 ff28 	bl	801e7ac <__pow5mult>
 801c95c:	4607      	mov	r7, r0
 801c95e:	2800      	cmp	r0, #0
 801c960:	f43f ae92 	beq.w	801c688 <_strtod_l+0x478>
 801c964:	f1ba 0f00 	cmp.w	sl, #0
 801c968:	dd08      	ble.n	801c97c <_strtod_l+0x76c>
 801c96a:	4639      	mov	r1, r7
 801c96c:	4652      	mov	r2, sl
 801c96e:	4620      	mov	r0, r4
 801c970:	f001 ff76 	bl	801e860 <__lshift>
 801c974:	4607      	mov	r7, r0
 801c976:	2800      	cmp	r0, #0
 801c978:	f43f ae86 	beq.w	801c688 <_strtod_l+0x478>
 801c97c:	f1bb 0f00 	cmp.w	fp, #0
 801c980:	dd08      	ble.n	801c994 <_strtod_l+0x784>
 801c982:	4631      	mov	r1, r6
 801c984:	465a      	mov	r2, fp
 801c986:	4620      	mov	r0, r4
 801c988:	f001 ff6a 	bl	801e860 <__lshift>
 801c98c:	4606      	mov	r6, r0
 801c98e:	2800      	cmp	r0, #0
 801c990:	f43f ae7a 	beq.w	801c688 <_strtod_l+0x478>
 801c994:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c996:	463a      	mov	r2, r7
 801c998:	4620      	mov	r0, r4
 801c99a:	f001 ffed 	bl	801e978 <__mdiff>
 801c99e:	4605      	mov	r5, r0
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	f43f ae71 	beq.w	801c688 <_strtod_l+0x478>
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c9ac:	60c3      	str	r3, [r0, #12]
 801c9ae:	4631      	mov	r1, r6
 801c9b0:	f001 ffc6 	bl	801e940 <__mcmp>
 801c9b4:	2800      	cmp	r0, #0
 801c9b6:	da7d      	bge.n	801cab4 <_strtod_l+0x8a4>
 801c9b8:	ea5a 0308 	orrs.w	r3, sl, r8
 801c9bc:	f040 80a3 	bne.w	801cb06 <_strtod_l+0x8f6>
 801c9c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	f040 809e 	bne.w	801cb06 <_strtod_l+0x8f6>
 801c9ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c9ce:	0d1b      	lsrs	r3, r3, #20
 801c9d0:	051b      	lsls	r3, r3, #20
 801c9d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c9d6:	f240 8096 	bls.w	801cb06 <_strtod_l+0x8f6>
 801c9da:	696b      	ldr	r3, [r5, #20]
 801c9dc:	b91b      	cbnz	r3, 801c9e6 <_strtod_l+0x7d6>
 801c9de:	692b      	ldr	r3, [r5, #16]
 801c9e0:	2b01      	cmp	r3, #1
 801c9e2:	f340 8090 	ble.w	801cb06 <_strtod_l+0x8f6>
 801c9e6:	4629      	mov	r1, r5
 801c9e8:	2201      	movs	r2, #1
 801c9ea:	4620      	mov	r0, r4
 801c9ec:	f001 ff38 	bl	801e860 <__lshift>
 801c9f0:	4631      	mov	r1, r6
 801c9f2:	4605      	mov	r5, r0
 801c9f4:	f001 ffa4 	bl	801e940 <__mcmp>
 801c9f8:	2800      	cmp	r0, #0
 801c9fa:	f340 8084 	ble.w	801cb06 <_strtod_l+0x8f6>
 801c9fe:	9904      	ldr	r1, [sp, #16]
 801ca00:	4a2b      	ldr	r2, [pc, #172]	; (801cab0 <_strtod_l+0x8a0>)
 801ca02:	464b      	mov	r3, r9
 801ca04:	2900      	cmp	r1, #0
 801ca06:	f000 809d 	beq.w	801cb44 <_strtod_l+0x934>
 801ca0a:	ea02 0109 	and.w	r1, r2, r9
 801ca0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ca12:	f300 8097 	bgt.w	801cb44 <_strtod_l+0x934>
 801ca16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ca1a:	f77f aea5 	ble.w	801c768 <_strtod_l+0x558>
 801ca1e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801caa0 <_strtod_l+0x890>
 801ca22:	ec49 8b16 	vmov	d6, r8, r9
 801ca26:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ca2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ca2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ca32:	4313      	orrs	r3, r2
 801ca34:	bf08      	it	eq
 801ca36:	2322      	moveq	r3, #34	; 0x22
 801ca38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801ca3c:	bf08      	it	eq
 801ca3e:	6023      	streq	r3, [r4, #0]
 801ca40:	e62c      	b.n	801c69c <_strtod_l+0x48c>
 801ca42:	f04f 31ff 	mov.w	r1, #4294967295
 801ca46:	fa01 f202 	lsl.w	r2, r1, r2
 801ca4a:	ea02 0808 	and.w	r8, r2, r8
 801ca4e:	e6d9      	b.n	801c804 <_strtod_l+0x5f4>
 801ca50:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801ca54:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801ca58:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801ca5c:	33e2      	adds	r3, #226	; 0xe2
 801ca5e:	fa00 f303 	lsl.w	r3, r0, r3
 801ca62:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801ca66:	e73f      	b.n	801c8e8 <_strtod_l+0x6d8>
 801ca68:	2200      	movs	r2, #0
 801ca6a:	2301      	movs	r3, #1
 801ca6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ca70:	e73a      	b.n	801c8e8 <_strtod_l+0x6d8>
 801ca72:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ca74:	461a      	mov	r2, r3
 801ca76:	4620      	mov	r0, r4
 801ca78:	f001 fef2 	bl	801e860 <__lshift>
 801ca7c:	9012      	str	r0, [sp, #72]	; 0x48
 801ca7e:	2800      	cmp	r0, #0
 801ca80:	f47f af64 	bne.w	801c94c <_strtod_l+0x73c>
 801ca84:	e600      	b.n	801c688 <_strtod_l+0x478>
 801ca86:	bf00      	nop
 801ca88:	94a03595 	.word	0x94a03595
 801ca8c:	3fcfffff 	.word	0x3fcfffff
 801ca90:	94a03595 	.word	0x94a03595
 801ca94:	3fdfffff 	.word	0x3fdfffff
 801ca98:	35afe535 	.word	0x35afe535
 801ca9c:	3fe00000 	.word	0x3fe00000
 801caa0:	00000000 	.word	0x00000000
 801caa4:	39500000 	.word	0x39500000
 801caa8:	080207e0 	.word	0x080207e0
 801caac:	fffffc02 	.word	0xfffffc02
 801cab0:	7ff00000 	.word	0x7ff00000
 801cab4:	46cb      	mov	fp, r9
 801cab6:	d15f      	bne.n	801cb78 <_strtod_l+0x968>
 801cab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cabc:	f1ba 0f00 	cmp.w	sl, #0
 801cac0:	d02a      	beq.n	801cb18 <_strtod_l+0x908>
 801cac2:	4aa7      	ldr	r2, [pc, #668]	; (801cd60 <_strtod_l+0xb50>)
 801cac4:	4293      	cmp	r3, r2
 801cac6:	d12b      	bne.n	801cb20 <_strtod_l+0x910>
 801cac8:	9b04      	ldr	r3, [sp, #16]
 801caca:	4642      	mov	r2, r8
 801cacc:	b1fb      	cbz	r3, 801cb0e <_strtod_l+0x8fe>
 801cace:	4ba5      	ldr	r3, [pc, #660]	; (801cd64 <_strtod_l+0xb54>)
 801cad0:	ea09 0303 	and.w	r3, r9, r3
 801cad4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cad8:	f04f 31ff 	mov.w	r1, #4294967295
 801cadc:	d81a      	bhi.n	801cb14 <_strtod_l+0x904>
 801cade:	0d1b      	lsrs	r3, r3, #20
 801cae0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cae4:	fa01 f303 	lsl.w	r3, r1, r3
 801cae8:	429a      	cmp	r2, r3
 801caea:	d119      	bne.n	801cb20 <_strtod_l+0x910>
 801caec:	4b9e      	ldr	r3, [pc, #632]	; (801cd68 <_strtod_l+0xb58>)
 801caee:	459b      	cmp	fp, r3
 801caf0:	d102      	bne.n	801caf8 <_strtod_l+0x8e8>
 801caf2:	3201      	adds	r2, #1
 801caf4:	f43f adc8 	beq.w	801c688 <_strtod_l+0x478>
 801caf8:	4b9a      	ldr	r3, [pc, #616]	; (801cd64 <_strtod_l+0xb54>)
 801cafa:	ea0b 0303 	and.w	r3, fp, r3
 801cafe:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801cb02:	f04f 0800 	mov.w	r8, #0
 801cb06:	9b04      	ldr	r3, [sp, #16]
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d188      	bne.n	801ca1e <_strtod_l+0x80e>
 801cb0c:	e5c6      	b.n	801c69c <_strtod_l+0x48c>
 801cb0e:	f04f 33ff 	mov.w	r3, #4294967295
 801cb12:	e7e9      	b.n	801cae8 <_strtod_l+0x8d8>
 801cb14:	460b      	mov	r3, r1
 801cb16:	e7e7      	b.n	801cae8 <_strtod_l+0x8d8>
 801cb18:	ea53 0308 	orrs.w	r3, r3, r8
 801cb1c:	f43f af6f 	beq.w	801c9fe <_strtod_l+0x7ee>
 801cb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb22:	b1cb      	cbz	r3, 801cb58 <_strtod_l+0x948>
 801cb24:	ea13 0f0b 	tst.w	r3, fp
 801cb28:	d0ed      	beq.n	801cb06 <_strtod_l+0x8f6>
 801cb2a:	9a04      	ldr	r2, [sp, #16]
 801cb2c:	4640      	mov	r0, r8
 801cb2e:	4649      	mov	r1, r9
 801cb30:	f1ba 0f00 	cmp.w	sl, #0
 801cb34:	d014      	beq.n	801cb60 <_strtod_l+0x950>
 801cb36:	f7ff fb4e 	bl	801c1d6 <sulp>
 801cb3a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801cb3e:	ec59 8b17 	vmov	r8, r9, d7
 801cb42:	e7e0      	b.n	801cb06 <_strtod_l+0x8f6>
 801cb44:	4013      	ands	r3, r2
 801cb46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cb4a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801cb4e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801cb52:	f04f 38ff 	mov.w	r8, #4294967295
 801cb56:	e7d6      	b.n	801cb06 <_strtod_l+0x8f6>
 801cb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb5a:	ea13 0f08 	tst.w	r3, r8
 801cb5e:	e7e3      	b.n	801cb28 <_strtod_l+0x918>
 801cb60:	f7ff fb39 	bl	801c1d6 <sulp>
 801cb64:	ee38 0b40 	vsub.f64	d0, d8, d0
 801cb68:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801cb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb70:	ec59 8b10 	vmov	r8, r9, d0
 801cb74:	d1c7      	bne.n	801cb06 <_strtod_l+0x8f6>
 801cb76:	e5f7      	b.n	801c768 <_strtod_l+0x558>
 801cb78:	4631      	mov	r1, r6
 801cb7a:	4628      	mov	r0, r5
 801cb7c:	f002 f85e 	bl	801ec3c <__ratio>
 801cb80:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801cb84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb8c:	d865      	bhi.n	801cc5a <_strtod_l+0xa4a>
 801cb8e:	f1ba 0f00 	cmp.w	sl, #0
 801cb92:	d042      	beq.n	801cc1a <_strtod_l+0xa0a>
 801cb94:	4b75      	ldr	r3, [pc, #468]	; (801cd6c <_strtod_l+0xb5c>)
 801cb96:	2200      	movs	r2, #0
 801cb98:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801cb9c:	4871      	ldr	r0, [pc, #452]	; (801cd64 <_strtod_l+0xb54>)
 801cb9e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801cd78 <_strtod_l+0xb68>
 801cba2:	ea0b 0100 	and.w	r1, fp, r0
 801cba6:	4561      	cmp	r1, ip
 801cba8:	f040 808e 	bne.w	801ccc8 <_strtod_l+0xab8>
 801cbac:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801cbb0:	ec49 8b10 	vmov	d0, r8, r9
 801cbb4:	ec43 2b1c 	vmov	d12, r2, r3
 801cbb8:	910a      	str	r1, [sp, #40]	; 0x28
 801cbba:	f001 ff67 	bl	801ea8c <__ulp>
 801cbbe:	ec49 8b1e 	vmov	d14, r8, r9
 801cbc2:	4868      	ldr	r0, [pc, #416]	; (801cd64 <_strtod_l+0xb54>)
 801cbc4:	eeac eb00 	vfma.f64	d14, d12, d0
 801cbc8:	ee1e 3a90 	vmov	r3, s29
 801cbcc:	4a68      	ldr	r2, [pc, #416]	; (801cd70 <_strtod_l+0xb60>)
 801cbce:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cbd0:	4018      	ands	r0, r3
 801cbd2:	4290      	cmp	r0, r2
 801cbd4:	ec59 8b1e 	vmov	r8, r9, d14
 801cbd8:	d94e      	bls.n	801cc78 <_strtod_l+0xa68>
 801cbda:	ee18 3a90 	vmov	r3, s17
 801cbde:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cbe2:	4293      	cmp	r3, r2
 801cbe4:	d104      	bne.n	801cbf0 <_strtod_l+0x9e0>
 801cbe6:	ee18 3a10 	vmov	r3, s16
 801cbea:	3301      	adds	r3, #1
 801cbec:	f43f ad4c 	beq.w	801c688 <_strtod_l+0x478>
 801cbf0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801cd68 <_strtod_l+0xb58>
 801cbf4:	f04f 38ff 	mov.w	r8, #4294967295
 801cbf8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	f001 fc14 	bl	801e428 <_Bfree>
 801cc00:	4639      	mov	r1, r7
 801cc02:	4620      	mov	r0, r4
 801cc04:	f001 fc10 	bl	801e428 <_Bfree>
 801cc08:	4631      	mov	r1, r6
 801cc0a:	4620      	mov	r0, r4
 801cc0c:	f001 fc0c 	bl	801e428 <_Bfree>
 801cc10:	4629      	mov	r1, r5
 801cc12:	4620      	mov	r0, r4
 801cc14:	f001 fc08 	bl	801e428 <_Bfree>
 801cc18:	e619      	b.n	801c84e <_strtod_l+0x63e>
 801cc1a:	f1b8 0f00 	cmp.w	r8, #0
 801cc1e:	d112      	bne.n	801cc46 <_strtod_l+0xa36>
 801cc20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cc24:	b9b3      	cbnz	r3, 801cc54 <_strtod_l+0xa44>
 801cc26:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801cc2a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc32:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801cc36:	bf58      	it	pl
 801cc38:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801cc3c:	eeb1 7b4d 	vneg.f64	d7, d13
 801cc40:	ec53 2b17 	vmov	r2, r3, d7
 801cc44:	e7aa      	b.n	801cb9c <_strtod_l+0x98c>
 801cc46:	f1b8 0f01 	cmp.w	r8, #1
 801cc4a:	d103      	bne.n	801cc54 <_strtod_l+0xa44>
 801cc4c:	f1b9 0f00 	cmp.w	r9, #0
 801cc50:	f43f ad8a 	beq.w	801c768 <_strtod_l+0x558>
 801cc54:	4b47      	ldr	r3, [pc, #284]	; (801cd74 <_strtod_l+0xb64>)
 801cc56:	2200      	movs	r2, #0
 801cc58:	e79e      	b.n	801cb98 <_strtod_l+0x988>
 801cc5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801cc5e:	ee20 db0d 	vmul.f64	d13, d0, d13
 801cc62:	f1ba 0f00 	cmp.w	sl, #0
 801cc66:	d104      	bne.n	801cc72 <_strtod_l+0xa62>
 801cc68:	eeb1 7b4d 	vneg.f64	d7, d13
 801cc6c:	ec53 2b17 	vmov	r2, r3, d7
 801cc70:	e794      	b.n	801cb9c <_strtod_l+0x98c>
 801cc72:	eeb0 7b4d 	vmov.f64	d7, d13
 801cc76:	e7f9      	b.n	801cc6c <_strtod_l+0xa5c>
 801cc78:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801cc7c:	9b04      	ldr	r3, [sp, #16]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d1ba      	bne.n	801cbf8 <_strtod_l+0x9e8>
 801cc82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cc86:	0d1b      	lsrs	r3, r3, #20
 801cc88:	051b      	lsls	r3, r3, #20
 801cc8a:	4299      	cmp	r1, r3
 801cc8c:	d1b4      	bne.n	801cbf8 <_strtod_l+0x9e8>
 801cc8e:	ec51 0b1d 	vmov	r0, r1, d13
 801cc92:	f7e3 fd01 	bl	8000698 <__aeabi_d2lz>
 801cc96:	f7e3 fcb9 	bl	800060c <__aeabi_l2d>
 801cc9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cc9e:	ec41 0b17 	vmov	d7, r0, r1
 801cca2:	ea43 0308 	orr.w	r3, r3, r8
 801cca6:	ea53 030a 	orrs.w	r3, r3, sl
 801ccaa:	ee3d db47 	vsub.f64	d13, d13, d7
 801ccae:	d03c      	beq.n	801cd2a <_strtod_l+0xb1a>
 801ccb0:	eeb4 dbca 	vcmpe.f64	d13, d10
 801ccb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccb8:	f53f acf0 	bmi.w	801c69c <_strtod_l+0x48c>
 801ccbc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801ccc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccc4:	dd98      	ble.n	801cbf8 <_strtod_l+0x9e8>
 801ccc6:	e4e9      	b.n	801c69c <_strtod_l+0x48c>
 801ccc8:	9804      	ldr	r0, [sp, #16]
 801ccca:	b1f0      	cbz	r0, 801cd0a <_strtod_l+0xafa>
 801cccc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801ccd0:	d81b      	bhi.n	801cd0a <_strtod_l+0xafa>
 801ccd2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801cd58 <_strtod_l+0xb48>
 801ccd6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801ccda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccde:	d811      	bhi.n	801cd04 <_strtod_l+0xaf4>
 801cce0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801cce4:	ee1d 3a10 	vmov	r3, s26
 801cce8:	2b01      	cmp	r3, #1
 801ccea:	bf38      	it	cc
 801ccec:	2301      	movcc	r3, #1
 801ccee:	ee0d 3a10 	vmov	s26, r3
 801ccf2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801ccf6:	f1ba 0f00 	cmp.w	sl, #0
 801ccfa:	d113      	bne.n	801cd24 <_strtod_l+0xb14>
 801ccfc:	eeb1 7b4d 	vneg.f64	d7, d13
 801cd00:	ec53 2b17 	vmov	r2, r3, d7
 801cd04:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801cd08:	1a43      	subs	r3, r0, r1
 801cd0a:	eeb0 0b48 	vmov.f64	d0, d8
 801cd0e:	ec43 2b1c 	vmov	d12, r2, r3
 801cd12:	910a      	str	r1, [sp, #40]	; 0x28
 801cd14:	f001 feba 	bl	801ea8c <__ulp>
 801cd18:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cd1a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801cd1e:	ec59 8b18 	vmov	r8, r9, d8
 801cd22:	e7ab      	b.n	801cc7c <_strtod_l+0xa6c>
 801cd24:	eeb0 7b4d 	vmov.f64	d7, d13
 801cd28:	e7ea      	b.n	801cd00 <_strtod_l+0xaf0>
 801cd2a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801cd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd32:	f57f af61 	bpl.w	801cbf8 <_strtod_l+0x9e8>
 801cd36:	e4b1      	b.n	801c69c <_strtod_l+0x48c>
 801cd38:	2300      	movs	r3, #0
 801cd3a:	9308      	str	r3, [sp, #32]
 801cd3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd40:	6013      	str	r3, [r2, #0]
 801cd42:	f7ff baad 	b.w	801c2a0 <_strtod_l+0x90>
 801cd46:	2a65      	cmp	r2, #101	; 0x65
 801cd48:	f43f ab9f 	beq.w	801c48a <_strtod_l+0x27a>
 801cd4c:	2a45      	cmp	r2, #69	; 0x45
 801cd4e:	f43f ab9c 	beq.w	801c48a <_strtod_l+0x27a>
 801cd52:	2101      	movs	r1, #1
 801cd54:	f7ff bbd4 	b.w	801c500 <_strtod_l+0x2f0>
 801cd58:	ffc00000 	.word	0xffc00000
 801cd5c:	41dfffff 	.word	0x41dfffff
 801cd60:	000fffff 	.word	0x000fffff
 801cd64:	7ff00000 	.word	0x7ff00000
 801cd68:	7fefffff 	.word	0x7fefffff
 801cd6c:	3ff00000 	.word	0x3ff00000
 801cd70:	7c9fffff 	.word	0x7c9fffff
 801cd74:	bff00000 	.word	0xbff00000
 801cd78:	7fe00000 	.word	0x7fe00000

0801cd7c <_strtod_r>:
 801cd7c:	4b01      	ldr	r3, [pc, #4]	; (801cd84 <_strtod_r+0x8>)
 801cd7e:	f7ff ba47 	b.w	801c210 <_strtod_l>
 801cd82:	bf00      	nop
 801cd84:	200000d4 	.word	0x200000d4

0801cd88 <_strtol_l.constprop.0>:
 801cd88:	2b01      	cmp	r3, #1
 801cd8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd8e:	d001      	beq.n	801cd94 <_strtol_l.constprop.0+0xc>
 801cd90:	2b24      	cmp	r3, #36	; 0x24
 801cd92:	d906      	bls.n	801cda2 <_strtol_l.constprop.0+0x1a>
 801cd94:	f7fe f90c 	bl	801afb0 <__errno>
 801cd98:	2316      	movs	r3, #22
 801cd9a:	6003      	str	r3, [r0, #0]
 801cd9c:	2000      	movs	r0, #0
 801cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cda2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ce88 <_strtol_l.constprop.0+0x100>
 801cda6:	460d      	mov	r5, r1
 801cda8:	462e      	mov	r6, r5
 801cdaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cdae:	f814 700c 	ldrb.w	r7, [r4, ip]
 801cdb2:	f017 0708 	ands.w	r7, r7, #8
 801cdb6:	d1f7      	bne.n	801cda8 <_strtol_l.constprop.0+0x20>
 801cdb8:	2c2d      	cmp	r4, #45	; 0x2d
 801cdba:	d132      	bne.n	801ce22 <_strtol_l.constprop.0+0x9a>
 801cdbc:	782c      	ldrb	r4, [r5, #0]
 801cdbe:	2701      	movs	r7, #1
 801cdc0:	1cb5      	adds	r5, r6, #2
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d05b      	beq.n	801ce7e <_strtol_l.constprop.0+0xf6>
 801cdc6:	2b10      	cmp	r3, #16
 801cdc8:	d109      	bne.n	801cdde <_strtol_l.constprop.0+0x56>
 801cdca:	2c30      	cmp	r4, #48	; 0x30
 801cdcc:	d107      	bne.n	801cdde <_strtol_l.constprop.0+0x56>
 801cdce:	782c      	ldrb	r4, [r5, #0]
 801cdd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cdd4:	2c58      	cmp	r4, #88	; 0x58
 801cdd6:	d14d      	bne.n	801ce74 <_strtol_l.constprop.0+0xec>
 801cdd8:	786c      	ldrb	r4, [r5, #1]
 801cdda:	2310      	movs	r3, #16
 801cddc:	3502      	adds	r5, #2
 801cdde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801cde2:	f108 38ff 	add.w	r8, r8, #4294967295
 801cde6:	f04f 0c00 	mov.w	ip, #0
 801cdea:	fbb8 f9f3 	udiv	r9, r8, r3
 801cdee:	4666      	mov	r6, ip
 801cdf0:	fb03 8a19 	mls	sl, r3, r9, r8
 801cdf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801cdf8:	f1be 0f09 	cmp.w	lr, #9
 801cdfc:	d816      	bhi.n	801ce2c <_strtol_l.constprop.0+0xa4>
 801cdfe:	4674      	mov	r4, lr
 801ce00:	42a3      	cmp	r3, r4
 801ce02:	dd24      	ble.n	801ce4e <_strtol_l.constprop.0+0xc6>
 801ce04:	f1bc 0f00 	cmp.w	ip, #0
 801ce08:	db1e      	blt.n	801ce48 <_strtol_l.constprop.0+0xc0>
 801ce0a:	45b1      	cmp	r9, r6
 801ce0c:	d31c      	bcc.n	801ce48 <_strtol_l.constprop.0+0xc0>
 801ce0e:	d101      	bne.n	801ce14 <_strtol_l.constprop.0+0x8c>
 801ce10:	45a2      	cmp	sl, r4
 801ce12:	db19      	blt.n	801ce48 <_strtol_l.constprop.0+0xc0>
 801ce14:	fb06 4603 	mla	r6, r6, r3, r4
 801ce18:	f04f 0c01 	mov.w	ip, #1
 801ce1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce20:	e7e8      	b.n	801cdf4 <_strtol_l.constprop.0+0x6c>
 801ce22:	2c2b      	cmp	r4, #43	; 0x2b
 801ce24:	bf04      	itt	eq
 801ce26:	782c      	ldrbeq	r4, [r5, #0]
 801ce28:	1cb5      	addeq	r5, r6, #2
 801ce2a:	e7ca      	b.n	801cdc2 <_strtol_l.constprop.0+0x3a>
 801ce2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801ce30:	f1be 0f19 	cmp.w	lr, #25
 801ce34:	d801      	bhi.n	801ce3a <_strtol_l.constprop.0+0xb2>
 801ce36:	3c37      	subs	r4, #55	; 0x37
 801ce38:	e7e2      	b.n	801ce00 <_strtol_l.constprop.0+0x78>
 801ce3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801ce3e:	f1be 0f19 	cmp.w	lr, #25
 801ce42:	d804      	bhi.n	801ce4e <_strtol_l.constprop.0+0xc6>
 801ce44:	3c57      	subs	r4, #87	; 0x57
 801ce46:	e7db      	b.n	801ce00 <_strtol_l.constprop.0+0x78>
 801ce48:	f04f 3cff 	mov.w	ip, #4294967295
 801ce4c:	e7e6      	b.n	801ce1c <_strtol_l.constprop.0+0x94>
 801ce4e:	f1bc 0f00 	cmp.w	ip, #0
 801ce52:	da05      	bge.n	801ce60 <_strtol_l.constprop.0+0xd8>
 801ce54:	2322      	movs	r3, #34	; 0x22
 801ce56:	6003      	str	r3, [r0, #0]
 801ce58:	4646      	mov	r6, r8
 801ce5a:	b942      	cbnz	r2, 801ce6e <_strtol_l.constprop.0+0xe6>
 801ce5c:	4630      	mov	r0, r6
 801ce5e:	e79e      	b.n	801cd9e <_strtol_l.constprop.0+0x16>
 801ce60:	b107      	cbz	r7, 801ce64 <_strtol_l.constprop.0+0xdc>
 801ce62:	4276      	negs	r6, r6
 801ce64:	2a00      	cmp	r2, #0
 801ce66:	d0f9      	beq.n	801ce5c <_strtol_l.constprop.0+0xd4>
 801ce68:	f1bc 0f00 	cmp.w	ip, #0
 801ce6c:	d000      	beq.n	801ce70 <_strtol_l.constprop.0+0xe8>
 801ce6e:	1e69      	subs	r1, r5, #1
 801ce70:	6011      	str	r1, [r2, #0]
 801ce72:	e7f3      	b.n	801ce5c <_strtol_l.constprop.0+0xd4>
 801ce74:	2430      	movs	r4, #48	; 0x30
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d1b1      	bne.n	801cdde <_strtol_l.constprop.0+0x56>
 801ce7a:	2308      	movs	r3, #8
 801ce7c:	e7af      	b.n	801cdde <_strtol_l.constprop.0+0x56>
 801ce7e:	2c30      	cmp	r4, #48	; 0x30
 801ce80:	d0a5      	beq.n	801cdce <_strtol_l.constprop.0+0x46>
 801ce82:	230a      	movs	r3, #10
 801ce84:	e7ab      	b.n	801cdde <_strtol_l.constprop.0+0x56>
 801ce86:	bf00      	nop
 801ce88:	08020809 	.word	0x08020809

0801ce8c <_strtol_r>:
 801ce8c:	f7ff bf7c 	b.w	801cd88 <_strtol_l.constprop.0>

0801ce90 <_write_r>:
 801ce90:	b538      	push	{r3, r4, r5, lr}
 801ce92:	4d07      	ldr	r5, [pc, #28]	; (801ceb0 <_write_r+0x20>)
 801ce94:	4604      	mov	r4, r0
 801ce96:	4608      	mov	r0, r1
 801ce98:	4611      	mov	r1, r2
 801ce9a:	2200      	movs	r2, #0
 801ce9c:	602a      	str	r2, [r5, #0]
 801ce9e:	461a      	mov	r2, r3
 801cea0:	f7f3 f919 	bl	80100d6 <_write>
 801cea4:	1c43      	adds	r3, r0, #1
 801cea6:	d102      	bne.n	801ceae <_write_r+0x1e>
 801cea8:	682b      	ldr	r3, [r5, #0]
 801ceaa:	b103      	cbz	r3, 801ceae <_write_r+0x1e>
 801ceac:	6023      	str	r3, [r4, #0]
 801ceae:	bd38      	pop	{r3, r4, r5, pc}
 801ceb0:	2004003c 	.word	0x2004003c

0801ceb4 <_close_r>:
 801ceb4:	b538      	push	{r3, r4, r5, lr}
 801ceb6:	4d06      	ldr	r5, [pc, #24]	; (801ced0 <_close_r+0x1c>)
 801ceb8:	2300      	movs	r3, #0
 801ceba:	4604      	mov	r4, r0
 801cebc:	4608      	mov	r0, r1
 801cebe:	602b      	str	r3, [r5, #0]
 801cec0:	f7f3 f925 	bl	801010e <_close>
 801cec4:	1c43      	adds	r3, r0, #1
 801cec6:	d102      	bne.n	801cece <_close_r+0x1a>
 801cec8:	682b      	ldr	r3, [r5, #0]
 801ceca:	b103      	cbz	r3, 801cece <_close_r+0x1a>
 801cecc:	6023      	str	r3, [r4, #0]
 801cece:	bd38      	pop	{r3, r4, r5, pc}
 801ced0:	2004003c 	.word	0x2004003c

0801ced4 <quorem>:
 801ced4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ced8:	6903      	ldr	r3, [r0, #16]
 801ceda:	690c      	ldr	r4, [r1, #16]
 801cedc:	42a3      	cmp	r3, r4
 801cede:	4607      	mov	r7, r0
 801cee0:	f2c0 8081 	blt.w	801cfe6 <quorem+0x112>
 801cee4:	3c01      	subs	r4, #1
 801cee6:	f101 0814 	add.w	r8, r1, #20
 801ceea:	f100 0514 	add.w	r5, r0, #20
 801ceee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cef2:	9301      	str	r3, [sp, #4]
 801cef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cefc:	3301      	adds	r3, #1
 801cefe:	429a      	cmp	r2, r3
 801cf00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cf04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cf08:	fbb2 f6f3 	udiv	r6, r2, r3
 801cf0c:	d331      	bcc.n	801cf72 <quorem+0x9e>
 801cf0e:	f04f 0e00 	mov.w	lr, #0
 801cf12:	4640      	mov	r0, r8
 801cf14:	46ac      	mov	ip, r5
 801cf16:	46f2      	mov	sl, lr
 801cf18:	f850 2b04 	ldr.w	r2, [r0], #4
 801cf1c:	b293      	uxth	r3, r2
 801cf1e:	fb06 e303 	mla	r3, r6, r3, lr
 801cf22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cf26:	b29b      	uxth	r3, r3
 801cf28:	ebaa 0303 	sub.w	r3, sl, r3
 801cf2c:	f8dc a000 	ldr.w	sl, [ip]
 801cf30:	0c12      	lsrs	r2, r2, #16
 801cf32:	fa13 f38a 	uxtah	r3, r3, sl
 801cf36:	fb06 e202 	mla	r2, r6, r2, lr
 801cf3a:	9300      	str	r3, [sp, #0]
 801cf3c:	9b00      	ldr	r3, [sp, #0]
 801cf3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cf42:	b292      	uxth	r2, r2
 801cf44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801cf48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cf4c:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf50:	4581      	cmp	r9, r0
 801cf52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cf56:	f84c 3b04 	str.w	r3, [ip], #4
 801cf5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cf5e:	d2db      	bcs.n	801cf18 <quorem+0x44>
 801cf60:	f855 300b 	ldr.w	r3, [r5, fp]
 801cf64:	b92b      	cbnz	r3, 801cf72 <quorem+0x9e>
 801cf66:	9b01      	ldr	r3, [sp, #4]
 801cf68:	3b04      	subs	r3, #4
 801cf6a:	429d      	cmp	r5, r3
 801cf6c:	461a      	mov	r2, r3
 801cf6e:	d32e      	bcc.n	801cfce <quorem+0xfa>
 801cf70:	613c      	str	r4, [r7, #16]
 801cf72:	4638      	mov	r0, r7
 801cf74:	f001 fce4 	bl	801e940 <__mcmp>
 801cf78:	2800      	cmp	r0, #0
 801cf7a:	db24      	blt.n	801cfc6 <quorem+0xf2>
 801cf7c:	3601      	adds	r6, #1
 801cf7e:	4628      	mov	r0, r5
 801cf80:	f04f 0c00 	mov.w	ip, #0
 801cf84:	f858 2b04 	ldr.w	r2, [r8], #4
 801cf88:	f8d0 e000 	ldr.w	lr, [r0]
 801cf8c:	b293      	uxth	r3, r2
 801cf8e:	ebac 0303 	sub.w	r3, ip, r3
 801cf92:	0c12      	lsrs	r2, r2, #16
 801cf94:	fa13 f38e 	uxtah	r3, r3, lr
 801cf98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cf9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cfa0:	b29b      	uxth	r3, r3
 801cfa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cfa6:	45c1      	cmp	r9, r8
 801cfa8:	f840 3b04 	str.w	r3, [r0], #4
 801cfac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cfb0:	d2e8      	bcs.n	801cf84 <quorem+0xb0>
 801cfb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cfb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cfba:	b922      	cbnz	r2, 801cfc6 <quorem+0xf2>
 801cfbc:	3b04      	subs	r3, #4
 801cfbe:	429d      	cmp	r5, r3
 801cfc0:	461a      	mov	r2, r3
 801cfc2:	d30a      	bcc.n	801cfda <quorem+0x106>
 801cfc4:	613c      	str	r4, [r7, #16]
 801cfc6:	4630      	mov	r0, r6
 801cfc8:	b003      	add	sp, #12
 801cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfce:	6812      	ldr	r2, [r2, #0]
 801cfd0:	3b04      	subs	r3, #4
 801cfd2:	2a00      	cmp	r2, #0
 801cfd4:	d1cc      	bne.n	801cf70 <quorem+0x9c>
 801cfd6:	3c01      	subs	r4, #1
 801cfd8:	e7c7      	b.n	801cf6a <quorem+0x96>
 801cfda:	6812      	ldr	r2, [r2, #0]
 801cfdc:	3b04      	subs	r3, #4
 801cfde:	2a00      	cmp	r2, #0
 801cfe0:	d1f0      	bne.n	801cfc4 <quorem+0xf0>
 801cfe2:	3c01      	subs	r4, #1
 801cfe4:	e7eb      	b.n	801cfbe <quorem+0xea>
 801cfe6:	2000      	movs	r0, #0
 801cfe8:	e7ee      	b.n	801cfc8 <quorem+0xf4>
 801cfea:	0000      	movs	r0, r0
 801cfec:	0000      	movs	r0, r0
	...

0801cff0 <_dtoa_r>:
 801cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff4:	ed2d 8b02 	vpush	{d8}
 801cff8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cffa:	b091      	sub	sp, #68	; 0x44
 801cffc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d000:	ec59 8b10 	vmov	r8, r9, d0
 801d004:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d006:	9106      	str	r1, [sp, #24]
 801d008:	4606      	mov	r6, r0
 801d00a:	9208      	str	r2, [sp, #32]
 801d00c:	930c      	str	r3, [sp, #48]	; 0x30
 801d00e:	b975      	cbnz	r5, 801d02e <_dtoa_r+0x3e>
 801d010:	2010      	movs	r0, #16
 801d012:	f001 f9a3 	bl	801e35c <malloc>
 801d016:	4602      	mov	r2, r0
 801d018:	6270      	str	r0, [r6, #36]	; 0x24
 801d01a:	b920      	cbnz	r0, 801d026 <_dtoa_r+0x36>
 801d01c:	4baa      	ldr	r3, [pc, #680]	; (801d2c8 <_dtoa_r+0x2d8>)
 801d01e:	21ea      	movs	r1, #234	; 0xea
 801d020:	48aa      	ldr	r0, [pc, #680]	; (801d2cc <_dtoa_r+0x2dc>)
 801d022:	f002 fa93 	bl	801f54c <__assert_func>
 801d026:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d02a:	6005      	str	r5, [r0, #0]
 801d02c:	60c5      	str	r5, [r0, #12]
 801d02e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d030:	6819      	ldr	r1, [r3, #0]
 801d032:	b151      	cbz	r1, 801d04a <_dtoa_r+0x5a>
 801d034:	685a      	ldr	r2, [r3, #4]
 801d036:	604a      	str	r2, [r1, #4]
 801d038:	2301      	movs	r3, #1
 801d03a:	4093      	lsls	r3, r2
 801d03c:	608b      	str	r3, [r1, #8]
 801d03e:	4630      	mov	r0, r6
 801d040:	f001 f9f2 	bl	801e428 <_Bfree>
 801d044:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d046:	2200      	movs	r2, #0
 801d048:	601a      	str	r2, [r3, #0]
 801d04a:	f1b9 0300 	subs.w	r3, r9, #0
 801d04e:	bfbb      	ittet	lt
 801d050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d054:	9303      	strlt	r3, [sp, #12]
 801d056:	2300      	movge	r3, #0
 801d058:	2201      	movlt	r2, #1
 801d05a:	bfac      	ite	ge
 801d05c:	6023      	strge	r3, [r4, #0]
 801d05e:	6022      	strlt	r2, [r4, #0]
 801d060:	4b9b      	ldr	r3, [pc, #620]	; (801d2d0 <_dtoa_r+0x2e0>)
 801d062:	9c03      	ldr	r4, [sp, #12]
 801d064:	43a3      	bics	r3, r4
 801d066:	d11c      	bne.n	801d0a2 <_dtoa_r+0xb2>
 801d068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d06a:	f242 730f 	movw	r3, #9999	; 0x270f
 801d06e:	6013      	str	r3, [r2, #0]
 801d070:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801d074:	ea53 0308 	orrs.w	r3, r3, r8
 801d078:	f000 84fd 	beq.w	801da76 <_dtoa_r+0xa86>
 801d07c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d07e:	b963      	cbnz	r3, 801d09a <_dtoa_r+0xaa>
 801d080:	4b94      	ldr	r3, [pc, #592]	; (801d2d4 <_dtoa_r+0x2e4>)
 801d082:	e01f      	b.n	801d0c4 <_dtoa_r+0xd4>
 801d084:	4b94      	ldr	r3, [pc, #592]	; (801d2d8 <_dtoa_r+0x2e8>)
 801d086:	9301      	str	r3, [sp, #4]
 801d088:	3308      	adds	r3, #8
 801d08a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d08c:	6013      	str	r3, [r2, #0]
 801d08e:	9801      	ldr	r0, [sp, #4]
 801d090:	b011      	add	sp, #68	; 0x44
 801d092:	ecbd 8b02 	vpop	{d8}
 801d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d09a:	4b8e      	ldr	r3, [pc, #568]	; (801d2d4 <_dtoa_r+0x2e4>)
 801d09c:	9301      	str	r3, [sp, #4]
 801d09e:	3303      	adds	r3, #3
 801d0a0:	e7f3      	b.n	801d08a <_dtoa_r+0x9a>
 801d0a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 801d0a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0ae:	d10b      	bne.n	801d0c8 <_dtoa_r+0xd8>
 801d0b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d0b2:	2301      	movs	r3, #1
 801d0b4:	6013      	str	r3, [r2, #0]
 801d0b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	f000 84d9 	beq.w	801da70 <_dtoa_r+0xa80>
 801d0be:	4887      	ldr	r0, [pc, #540]	; (801d2dc <_dtoa_r+0x2ec>)
 801d0c0:	6018      	str	r0, [r3, #0]
 801d0c2:	1e43      	subs	r3, r0, #1
 801d0c4:	9301      	str	r3, [sp, #4]
 801d0c6:	e7e2      	b.n	801d08e <_dtoa_r+0x9e>
 801d0c8:	a90f      	add	r1, sp, #60	; 0x3c
 801d0ca:	aa0e      	add	r2, sp, #56	; 0x38
 801d0cc:	4630      	mov	r0, r6
 801d0ce:	eeb0 0b48 	vmov.f64	d0, d8
 801d0d2:	f001 fd57 	bl	801eb84 <__d2b>
 801d0d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801d0da:	4605      	mov	r5, r0
 801d0dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d0de:	2900      	cmp	r1, #0
 801d0e0:	d046      	beq.n	801d170 <_dtoa_r+0x180>
 801d0e2:	ee18 4a90 	vmov	r4, s17
 801d0e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d0ea:	ec53 2b18 	vmov	r2, r3, d8
 801d0ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801d0f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d0f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801d0fa:	2400      	movs	r4, #0
 801d0fc:	ec43 2b16 	vmov	d6, r2, r3
 801d100:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801d104:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801d2b0 <_dtoa_r+0x2c0>
 801d108:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d10c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801d2b8 <_dtoa_r+0x2c8>
 801d110:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d114:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801d2c0 <_dtoa_r+0x2d0>
 801d118:	ee07 1a90 	vmov	s15, r1
 801d11c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801d120:	eeb0 7b46 	vmov.f64	d7, d6
 801d124:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d128:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801d12c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d134:	ee16 ba90 	vmov	fp, s13
 801d138:	940a      	str	r4, [sp, #40]	; 0x28
 801d13a:	d508      	bpl.n	801d14e <_dtoa_r+0x15e>
 801d13c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801d140:	eeb4 6b47 	vcmp.f64	d6, d7
 801d144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d148:	bf18      	it	ne
 801d14a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801d14e:	f1bb 0f16 	cmp.w	fp, #22
 801d152:	d82f      	bhi.n	801d1b4 <_dtoa_r+0x1c4>
 801d154:	4b62      	ldr	r3, [pc, #392]	; (801d2e0 <_dtoa_r+0x2f0>)
 801d156:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d15a:	ed93 7b00 	vldr	d7, [r3]
 801d15e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d166:	d501      	bpl.n	801d16c <_dtoa_r+0x17c>
 801d168:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d16c:	2300      	movs	r3, #0
 801d16e:	e022      	b.n	801d1b6 <_dtoa_r+0x1c6>
 801d170:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d172:	4401      	add	r1, r0
 801d174:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801d178:	2b20      	cmp	r3, #32
 801d17a:	bfc1      	itttt	gt
 801d17c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d180:	fa04 f303 	lslgt.w	r3, r4, r3
 801d184:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801d188:	fa28 f804 	lsrgt.w	r8, r8, r4
 801d18c:	bfd6      	itet	le
 801d18e:	f1c3 0320 	rsble	r3, r3, #32
 801d192:	ea43 0808 	orrgt.w	r8, r3, r8
 801d196:	fa08 f803 	lslle.w	r8, r8, r3
 801d19a:	ee07 8a90 	vmov	s15, r8
 801d19e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d1a2:	3901      	subs	r1, #1
 801d1a4:	ee17 4a90 	vmov	r4, s15
 801d1a8:	ec53 2b17 	vmov	r2, r3, d7
 801d1ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801d1b0:	2401      	movs	r4, #1
 801d1b2:	e7a3      	b.n	801d0fc <_dtoa_r+0x10c>
 801d1b4:	2301      	movs	r3, #1
 801d1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801d1b8:	1a43      	subs	r3, r0, r1
 801d1ba:	1e5a      	subs	r2, r3, #1
 801d1bc:	bf45      	ittet	mi
 801d1be:	f1c3 0301 	rsbmi	r3, r3, #1
 801d1c2:	9304      	strmi	r3, [sp, #16]
 801d1c4:	2300      	movpl	r3, #0
 801d1c6:	2300      	movmi	r3, #0
 801d1c8:	9205      	str	r2, [sp, #20]
 801d1ca:	bf54      	ite	pl
 801d1cc:	9304      	strpl	r3, [sp, #16]
 801d1ce:	9305      	strmi	r3, [sp, #20]
 801d1d0:	f1bb 0f00 	cmp.w	fp, #0
 801d1d4:	db18      	blt.n	801d208 <_dtoa_r+0x218>
 801d1d6:	9b05      	ldr	r3, [sp, #20]
 801d1d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801d1dc:	445b      	add	r3, fp
 801d1de:	9305      	str	r3, [sp, #20]
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	9a06      	ldr	r2, [sp, #24]
 801d1e4:	2a09      	cmp	r2, #9
 801d1e6:	d849      	bhi.n	801d27c <_dtoa_r+0x28c>
 801d1e8:	2a05      	cmp	r2, #5
 801d1ea:	bfc4      	itt	gt
 801d1ec:	3a04      	subgt	r2, #4
 801d1ee:	9206      	strgt	r2, [sp, #24]
 801d1f0:	9a06      	ldr	r2, [sp, #24]
 801d1f2:	f1a2 0202 	sub.w	r2, r2, #2
 801d1f6:	bfcc      	ite	gt
 801d1f8:	2400      	movgt	r4, #0
 801d1fa:	2401      	movle	r4, #1
 801d1fc:	2a03      	cmp	r2, #3
 801d1fe:	d848      	bhi.n	801d292 <_dtoa_r+0x2a2>
 801d200:	e8df f002 	tbb	[pc, r2]
 801d204:	3a2c2e0b 	.word	0x3a2c2e0b
 801d208:	9b04      	ldr	r3, [sp, #16]
 801d20a:	2200      	movs	r2, #0
 801d20c:	eba3 030b 	sub.w	r3, r3, fp
 801d210:	9304      	str	r3, [sp, #16]
 801d212:	9209      	str	r2, [sp, #36]	; 0x24
 801d214:	f1cb 0300 	rsb	r3, fp, #0
 801d218:	e7e3      	b.n	801d1e2 <_dtoa_r+0x1f2>
 801d21a:	2200      	movs	r2, #0
 801d21c:	9207      	str	r2, [sp, #28]
 801d21e:	9a08      	ldr	r2, [sp, #32]
 801d220:	2a00      	cmp	r2, #0
 801d222:	dc39      	bgt.n	801d298 <_dtoa_r+0x2a8>
 801d224:	f04f 0a01 	mov.w	sl, #1
 801d228:	46d1      	mov	r9, sl
 801d22a:	4652      	mov	r2, sl
 801d22c:	f8cd a020 	str.w	sl, [sp, #32]
 801d230:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801d232:	2100      	movs	r1, #0
 801d234:	6079      	str	r1, [r7, #4]
 801d236:	2004      	movs	r0, #4
 801d238:	f100 0c14 	add.w	ip, r0, #20
 801d23c:	4594      	cmp	ip, r2
 801d23e:	6879      	ldr	r1, [r7, #4]
 801d240:	d92f      	bls.n	801d2a2 <_dtoa_r+0x2b2>
 801d242:	4630      	mov	r0, r6
 801d244:	930d      	str	r3, [sp, #52]	; 0x34
 801d246:	f001 f8af 	bl	801e3a8 <_Balloc>
 801d24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d24c:	9001      	str	r0, [sp, #4]
 801d24e:	4602      	mov	r2, r0
 801d250:	2800      	cmp	r0, #0
 801d252:	d149      	bne.n	801d2e8 <_dtoa_r+0x2f8>
 801d254:	4b23      	ldr	r3, [pc, #140]	; (801d2e4 <_dtoa_r+0x2f4>)
 801d256:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d25a:	e6e1      	b.n	801d020 <_dtoa_r+0x30>
 801d25c:	2201      	movs	r2, #1
 801d25e:	e7dd      	b.n	801d21c <_dtoa_r+0x22c>
 801d260:	2200      	movs	r2, #0
 801d262:	9207      	str	r2, [sp, #28]
 801d264:	9a08      	ldr	r2, [sp, #32]
 801d266:	eb0b 0a02 	add.w	sl, fp, r2
 801d26a:	f10a 0901 	add.w	r9, sl, #1
 801d26e:	464a      	mov	r2, r9
 801d270:	2a01      	cmp	r2, #1
 801d272:	bfb8      	it	lt
 801d274:	2201      	movlt	r2, #1
 801d276:	e7db      	b.n	801d230 <_dtoa_r+0x240>
 801d278:	2201      	movs	r2, #1
 801d27a:	e7f2      	b.n	801d262 <_dtoa_r+0x272>
 801d27c:	2401      	movs	r4, #1
 801d27e:	2200      	movs	r2, #0
 801d280:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801d284:	f04f 3aff 	mov.w	sl, #4294967295
 801d288:	2100      	movs	r1, #0
 801d28a:	46d1      	mov	r9, sl
 801d28c:	2212      	movs	r2, #18
 801d28e:	9108      	str	r1, [sp, #32]
 801d290:	e7ce      	b.n	801d230 <_dtoa_r+0x240>
 801d292:	2201      	movs	r2, #1
 801d294:	9207      	str	r2, [sp, #28]
 801d296:	e7f5      	b.n	801d284 <_dtoa_r+0x294>
 801d298:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d29c:	46d1      	mov	r9, sl
 801d29e:	4652      	mov	r2, sl
 801d2a0:	e7c6      	b.n	801d230 <_dtoa_r+0x240>
 801d2a2:	3101      	adds	r1, #1
 801d2a4:	6079      	str	r1, [r7, #4]
 801d2a6:	0040      	lsls	r0, r0, #1
 801d2a8:	e7c6      	b.n	801d238 <_dtoa_r+0x248>
 801d2aa:	bf00      	nop
 801d2ac:	f3af 8000 	nop.w
 801d2b0:	636f4361 	.word	0x636f4361
 801d2b4:	3fd287a7 	.word	0x3fd287a7
 801d2b8:	8b60c8b3 	.word	0x8b60c8b3
 801d2bc:	3fc68a28 	.word	0x3fc68a28
 801d2c0:	509f79fb 	.word	0x509f79fb
 801d2c4:	3fd34413 	.word	0x3fd34413
 801d2c8:	08020916 	.word	0x08020916
 801d2cc:	0802092d 	.word	0x0802092d
 801d2d0:	7ff00000 	.word	0x7ff00000
 801d2d4:	08020912 	.word	0x08020912
 801d2d8:	08020909 	.word	0x08020909
 801d2dc:	08020789 	.word	0x08020789
 801d2e0:	08020a98 	.word	0x08020a98
 801d2e4:	08020988 	.word	0x08020988
 801d2e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801d2ea:	9901      	ldr	r1, [sp, #4]
 801d2ec:	6011      	str	r1, [r2, #0]
 801d2ee:	f1b9 0f0e 	cmp.w	r9, #14
 801d2f2:	d86c      	bhi.n	801d3ce <_dtoa_r+0x3de>
 801d2f4:	2c00      	cmp	r4, #0
 801d2f6:	d06a      	beq.n	801d3ce <_dtoa_r+0x3de>
 801d2f8:	f1bb 0f00 	cmp.w	fp, #0
 801d2fc:	f340 80a0 	ble.w	801d440 <_dtoa_r+0x450>
 801d300:	49c1      	ldr	r1, [pc, #772]	; (801d608 <_dtoa_r+0x618>)
 801d302:	f00b 020f 	and.w	r2, fp, #15
 801d306:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801d30a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d30e:	ed92 7b00 	vldr	d7, [r2]
 801d312:	ea4f 112b 	mov.w	r1, fp, asr #4
 801d316:	f000 8087 	beq.w	801d428 <_dtoa_r+0x438>
 801d31a:	4abc      	ldr	r2, [pc, #752]	; (801d60c <_dtoa_r+0x61c>)
 801d31c:	ed92 6b08 	vldr	d6, [r2, #32]
 801d320:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801d324:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d328:	f001 010f 	and.w	r1, r1, #15
 801d32c:	2203      	movs	r2, #3
 801d32e:	48b7      	ldr	r0, [pc, #732]	; (801d60c <_dtoa_r+0x61c>)
 801d330:	2900      	cmp	r1, #0
 801d332:	d17b      	bne.n	801d42c <_dtoa_r+0x43c>
 801d334:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d338:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801d33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d342:	2900      	cmp	r1, #0
 801d344:	f000 80a2 	beq.w	801d48c <_dtoa_r+0x49c>
 801d348:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801d34c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d350:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d358:	f140 8098 	bpl.w	801d48c <_dtoa_r+0x49c>
 801d35c:	f1b9 0f00 	cmp.w	r9, #0
 801d360:	f000 8094 	beq.w	801d48c <_dtoa_r+0x49c>
 801d364:	f1ba 0f00 	cmp.w	sl, #0
 801d368:	dd2f      	ble.n	801d3ca <_dtoa_r+0x3da>
 801d36a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801d36e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d372:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d376:	f10b 37ff 	add.w	r7, fp, #4294967295
 801d37a:	3201      	adds	r2, #1
 801d37c:	4650      	mov	r0, sl
 801d37e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d382:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801d386:	ee07 2a90 	vmov	s15, r2
 801d38a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d38e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801d392:	ee15 4a90 	vmov	r4, s11
 801d396:	ec52 1b15 	vmov	r1, r2, d5
 801d39a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801d39e:	2800      	cmp	r0, #0
 801d3a0:	d177      	bne.n	801d492 <_dtoa_r+0x4a2>
 801d3a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801d3a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801d3aa:	ec42 1b17 	vmov	d7, r1, r2
 801d3ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3b6:	f300 8263 	bgt.w	801d880 <_dtoa_r+0x890>
 801d3ba:	eeb1 7b47 	vneg.f64	d7, d7
 801d3be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3c6:	f100 8258 	bmi.w	801d87a <_dtoa_r+0x88a>
 801d3ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 801d3ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d3d0:	2a00      	cmp	r2, #0
 801d3d2:	f2c0 811d 	blt.w	801d610 <_dtoa_r+0x620>
 801d3d6:	f1bb 0f0e 	cmp.w	fp, #14
 801d3da:	f300 8119 	bgt.w	801d610 <_dtoa_r+0x620>
 801d3de:	4b8a      	ldr	r3, [pc, #552]	; (801d608 <_dtoa_r+0x618>)
 801d3e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d3e4:	ed93 6b00 	vldr	d6, [r3]
 801d3e8:	9b08      	ldr	r3, [sp, #32]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	f280 80b7 	bge.w	801d55e <_dtoa_r+0x56e>
 801d3f0:	f1b9 0f00 	cmp.w	r9, #0
 801d3f4:	f300 80b3 	bgt.w	801d55e <_dtoa_r+0x56e>
 801d3f8:	f040 823f 	bne.w	801d87a <_dtoa_r+0x88a>
 801d3fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801d400:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d404:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d408:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d410:	464c      	mov	r4, r9
 801d412:	464f      	mov	r7, r9
 801d414:	f280 8215 	bge.w	801d842 <_dtoa_r+0x852>
 801d418:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d41c:	2331      	movs	r3, #49	; 0x31
 801d41e:	f808 3b01 	strb.w	r3, [r8], #1
 801d422:	f10b 0b01 	add.w	fp, fp, #1
 801d426:	e211      	b.n	801d84c <_dtoa_r+0x85c>
 801d428:	2202      	movs	r2, #2
 801d42a:	e780      	b.n	801d32e <_dtoa_r+0x33e>
 801d42c:	07cc      	lsls	r4, r1, #31
 801d42e:	d504      	bpl.n	801d43a <_dtoa_r+0x44a>
 801d430:	ed90 6b00 	vldr	d6, [r0]
 801d434:	3201      	adds	r2, #1
 801d436:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d43a:	1049      	asrs	r1, r1, #1
 801d43c:	3008      	adds	r0, #8
 801d43e:	e777      	b.n	801d330 <_dtoa_r+0x340>
 801d440:	d022      	beq.n	801d488 <_dtoa_r+0x498>
 801d442:	f1cb 0100 	rsb	r1, fp, #0
 801d446:	4a70      	ldr	r2, [pc, #448]	; (801d608 <_dtoa_r+0x618>)
 801d448:	f001 000f 	and.w	r0, r1, #15
 801d44c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d450:	ed92 7b00 	vldr	d7, [r2]
 801d454:	ee28 7b07 	vmul.f64	d7, d8, d7
 801d458:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d45c:	486b      	ldr	r0, [pc, #428]	; (801d60c <_dtoa_r+0x61c>)
 801d45e:	1109      	asrs	r1, r1, #4
 801d460:	2400      	movs	r4, #0
 801d462:	2202      	movs	r2, #2
 801d464:	b929      	cbnz	r1, 801d472 <_dtoa_r+0x482>
 801d466:	2c00      	cmp	r4, #0
 801d468:	f43f af6a 	beq.w	801d340 <_dtoa_r+0x350>
 801d46c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d470:	e766      	b.n	801d340 <_dtoa_r+0x350>
 801d472:	07cf      	lsls	r7, r1, #31
 801d474:	d505      	bpl.n	801d482 <_dtoa_r+0x492>
 801d476:	ed90 6b00 	vldr	d6, [r0]
 801d47a:	3201      	adds	r2, #1
 801d47c:	2401      	movs	r4, #1
 801d47e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d482:	1049      	asrs	r1, r1, #1
 801d484:	3008      	adds	r0, #8
 801d486:	e7ed      	b.n	801d464 <_dtoa_r+0x474>
 801d488:	2202      	movs	r2, #2
 801d48a:	e759      	b.n	801d340 <_dtoa_r+0x350>
 801d48c:	465f      	mov	r7, fp
 801d48e:	4648      	mov	r0, r9
 801d490:	e775      	b.n	801d37e <_dtoa_r+0x38e>
 801d492:	ec42 1b17 	vmov	d7, r1, r2
 801d496:	4a5c      	ldr	r2, [pc, #368]	; (801d608 <_dtoa_r+0x618>)
 801d498:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d49c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801d4a0:	9a01      	ldr	r2, [sp, #4]
 801d4a2:	1814      	adds	r4, r2, r0
 801d4a4:	9a07      	ldr	r2, [sp, #28]
 801d4a6:	b352      	cbz	r2, 801d4fe <_dtoa_r+0x50e>
 801d4a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801d4ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801d4b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d4b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801d4b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801d4bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d4c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d4c4:	ee14 2a90 	vmov	r2, s9
 801d4c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d4cc:	3230      	adds	r2, #48	; 0x30
 801d4ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d4d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4da:	f808 2b01 	strb.w	r2, [r8], #1
 801d4de:	d439      	bmi.n	801d554 <_dtoa_r+0x564>
 801d4e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 801d4e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801d4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4ec:	d472      	bmi.n	801d5d4 <_dtoa_r+0x5e4>
 801d4ee:	45a0      	cmp	r8, r4
 801d4f0:	f43f af6b 	beq.w	801d3ca <_dtoa_r+0x3da>
 801d4f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 801d4f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d4fc:	e7e0      	b.n	801d4c0 <_dtoa_r+0x4d0>
 801d4fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d502:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d506:	4621      	mov	r1, r4
 801d508:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801d50c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801d510:	ee14 2a90 	vmov	r2, s9
 801d514:	3230      	adds	r2, #48	; 0x30
 801d516:	f808 2b01 	strb.w	r2, [r8], #1
 801d51a:	45a0      	cmp	r8, r4
 801d51c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801d520:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d524:	d118      	bne.n	801d558 <_dtoa_r+0x568>
 801d526:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801d52a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801d52e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801d532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d536:	dc4d      	bgt.n	801d5d4 <_dtoa_r+0x5e4>
 801d538:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d53c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d544:	f57f af41 	bpl.w	801d3ca <_dtoa_r+0x3da>
 801d548:	4688      	mov	r8, r1
 801d54a:	3901      	subs	r1, #1
 801d54c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801d550:	2b30      	cmp	r3, #48	; 0x30
 801d552:	d0f9      	beq.n	801d548 <_dtoa_r+0x558>
 801d554:	46bb      	mov	fp, r7
 801d556:	e02a      	b.n	801d5ae <_dtoa_r+0x5be>
 801d558:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d55c:	e7d6      	b.n	801d50c <_dtoa_r+0x51c>
 801d55e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d562:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801d566:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d56a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801d56e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801d572:	ee15 3a10 	vmov	r3, s10
 801d576:	3330      	adds	r3, #48	; 0x30
 801d578:	f808 3b01 	strb.w	r3, [r8], #1
 801d57c:	9b01      	ldr	r3, [sp, #4]
 801d57e:	eba8 0303 	sub.w	r3, r8, r3
 801d582:	4599      	cmp	r9, r3
 801d584:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801d588:	eea3 7b46 	vfms.f64	d7, d3, d6
 801d58c:	d133      	bne.n	801d5f6 <_dtoa_r+0x606>
 801d58e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d592:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d59a:	dc1a      	bgt.n	801d5d2 <_dtoa_r+0x5e2>
 801d59c:	eeb4 7b46 	vcmp.f64	d7, d6
 801d5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5a4:	d103      	bne.n	801d5ae <_dtoa_r+0x5be>
 801d5a6:	ee15 3a10 	vmov	r3, s10
 801d5aa:	07d9      	lsls	r1, r3, #31
 801d5ac:	d411      	bmi.n	801d5d2 <_dtoa_r+0x5e2>
 801d5ae:	4629      	mov	r1, r5
 801d5b0:	4630      	mov	r0, r6
 801d5b2:	f000 ff39 	bl	801e428 <_Bfree>
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d5ba:	f888 3000 	strb.w	r3, [r8]
 801d5be:	f10b 0301 	add.w	r3, fp, #1
 801d5c2:	6013      	str	r3, [r2, #0]
 801d5c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	f43f ad61 	beq.w	801d08e <_dtoa_r+0x9e>
 801d5cc:	f8c3 8000 	str.w	r8, [r3]
 801d5d0:	e55d      	b.n	801d08e <_dtoa_r+0x9e>
 801d5d2:	465f      	mov	r7, fp
 801d5d4:	4643      	mov	r3, r8
 801d5d6:	4698      	mov	r8, r3
 801d5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d5dc:	2a39      	cmp	r2, #57	; 0x39
 801d5de:	d106      	bne.n	801d5ee <_dtoa_r+0x5fe>
 801d5e0:	9a01      	ldr	r2, [sp, #4]
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d1f7      	bne.n	801d5d6 <_dtoa_r+0x5e6>
 801d5e6:	9901      	ldr	r1, [sp, #4]
 801d5e8:	2230      	movs	r2, #48	; 0x30
 801d5ea:	3701      	adds	r7, #1
 801d5ec:	700a      	strb	r2, [r1, #0]
 801d5ee:	781a      	ldrb	r2, [r3, #0]
 801d5f0:	3201      	adds	r2, #1
 801d5f2:	701a      	strb	r2, [r3, #0]
 801d5f4:	e7ae      	b.n	801d554 <_dtoa_r+0x564>
 801d5f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d5fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d602:	d1b2      	bne.n	801d56a <_dtoa_r+0x57a>
 801d604:	e7d3      	b.n	801d5ae <_dtoa_r+0x5be>
 801d606:	bf00      	nop
 801d608:	08020a98 	.word	0x08020a98
 801d60c:	08020a70 	.word	0x08020a70
 801d610:	9907      	ldr	r1, [sp, #28]
 801d612:	2900      	cmp	r1, #0
 801d614:	f000 80d0 	beq.w	801d7b8 <_dtoa_r+0x7c8>
 801d618:	9906      	ldr	r1, [sp, #24]
 801d61a:	2901      	cmp	r1, #1
 801d61c:	f300 80b4 	bgt.w	801d788 <_dtoa_r+0x798>
 801d620:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d622:	2900      	cmp	r1, #0
 801d624:	f000 80ac 	beq.w	801d780 <_dtoa_r+0x790>
 801d628:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d62c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d630:	461c      	mov	r4, r3
 801d632:	930a      	str	r3, [sp, #40]	; 0x28
 801d634:	9b04      	ldr	r3, [sp, #16]
 801d636:	4413      	add	r3, r2
 801d638:	9304      	str	r3, [sp, #16]
 801d63a:	9b05      	ldr	r3, [sp, #20]
 801d63c:	2101      	movs	r1, #1
 801d63e:	4413      	add	r3, r2
 801d640:	4630      	mov	r0, r6
 801d642:	9305      	str	r3, [sp, #20]
 801d644:	f000 fff2 	bl	801e62c <__i2b>
 801d648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d64a:	4607      	mov	r7, r0
 801d64c:	f1b8 0f00 	cmp.w	r8, #0
 801d650:	dd0d      	ble.n	801d66e <_dtoa_r+0x67e>
 801d652:	9a05      	ldr	r2, [sp, #20]
 801d654:	2a00      	cmp	r2, #0
 801d656:	dd0a      	ble.n	801d66e <_dtoa_r+0x67e>
 801d658:	4542      	cmp	r2, r8
 801d65a:	9904      	ldr	r1, [sp, #16]
 801d65c:	bfa8      	it	ge
 801d65e:	4642      	movge	r2, r8
 801d660:	1a89      	subs	r1, r1, r2
 801d662:	9104      	str	r1, [sp, #16]
 801d664:	9905      	ldr	r1, [sp, #20]
 801d666:	eba8 0802 	sub.w	r8, r8, r2
 801d66a:	1a8a      	subs	r2, r1, r2
 801d66c:	9205      	str	r2, [sp, #20]
 801d66e:	b303      	cbz	r3, 801d6b2 <_dtoa_r+0x6c2>
 801d670:	9a07      	ldr	r2, [sp, #28]
 801d672:	2a00      	cmp	r2, #0
 801d674:	f000 80a5 	beq.w	801d7c2 <_dtoa_r+0x7d2>
 801d678:	2c00      	cmp	r4, #0
 801d67a:	dd13      	ble.n	801d6a4 <_dtoa_r+0x6b4>
 801d67c:	4639      	mov	r1, r7
 801d67e:	4622      	mov	r2, r4
 801d680:	4630      	mov	r0, r6
 801d682:	930d      	str	r3, [sp, #52]	; 0x34
 801d684:	f001 f892 	bl	801e7ac <__pow5mult>
 801d688:	462a      	mov	r2, r5
 801d68a:	4601      	mov	r1, r0
 801d68c:	4607      	mov	r7, r0
 801d68e:	4630      	mov	r0, r6
 801d690:	f000 ffe2 	bl	801e658 <__multiply>
 801d694:	4629      	mov	r1, r5
 801d696:	900a      	str	r0, [sp, #40]	; 0x28
 801d698:	4630      	mov	r0, r6
 801d69a:	f000 fec5 	bl	801e428 <_Bfree>
 801d69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6a2:	4615      	mov	r5, r2
 801d6a4:	1b1a      	subs	r2, r3, r4
 801d6a6:	d004      	beq.n	801d6b2 <_dtoa_r+0x6c2>
 801d6a8:	4629      	mov	r1, r5
 801d6aa:	4630      	mov	r0, r6
 801d6ac:	f001 f87e 	bl	801e7ac <__pow5mult>
 801d6b0:	4605      	mov	r5, r0
 801d6b2:	2101      	movs	r1, #1
 801d6b4:	4630      	mov	r0, r6
 801d6b6:	f000 ffb9 	bl	801e62c <__i2b>
 801d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	4604      	mov	r4, r0
 801d6c0:	f340 8081 	ble.w	801d7c6 <_dtoa_r+0x7d6>
 801d6c4:	461a      	mov	r2, r3
 801d6c6:	4601      	mov	r1, r0
 801d6c8:	4630      	mov	r0, r6
 801d6ca:	f001 f86f 	bl	801e7ac <__pow5mult>
 801d6ce:	9b06      	ldr	r3, [sp, #24]
 801d6d0:	2b01      	cmp	r3, #1
 801d6d2:	4604      	mov	r4, r0
 801d6d4:	dd7a      	ble.n	801d7cc <_dtoa_r+0x7dc>
 801d6d6:	2300      	movs	r3, #0
 801d6d8:	930a      	str	r3, [sp, #40]	; 0x28
 801d6da:	6922      	ldr	r2, [r4, #16]
 801d6dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d6e0:	6910      	ldr	r0, [r2, #16]
 801d6e2:	f000 ff53 	bl	801e58c <__hi0bits>
 801d6e6:	f1c0 0020 	rsb	r0, r0, #32
 801d6ea:	9b05      	ldr	r3, [sp, #20]
 801d6ec:	4418      	add	r0, r3
 801d6ee:	f010 001f 	ands.w	r0, r0, #31
 801d6f2:	f000 808c 	beq.w	801d80e <_dtoa_r+0x81e>
 801d6f6:	f1c0 0220 	rsb	r2, r0, #32
 801d6fa:	2a04      	cmp	r2, #4
 801d6fc:	f340 8085 	ble.w	801d80a <_dtoa_r+0x81a>
 801d700:	f1c0 001c 	rsb	r0, r0, #28
 801d704:	9b04      	ldr	r3, [sp, #16]
 801d706:	4403      	add	r3, r0
 801d708:	9304      	str	r3, [sp, #16]
 801d70a:	9b05      	ldr	r3, [sp, #20]
 801d70c:	4403      	add	r3, r0
 801d70e:	4480      	add	r8, r0
 801d710:	9305      	str	r3, [sp, #20]
 801d712:	9b04      	ldr	r3, [sp, #16]
 801d714:	2b00      	cmp	r3, #0
 801d716:	dd05      	ble.n	801d724 <_dtoa_r+0x734>
 801d718:	4629      	mov	r1, r5
 801d71a:	461a      	mov	r2, r3
 801d71c:	4630      	mov	r0, r6
 801d71e:	f001 f89f 	bl	801e860 <__lshift>
 801d722:	4605      	mov	r5, r0
 801d724:	9b05      	ldr	r3, [sp, #20]
 801d726:	2b00      	cmp	r3, #0
 801d728:	dd05      	ble.n	801d736 <_dtoa_r+0x746>
 801d72a:	4621      	mov	r1, r4
 801d72c:	461a      	mov	r2, r3
 801d72e:	4630      	mov	r0, r6
 801d730:	f001 f896 	bl	801e860 <__lshift>
 801d734:	4604      	mov	r4, r0
 801d736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d06a      	beq.n	801d812 <_dtoa_r+0x822>
 801d73c:	4621      	mov	r1, r4
 801d73e:	4628      	mov	r0, r5
 801d740:	f001 f8fe 	bl	801e940 <__mcmp>
 801d744:	2800      	cmp	r0, #0
 801d746:	da64      	bge.n	801d812 <_dtoa_r+0x822>
 801d748:	2300      	movs	r3, #0
 801d74a:	4629      	mov	r1, r5
 801d74c:	220a      	movs	r2, #10
 801d74e:	4630      	mov	r0, r6
 801d750:	f000 fe8c 	bl	801e46c <__multadd>
 801d754:	9b07      	ldr	r3, [sp, #28]
 801d756:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d75a:	4605      	mov	r5, r0
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	f000 8191 	beq.w	801da84 <_dtoa_r+0xa94>
 801d762:	4639      	mov	r1, r7
 801d764:	2300      	movs	r3, #0
 801d766:	220a      	movs	r2, #10
 801d768:	4630      	mov	r0, r6
 801d76a:	f000 fe7f 	bl	801e46c <__multadd>
 801d76e:	f1ba 0f00 	cmp.w	sl, #0
 801d772:	4607      	mov	r7, r0
 801d774:	f300 808d 	bgt.w	801d892 <_dtoa_r+0x8a2>
 801d778:	9b06      	ldr	r3, [sp, #24]
 801d77a:	2b02      	cmp	r3, #2
 801d77c:	dc50      	bgt.n	801d820 <_dtoa_r+0x830>
 801d77e:	e088      	b.n	801d892 <_dtoa_r+0x8a2>
 801d780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d782:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d786:	e751      	b.n	801d62c <_dtoa_r+0x63c>
 801d788:	f109 34ff 	add.w	r4, r9, #4294967295
 801d78c:	42a3      	cmp	r3, r4
 801d78e:	bfbf      	itttt	lt
 801d790:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801d792:	1ae3      	sublt	r3, r4, r3
 801d794:	18d2      	addlt	r2, r2, r3
 801d796:	9209      	strlt	r2, [sp, #36]	; 0x24
 801d798:	bfb6      	itet	lt
 801d79a:	4623      	movlt	r3, r4
 801d79c:	1b1c      	subge	r4, r3, r4
 801d79e:	2400      	movlt	r4, #0
 801d7a0:	f1b9 0f00 	cmp.w	r9, #0
 801d7a4:	bfb5      	itete	lt
 801d7a6:	9a04      	ldrlt	r2, [sp, #16]
 801d7a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801d7ac:	eba2 0809 	sublt.w	r8, r2, r9
 801d7b0:	464a      	movge	r2, r9
 801d7b2:	bfb8      	it	lt
 801d7b4:	2200      	movlt	r2, #0
 801d7b6:	e73c      	b.n	801d632 <_dtoa_r+0x642>
 801d7b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d7bc:	9f07      	ldr	r7, [sp, #28]
 801d7be:	461c      	mov	r4, r3
 801d7c0:	e744      	b.n	801d64c <_dtoa_r+0x65c>
 801d7c2:	461a      	mov	r2, r3
 801d7c4:	e770      	b.n	801d6a8 <_dtoa_r+0x6b8>
 801d7c6:	9b06      	ldr	r3, [sp, #24]
 801d7c8:	2b01      	cmp	r3, #1
 801d7ca:	dc18      	bgt.n	801d7fe <_dtoa_r+0x80e>
 801d7cc:	9b02      	ldr	r3, [sp, #8]
 801d7ce:	b9b3      	cbnz	r3, 801d7fe <_dtoa_r+0x80e>
 801d7d0:	9b03      	ldr	r3, [sp, #12]
 801d7d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d7d6:	b9a2      	cbnz	r2, 801d802 <_dtoa_r+0x812>
 801d7d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d7dc:	0d12      	lsrs	r2, r2, #20
 801d7de:	0512      	lsls	r2, r2, #20
 801d7e0:	b18a      	cbz	r2, 801d806 <_dtoa_r+0x816>
 801d7e2:	9b04      	ldr	r3, [sp, #16]
 801d7e4:	3301      	adds	r3, #1
 801d7e6:	9304      	str	r3, [sp, #16]
 801d7e8:	9b05      	ldr	r3, [sp, #20]
 801d7ea:	3301      	adds	r3, #1
 801d7ec:	9305      	str	r3, [sp, #20]
 801d7ee:	2301      	movs	r3, #1
 801d7f0:	930a      	str	r3, [sp, #40]	; 0x28
 801d7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	f47f af70 	bne.w	801d6da <_dtoa_r+0x6ea>
 801d7fa:	2001      	movs	r0, #1
 801d7fc:	e775      	b.n	801d6ea <_dtoa_r+0x6fa>
 801d7fe:	2300      	movs	r3, #0
 801d800:	e7f6      	b.n	801d7f0 <_dtoa_r+0x800>
 801d802:	9b02      	ldr	r3, [sp, #8]
 801d804:	e7f4      	b.n	801d7f0 <_dtoa_r+0x800>
 801d806:	920a      	str	r2, [sp, #40]	; 0x28
 801d808:	e7f3      	b.n	801d7f2 <_dtoa_r+0x802>
 801d80a:	d082      	beq.n	801d712 <_dtoa_r+0x722>
 801d80c:	4610      	mov	r0, r2
 801d80e:	301c      	adds	r0, #28
 801d810:	e778      	b.n	801d704 <_dtoa_r+0x714>
 801d812:	f1b9 0f00 	cmp.w	r9, #0
 801d816:	dc37      	bgt.n	801d888 <_dtoa_r+0x898>
 801d818:	9b06      	ldr	r3, [sp, #24]
 801d81a:	2b02      	cmp	r3, #2
 801d81c:	dd34      	ble.n	801d888 <_dtoa_r+0x898>
 801d81e:	46ca      	mov	sl, r9
 801d820:	f1ba 0f00 	cmp.w	sl, #0
 801d824:	d10d      	bne.n	801d842 <_dtoa_r+0x852>
 801d826:	4621      	mov	r1, r4
 801d828:	4653      	mov	r3, sl
 801d82a:	2205      	movs	r2, #5
 801d82c:	4630      	mov	r0, r6
 801d82e:	f000 fe1d 	bl	801e46c <__multadd>
 801d832:	4601      	mov	r1, r0
 801d834:	4604      	mov	r4, r0
 801d836:	4628      	mov	r0, r5
 801d838:	f001 f882 	bl	801e940 <__mcmp>
 801d83c:	2800      	cmp	r0, #0
 801d83e:	f73f adeb 	bgt.w	801d418 <_dtoa_r+0x428>
 801d842:	9b08      	ldr	r3, [sp, #32]
 801d844:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d848:	ea6f 0b03 	mvn.w	fp, r3
 801d84c:	f04f 0900 	mov.w	r9, #0
 801d850:	4621      	mov	r1, r4
 801d852:	4630      	mov	r0, r6
 801d854:	f000 fde8 	bl	801e428 <_Bfree>
 801d858:	2f00      	cmp	r7, #0
 801d85a:	f43f aea8 	beq.w	801d5ae <_dtoa_r+0x5be>
 801d85e:	f1b9 0f00 	cmp.w	r9, #0
 801d862:	d005      	beq.n	801d870 <_dtoa_r+0x880>
 801d864:	45b9      	cmp	r9, r7
 801d866:	d003      	beq.n	801d870 <_dtoa_r+0x880>
 801d868:	4649      	mov	r1, r9
 801d86a:	4630      	mov	r0, r6
 801d86c:	f000 fddc 	bl	801e428 <_Bfree>
 801d870:	4639      	mov	r1, r7
 801d872:	4630      	mov	r0, r6
 801d874:	f000 fdd8 	bl	801e428 <_Bfree>
 801d878:	e699      	b.n	801d5ae <_dtoa_r+0x5be>
 801d87a:	2400      	movs	r4, #0
 801d87c:	4627      	mov	r7, r4
 801d87e:	e7e0      	b.n	801d842 <_dtoa_r+0x852>
 801d880:	46bb      	mov	fp, r7
 801d882:	4604      	mov	r4, r0
 801d884:	4607      	mov	r7, r0
 801d886:	e5c7      	b.n	801d418 <_dtoa_r+0x428>
 801d888:	9b07      	ldr	r3, [sp, #28]
 801d88a:	46ca      	mov	sl, r9
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	f000 8100 	beq.w	801da92 <_dtoa_r+0xaa2>
 801d892:	f1b8 0f00 	cmp.w	r8, #0
 801d896:	dd05      	ble.n	801d8a4 <_dtoa_r+0x8b4>
 801d898:	4639      	mov	r1, r7
 801d89a:	4642      	mov	r2, r8
 801d89c:	4630      	mov	r0, r6
 801d89e:	f000 ffdf 	bl	801e860 <__lshift>
 801d8a2:	4607      	mov	r7, r0
 801d8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d05d      	beq.n	801d966 <_dtoa_r+0x976>
 801d8aa:	6879      	ldr	r1, [r7, #4]
 801d8ac:	4630      	mov	r0, r6
 801d8ae:	f000 fd7b 	bl	801e3a8 <_Balloc>
 801d8b2:	4680      	mov	r8, r0
 801d8b4:	b928      	cbnz	r0, 801d8c2 <_dtoa_r+0x8d2>
 801d8b6:	4b82      	ldr	r3, [pc, #520]	; (801dac0 <_dtoa_r+0xad0>)
 801d8b8:	4602      	mov	r2, r0
 801d8ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d8be:	f7ff bbaf 	b.w	801d020 <_dtoa_r+0x30>
 801d8c2:	693a      	ldr	r2, [r7, #16]
 801d8c4:	3202      	adds	r2, #2
 801d8c6:	0092      	lsls	r2, r2, #2
 801d8c8:	f107 010c 	add.w	r1, r7, #12
 801d8cc:	300c      	adds	r0, #12
 801d8ce:	f7fd fc92 	bl	801b1f6 <memcpy>
 801d8d2:	2201      	movs	r2, #1
 801d8d4:	4641      	mov	r1, r8
 801d8d6:	4630      	mov	r0, r6
 801d8d8:	f000 ffc2 	bl	801e860 <__lshift>
 801d8dc:	9b01      	ldr	r3, [sp, #4]
 801d8de:	3301      	adds	r3, #1
 801d8e0:	9304      	str	r3, [sp, #16]
 801d8e2:	9b01      	ldr	r3, [sp, #4]
 801d8e4:	4453      	add	r3, sl
 801d8e6:	9308      	str	r3, [sp, #32]
 801d8e8:	9b02      	ldr	r3, [sp, #8]
 801d8ea:	f003 0301 	and.w	r3, r3, #1
 801d8ee:	46b9      	mov	r9, r7
 801d8f0:	9307      	str	r3, [sp, #28]
 801d8f2:	4607      	mov	r7, r0
 801d8f4:	9b04      	ldr	r3, [sp, #16]
 801d8f6:	4621      	mov	r1, r4
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	4628      	mov	r0, r5
 801d8fc:	9302      	str	r3, [sp, #8]
 801d8fe:	f7ff fae9 	bl	801ced4 <quorem>
 801d902:	4603      	mov	r3, r0
 801d904:	3330      	adds	r3, #48	; 0x30
 801d906:	9005      	str	r0, [sp, #20]
 801d908:	4649      	mov	r1, r9
 801d90a:	4628      	mov	r0, r5
 801d90c:	9309      	str	r3, [sp, #36]	; 0x24
 801d90e:	f001 f817 	bl	801e940 <__mcmp>
 801d912:	463a      	mov	r2, r7
 801d914:	4682      	mov	sl, r0
 801d916:	4621      	mov	r1, r4
 801d918:	4630      	mov	r0, r6
 801d91a:	f001 f82d 	bl	801e978 <__mdiff>
 801d91e:	68c2      	ldr	r2, [r0, #12]
 801d920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d922:	4680      	mov	r8, r0
 801d924:	bb0a      	cbnz	r2, 801d96a <_dtoa_r+0x97a>
 801d926:	4601      	mov	r1, r0
 801d928:	4628      	mov	r0, r5
 801d92a:	f001 f809 	bl	801e940 <__mcmp>
 801d92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d930:	4602      	mov	r2, r0
 801d932:	4641      	mov	r1, r8
 801d934:	4630      	mov	r0, r6
 801d936:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801d93a:	f000 fd75 	bl	801e428 <_Bfree>
 801d93e:	9b06      	ldr	r3, [sp, #24]
 801d940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d942:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d946:	ea43 0102 	orr.w	r1, r3, r2
 801d94a:	9b07      	ldr	r3, [sp, #28]
 801d94c:	430b      	orrs	r3, r1
 801d94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d950:	d10d      	bne.n	801d96e <_dtoa_r+0x97e>
 801d952:	2b39      	cmp	r3, #57	; 0x39
 801d954:	d029      	beq.n	801d9aa <_dtoa_r+0x9ba>
 801d956:	f1ba 0f00 	cmp.w	sl, #0
 801d95a:	dd01      	ble.n	801d960 <_dtoa_r+0x970>
 801d95c:	9b05      	ldr	r3, [sp, #20]
 801d95e:	3331      	adds	r3, #49	; 0x31
 801d960:	9a02      	ldr	r2, [sp, #8]
 801d962:	7013      	strb	r3, [r2, #0]
 801d964:	e774      	b.n	801d850 <_dtoa_r+0x860>
 801d966:	4638      	mov	r0, r7
 801d968:	e7b8      	b.n	801d8dc <_dtoa_r+0x8ec>
 801d96a:	2201      	movs	r2, #1
 801d96c:	e7e1      	b.n	801d932 <_dtoa_r+0x942>
 801d96e:	f1ba 0f00 	cmp.w	sl, #0
 801d972:	db06      	blt.n	801d982 <_dtoa_r+0x992>
 801d974:	9906      	ldr	r1, [sp, #24]
 801d976:	ea41 0a0a 	orr.w	sl, r1, sl
 801d97a:	9907      	ldr	r1, [sp, #28]
 801d97c:	ea5a 0101 	orrs.w	r1, sl, r1
 801d980:	d120      	bne.n	801d9c4 <_dtoa_r+0x9d4>
 801d982:	2a00      	cmp	r2, #0
 801d984:	ddec      	ble.n	801d960 <_dtoa_r+0x970>
 801d986:	4629      	mov	r1, r5
 801d988:	2201      	movs	r2, #1
 801d98a:	4630      	mov	r0, r6
 801d98c:	9304      	str	r3, [sp, #16]
 801d98e:	f000 ff67 	bl	801e860 <__lshift>
 801d992:	4621      	mov	r1, r4
 801d994:	4605      	mov	r5, r0
 801d996:	f000 ffd3 	bl	801e940 <__mcmp>
 801d99a:	2800      	cmp	r0, #0
 801d99c:	9b04      	ldr	r3, [sp, #16]
 801d99e:	dc02      	bgt.n	801d9a6 <_dtoa_r+0x9b6>
 801d9a0:	d1de      	bne.n	801d960 <_dtoa_r+0x970>
 801d9a2:	07da      	lsls	r2, r3, #31
 801d9a4:	d5dc      	bpl.n	801d960 <_dtoa_r+0x970>
 801d9a6:	2b39      	cmp	r3, #57	; 0x39
 801d9a8:	d1d8      	bne.n	801d95c <_dtoa_r+0x96c>
 801d9aa:	9a02      	ldr	r2, [sp, #8]
 801d9ac:	2339      	movs	r3, #57	; 0x39
 801d9ae:	7013      	strb	r3, [r2, #0]
 801d9b0:	4643      	mov	r3, r8
 801d9b2:	4698      	mov	r8, r3
 801d9b4:	3b01      	subs	r3, #1
 801d9b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d9ba:	2a39      	cmp	r2, #57	; 0x39
 801d9bc:	d051      	beq.n	801da62 <_dtoa_r+0xa72>
 801d9be:	3201      	adds	r2, #1
 801d9c0:	701a      	strb	r2, [r3, #0]
 801d9c2:	e745      	b.n	801d850 <_dtoa_r+0x860>
 801d9c4:	2a00      	cmp	r2, #0
 801d9c6:	dd03      	ble.n	801d9d0 <_dtoa_r+0x9e0>
 801d9c8:	2b39      	cmp	r3, #57	; 0x39
 801d9ca:	d0ee      	beq.n	801d9aa <_dtoa_r+0x9ba>
 801d9cc:	3301      	adds	r3, #1
 801d9ce:	e7c7      	b.n	801d960 <_dtoa_r+0x970>
 801d9d0:	9a04      	ldr	r2, [sp, #16]
 801d9d2:	9908      	ldr	r1, [sp, #32]
 801d9d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d9d8:	428a      	cmp	r2, r1
 801d9da:	d02b      	beq.n	801da34 <_dtoa_r+0xa44>
 801d9dc:	4629      	mov	r1, r5
 801d9de:	2300      	movs	r3, #0
 801d9e0:	220a      	movs	r2, #10
 801d9e2:	4630      	mov	r0, r6
 801d9e4:	f000 fd42 	bl	801e46c <__multadd>
 801d9e8:	45b9      	cmp	r9, r7
 801d9ea:	4605      	mov	r5, r0
 801d9ec:	f04f 0300 	mov.w	r3, #0
 801d9f0:	f04f 020a 	mov.w	r2, #10
 801d9f4:	4649      	mov	r1, r9
 801d9f6:	4630      	mov	r0, r6
 801d9f8:	d107      	bne.n	801da0a <_dtoa_r+0xa1a>
 801d9fa:	f000 fd37 	bl	801e46c <__multadd>
 801d9fe:	4681      	mov	r9, r0
 801da00:	4607      	mov	r7, r0
 801da02:	9b04      	ldr	r3, [sp, #16]
 801da04:	3301      	adds	r3, #1
 801da06:	9304      	str	r3, [sp, #16]
 801da08:	e774      	b.n	801d8f4 <_dtoa_r+0x904>
 801da0a:	f000 fd2f 	bl	801e46c <__multadd>
 801da0e:	4639      	mov	r1, r7
 801da10:	4681      	mov	r9, r0
 801da12:	2300      	movs	r3, #0
 801da14:	220a      	movs	r2, #10
 801da16:	4630      	mov	r0, r6
 801da18:	f000 fd28 	bl	801e46c <__multadd>
 801da1c:	4607      	mov	r7, r0
 801da1e:	e7f0      	b.n	801da02 <_dtoa_r+0xa12>
 801da20:	f1ba 0f00 	cmp.w	sl, #0
 801da24:	9a01      	ldr	r2, [sp, #4]
 801da26:	bfcc      	ite	gt
 801da28:	46d0      	movgt	r8, sl
 801da2a:	f04f 0801 	movle.w	r8, #1
 801da2e:	4490      	add	r8, r2
 801da30:	f04f 0900 	mov.w	r9, #0
 801da34:	4629      	mov	r1, r5
 801da36:	2201      	movs	r2, #1
 801da38:	4630      	mov	r0, r6
 801da3a:	9302      	str	r3, [sp, #8]
 801da3c:	f000 ff10 	bl	801e860 <__lshift>
 801da40:	4621      	mov	r1, r4
 801da42:	4605      	mov	r5, r0
 801da44:	f000 ff7c 	bl	801e940 <__mcmp>
 801da48:	2800      	cmp	r0, #0
 801da4a:	dcb1      	bgt.n	801d9b0 <_dtoa_r+0x9c0>
 801da4c:	d102      	bne.n	801da54 <_dtoa_r+0xa64>
 801da4e:	9b02      	ldr	r3, [sp, #8]
 801da50:	07db      	lsls	r3, r3, #31
 801da52:	d4ad      	bmi.n	801d9b0 <_dtoa_r+0x9c0>
 801da54:	4643      	mov	r3, r8
 801da56:	4698      	mov	r8, r3
 801da58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801da5c:	2a30      	cmp	r2, #48	; 0x30
 801da5e:	d0fa      	beq.n	801da56 <_dtoa_r+0xa66>
 801da60:	e6f6      	b.n	801d850 <_dtoa_r+0x860>
 801da62:	9a01      	ldr	r2, [sp, #4]
 801da64:	429a      	cmp	r2, r3
 801da66:	d1a4      	bne.n	801d9b2 <_dtoa_r+0x9c2>
 801da68:	f10b 0b01 	add.w	fp, fp, #1
 801da6c:	2331      	movs	r3, #49	; 0x31
 801da6e:	e778      	b.n	801d962 <_dtoa_r+0x972>
 801da70:	4b14      	ldr	r3, [pc, #80]	; (801dac4 <_dtoa_r+0xad4>)
 801da72:	f7ff bb27 	b.w	801d0c4 <_dtoa_r+0xd4>
 801da76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801da78:	2b00      	cmp	r3, #0
 801da7a:	f47f ab03 	bne.w	801d084 <_dtoa_r+0x94>
 801da7e:	4b12      	ldr	r3, [pc, #72]	; (801dac8 <_dtoa_r+0xad8>)
 801da80:	f7ff bb20 	b.w	801d0c4 <_dtoa_r+0xd4>
 801da84:	f1ba 0f00 	cmp.w	sl, #0
 801da88:	dc03      	bgt.n	801da92 <_dtoa_r+0xaa2>
 801da8a:	9b06      	ldr	r3, [sp, #24]
 801da8c:	2b02      	cmp	r3, #2
 801da8e:	f73f aec7 	bgt.w	801d820 <_dtoa_r+0x830>
 801da92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801da96:	4621      	mov	r1, r4
 801da98:	4628      	mov	r0, r5
 801da9a:	f7ff fa1b 	bl	801ced4 <quorem>
 801da9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801daa2:	f808 3b01 	strb.w	r3, [r8], #1
 801daa6:	9a01      	ldr	r2, [sp, #4]
 801daa8:	eba8 0202 	sub.w	r2, r8, r2
 801daac:	4592      	cmp	sl, r2
 801daae:	ddb7      	ble.n	801da20 <_dtoa_r+0xa30>
 801dab0:	4629      	mov	r1, r5
 801dab2:	2300      	movs	r3, #0
 801dab4:	220a      	movs	r2, #10
 801dab6:	4630      	mov	r0, r6
 801dab8:	f000 fcd8 	bl	801e46c <__multadd>
 801dabc:	4605      	mov	r5, r0
 801dabe:	e7ea      	b.n	801da96 <_dtoa_r+0xaa6>
 801dac0:	08020988 	.word	0x08020988
 801dac4:	08020788 	.word	0x08020788
 801dac8:	08020909 	.word	0x08020909

0801dacc <__sflush_r>:
 801dacc:	898a      	ldrh	r2, [r1, #12]
 801dace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dad2:	4605      	mov	r5, r0
 801dad4:	0710      	lsls	r0, r2, #28
 801dad6:	460c      	mov	r4, r1
 801dad8:	d458      	bmi.n	801db8c <__sflush_r+0xc0>
 801dada:	684b      	ldr	r3, [r1, #4]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	dc05      	bgt.n	801daec <__sflush_r+0x20>
 801dae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	dc02      	bgt.n	801daec <__sflush_r+0x20>
 801dae6:	2000      	movs	r0, #0
 801dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801daee:	2e00      	cmp	r6, #0
 801daf0:	d0f9      	beq.n	801dae6 <__sflush_r+0x1a>
 801daf2:	2300      	movs	r3, #0
 801daf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801daf8:	682f      	ldr	r7, [r5, #0]
 801dafa:	602b      	str	r3, [r5, #0]
 801dafc:	d032      	beq.n	801db64 <__sflush_r+0x98>
 801dafe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801db00:	89a3      	ldrh	r3, [r4, #12]
 801db02:	075a      	lsls	r2, r3, #29
 801db04:	d505      	bpl.n	801db12 <__sflush_r+0x46>
 801db06:	6863      	ldr	r3, [r4, #4]
 801db08:	1ac0      	subs	r0, r0, r3
 801db0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801db0c:	b10b      	cbz	r3, 801db12 <__sflush_r+0x46>
 801db0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801db10:	1ac0      	subs	r0, r0, r3
 801db12:	2300      	movs	r3, #0
 801db14:	4602      	mov	r2, r0
 801db16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db18:	6a21      	ldr	r1, [r4, #32]
 801db1a:	4628      	mov	r0, r5
 801db1c:	47b0      	blx	r6
 801db1e:	1c43      	adds	r3, r0, #1
 801db20:	89a3      	ldrh	r3, [r4, #12]
 801db22:	d106      	bne.n	801db32 <__sflush_r+0x66>
 801db24:	6829      	ldr	r1, [r5, #0]
 801db26:	291d      	cmp	r1, #29
 801db28:	d82c      	bhi.n	801db84 <__sflush_r+0xb8>
 801db2a:	4a2a      	ldr	r2, [pc, #168]	; (801dbd4 <__sflush_r+0x108>)
 801db2c:	40ca      	lsrs	r2, r1
 801db2e:	07d6      	lsls	r6, r2, #31
 801db30:	d528      	bpl.n	801db84 <__sflush_r+0xb8>
 801db32:	2200      	movs	r2, #0
 801db34:	6062      	str	r2, [r4, #4]
 801db36:	04d9      	lsls	r1, r3, #19
 801db38:	6922      	ldr	r2, [r4, #16]
 801db3a:	6022      	str	r2, [r4, #0]
 801db3c:	d504      	bpl.n	801db48 <__sflush_r+0x7c>
 801db3e:	1c42      	adds	r2, r0, #1
 801db40:	d101      	bne.n	801db46 <__sflush_r+0x7a>
 801db42:	682b      	ldr	r3, [r5, #0]
 801db44:	b903      	cbnz	r3, 801db48 <__sflush_r+0x7c>
 801db46:	6560      	str	r0, [r4, #84]	; 0x54
 801db48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db4a:	602f      	str	r7, [r5, #0]
 801db4c:	2900      	cmp	r1, #0
 801db4e:	d0ca      	beq.n	801dae6 <__sflush_r+0x1a>
 801db50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db54:	4299      	cmp	r1, r3
 801db56:	d002      	beq.n	801db5e <__sflush_r+0x92>
 801db58:	4628      	mov	r0, r5
 801db5a:	f001 f8f9 	bl	801ed50 <_free_r>
 801db5e:	2000      	movs	r0, #0
 801db60:	6360      	str	r0, [r4, #52]	; 0x34
 801db62:	e7c1      	b.n	801dae8 <__sflush_r+0x1c>
 801db64:	6a21      	ldr	r1, [r4, #32]
 801db66:	2301      	movs	r3, #1
 801db68:	4628      	mov	r0, r5
 801db6a:	47b0      	blx	r6
 801db6c:	1c41      	adds	r1, r0, #1
 801db6e:	d1c7      	bne.n	801db00 <__sflush_r+0x34>
 801db70:	682b      	ldr	r3, [r5, #0]
 801db72:	2b00      	cmp	r3, #0
 801db74:	d0c4      	beq.n	801db00 <__sflush_r+0x34>
 801db76:	2b1d      	cmp	r3, #29
 801db78:	d001      	beq.n	801db7e <__sflush_r+0xb2>
 801db7a:	2b16      	cmp	r3, #22
 801db7c:	d101      	bne.n	801db82 <__sflush_r+0xb6>
 801db7e:	602f      	str	r7, [r5, #0]
 801db80:	e7b1      	b.n	801dae6 <__sflush_r+0x1a>
 801db82:	89a3      	ldrh	r3, [r4, #12]
 801db84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db88:	81a3      	strh	r3, [r4, #12]
 801db8a:	e7ad      	b.n	801dae8 <__sflush_r+0x1c>
 801db8c:	690f      	ldr	r7, [r1, #16]
 801db8e:	2f00      	cmp	r7, #0
 801db90:	d0a9      	beq.n	801dae6 <__sflush_r+0x1a>
 801db92:	0793      	lsls	r3, r2, #30
 801db94:	680e      	ldr	r6, [r1, #0]
 801db96:	bf08      	it	eq
 801db98:	694b      	ldreq	r3, [r1, #20]
 801db9a:	600f      	str	r7, [r1, #0]
 801db9c:	bf18      	it	ne
 801db9e:	2300      	movne	r3, #0
 801dba0:	eba6 0807 	sub.w	r8, r6, r7
 801dba4:	608b      	str	r3, [r1, #8]
 801dba6:	f1b8 0f00 	cmp.w	r8, #0
 801dbaa:	dd9c      	ble.n	801dae6 <__sflush_r+0x1a>
 801dbac:	6a21      	ldr	r1, [r4, #32]
 801dbae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dbb0:	4643      	mov	r3, r8
 801dbb2:	463a      	mov	r2, r7
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	47b0      	blx	r6
 801dbb8:	2800      	cmp	r0, #0
 801dbba:	dc06      	bgt.n	801dbca <__sflush_r+0xfe>
 801dbbc:	89a3      	ldrh	r3, [r4, #12]
 801dbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbc2:	81a3      	strh	r3, [r4, #12]
 801dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 801dbc8:	e78e      	b.n	801dae8 <__sflush_r+0x1c>
 801dbca:	4407      	add	r7, r0
 801dbcc:	eba8 0800 	sub.w	r8, r8, r0
 801dbd0:	e7e9      	b.n	801dba6 <__sflush_r+0xda>
 801dbd2:	bf00      	nop
 801dbd4:	20400001 	.word	0x20400001

0801dbd8 <_fflush_r>:
 801dbd8:	b538      	push	{r3, r4, r5, lr}
 801dbda:	690b      	ldr	r3, [r1, #16]
 801dbdc:	4605      	mov	r5, r0
 801dbde:	460c      	mov	r4, r1
 801dbe0:	b913      	cbnz	r3, 801dbe8 <_fflush_r+0x10>
 801dbe2:	2500      	movs	r5, #0
 801dbe4:	4628      	mov	r0, r5
 801dbe6:	bd38      	pop	{r3, r4, r5, pc}
 801dbe8:	b118      	cbz	r0, 801dbf2 <_fflush_r+0x1a>
 801dbea:	6983      	ldr	r3, [r0, #24]
 801dbec:	b90b      	cbnz	r3, 801dbf2 <_fflush_r+0x1a>
 801dbee:	f7fd fa3d 	bl	801b06c <__sinit>
 801dbf2:	4b14      	ldr	r3, [pc, #80]	; (801dc44 <_fflush_r+0x6c>)
 801dbf4:	429c      	cmp	r4, r3
 801dbf6:	d11b      	bne.n	801dc30 <_fflush_r+0x58>
 801dbf8:	686c      	ldr	r4, [r5, #4]
 801dbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d0ef      	beq.n	801dbe2 <_fflush_r+0xa>
 801dc02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dc04:	07d0      	lsls	r0, r2, #31
 801dc06:	d404      	bmi.n	801dc12 <_fflush_r+0x3a>
 801dc08:	0599      	lsls	r1, r3, #22
 801dc0a:	d402      	bmi.n	801dc12 <_fflush_r+0x3a>
 801dc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc0e:	f7fd faf0 	bl	801b1f2 <__retarget_lock_acquire_recursive>
 801dc12:	4628      	mov	r0, r5
 801dc14:	4621      	mov	r1, r4
 801dc16:	f7ff ff59 	bl	801dacc <__sflush_r>
 801dc1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc1c:	07da      	lsls	r2, r3, #31
 801dc1e:	4605      	mov	r5, r0
 801dc20:	d4e0      	bmi.n	801dbe4 <_fflush_r+0xc>
 801dc22:	89a3      	ldrh	r3, [r4, #12]
 801dc24:	059b      	lsls	r3, r3, #22
 801dc26:	d4dd      	bmi.n	801dbe4 <_fflush_r+0xc>
 801dc28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc2a:	f7fd fae3 	bl	801b1f4 <__retarget_lock_release_recursive>
 801dc2e:	e7d9      	b.n	801dbe4 <_fflush_r+0xc>
 801dc30:	4b05      	ldr	r3, [pc, #20]	; (801dc48 <_fflush_r+0x70>)
 801dc32:	429c      	cmp	r4, r3
 801dc34:	d101      	bne.n	801dc3a <_fflush_r+0x62>
 801dc36:	68ac      	ldr	r4, [r5, #8]
 801dc38:	e7df      	b.n	801dbfa <_fflush_r+0x22>
 801dc3a:	4b04      	ldr	r3, [pc, #16]	; (801dc4c <_fflush_r+0x74>)
 801dc3c:	429c      	cmp	r4, r3
 801dc3e:	bf08      	it	eq
 801dc40:	68ec      	ldreq	r4, [r5, #12]
 801dc42:	e7da      	b.n	801dbfa <_fflush_r+0x22>
 801dc44:	08020734 	.word	0x08020734
 801dc48:	08020754 	.word	0x08020754
 801dc4c:	08020714 	.word	0x08020714

0801dc50 <rshift>:
 801dc50:	6903      	ldr	r3, [r0, #16]
 801dc52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801dc56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801dc5e:	f100 0414 	add.w	r4, r0, #20
 801dc62:	dd45      	ble.n	801dcf0 <rshift+0xa0>
 801dc64:	f011 011f 	ands.w	r1, r1, #31
 801dc68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801dc6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801dc70:	d10c      	bne.n	801dc8c <rshift+0x3c>
 801dc72:	f100 0710 	add.w	r7, r0, #16
 801dc76:	4629      	mov	r1, r5
 801dc78:	42b1      	cmp	r1, r6
 801dc7a:	d334      	bcc.n	801dce6 <rshift+0x96>
 801dc7c:	1a9b      	subs	r3, r3, r2
 801dc7e:	009b      	lsls	r3, r3, #2
 801dc80:	1eea      	subs	r2, r5, #3
 801dc82:	4296      	cmp	r6, r2
 801dc84:	bf38      	it	cc
 801dc86:	2300      	movcc	r3, #0
 801dc88:	4423      	add	r3, r4
 801dc8a:	e015      	b.n	801dcb8 <rshift+0x68>
 801dc8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801dc90:	f1c1 0820 	rsb	r8, r1, #32
 801dc94:	40cf      	lsrs	r7, r1
 801dc96:	f105 0e04 	add.w	lr, r5, #4
 801dc9a:	46a1      	mov	r9, r4
 801dc9c:	4576      	cmp	r6, lr
 801dc9e:	46f4      	mov	ip, lr
 801dca0:	d815      	bhi.n	801dcce <rshift+0x7e>
 801dca2:	1a9a      	subs	r2, r3, r2
 801dca4:	0092      	lsls	r2, r2, #2
 801dca6:	3a04      	subs	r2, #4
 801dca8:	3501      	adds	r5, #1
 801dcaa:	42ae      	cmp	r6, r5
 801dcac:	bf38      	it	cc
 801dcae:	2200      	movcc	r2, #0
 801dcb0:	18a3      	adds	r3, r4, r2
 801dcb2:	50a7      	str	r7, [r4, r2]
 801dcb4:	b107      	cbz	r7, 801dcb8 <rshift+0x68>
 801dcb6:	3304      	adds	r3, #4
 801dcb8:	1b1a      	subs	r2, r3, r4
 801dcba:	42a3      	cmp	r3, r4
 801dcbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801dcc0:	bf08      	it	eq
 801dcc2:	2300      	moveq	r3, #0
 801dcc4:	6102      	str	r2, [r0, #16]
 801dcc6:	bf08      	it	eq
 801dcc8:	6143      	streq	r3, [r0, #20]
 801dcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcce:	f8dc c000 	ldr.w	ip, [ip]
 801dcd2:	fa0c fc08 	lsl.w	ip, ip, r8
 801dcd6:	ea4c 0707 	orr.w	r7, ip, r7
 801dcda:	f849 7b04 	str.w	r7, [r9], #4
 801dcde:	f85e 7b04 	ldr.w	r7, [lr], #4
 801dce2:	40cf      	lsrs	r7, r1
 801dce4:	e7da      	b.n	801dc9c <rshift+0x4c>
 801dce6:	f851 cb04 	ldr.w	ip, [r1], #4
 801dcea:	f847 cf04 	str.w	ip, [r7, #4]!
 801dcee:	e7c3      	b.n	801dc78 <rshift+0x28>
 801dcf0:	4623      	mov	r3, r4
 801dcf2:	e7e1      	b.n	801dcb8 <rshift+0x68>

0801dcf4 <__hexdig_fun>:
 801dcf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801dcf8:	2b09      	cmp	r3, #9
 801dcfa:	d802      	bhi.n	801dd02 <__hexdig_fun+0xe>
 801dcfc:	3820      	subs	r0, #32
 801dcfe:	b2c0      	uxtb	r0, r0
 801dd00:	4770      	bx	lr
 801dd02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801dd06:	2b05      	cmp	r3, #5
 801dd08:	d801      	bhi.n	801dd0e <__hexdig_fun+0x1a>
 801dd0a:	3847      	subs	r0, #71	; 0x47
 801dd0c:	e7f7      	b.n	801dcfe <__hexdig_fun+0xa>
 801dd0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801dd12:	2b05      	cmp	r3, #5
 801dd14:	d801      	bhi.n	801dd1a <__hexdig_fun+0x26>
 801dd16:	3827      	subs	r0, #39	; 0x27
 801dd18:	e7f1      	b.n	801dcfe <__hexdig_fun+0xa>
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	4770      	bx	lr
	...

0801dd20 <__gethex>:
 801dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd24:	ed2d 8b02 	vpush	{d8}
 801dd28:	b089      	sub	sp, #36	; 0x24
 801dd2a:	ee08 0a10 	vmov	s16, r0
 801dd2e:	9304      	str	r3, [sp, #16]
 801dd30:	4bb4      	ldr	r3, [pc, #720]	; (801e004 <__gethex+0x2e4>)
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	9301      	str	r3, [sp, #4]
 801dd36:	4618      	mov	r0, r3
 801dd38:	468b      	mov	fp, r1
 801dd3a:	4690      	mov	r8, r2
 801dd3c:	f7e2 fa80 	bl	8000240 <strlen>
 801dd40:	9b01      	ldr	r3, [sp, #4]
 801dd42:	f8db 2000 	ldr.w	r2, [fp]
 801dd46:	4403      	add	r3, r0
 801dd48:	4682      	mov	sl, r0
 801dd4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801dd4e:	9305      	str	r3, [sp, #20]
 801dd50:	1c93      	adds	r3, r2, #2
 801dd52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801dd56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801dd5a:	32fe      	adds	r2, #254	; 0xfe
 801dd5c:	18d1      	adds	r1, r2, r3
 801dd5e:	461f      	mov	r7, r3
 801dd60:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dd64:	9100      	str	r1, [sp, #0]
 801dd66:	2830      	cmp	r0, #48	; 0x30
 801dd68:	d0f8      	beq.n	801dd5c <__gethex+0x3c>
 801dd6a:	f7ff ffc3 	bl	801dcf4 <__hexdig_fun>
 801dd6e:	4604      	mov	r4, r0
 801dd70:	2800      	cmp	r0, #0
 801dd72:	d13a      	bne.n	801ddea <__gethex+0xca>
 801dd74:	9901      	ldr	r1, [sp, #4]
 801dd76:	4652      	mov	r2, sl
 801dd78:	4638      	mov	r0, r7
 801dd7a:	f001 fb05 	bl	801f388 <strncmp>
 801dd7e:	4605      	mov	r5, r0
 801dd80:	2800      	cmp	r0, #0
 801dd82:	d168      	bne.n	801de56 <__gethex+0x136>
 801dd84:	f817 000a 	ldrb.w	r0, [r7, sl]
 801dd88:	eb07 060a 	add.w	r6, r7, sl
 801dd8c:	f7ff ffb2 	bl	801dcf4 <__hexdig_fun>
 801dd90:	2800      	cmp	r0, #0
 801dd92:	d062      	beq.n	801de5a <__gethex+0x13a>
 801dd94:	4633      	mov	r3, r6
 801dd96:	7818      	ldrb	r0, [r3, #0]
 801dd98:	2830      	cmp	r0, #48	; 0x30
 801dd9a:	461f      	mov	r7, r3
 801dd9c:	f103 0301 	add.w	r3, r3, #1
 801dda0:	d0f9      	beq.n	801dd96 <__gethex+0x76>
 801dda2:	f7ff ffa7 	bl	801dcf4 <__hexdig_fun>
 801dda6:	2301      	movs	r3, #1
 801dda8:	fab0 f480 	clz	r4, r0
 801ddac:	0964      	lsrs	r4, r4, #5
 801ddae:	4635      	mov	r5, r6
 801ddb0:	9300      	str	r3, [sp, #0]
 801ddb2:	463a      	mov	r2, r7
 801ddb4:	4616      	mov	r6, r2
 801ddb6:	3201      	adds	r2, #1
 801ddb8:	7830      	ldrb	r0, [r6, #0]
 801ddba:	f7ff ff9b 	bl	801dcf4 <__hexdig_fun>
 801ddbe:	2800      	cmp	r0, #0
 801ddc0:	d1f8      	bne.n	801ddb4 <__gethex+0x94>
 801ddc2:	9901      	ldr	r1, [sp, #4]
 801ddc4:	4652      	mov	r2, sl
 801ddc6:	4630      	mov	r0, r6
 801ddc8:	f001 fade 	bl	801f388 <strncmp>
 801ddcc:	b980      	cbnz	r0, 801ddf0 <__gethex+0xd0>
 801ddce:	b94d      	cbnz	r5, 801dde4 <__gethex+0xc4>
 801ddd0:	eb06 050a 	add.w	r5, r6, sl
 801ddd4:	462a      	mov	r2, r5
 801ddd6:	4616      	mov	r6, r2
 801ddd8:	3201      	adds	r2, #1
 801ddda:	7830      	ldrb	r0, [r6, #0]
 801dddc:	f7ff ff8a 	bl	801dcf4 <__hexdig_fun>
 801dde0:	2800      	cmp	r0, #0
 801dde2:	d1f8      	bne.n	801ddd6 <__gethex+0xb6>
 801dde4:	1bad      	subs	r5, r5, r6
 801dde6:	00ad      	lsls	r5, r5, #2
 801dde8:	e004      	b.n	801ddf4 <__gethex+0xd4>
 801ddea:	2400      	movs	r4, #0
 801ddec:	4625      	mov	r5, r4
 801ddee:	e7e0      	b.n	801ddb2 <__gethex+0x92>
 801ddf0:	2d00      	cmp	r5, #0
 801ddf2:	d1f7      	bne.n	801dde4 <__gethex+0xc4>
 801ddf4:	7833      	ldrb	r3, [r6, #0]
 801ddf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ddfa:	2b50      	cmp	r3, #80	; 0x50
 801ddfc:	d13b      	bne.n	801de76 <__gethex+0x156>
 801ddfe:	7873      	ldrb	r3, [r6, #1]
 801de00:	2b2b      	cmp	r3, #43	; 0x2b
 801de02:	d02c      	beq.n	801de5e <__gethex+0x13e>
 801de04:	2b2d      	cmp	r3, #45	; 0x2d
 801de06:	d02e      	beq.n	801de66 <__gethex+0x146>
 801de08:	1c71      	adds	r1, r6, #1
 801de0a:	f04f 0900 	mov.w	r9, #0
 801de0e:	7808      	ldrb	r0, [r1, #0]
 801de10:	f7ff ff70 	bl	801dcf4 <__hexdig_fun>
 801de14:	1e43      	subs	r3, r0, #1
 801de16:	b2db      	uxtb	r3, r3
 801de18:	2b18      	cmp	r3, #24
 801de1a:	d82c      	bhi.n	801de76 <__gethex+0x156>
 801de1c:	f1a0 0210 	sub.w	r2, r0, #16
 801de20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801de24:	f7ff ff66 	bl	801dcf4 <__hexdig_fun>
 801de28:	1e43      	subs	r3, r0, #1
 801de2a:	b2db      	uxtb	r3, r3
 801de2c:	2b18      	cmp	r3, #24
 801de2e:	d91d      	bls.n	801de6c <__gethex+0x14c>
 801de30:	f1b9 0f00 	cmp.w	r9, #0
 801de34:	d000      	beq.n	801de38 <__gethex+0x118>
 801de36:	4252      	negs	r2, r2
 801de38:	4415      	add	r5, r2
 801de3a:	f8cb 1000 	str.w	r1, [fp]
 801de3e:	b1e4      	cbz	r4, 801de7a <__gethex+0x15a>
 801de40:	9b00      	ldr	r3, [sp, #0]
 801de42:	2b00      	cmp	r3, #0
 801de44:	bf14      	ite	ne
 801de46:	2700      	movne	r7, #0
 801de48:	2706      	moveq	r7, #6
 801de4a:	4638      	mov	r0, r7
 801de4c:	b009      	add	sp, #36	; 0x24
 801de4e:	ecbd 8b02 	vpop	{d8}
 801de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de56:	463e      	mov	r6, r7
 801de58:	4625      	mov	r5, r4
 801de5a:	2401      	movs	r4, #1
 801de5c:	e7ca      	b.n	801ddf4 <__gethex+0xd4>
 801de5e:	f04f 0900 	mov.w	r9, #0
 801de62:	1cb1      	adds	r1, r6, #2
 801de64:	e7d3      	b.n	801de0e <__gethex+0xee>
 801de66:	f04f 0901 	mov.w	r9, #1
 801de6a:	e7fa      	b.n	801de62 <__gethex+0x142>
 801de6c:	230a      	movs	r3, #10
 801de6e:	fb03 0202 	mla	r2, r3, r2, r0
 801de72:	3a10      	subs	r2, #16
 801de74:	e7d4      	b.n	801de20 <__gethex+0x100>
 801de76:	4631      	mov	r1, r6
 801de78:	e7df      	b.n	801de3a <__gethex+0x11a>
 801de7a:	1bf3      	subs	r3, r6, r7
 801de7c:	3b01      	subs	r3, #1
 801de7e:	4621      	mov	r1, r4
 801de80:	2b07      	cmp	r3, #7
 801de82:	dc0b      	bgt.n	801de9c <__gethex+0x17c>
 801de84:	ee18 0a10 	vmov	r0, s16
 801de88:	f000 fa8e 	bl	801e3a8 <_Balloc>
 801de8c:	4604      	mov	r4, r0
 801de8e:	b940      	cbnz	r0, 801dea2 <__gethex+0x182>
 801de90:	4b5d      	ldr	r3, [pc, #372]	; (801e008 <__gethex+0x2e8>)
 801de92:	4602      	mov	r2, r0
 801de94:	21de      	movs	r1, #222	; 0xde
 801de96:	485d      	ldr	r0, [pc, #372]	; (801e00c <__gethex+0x2ec>)
 801de98:	f001 fb58 	bl	801f54c <__assert_func>
 801de9c:	3101      	adds	r1, #1
 801de9e:	105b      	asrs	r3, r3, #1
 801dea0:	e7ee      	b.n	801de80 <__gethex+0x160>
 801dea2:	f100 0914 	add.w	r9, r0, #20
 801dea6:	f04f 0b00 	mov.w	fp, #0
 801deaa:	f1ca 0301 	rsb	r3, sl, #1
 801deae:	f8cd 9008 	str.w	r9, [sp, #8]
 801deb2:	f8cd b000 	str.w	fp, [sp]
 801deb6:	9306      	str	r3, [sp, #24]
 801deb8:	42b7      	cmp	r7, r6
 801deba:	d340      	bcc.n	801df3e <__gethex+0x21e>
 801debc:	9802      	ldr	r0, [sp, #8]
 801debe:	9b00      	ldr	r3, [sp, #0]
 801dec0:	f840 3b04 	str.w	r3, [r0], #4
 801dec4:	eba0 0009 	sub.w	r0, r0, r9
 801dec8:	1080      	asrs	r0, r0, #2
 801deca:	0146      	lsls	r6, r0, #5
 801decc:	6120      	str	r0, [r4, #16]
 801dece:	4618      	mov	r0, r3
 801ded0:	f000 fb5c 	bl	801e58c <__hi0bits>
 801ded4:	1a30      	subs	r0, r6, r0
 801ded6:	f8d8 6000 	ldr.w	r6, [r8]
 801deda:	42b0      	cmp	r0, r6
 801dedc:	dd63      	ble.n	801dfa6 <__gethex+0x286>
 801dede:	1b87      	subs	r7, r0, r6
 801dee0:	4639      	mov	r1, r7
 801dee2:	4620      	mov	r0, r4
 801dee4:	f000 fefd 	bl	801ece2 <__any_on>
 801dee8:	4682      	mov	sl, r0
 801deea:	b1a8      	cbz	r0, 801df18 <__gethex+0x1f8>
 801deec:	1e7b      	subs	r3, r7, #1
 801deee:	1159      	asrs	r1, r3, #5
 801def0:	f003 021f 	and.w	r2, r3, #31
 801def4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801def8:	f04f 0a01 	mov.w	sl, #1
 801defc:	fa0a f202 	lsl.w	r2, sl, r2
 801df00:	420a      	tst	r2, r1
 801df02:	d009      	beq.n	801df18 <__gethex+0x1f8>
 801df04:	4553      	cmp	r3, sl
 801df06:	dd05      	ble.n	801df14 <__gethex+0x1f4>
 801df08:	1eb9      	subs	r1, r7, #2
 801df0a:	4620      	mov	r0, r4
 801df0c:	f000 fee9 	bl	801ece2 <__any_on>
 801df10:	2800      	cmp	r0, #0
 801df12:	d145      	bne.n	801dfa0 <__gethex+0x280>
 801df14:	f04f 0a02 	mov.w	sl, #2
 801df18:	4639      	mov	r1, r7
 801df1a:	4620      	mov	r0, r4
 801df1c:	f7ff fe98 	bl	801dc50 <rshift>
 801df20:	443d      	add	r5, r7
 801df22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801df26:	42ab      	cmp	r3, r5
 801df28:	da4c      	bge.n	801dfc4 <__gethex+0x2a4>
 801df2a:	ee18 0a10 	vmov	r0, s16
 801df2e:	4621      	mov	r1, r4
 801df30:	f000 fa7a 	bl	801e428 <_Bfree>
 801df34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df36:	2300      	movs	r3, #0
 801df38:	6013      	str	r3, [r2, #0]
 801df3a:	27a3      	movs	r7, #163	; 0xa3
 801df3c:	e785      	b.n	801de4a <__gethex+0x12a>
 801df3e:	1e73      	subs	r3, r6, #1
 801df40:	9a05      	ldr	r2, [sp, #20]
 801df42:	9303      	str	r3, [sp, #12]
 801df44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801df48:	4293      	cmp	r3, r2
 801df4a:	d019      	beq.n	801df80 <__gethex+0x260>
 801df4c:	f1bb 0f20 	cmp.w	fp, #32
 801df50:	d107      	bne.n	801df62 <__gethex+0x242>
 801df52:	9b02      	ldr	r3, [sp, #8]
 801df54:	9a00      	ldr	r2, [sp, #0]
 801df56:	f843 2b04 	str.w	r2, [r3], #4
 801df5a:	9302      	str	r3, [sp, #8]
 801df5c:	2300      	movs	r3, #0
 801df5e:	9300      	str	r3, [sp, #0]
 801df60:	469b      	mov	fp, r3
 801df62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801df66:	f7ff fec5 	bl	801dcf4 <__hexdig_fun>
 801df6a:	9b00      	ldr	r3, [sp, #0]
 801df6c:	f000 000f 	and.w	r0, r0, #15
 801df70:	fa00 f00b 	lsl.w	r0, r0, fp
 801df74:	4303      	orrs	r3, r0
 801df76:	9300      	str	r3, [sp, #0]
 801df78:	f10b 0b04 	add.w	fp, fp, #4
 801df7c:	9b03      	ldr	r3, [sp, #12]
 801df7e:	e00d      	b.n	801df9c <__gethex+0x27c>
 801df80:	9b03      	ldr	r3, [sp, #12]
 801df82:	9a06      	ldr	r2, [sp, #24]
 801df84:	4413      	add	r3, r2
 801df86:	42bb      	cmp	r3, r7
 801df88:	d3e0      	bcc.n	801df4c <__gethex+0x22c>
 801df8a:	4618      	mov	r0, r3
 801df8c:	9901      	ldr	r1, [sp, #4]
 801df8e:	9307      	str	r3, [sp, #28]
 801df90:	4652      	mov	r2, sl
 801df92:	f001 f9f9 	bl	801f388 <strncmp>
 801df96:	9b07      	ldr	r3, [sp, #28]
 801df98:	2800      	cmp	r0, #0
 801df9a:	d1d7      	bne.n	801df4c <__gethex+0x22c>
 801df9c:	461e      	mov	r6, r3
 801df9e:	e78b      	b.n	801deb8 <__gethex+0x198>
 801dfa0:	f04f 0a03 	mov.w	sl, #3
 801dfa4:	e7b8      	b.n	801df18 <__gethex+0x1f8>
 801dfa6:	da0a      	bge.n	801dfbe <__gethex+0x29e>
 801dfa8:	1a37      	subs	r7, r6, r0
 801dfaa:	4621      	mov	r1, r4
 801dfac:	ee18 0a10 	vmov	r0, s16
 801dfb0:	463a      	mov	r2, r7
 801dfb2:	f000 fc55 	bl	801e860 <__lshift>
 801dfb6:	1bed      	subs	r5, r5, r7
 801dfb8:	4604      	mov	r4, r0
 801dfba:	f100 0914 	add.w	r9, r0, #20
 801dfbe:	f04f 0a00 	mov.w	sl, #0
 801dfc2:	e7ae      	b.n	801df22 <__gethex+0x202>
 801dfc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801dfc8:	42a8      	cmp	r0, r5
 801dfca:	dd72      	ble.n	801e0b2 <__gethex+0x392>
 801dfcc:	1b45      	subs	r5, r0, r5
 801dfce:	42ae      	cmp	r6, r5
 801dfd0:	dc36      	bgt.n	801e040 <__gethex+0x320>
 801dfd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dfd6:	2b02      	cmp	r3, #2
 801dfd8:	d02a      	beq.n	801e030 <__gethex+0x310>
 801dfda:	2b03      	cmp	r3, #3
 801dfdc:	d02c      	beq.n	801e038 <__gethex+0x318>
 801dfde:	2b01      	cmp	r3, #1
 801dfe0:	d11c      	bne.n	801e01c <__gethex+0x2fc>
 801dfe2:	42ae      	cmp	r6, r5
 801dfe4:	d11a      	bne.n	801e01c <__gethex+0x2fc>
 801dfe6:	2e01      	cmp	r6, #1
 801dfe8:	d112      	bne.n	801e010 <__gethex+0x2f0>
 801dfea:	9a04      	ldr	r2, [sp, #16]
 801dfec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dff0:	6013      	str	r3, [r2, #0]
 801dff2:	2301      	movs	r3, #1
 801dff4:	6123      	str	r3, [r4, #16]
 801dff6:	f8c9 3000 	str.w	r3, [r9]
 801dffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dffc:	2762      	movs	r7, #98	; 0x62
 801dffe:	601c      	str	r4, [r3, #0]
 801e000:	e723      	b.n	801de4a <__gethex+0x12a>
 801e002:	bf00      	nop
 801e004:	08020a00 	.word	0x08020a00
 801e008:	08020988 	.word	0x08020988
 801e00c:	08020999 	.word	0x08020999
 801e010:	1e71      	subs	r1, r6, #1
 801e012:	4620      	mov	r0, r4
 801e014:	f000 fe65 	bl	801ece2 <__any_on>
 801e018:	2800      	cmp	r0, #0
 801e01a:	d1e6      	bne.n	801dfea <__gethex+0x2ca>
 801e01c:	ee18 0a10 	vmov	r0, s16
 801e020:	4621      	mov	r1, r4
 801e022:	f000 fa01 	bl	801e428 <_Bfree>
 801e026:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e028:	2300      	movs	r3, #0
 801e02a:	6013      	str	r3, [r2, #0]
 801e02c:	2750      	movs	r7, #80	; 0x50
 801e02e:	e70c      	b.n	801de4a <__gethex+0x12a>
 801e030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e032:	2b00      	cmp	r3, #0
 801e034:	d1f2      	bne.n	801e01c <__gethex+0x2fc>
 801e036:	e7d8      	b.n	801dfea <__gethex+0x2ca>
 801e038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d1d5      	bne.n	801dfea <__gethex+0x2ca>
 801e03e:	e7ed      	b.n	801e01c <__gethex+0x2fc>
 801e040:	1e6f      	subs	r7, r5, #1
 801e042:	f1ba 0f00 	cmp.w	sl, #0
 801e046:	d131      	bne.n	801e0ac <__gethex+0x38c>
 801e048:	b127      	cbz	r7, 801e054 <__gethex+0x334>
 801e04a:	4639      	mov	r1, r7
 801e04c:	4620      	mov	r0, r4
 801e04e:	f000 fe48 	bl	801ece2 <__any_on>
 801e052:	4682      	mov	sl, r0
 801e054:	117b      	asrs	r3, r7, #5
 801e056:	2101      	movs	r1, #1
 801e058:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e05c:	f007 071f 	and.w	r7, r7, #31
 801e060:	fa01 f707 	lsl.w	r7, r1, r7
 801e064:	421f      	tst	r7, r3
 801e066:	4629      	mov	r1, r5
 801e068:	4620      	mov	r0, r4
 801e06a:	bf18      	it	ne
 801e06c:	f04a 0a02 	orrne.w	sl, sl, #2
 801e070:	1b76      	subs	r6, r6, r5
 801e072:	f7ff fded 	bl	801dc50 <rshift>
 801e076:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e07a:	2702      	movs	r7, #2
 801e07c:	f1ba 0f00 	cmp.w	sl, #0
 801e080:	d048      	beq.n	801e114 <__gethex+0x3f4>
 801e082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e086:	2b02      	cmp	r3, #2
 801e088:	d015      	beq.n	801e0b6 <__gethex+0x396>
 801e08a:	2b03      	cmp	r3, #3
 801e08c:	d017      	beq.n	801e0be <__gethex+0x39e>
 801e08e:	2b01      	cmp	r3, #1
 801e090:	d109      	bne.n	801e0a6 <__gethex+0x386>
 801e092:	f01a 0f02 	tst.w	sl, #2
 801e096:	d006      	beq.n	801e0a6 <__gethex+0x386>
 801e098:	f8d9 0000 	ldr.w	r0, [r9]
 801e09c:	ea4a 0a00 	orr.w	sl, sl, r0
 801e0a0:	f01a 0f01 	tst.w	sl, #1
 801e0a4:	d10e      	bne.n	801e0c4 <__gethex+0x3a4>
 801e0a6:	f047 0710 	orr.w	r7, r7, #16
 801e0aa:	e033      	b.n	801e114 <__gethex+0x3f4>
 801e0ac:	f04f 0a01 	mov.w	sl, #1
 801e0b0:	e7d0      	b.n	801e054 <__gethex+0x334>
 801e0b2:	2701      	movs	r7, #1
 801e0b4:	e7e2      	b.n	801e07c <__gethex+0x35c>
 801e0b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0b8:	f1c3 0301 	rsb	r3, r3, #1
 801e0bc:	9315      	str	r3, [sp, #84]	; 0x54
 801e0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d0f0      	beq.n	801e0a6 <__gethex+0x386>
 801e0c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e0c8:	f104 0314 	add.w	r3, r4, #20
 801e0cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e0d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e0d4:	f04f 0c00 	mov.w	ip, #0
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0de:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e0e2:	d01c      	beq.n	801e11e <__gethex+0x3fe>
 801e0e4:	3201      	adds	r2, #1
 801e0e6:	6002      	str	r2, [r0, #0]
 801e0e8:	2f02      	cmp	r7, #2
 801e0ea:	f104 0314 	add.w	r3, r4, #20
 801e0ee:	d13f      	bne.n	801e170 <__gethex+0x450>
 801e0f0:	f8d8 2000 	ldr.w	r2, [r8]
 801e0f4:	3a01      	subs	r2, #1
 801e0f6:	42b2      	cmp	r2, r6
 801e0f8:	d10a      	bne.n	801e110 <__gethex+0x3f0>
 801e0fa:	1171      	asrs	r1, r6, #5
 801e0fc:	2201      	movs	r2, #1
 801e0fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e102:	f006 061f 	and.w	r6, r6, #31
 801e106:	fa02 f606 	lsl.w	r6, r2, r6
 801e10a:	421e      	tst	r6, r3
 801e10c:	bf18      	it	ne
 801e10e:	4617      	movne	r7, r2
 801e110:	f047 0720 	orr.w	r7, r7, #32
 801e114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e116:	601c      	str	r4, [r3, #0]
 801e118:	9b04      	ldr	r3, [sp, #16]
 801e11a:	601d      	str	r5, [r3, #0]
 801e11c:	e695      	b.n	801de4a <__gethex+0x12a>
 801e11e:	4299      	cmp	r1, r3
 801e120:	f843 cc04 	str.w	ip, [r3, #-4]
 801e124:	d8d8      	bhi.n	801e0d8 <__gethex+0x3b8>
 801e126:	68a3      	ldr	r3, [r4, #8]
 801e128:	459b      	cmp	fp, r3
 801e12a:	db19      	blt.n	801e160 <__gethex+0x440>
 801e12c:	6861      	ldr	r1, [r4, #4]
 801e12e:	ee18 0a10 	vmov	r0, s16
 801e132:	3101      	adds	r1, #1
 801e134:	f000 f938 	bl	801e3a8 <_Balloc>
 801e138:	4681      	mov	r9, r0
 801e13a:	b918      	cbnz	r0, 801e144 <__gethex+0x424>
 801e13c:	4b1a      	ldr	r3, [pc, #104]	; (801e1a8 <__gethex+0x488>)
 801e13e:	4602      	mov	r2, r0
 801e140:	2184      	movs	r1, #132	; 0x84
 801e142:	e6a8      	b.n	801de96 <__gethex+0x176>
 801e144:	6922      	ldr	r2, [r4, #16]
 801e146:	3202      	adds	r2, #2
 801e148:	f104 010c 	add.w	r1, r4, #12
 801e14c:	0092      	lsls	r2, r2, #2
 801e14e:	300c      	adds	r0, #12
 801e150:	f7fd f851 	bl	801b1f6 <memcpy>
 801e154:	4621      	mov	r1, r4
 801e156:	ee18 0a10 	vmov	r0, s16
 801e15a:	f000 f965 	bl	801e428 <_Bfree>
 801e15e:	464c      	mov	r4, r9
 801e160:	6923      	ldr	r3, [r4, #16]
 801e162:	1c5a      	adds	r2, r3, #1
 801e164:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e168:	6122      	str	r2, [r4, #16]
 801e16a:	2201      	movs	r2, #1
 801e16c:	615a      	str	r2, [r3, #20]
 801e16e:	e7bb      	b.n	801e0e8 <__gethex+0x3c8>
 801e170:	6922      	ldr	r2, [r4, #16]
 801e172:	455a      	cmp	r2, fp
 801e174:	dd0b      	ble.n	801e18e <__gethex+0x46e>
 801e176:	2101      	movs	r1, #1
 801e178:	4620      	mov	r0, r4
 801e17a:	f7ff fd69 	bl	801dc50 <rshift>
 801e17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e182:	3501      	adds	r5, #1
 801e184:	42ab      	cmp	r3, r5
 801e186:	f6ff aed0 	blt.w	801df2a <__gethex+0x20a>
 801e18a:	2701      	movs	r7, #1
 801e18c:	e7c0      	b.n	801e110 <__gethex+0x3f0>
 801e18e:	f016 061f 	ands.w	r6, r6, #31
 801e192:	d0fa      	beq.n	801e18a <__gethex+0x46a>
 801e194:	4453      	add	r3, sl
 801e196:	f1c6 0620 	rsb	r6, r6, #32
 801e19a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e19e:	f000 f9f5 	bl	801e58c <__hi0bits>
 801e1a2:	42b0      	cmp	r0, r6
 801e1a4:	dbe7      	blt.n	801e176 <__gethex+0x456>
 801e1a6:	e7f0      	b.n	801e18a <__gethex+0x46a>
 801e1a8:	08020988 	.word	0x08020988

0801e1ac <L_shift>:
 801e1ac:	f1c2 0208 	rsb	r2, r2, #8
 801e1b0:	0092      	lsls	r2, r2, #2
 801e1b2:	b570      	push	{r4, r5, r6, lr}
 801e1b4:	f1c2 0620 	rsb	r6, r2, #32
 801e1b8:	6843      	ldr	r3, [r0, #4]
 801e1ba:	6804      	ldr	r4, [r0, #0]
 801e1bc:	fa03 f506 	lsl.w	r5, r3, r6
 801e1c0:	432c      	orrs	r4, r5
 801e1c2:	40d3      	lsrs	r3, r2
 801e1c4:	6004      	str	r4, [r0, #0]
 801e1c6:	f840 3f04 	str.w	r3, [r0, #4]!
 801e1ca:	4288      	cmp	r0, r1
 801e1cc:	d3f4      	bcc.n	801e1b8 <L_shift+0xc>
 801e1ce:	bd70      	pop	{r4, r5, r6, pc}

0801e1d0 <__match>:
 801e1d0:	b530      	push	{r4, r5, lr}
 801e1d2:	6803      	ldr	r3, [r0, #0]
 801e1d4:	3301      	adds	r3, #1
 801e1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e1da:	b914      	cbnz	r4, 801e1e2 <__match+0x12>
 801e1dc:	6003      	str	r3, [r0, #0]
 801e1de:	2001      	movs	r0, #1
 801e1e0:	bd30      	pop	{r4, r5, pc}
 801e1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e1ea:	2d19      	cmp	r5, #25
 801e1ec:	bf98      	it	ls
 801e1ee:	3220      	addls	r2, #32
 801e1f0:	42a2      	cmp	r2, r4
 801e1f2:	d0f0      	beq.n	801e1d6 <__match+0x6>
 801e1f4:	2000      	movs	r0, #0
 801e1f6:	e7f3      	b.n	801e1e0 <__match+0x10>

0801e1f8 <__hexnan>:
 801e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1fc:	680b      	ldr	r3, [r1, #0]
 801e1fe:	115e      	asrs	r6, r3, #5
 801e200:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e204:	f013 031f 	ands.w	r3, r3, #31
 801e208:	b087      	sub	sp, #28
 801e20a:	bf18      	it	ne
 801e20c:	3604      	addne	r6, #4
 801e20e:	2500      	movs	r5, #0
 801e210:	1f37      	subs	r7, r6, #4
 801e212:	4690      	mov	r8, r2
 801e214:	6802      	ldr	r2, [r0, #0]
 801e216:	9301      	str	r3, [sp, #4]
 801e218:	4682      	mov	sl, r0
 801e21a:	f846 5c04 	str.w	r5, [r6, #-4]
 801e21e:	46b9      	mov	r9, r7
 801e220:	463c      	mov	r4, r7
 801e222:	9502      	str	r5, [sp, #8]
 801e224:	46ab      	mov	fp, r5
 801e226:	7851      	ldrb	r1, [r2, #1]
 801e228:	1c53      	adds	r3, r2, #1
 801e22a:	9303      	str	r3, [sp, #12]
 801e22c:	b341      	cbz	r1, 801e280 <__hexnan+0x88>
 801e22e:	4608      	mov	r0, r1
 801e230:	9205      	str	r2, [sp, #20]
 801e232:	9104      	str	r1, [sp, #16]
 801e234:	f7ff fd5e 	bl	801dcf4 <__hexdig_fun>
 801e238:	2800      	cmp	r0, #0
 801e23a:	d14f      	bne.n	801e2dc <__hexnan+0xe4>
 801e23c:	9904      	ldr	r1, [sp, #16]
 801e23e:	9a05      	ldr	r2, [sp, #20]
 801e240:	2920      	cmp	r1, #32
 801e242:	d818      	bhi.n	801e276 <__hexnan+0x7e>
 801e244:	9b02      	ldr	r3, [sp, #8]
 801e246:	459b      	cmp	fp, r3
 801e248:	dd13      	ble.n	801e272 <__hexnan+0x7a>
 801e24a:	454c      	cmp	r4, r9
 801e24c:	d206      	bcs.n	801e25c <__hexnan+0x64>
 801e24e:	2d07      	cmp	r5, #7
 801e250:	dc04      	bgt.n	801e25c <__hexnan+0x64>
 801e252:	462a      	mov	r2, r5
 801e254:	4649      	mov	r1, r9
 801e256:	4620      	mov	r0, r4
 801e258:	f7ff ffa8 	bl	801e1ac <L_shift>
 801e25c:	4544      	cmp	r4, r8
 801e25e:	d950      	bls.n	801e302 <__hexnan+0x10a>
 801e260:	2300      	movs	r3, #0
 801e262:	f1a4 0904 	sub.w	r9, r4, #4
 801e266:	f844 3c04 	str.w	r3, [r4, #-4]
 801e26a:	f8cd b008 	str.w	fp, [sp, #8]
 801e26e:	464c      	mov	r4, r9
 801e270:	461d      	mov	r5, r3
 801e272:	9a03      	ldr	r2, [sp, #12]
 801e274:	e7d7      	b.n	801e226 <__hexnan+0x2e>
 801e276:	2929      	cmp	r1, #41	; 0x29
 801e278:	d156      	bne.n	801e328 <__hexnan+0x130>
 801e27a:	3202      	adds	r2, #2
 801e27c:	f8ca 2000 	str.w	r2, [sl]
 801e280:	f1bb 0f00 	cmp.w	fp, #0
 801e284:	d050      	beq.n	801e328 <__hexnan+0x130>
 801e286:	454c      	cmp	r4, r9
 801e288:	d206      	bcs.n	801e298 <__hexnan+0xa0>
 801e28a:	2d07      	cmp	r5, #7
 801e28c:	dc04      	bgt.n	801e298 <__hexnan+0xa0>
 801e28e:	462a      	mov	r2, r5
 801e290:	4649      	mov	r1, r9
 801e292:	4620      	mov	r0, r4
 801e294:	f7ff ff8a 	bl	801e1ac <L_shift>
 801e298:	4544      	cmp	r4, r8
 801e29a:	d934      	bls.n	801e306 <__hexnan+0x10e>
 801e29c:	f1a8 0204 	sub.w	r2, r8, #4
 801e2a0:	4623      	mov	r3, r4
 801e2a2:	f853 1b04 	ldr.w	r1, [r3], #4
 801e2a6:	f842 1f04 	str.w	r1, [r2, #4]!
 801e2aa:	429f      	cmp	r7, r3
 801e2ac:	d2f9      	bcs.n	801e2a2 <__hexnan+0xaa>
 801e2ae:	1b3b      	subs	r3, r7, r4
 801e2b0:	f023 0303 	bic.w	r3, r3, #3
 801e2b4:	3304      	adds	r3, #4
 801e2b6:	3401      	adds	r4, #1
 801e2b8:	3e03      	subs	r6, #3
 801e2ba:	42b4      	cmp	r4, r6
 801e2bc:	bf88      	it	hi
 801e2be:	2304      	movhi	r3, #4
 801e2c0:	4443      	add	r3, r8
 801e2c2:	2200      	movs	r2, #0
 801e2c4:	f843 2b04 	str.w	r2, [r3], #4
 801e2c8:	429f      	cmp	r7, r3
 801e2ca:	d2fb      	bcs.n	801e2c4 <__hexnan+0xcc>
 801e2cc:	683b      	ldr	r3, [r7, #0]
 801e2ce:	b91b      	cbnz	r3, 801e2d8 <__hexnan+0xe0>
 801e2d0:	4547      	cmp	r7, r8
 801e2d2:	d127      	bne.n	801e324 <__hexnan+0x12c>
 801e2d4:	2301      	movs	r3, #1
 801e2d6:	603b      	str	r3, [r7, #0]
 801e2d8:	2005      	movs	r0, #5
 801e2da:	e026      	b.n	801e32a <__hexnan+0x132>
 801e2dc:	3501      	adds	r5, #1
 801e2de:	2d08      	cmp	r5, #8
 801e2e0:	f10b 0b01 	add.w	fp, fp, #1
 801e2e4:	dd06      	ble.n	801e2f4 <__hexnan+0xfc>
 801e2e6:	4544      	cmp	r4, r8
 801e2e8:	d9c3      	bls.n	801e272 <__hexnan+0x7a>
 801e2ea:	2300      	movs	r3, #0
 801e2ec:	f844 3c04 	str.w	r3, [r4, #-4]
 801e2f0:	2501      	movs	r5, #1
 801e2f2:	3c04      	subs	r4, #4
 801e2f4:	6822      	ldr	r2, [r4, #0]
 801e2f6:	f000 000f 	and.w	r0, r0, #15
 801e2fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e2fe:	6022      	str	r2, [r4, #0]
 801e300:	e7b7      	b.n	801e272 <__hexnan+0x7a>
 801e302:	2508      	movs	r5, #8
 801e304:	e7b5      	b.n	801e272 <__hexnan+0x7a>
 801e306:	9b01      	ldr	r3, [sp, #4]
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d0df      	beq.n	801e2cc <__hexnan+0xd4>
 801e30c:	f04f 32ff 	mov.w	r2, #4294967295
 801e310:	f1c3 0320 	rsb	r3, r3, #32
 801e314:	fa22 f303 	lsr.w	r3, r2, r3
 801e318:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e31c:	401a      	ands	r2, r3
 801e31e:	f846 2c04 	str.w	r2, [r6, #-4]
 801e322:	e7d3      	b.n	801e2cc <__hexnan+0xd4>
 801e324:	3f04      	subs	r7, #4
 801e326:	e7d1      	b.n	801e2cc <__hexnan+0xd4>
 801e328:	2004      	movs	r0, #4
 801e32a:	b007      	add	sp, #28
 801e32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e330 <_localeconv_r>:
 801e330:	4800      	ldr	r0, [pc, #0]	; (801e334 <_localeconv_r+0x4>)
 801e332:	4770      	bx	lr
 801e334:	200001c4 	.word	0x200001c4

0801e338 <_lseek_r>:
 801e338:	b538      	push	{r3, r4, r5, lr}
 801e33a:	4d07      	ldr	r5, [pc, #28]	; (801e358 <_lseek_r+0x20>)
 801e33c:	4604      	mov	r4, r0
 801e33e:	4608      	mov	r0, r1
 801e340:	4611      	mov	r1, r2
 801e342:	2200      	movs	r2, #0
 801e344:	602a      	str	r2, [r5, #0]
 801e346:	461a      	mov	r2, r3
 801e348:	f7f1 ff08 	bl	801015c <_lseek>
 801e34c:	1c43      	adds	r3, r0, #1
 801e34e:	d102      	bne.n	801e356 <_lseek_r+0x1e>
 801e350:	682b      	ldr	r3, [r5, #0]
 801e352:	b103      	cbz	r3, 801e356 <_lseek_r+0x1e>
 801e354:	6023      	str	r3, [r4, #0]
 801e356:	bd38      	pop	{r3, r4, r5, pc}
 801e358:	2004003c 	.word	0x2004003c

0801e35c <malloc>:
 801e35c:	4b02      	ldr	r3, [pc, #8]	; (801e368 <malloc+0xc>)
 801e35e:	4601      	mov	r1, r0
 801e360:	6818      	ldr	r0, [r3, #0]
 801e362:	f7fc bf7f 	b.w	801b264 <_malloc_r>
 801e366:	bf00      	nop
 801e368:	2000006c 	.word	0x2000006c

0801e36c <__ascii_mbtowc>:
 801e36c:	b082      	sub	sp, #8
 801e36e:	b901      	cbnz	r1, 801e372 <__ascii_mbtowc+0x6>
 801e370:	a901      	add	r1, sp, #4
 801e372:	b142      	cbz	r2, 801e386 <__ascii_mbtowc+0x1a>
 801e374:	b14b      	cbz	r3, 801e38a <__ascii_mbtowc+0x1e>
 801e376:	7813      	ldrb	r3, [r2, #0]
 801e378:	600b      	str	r3, [r1, #0]
 801e37a:	7812      	ldrb	r2, [r2, #0]
 801e37c:	1e10      	subs	r0, r2, #0
 801e37e:	bf18      	it	ne
 801e380:	2001      	movne	r0, #1
 801e382:	b002      	add	sp, #8
 801e384:	4770      	bx	lr
 801e386:	4610      	mov	r0, r2
 801e388:	e7fb      	b.n	801e382 <__ascii_mbtowc+0x16>
 801e38a:	f06f 0001 	mvn.w	r0, #1
 801e38e:	e7f8      	b.n	801e382 <__ascii_mbtowc+0x16>

0801e390 <__malloc_lock>:
 801e390:	4801      	ldr	r0, [pc, #4]	; (801e398 <__malloc_lock+0x8>)
 801e392:	f7fc bf2e 	b.w	801b1f2 <__retarget_lock_acquire_recursive>
 801e396:	bf00      	nop
 801e398:	20040030 	.word	0x20040030

0801e39c <__malloc_unlock>:
 801e39c:	4801      	ldr	r0, [pc, #4]	; (801e3a4 <__malloc_unlock+0x8>)
 801e39e:	f7fc bf29 	b.w	801b1f4 <__retarget_lock_release_recursive>
 801e3a2:	bf00      	nop
 801e3a4:	20040030 	.word	0x20040030

0801e3a8 <_Balloc>:
 801e3a8:	b570      	push	{r4, r5, r6, lr}
 801e3aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e3ac:	4604      	mov	r4, r0
 801e3ae:	460d      	mov	r5, r1
 801e3b0:	b976      	cbnz	r6, 801e3d0 <_Balloc+0x28>
 801e3b2:	2010      	movs	r0, #16
 801e3b4:	f7ff ffd2 	bl	801e35c <malloc>
 801e3b8:	4602      	mov	r2, r0
 801e3ba:	6260      	str	r0, [r4, #36]	; 0x24
 801e3bc:	b920      	cbnz	r0, 801e3c8 <_Balloc+0x20>
 801e3be:	4b18      	ldr	r3, [pc, #96]	; (801e420 <_Balloc+0x78>)
 801e3c0:	4818      	ldr	r0, [pc, #96]	; (801e424 <_Balloc+0x7c>)
 801e3c2:	2166      	movs	r1, #102	; 0x66
 801e3c4:	f001 f8c2 	bl	801f54c <__assert_func>
 801e3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e3cc:	6006      	str	r6, [r0, #0]
 801e3ce:	60c6      	str	r6, [r0, #12]
 801e3d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e3d2:	68f3      	ldr	r3, [r6, #12]
 801e3d4:	b183      	cbz	r3, 801e3f8 <_Balloc+0x50>
 801e3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e3d8:	68db      	ldr	r3, [r3, #12]
 801e3da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e3de:	b9b8      	cbnz	r0, 801e410 <_Balloc+0x68>
 801e3e0:	2101      	movs	r1, #1
 801e3e2:	fa01 f605 	lsl.w	r6, r1, r5
 801e3e6:	1d72      	adds	r2, r6, #5
 801e3e8:	0092      	lsls	r2, r2, #2
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	f000 fc9a 	bl	801ed24 <_calloc_r>
 801e3f0:	b160      	cbz	r0, 801e40c <_Balloc+0x64>
 801e3f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e3f6:	e00e      	b.n	801e416 <_Balloc+0x6e>
 801e3f8:	2221      	movs	r2, #33	; 0x21
 801e3fa:	2104      	movs	r1, #4
 801e3fc:	4620      	mov	r0, r4
 801e3fe:	f000 fc91 	bl	801ed24 <_calloc_r>
 801e402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e404:	60f0      	str	r0, [r6, #12]
 801e406:	68db      	ldr	r3, [r3, #12]
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d1e4      	bne.n	801e3d6 <_Balloc+0x2e>
 801e40c:	2000      	movs	r0, #0
 801e40e:	bd70      	pop	{r4, r5, r6, pc}
 801e410:	6802      	ldr	r2, [r0, #0]
 801e412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e416:	2300      	movs	r3, #0
 801e418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e41c:	e7f7      	b.n	801e40e <_Balloc+0x66>
 801e41e:	bf00      	nop
 801e420:	08020916 	.word	0x08020916
 801e424:	08020a14 	.word	0x08020a14

0801e428 <_Bfree>:
 801e428:	b570      	push	{r4, r5, r6, lr}
 801e42a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e42c:	4605      	mov	r5, r0
 801e42e:	460c      	mov	r4, r1
 801e430:	b976      	cbnz	r6, 801e450 <_Bfree+0x28>
 801e432:	2010      	movs	r0, #16
 801e434:	f7ff ff92 	bl	801e35c <malloc>
 801e438:	4602      	mov	r2, r0
 801e43a:	6268      	str	r0, [r5, #36]	; 0x24
 801e43c:	b920      	cbnz	r0, 801e448 <_Bfree+0x20>
 801e43e:	4b09      	ldr	r3, [pc, #36]	; (801e464 <_Bfree+0x3c>)
 801e440:	4809      	ldr	r0, [pc, #36]	; (801e468 <_Bfree+0x40>)
 801e442:	218a      	movs	r1, #138	; 0x8a
 801e444:	f001 f882 	bl	801f54c <__assert_func>
 801e448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e44c:	6006      	str	r6, [r0, #0]
 801e44e:	60c6      	str	r6, [r0, #12]
 801e450:	b13c      	cbz	r4, 801e462 <_Bfree+0x3a>
 801e452:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e454:	6862      	ldr	r2, [r4, #4]
 801e456:	68db      	ldr	r3, [r3, #12]
 801e458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e45c:	6021      	str	r1, [r4, #0]
 801e45e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e462:	bd70      	pop	{r4, r5, r6, pc}
 801e464:	08020916 	.word	0x08020916
 801e468:	08020a14 	.word	0x08020a14

0801e46c <__multadd>:
 801e46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e470:	690d      	ldr	r5, [r1, #16]
 801e472:	4607      	mov	r7, r0
 801e474:	460c      	mov	r4, r1
 801e476:	461e      	mov	r6, r3
 801e478:	f101 0c14 	add.w	ip, r1, #20
 801e47c:	2000      	movs	r0, #0
 801e47e:	f8dc 3000 	ldr.w	r3, [ip]
 801e482:	b299      	uxth	r1, r3
 801e484:	fb02 6101 	mla	r1, r2, r1, r6
 801e488:	0c1e      	lsrs	r6, r3, #16
 801e48a:	0c0b      	lsrs	r3, r1, #16
 801e48c:	fb02 3306 	mla	r3, r2, r6, r3
 801e490:	b289      	uxth	r1, r1
 801e492:	3001      	adds	r0, #1
 801e494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e498:	4285      	cmp	r5, r0
 801e49a:	f84c 1b04 	str.w	r1, [ip], #4
 801e49e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e4a2:	dcec      	bgt.n	801e47e <__multadd+0x12>
 801e4a4:	b30e      	cbz	r6, 801e4ea <__multadd+0x7e>
 801e4a6:	68a3      	ldr	r3, [r4, #8]
 801e4a8:	42ab      	cmp	r3, r5
 801e4aa:	dc19      	bgt.n	801e4e0 <__multadd+0x74>
 801e4ac:	6861      	ldr	r1, [r4, #4]
 801e4ae:	4638      	mov	r0, r7
 801e4b0:	3101      	adds	r1, #1
 801e4b2:	f7ff ff79 	bl	801e3a8 <_Balloc>
 801e4b6:	4680      	mov	r8, r0
 801e4b8:	b928      	cbnz	r0, 801e4c6 <__multadd+0x5a>
 801e4ba:	4602      	mov	r2, r0
 801e4bc:	4b0c      	ldr	r3, [pc, #48]	; (801e4f0 <__multadd+0x84>)
 801e4be:	480d      	ldr	r0, [pc, #52]	; (801e4f4 <__multadd+0x88>)
 801e4c0:	21b5      	movs	r1, #181	; 0xb5
 801e4c2:	f001 f843 	bl	801f54c <__assert_func>
 801e4c6:	6922      	ldr	r2, [r4, #16]
 801e4c8:	3202      	adds	r2, #2
 801e4ca:	f104 010c 	add.w	r1, r4, #12
 801e4ce:	0092      	lsls	r2, r2, #2
 801e4d0:	300c      	adds	r0, #12
 801e4d2:	f7fc fe90 	bl	801b1f6 <memcpy>
 801e4d6:	4621      	mov	r1, r4
 801e4d8:	4638      	mov	r0, r7
 801e4da:	f7ff ffa5 	bl	801e428 <_Bfree>
 801e4de:	4644      	mov	r4, r8
 801e4e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e4e4:	3501      	adds	r5, #1
 801e4e6:	615e      	str	r6, [r3, #20]
 801e4e8:	6125      	str	r5, [r4, #16]
 801e4ea:	4620      	mov	r0, r4
 801e4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4f0:	08020988 	.word	0x08020988
 801e4f4:	08020a14 	.word	0x08020a14

0801e4f8 <__s2b>:
 801e4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4fc:	460c      	mov	r4, r1
 801e4fe:	4615      	mov	r5, r2
 801e500:	461f      	mov	r7, r3
 801e502:	2209      	movs	r2, #9
 801e504:	3308      	adds	r3, #8
 801e506:	4606      	mov	r6, r0
 801e508:	fb93 f3f2 	sdiv	r3, r3, r2
 801e50c:	2100      	movs	r1, #0
 801e50e:	2201      	movs	r2, #1
 801e510:	429a      	cmp	r2, r3
 801e512:	db09      	blt.n	801e528 <__s2b+0x30>
 801e514:	4630      	mov	r0, r6
 801e516:	f7ff ff47 	bl	801e3a8 <_Balloc>
 801e51a:	b940      	cbnz	r0, 801e52e <__s2b+0x36>
 801e51c:	4602      	mov	r2, r0
 801e51e:	4b19      	ldr	r3, [pc, #100]	; (801e584 <__s2b+0x8c>)
 801e520:	4819      	ldr	r0, [pc, #100]	; (801e588 <__s2b+0x90>)
 801e522:	21ce      	movs	r1, #206	; 0xce
 801e524:	f001 f812 	bl	801f54c <__assert_func>
 801e528:	0052      	lsls	r2, r2, #1
 801e52a:	3101      	adds	r1, #1
 801e52c:	e7f0      	b.n	801e510 <__s2b+0x18>
 801e52e:	9b08      	ldr	r3, [sp, #32]
 801e530:	6143      	str	r3, [r0, #20]
 801e532:	2d09      	cmp	r5, #9
 801e534:	f04f 0301 	mov.w	r3, #1
 801e538:	6103      	str	r3, [r0, #16]
 801e53a:	dd16      	ble.n	801e56a <__s2b+0x72>
 801e53c:	f104 0909 	add.w	r9, r4, #9
 801e540:	46c8      	mov	r8, r9
 801e542:	442c      	add	r4, r5
 801e544:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e548:	4601      	mov	r1, r0
 801e54a:	3b30      	subs	r3, #48	; 0x30
 801e54c:	220a      	movs	r2, #10
 801e54e:	4630      	mov	r0, r6
 801e550:	f7ff ff8c 	bl	801e46c <__multadd>
 801e554:	45a0      	cmp	r8, r4
 801e556:	d1f5      	bne.n	801e544 <__s2b+0x4c>
 801e558:	f1a5 0408 	sub.w	r4, r5, #8
 801e55c:	444c      	add	r4, r9
 801e55e:	1b2d      	subs	r5, r5, r4
 801e560:	1963      	adds	r3, r4, r5
 801e562:	42bb      	cmp	r3, r7
 801e564:	db04      	blt.n	801e570 <__s2b+0x78>
 801e566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e56a:	340a      	adds	r4, #10
 801e56c:	2509      	movs	r5, #9
 801e56e:	e7f6      	b.n	801e55e <__s2b+0x66>
 801e570:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e574:	4601      	mov	r1, r0
 801e576:	3b30      	subs	r3, #48	; 0x30
 801e578:	220a      	movs	r2, #10
 801e57a:	4630      	mov	r0, r6
 801e57c:	f7ff ff76 	bl	801e46c <__multadd>
 801e580:	e7ee      	b.n	801e560 <__s2b+0x68>
 801e582:	bf00      	nop
 801e584:	08020988 	.word	0x08020988
 801e588:	08020a14 	.word	0x08020a14

0801e58c <__hi0bits>:
 801e58c:	0c03      	lsrs	r3, r0, #16
 801e58e:	041b      	lsls	r3, r3, #16
 801e590:	b9d3      	cbnz	r3, 801e5c8 <__hi0bits+0x3c>
 801e592:	0400      	lsls	r0, r0, #16
 801e594:	2310      	movs	r3, #16
 801e596:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e59a:	bf04      	itt	eq
 801e59c:	0200      	lsleq	r0, r0, #8
 801e59e:	3308      	addeq	r3, #8
 801e5a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e5a4:	bf04      	itt	eq
 801e5a6:	0100      	lsleq	r0, r0, #4
 801e5a8:	3304      	addeq	r3, #4
 801e5aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e5ae:	bf04      	itt	eq
 801e5b0:	0080      	lsleq	r0, r0, #2
 801e5b2:	3302      	addeq	r3, #2
 801e5b4:	2800      	cmp	r0, #0
 801e5b6:	db05      	blt.n	801e5c4 <__hi0bits+0x38>
 801e5b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e5bc:	f103 0301 	add.w	r3, r3, #1
 801e5c0:	bf08      	it	eq
 801e5c2:	2320      	moveq	r3, #32
 801e5c4:	4618      	mov	r0, r3
 801e5c6:	4770      	bx	lr
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	e7e4      	b.n	801e596 <__hi0bits+0xa>

0801e5cc <__lo0bits>:
 801e5cc:	6803      	ldr	r3, [r0, #0]
 801e5ce:	f013 0207 	ands.w	r2, r3, #7
 801e5d2:	4601      	mov	r1, r0
 801e5d4:	d00b      	beq.n	801e5ee <__lo0bits+0x22>
 801e5d6:	07da      	lsls	r2, r3, #31
 801e5d8:	d423      	bmi.n	801e622 <__lo0bits+0x56>
 801e5da:	0798      	lsls	r0, r3, #30
 801e5dc:	bf49      	itett	mi
 801e5de:	085b      	lsrmi	r3, r3, #1
 801e5e0:	089b      	lsrpl	r3, r3, #2
 801e5e2:	2001      	movmi	r0, #1
 801e5e4:	600b      	strmi	r3, [r1, #0]
 801e5e6:	bf5c      	itt	pl
 801e5e8:	600b      	strpl	r3, [r1, #0]
 801e5ea:	2002      	movpl	r0, #2
 801e5ec:	4770      	bx	lr
 801e5ee:	b298      	uxth	r0, r3
 801e5f0:	b9a8      	cbnz	r0, 801e61e <__lo0bits+0x52>
 801e5f2:	0c1b      	lsrs	r3, r3, #16
 801e5f4:	2010      	movs	r0, #16
 801e5f6:	b2da      	uxtb	r2, r3
 801e5f8:	b90a      	cbnz	r2, 801e5fe <__lo0bits+0x32>
 801e5fa:	3008      	adds	r0, #8
 801e5fc:	0a1b      	lsrs	r3, r3, #8
 801e5fe:	071a      	lsls	r2, r3, #28
 801e600:	bf04      	itt	eq
 801e602:	091b      	lsreq	r3, r3, #4
 801e604:	3004      	addeq	r0, #4
 801e606:	079a      	lsls	r2, r3, #30
 801e608:	bf04      	itt	eq
 801e60a:	089b      	lsreq	r3, r3, #2
 801e60c:	3002      	addeq	r0, #2
 801e60e:	07da      	lsls	r2, r3, #31
 801e610:	d403      	bmi.n	801e61a <__lo0bits+0x4e>
 801e612:	085b      	lsrs	r3, r3, #1
 801e614:	f100 0001 	add.w	r0, r0, #1
 801e618:	d005      	beq.n	801e626 <__lo0bits+0x5a>
 801e61a:	600b      	str	r3, [r1, #0]
 801e61c:	4770      	bx	lr
 801e61e:	4610      	mov	r0, r2
 801e620:	e7e9      	b.n	801e5f6 <__lo0bits+0x2a>
 801e622:	2000      	movs	r0, #0
 801e624:	4770      	bx	lr
 801e626:	2020      	movs	r0, #32
 801e628:	4770      	bx	lr
	...

0801e62c <__i2b>:
 801e62c:	b510      	push	{r4, lr}
 801e62e:	460c      	mov	r4, r1
 801e630:	2101      	movs	r1, #1
 801e632:	f7ff feb9 	bl	801e3a8 <_Balloc>
 801e636:	4602      	mov	r2, r0
 801e638:	b928      	cbnz	r0, 801e646 <__i2b+0x1a>
 801e63a:	4b05      	ldr	r3, [pc, #20]	; (801e650 <__i2b+0x24>)
 801e63c:	4805      	ldr	r0, [pc, #20]	; (801e654 <__i2b+0x28>)
 801e63e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e642:	f000 ff83 	bl	801f54c <__assert_func>
 801e646:	2301      	movs	r3, #1
 801e648:	6144      	str	r4, [r0, #20]
 801e64a:	6103      	str	r3, [r0, #16]
 801e64c:	bd10      	pop	{r4, pc}
 801e64e:	bf00      	nop
 801e650:	08020988 	.word	0x08020988
 801e654:	08020a14 	.word	0x08020a14

0801e658 <__multiply>:
 801e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e65c:	4691      	mov	r9, r2
 801e65e:	690a      	ldr	r2, [r1, #16]
 801e660:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e664:	429a      	cmp	r2, r3
 801e666:	bfb8      	it	lt
 801e668:	460b      	movlt	r3, r1
 801e66a:	460c      	mov	r4, r1
 801e66c:	bfbc      	itt	lt
 801e66e:	464c      	movlt	r4, r9
 801e670:	4699      	movlt	r9, r3
 801e672:	6927      	ldr	r7, [r4, #16]
 801e674:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e678:	68a3      	ldr	r3, [r4, #8]
 801e67a:	6861      	ldr	r1, [r4, #4]
 801e67c:	eb07 060a 	add.w	r6, r7, sl
 801e680:	42b3      	cmp	r3, r6
 801e682:	b085      	sub	sp, #20
 801e684:	bfb8      	it	lt
 801e686:	3101      	addlt	r1, #1
 801e688:	f7ff fe8e 	bl	801e3a8 <_Balloc>
 801e68c:	b930      	cbnz	r0, 801e69c <__multiply+0x44>
 801e68e:	4602      	mov	r2, r0
 801e690:	4b44      	ldr	r3, [pc, #272]	; (801e7a4 <__multiply+0x14c>)
 801e692:	4845      	ldr	r0, [pc, #276]	; (801e7a8 <__multiply+0x150>)
 801e694:	f240 115d 	movw	r1, #349	; 0x15d
 801e698:	f000 ff58 	bl	801f54c <__assert_func>
 801e69c:	f100 0514 	add.w	r5, r0, #20
 801e6a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e6a4:	462b      	mov	r3, r5
 801e6a6:	2200      	movs	r2, #0
 801e6a8:	4543      	cmp	r3, r8
 801e6aa:	d321      	bcc.n	801e6f0 <__multiply+0x98>
 801e6ac:	f104 0314 	add.w	r3, r4, #20
 801e6b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e6b4:	f109 0314 	add.w	r3, r9, #20
 801e6b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e6bc:	9202      	str	r2, [sp, #8]
 801e6be:	1b3a      	subs	r2, r7, r4
 801e6c0:	3a15      	subs	r2, #21
 801e6c2:	f022 0203 	bic.w	r2, r2, #3
 801e6c6:	3204      	adds	r2, #4
 801e6c8:	f104 0115 	add.w	r1, r4, #21
 801e6cc:	428f      	cmp	r7, r1
 801e6ce:	bf38      	it	cc
 801e6d0:	2204      	movcc	r2, #4
 801e6d2:	9201      	str	r2, [sp, #4]
 801e6d4:	9a02      	ldr	r2, [sp, #8]
 801e6d6:	9303      	str	r3, [sp, #12]
 801e6d8:	429a      	cmp	r2, r3
 801e6da:	d80c      	bhi.n	801e6f6 <__multiply+0x9e>
 801e6dc:	2e00      	cmp	r6, #0
 801e6de:	dd03      	ble.n	801e6e8 <__multiply+0x90>
 801e6e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d05a      	beq.n	801e79e <__multiply+0x146>
 801e6e8:	6106      	str	r6, [r0, #16]
 801e6ea:	b005      	add	sp, #20
 801e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6f0:	f843 2b04 	str.w	r2, [r3], #4
 801e6f4:	e7d8      	b.n	801e6a8 <__multiply+0x50>
 801e6f6:	f8b3 a000 	ldrh.w	sl, [r3]
 801e6fa:	f1ba 0f00 	cmp.w	sl, #0
 801e6fe:	d024      	beq.n	801e74a <__multiply+0xf2>
 801e700:	f104 0e14 	add.w	lr, r4, #20
 801e704:	46a9      	mov	r9, r5
 801e706:	f04f 0c00 	mov.w	ip, #0
 801e70a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e70e:	f8d9 1000 	ldr.w	r1, [r9]
 801e712:	fa1f fb82 	uxth.w	fp, r2
 801e716:	b289      	uxth	r1, r1
 801e718:	fb0a 110b 	mla	r1, sl, fp, r1
 801e71c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e720:	f8d9 2000 	ldr.w	r2, [r9]
 801e724:	4461      	add	r1, ip
 801e726:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e72a:	fb0a c20b 	mla	r2, sl, fp, ip
 801e72e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e732:	b289      	uxth	r1, r1
 801e734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e738:	4577      	cmp	r7, lr
 801e73a:	f849 1b04 	str.w	r1, [r9], #4
 801e73e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e742:	d8e2      	bhi.n	801e70a <__multiply+0xb2>
 801e744:	9a01      	ldr	r2, [sp, #4]
 801e746:	f845 c002 	str.w	ip, [r5, r2]
 801e74a:	9a03      	ldr	r2, [sp, #12]
 801e74c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e750:	3304      	adds	r3, #4
 801e752:	f1b9 0f00 	cmp.w	r9, #0
 801e756:	d020      	beq.n	801e79a <__multiply+0x142>
 801e758:	6829      	ldr	r1, [r5, #0]
 801e75a:	f104 0c14 	add.w	ip, r4, #20
 801e75e:	46ae      	mov	lr, r5
 801e760:	f04f 0a00 	mov.w	sl, #0
 801e764:	f8bc b000 	ldrh.w	fp, [ip]
 801e768:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e76c:	fb09 220b 	mla	r2, r9, fp, r2
 801e770:	4492      	add	sl, r2
 801e772:	b289      	uxth	r1, r1
 801e774:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e778:	f84e 1b04 	str.w	r1, [lr], #4
 801e77c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e780:	f8be 1000 	ldrh.w	r1, [lr]
 801e784:	0c12      	lsrs	r2, r2, #16
 801e786:	fb09 1102 	mla	r1, r9, r2, r1
 801e78a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e78e:	4567      	cmp	r7, ip
 801e790:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e794:	d8e6      	bhi.n	801e764 <__multiply+0x10c>
 801e796:	9a01      	ldr	r2, [sp, #4]
 801e798:	50a9      	str	r1, [r5, r2]
 801e79a:	3504      	adds	r5, #4
 801e79c:	e79a      	b.n	801e6d4 <__multiply+0x7c>
 801e79e:	3e01      	subs	r6, #1
 801e7a0:	e79c      	b.n	801e6dc <__multiply+0x84>
 801e7a2:	bf00      	nop
 801e7a4:	08020988 	.word	0x08020988
 801e7a8:	08020a14 	.word	0x08020a14

0801e7ac <__pow5mult>:
 801e7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7b0:	4615      	mov	r5, r2
 801e7b2:	f012 0203 	ands.w	r2, r2, #3
 801e7b6:	4606      	mov	r6, r0
 801e7b8:	460f      	mov	r7, r1
 801e7ba:	d007      	beq.n	801e7cc <__pow5mult+0x20>
 801e7bc:	4c25      	ldr	r4, [pc, #148]	; (801e854 <__pow5mult+0xa8>)
 801e7be:	3a01      	subs	r2, #1
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e7c6:	f7ff fe51 	bl	801e46c <__multadd>
 801e7ca:	4607      	mov	r7, r0
 801e7cc:	10ad      	asrs	r5, r5, #2
 801e7ce:	d03d      	beq.n	801e84c <__pow5mult+0xa0>
 801e7d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e7d2:	b97c      	cbnz	r4, 801e7f4 <__pow5mult+0x48>
 801e7d4:	2010      	movs	r0, #16
 801e7d6:	f7ff fdc1 	bl	801e35c <malloc>
 801e7da:	4602      	mov	r2, r0
 801e7dc:	6270      	str	r0, [r6, #36]	; 0x24
 801e7de:	b928      	cbnz	r0, 801e7ec <__pow5mult+0x40>
 801e7e0:	4b1d      	ldr	r3, [pc, #116]	; (801e858 <__pow5mult+0xac>)
 801e7e2:	481e      	ldr	r0, [pc, #120]	; (801e85c <__pow5mult+0xb0>)
 801e7e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e7e8:	f000 feb0 	bl	801f54c <__assert_func>
 801e7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e7f0:	6004      	str	r4, [r0, #0]
 801e7f2:	60c4      	str	r4, [r0, #12]
 801e7f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e7f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e7fc:	b94c      	cbnz	r4, 801e812 <__pow5mult+0x66>
 801e7fe:	f240 2171 	movw	r1, #625	; 0x271
 801e802:	4630      	mov	r0, r6
 801e804:	f7ff ff12 	bl	801e62c <__i2b>
 801e808:	2300      	movs	r3, #0
 801e80a:	f8c8 0008 	str.w	r0, [r8, #8]
 801e80e:	4604      	mov	r4, r0
 801e810:	6003      	str	r3, [r0, #0]
 801e812:	f04f 0900 	mov.w	r9, #0
 801e816:	07eb      	lsls	r3, r5, #31
 801e818:	d50a      	bpl.n	801e830 <__pow5mult+0x84>
 801e81a:	4639      	mov	r1, r7
 801e81c:	4622      	mov	r2, r4
 801e81e:	4630      	mov	r0, r6
 801e820:	f7ff ff1a 	bl	801e658 <__multiply>
 801e824:	4639      	mov	r1, r7
 801e826:	4680      	mov	r8, r0
 801e828:	4630      	mov	r0, r6
 801e82a:	f7ff fdfd 	bl	801e428 <_Bfree>
 801e82e:	4647      	mov	r7, r8
 801e830:	106d      	asrs	r5, r5, #1
 801e832:	d00b      	beq.n	801e84c <__pow5mult+0xa0>
 801e834:	6820      	ldr	r0, [r4, #0]
 801e836:	b938      	cbnz	r0, 801e848 <__pow5mult+0x9c>
 801e838:	4622      	mov	r2, r4
 801e83a:	4621      	mov	r1, r4
 801e83c:	4630      	mov	r0, r6
 801e83e:	f7ff ff0b 	bl	801e658 <__multiply>
 801e842:	6020      	str	r0, [r4, #0]
 801e844:	f8c0 9000 	str.w	r9, [r0]
 801e848:	4604      	mov	r4, r0
 801e84a:	e7e4      	b.n	801e816 <__pow5mult+0x6a>
 801e84c:	4638      	mov	r0, r7
 801e84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e852:	bf00      	nop
 801e854:	08020b60 	.word	0x08020b60
 801e858:	08020916 	.word	0x08020916
 801e85c:	08020a14 	.word	0x08020a14

0801e860 <__lshift>:
 801e860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e864:	460c      	mov	r4, r1
 801e866:	6849      	ldr	r1, [r1, #4]
 801e868:	6923      	ldr	r3, [r4, #16]
 801e86a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e86e:	68a3      	ldr	r3, [r4, #8]
 801e870:	4607      	mov	r7, r0
 801e872:	4691      	mov	r9, r2
 801e874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e878:	f108 0601 	add.w	r6, r8, #1
 801e87c:	42b3      	cmp	r3, r6
 801e87e:	db0b      	blt.n	801e898 <__lshift+0x38>
 801e880:	4638      	mov	r0, r7
 801e882:	f7ff fd91 	bl	801e3a8 <_Balloc>
 801e886:	4605      	mov	r5, r0
 801e888:	b948      	cbnz	r0, 801e89e <__lshift+0x3e>
 801e88a:	4602      	mov	r2, r0
 801e88c:	4b2a      	ldr	r3, [pc, #168]	; (801e938 <__lshift+0xd8>)
 801e88e:	482b      	ldr	r0, [pc, #172]	; (801e93c <__lshift+0xdc>)
 801e890:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e894:	f000 fe5a 	bl	801f54c <__assert_func>
 801e898:	3101      	adds	r1, #1
 801e89a:	005b      	lsls	r3, r3, #1
 801e89c:	e7ee      	b.n	801e87c <__lshift+0x1c>
 801e89e:	2300      	movs	r3, #0
 801e8a0:	f100 0114 	add.w	r1, r0, #20
 801e8a4:	f100 0210 	add.w	r2, r0, #16
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	4553      	cmp	r3, sl
 801e8ac:	db37      	blt.n	801e91e <__lshift+0xbe>
 801e8ae:	6920      	ldr	r0, [r4, #16]
 801e8b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e8b4:	f104 0314 	add.w	r3, r4, #20
 801e8b8:	f019 091f 	ands.w	r9, r9, #31
 801e8bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e8c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e8c4:	d02f      	beq.n	801e926 <__lshift+0xc6>
 801e8c6:	f1c9 0e20 	rsb	lr, r9, #32
 801e8ca:	468a      	mov	sl, r1
 801e8cc:	f04f 0c00 	mov.w	ip, #0
 801e8d0:	681a      	ldr	r2, [r3, #0]
 801e8d2:	fa02 f209 	lsl.w	r2, r2, r9
 801e8d6:	ea42 020c 	orr.w	r2, r2, ip
 801e8da:	f84a 2b04 	str.w	r2, [sl], #4
 801e8de:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8e2:	4298      	cmp	r0, r3
 801e8e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e8e8:	d8f2      	bhi.n	801e8d0 <__lshift+0x70>
 801e8ea:	1b03      	subs	r3, r0, r4
 801e8ec:	3b15      	subs	r3, #21
 801e8ee:	f023 0303 	bic.w	r3, r3, #3
 801e8f2:	3304      	adds	r3, #4
 801e8f4:	f104 0215 	add.w	r2, r4, #21
 801e8f8:	4290      	cmp	r0, r2
 801e8fa:	bf38      	it	cc
 801e8fc:	2304      	movcc	r3, #4
 801e8fe:	f841 c003 	str.w	ip, [r1, r3]
 801e902:	f1bc 0f00 	cmp.w	ip, #0
 801e906:	d001      	beq.n	801e90c <__lshift+0xac>
 801e908:	f108 0602 	add.w	r6, r8, #2
 801e90c:	3e01      	subs	r6, #1
 801e90e:	4638      	mov	r0, r7
 801e910:	612e      	str	r6, [r5, #16]
 801e912:	4621      	mov	r1, r4
 801e914:	f7ff fd88 	bl	801e428 <_Bfree>
 801e918:	4628      	mov	r0, r5
 801e91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e91e:	f842 0f04 	str.w	r0, [r2, #4]!
 801e922:	3301      	adds	r3, #1
 801e924:	e7c1      	b.n	801e8aa <__lshift+0x4a>
 801e926:	3904      	subs	r1, #4
 801e928:	f853 2b04 	ldr.w	r2, [r3], #4
 801e92c:	f841 2f04 	str.w	r2, [r1, #4]!
 801e930:	4298      	cmp	r0, r3
 801e932:	d8f9      	bhi.n	801e928 <__lshift+0xc8>
 801e934:	e7ea      	b.n	801e90c <__lshift+0xac>
 801e936:	bf00      	nop
 801e938:	08020988 	.word	0x08020988
 801e93c:	08020a14 	.word	0x08020a14

0801e940 <__mcmp>:
 801e940:	b530      	push	{r4, r5, lr}
 801e942:	6902      	ldr	r2, [r0, #16]
 801e944:	690c      	ldr	r4, [r1, #16]
 801e946:	1b12      	subs	r2, r2, r4
 801e948:	d10e      	bne.n	801e968 <__mcmp+0x28>
 801e94a:	f100 0314 	add.w	r3, r0, #20
 801e94e:	3114      	adds	r1, #20
 801e950:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e954:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e958:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e95c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e960:	42a5      	cmp	r5, r4
 801e962:	d003      	beq.n	801e96c <__mcmp+0x2c>
 801e964:	d305      	bcc.n	801e972 <__mcmp+0x32>
 801e966:	2201      	movs	r2, #1
 801e968:	4610      	mov	r0, r2
 801e96a:	bd30      	pop	{r4, r5, pc}
 801e96c:	4283      	cmp	r3, r0
 801e96e:	d3f3      	bcc.n	801e958 <__mcmp+0x18>
 801e970:	e7fa      	b.n	801e968 <__mcmp+0x28>
 801e972:	f04f 32ff 	mov.w	r2, #4294967295
 801e976:	e7f7      	b.n	801e968 <__mcmp+0x28>

0801e978 <__mdiff>:
 801e978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e97c:	460c      	mov	r4, r1
 801e97e:	4606      	mov	r6, r0
 801e980:	4611      	mov	r1, r2
 801e982:	4620      	mov	r0, r4
 801e984:	4690      	mov	r8, r2
 801e986:	f7ff ffdb 	bl	801e940 <__mcmp>
 801e98a:	1e05      	subs	r5, r0, #0
 801e98c:	d110      	bne.n	801e9b0 <__mdiff+0x38>
 801e98e:	4629      	mov	r1, r5
 801e990:	4630      	mov	r0, r6
 801e992:	f7ff fd09 	bl	801e3a8 <_Balloc>
 801e996:	b930      	cbnz	r0, 801e9a6 <__mdiff+0x2e>
 801e998:	4b3a      	ldr	r3, [pc, #232]	; (801ea84 <__mdiff+0x10c>)
 801e99a:	4602      	mov	r2, r0
 801e99c:	f240 2132 	movw	r1, #562	; 0x232
 801e9a0:	4839      	ldr	r0, [pc, #228]	; (801ea88 <__mdiff+0x110>)
 801e9a2:	f000 fdd3 	bl	801f54c <__assert_func>
 801e9a6:	2301      	movs	r3, #1
 801e9a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e9ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9b0:	bfa4      	itt	ge
 801e9b2:	4643      	movge	r3, r8
 801e9b4:	46a0      	movge	r8, r4
 801e9b6:	4630      	mov	r0, r6
 801e9b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e9bc:	bfa6      	itte	ge
 801e9be:	461c      	movge	r4, r3
 801e9c0:	2500      	movge	r5, #0
 801e9c2:	2501      	movlt	r5, #1
 801e9c4:	f7ff fcf0 	bl	801e3a8 <_Balloc>
 801e9c8:	b920      	cbnz	r0, 801e9d4 <__mdiff+0x5c>
 801e9ca:	4b2e      	ldr	r3, [pc, #184]	; (801ea84 <__mdiff+0x10c>)
 801e9cc:	4602      	mov	r2, r0
 801e9ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e9d2:	e7e5      	b.n	801e9a0 <__mdiff+0x28>
 801e9d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e9d8:	6926      	ldr	r6, [r4, #16]
 801e9da:	60c5      	str	r5, [r0, #12]
 801e9dc:	f104 0914 	add.w	r9, r4, #20
 801e9e0:	f108 0514 	add.w	r5, r8, #20
 801e9e4:	f100 0e14 	add.w	lr, r0, #20
 801e9e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e9ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e9f0:	f108 0210 	add.w	r2, r8, #16
 801e9f4:	46f2      	mov	sl, lr
 801e9f6:	2100      	movs	r1, #0
 801e9f8:	f859 3b04 	ldr.w	r3, [r9], #4
 801e9fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ea00:	fa1f f883 	uxth.w	r8, r3
 801ea04:	fa11 f18b 	uxtah	r1, r1, fp
 801ea08:	0c1b      	lsrs	r3, r3, #16
 801ea0a:	eba1 0808 	sub.w	r8, r1, r8
 801ea0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ea12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ea16:	fa1f f888 	uxth.w	r8, r8
 801ea1a:	1419      	asrs	r1, r3, #16
 801ea1c:	454e      	cmp	r6, r9
 801ea1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ea22:	f84a 3b04 	str.w	r3, [sl], #4
 801ea26:	d8e7      	bhi.n	801e9f8 <__mdiff+0x80>
 801ea28:	1b33      	subs	r3, r6, r4
 801ea2a:	3b15      	subs	r3, #21
 801ea2c:	f023 0303 	bic.w	r3, r3, #3
 801ea30:	3304      	adds	r3, #4
 801ea32:	3415      	adds	r4, #21
 801ea34:	42a6      	cmp	r6, r4
 801ea36:	bf38      	it	cc
 801ea38:	2304      	movcc	r3, #4
 801ea3a:	441d      	add	r5, r3
 801ea3c:	4473      	add	r3, lr
 801ea3e:	469e      	mov	lr, r3
 801ea40:	462e      	mov	r6, r5
 801ea42:	4566      	cmp	r6, ip
 801ea44:	d30e      	bcc.n	801ea64 <__mdiff+0xec>
 801ea46:	f10c 0203 	add.w	r2, ip, #3
 801ea4a:	1b52      	subs	r2, r2, r5
 801ea4c:	f022 0203 	bic.w	r2, r2, #3
 801ea50:	3d03      	subs	r5, #3
 801ea52:	45ac      	cmp	ip, r5
 801ea54:	bf38      	it	cc
 801ea56:	2200      	movcc	r2, #0
 801ea58:	441a      	add	r2, r3
 801ea5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ea5e:	b17b      	cbz	r3, 801ea80 <__mdiff+0x108>
 801ea60:	6107      	str	r7, [r0, #16]
 801ea62:	e7a3      	b.n	801e9ac <__mdiff+0x34>
 801ea64:	f856 8b04 	ldr.w	r8, [r6], #4
 801ea68:	fa11 f288 	uxtah	r2, r1, r8
 801ea6c:	1414      	asrs	r4, r2, #16
 801ea6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ea72:	b292      	uxth	r2, r2
 801ea74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ea78:	f84e 2b04 	str.w	r2, [lr], #4
 801ea7c:	1421      	asrs	r1, r4, #16
 801ea7e:	e7e0      	b.n	801ea42 <__mdiff+0xca>
 801ea80:	3f01      	subs	r7, #1
 801ea82:	e7ea      	b.n	801ea5a <__mdiff+0xe2>
 801ea84:	08020988 	.word	0x08020988
 801ea88:	08020a14 	.word	0x08020a14

0801ea8c <__ulp>:
 801ea8c:	b082      	sub	sp, #8
 801ea8e:	ed8d 0b00 	vstr	d0, [sp]
 801ea92:	9b01      	ldr	r3, [sp, #4]
 801ea94:	4912      	ldr	r1, [pc, #72]	; (801eae0 <__ulp+0x54>)
 801ea96:	4019      	ands	r1, r3
 801ea98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ea9c:	2900      	cmp	r1, #0
 801ea9e:	dd05      	ble.n	801eaac <__ulp+0x20>
 801eaa0:	2200      	movs	r2, #0
 801eaa2:	460b      	mov	r3, r1
 801eaa4:	ec43 2b10 	vmov	d0, r2, r3
 801eaa8:	b002      	add	sp, #8
 801eaaa:	4770      	bx	lr
 801eaac:	4249      	negs	r1, r1
 801eaae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801eab2:	ea4f 5021 	mov.w	r0, r1, asr #20
 801eab6:	f04f 0200 	mov.w	r2, #0
 801eaba:	f04f 0300 	mov.w	r3, #0
 801eabe:	da04      	bge.n	801eaca <__ulp+0x3e>
 801eac0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801eac4:	fa41 f300 	asr.w	r3, r1, r0
 801eac8:	e7ec      	b.n	801eaa4 <__ulp+0x18>
 801eaca:	f1a0 0114 	sub.w	r1, r0, #20
 801eace:	291e      	cmp	r1, #30
 801ead0:	bfda      	itte	le
 801ead2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ead6:	fa20 f101 	lsrle.w	r1, r0, r1
 801eada:	2101      	movgt	r1, #1
 801eadc:	460a      	mov	r2, r1
 801eade:	e7e1      	b.n	801eaa4 <__ulp+0x18>
 801eae0:	7ff00000 	.word	0x7ff00000

0801eae4 <__b2d>:
 801eae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eae6:	6905      	ldr	r5, [r0, #16]
 801eae8:	f100 0714 	add.w	r7, r0, #20
 801eaec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801eaf0:	1f2e      	subs	r6, r5, #4
 801eaf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801eaf6:	4620      	mov	r0, r4
 801eaf8:	f7ff fd48 	bl	801e58c <__hi0bits>
 801eafc:	f1c0 0320 	rsb	r3, r0, #32
 801eb00:	280a      	cmp	r0, #10
 801eb02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801eb80 <__b2d+0x9c>
 801eb06:	600b      	str	r3, [r1, #0]
 801eb08:	dc14      	bgt.n	801eb34 <__b2d+0x50>
 801eb0a:	f1c0 0e0b 	rsb	lr, r0, #11
 801eb0e:	fa24 f10e 	lsr.w	r1, r4, lr
 801eb12:	42b7      	cmp	r7, r6
 801eb14:	ea41 030c 	orr.w	r3, r1, ip
 801eb18:	bf34      	ite	cc
 801eb1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801eb1e:	2100      	movcs	r1, #0
 801eb20:	3015      	adds	r0, #21
 801eb22:	fa04 f000 	lsl.w	r0, r4, r0
 801eb26:	fa21 f10e 	lsr.w	r1, r1, lr
 801eb2a:	ea40 0201 	orr.w	r2, r0, r1
 801eb2e:	ec43 2b10 	vmov	d0, r2, r3
 801eb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb34:	42b7      	cmp	r7, r6
 801eb36:	bf3a      	itte	cc
 801eb38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801eb3c:	f1a5 0608 	subcc.w	r6, r5, #8
 801eb40:	2100      	movcs	r1, #0
 801eb42:	380b      	subs	r0, #11
 801eb44:	d017      	beq.n	801eb76 <__b2d+0x92>
 801eb46:	f1c0 0c20 	rsb	ip, r0, #32
 801eb4a:	fa04 f500 	lsl.w	r5, r4, r0
 801eb4e:	42be      	cmp	r6, r7
 801eb50:	fa21 f40c 	lsr.w	r4, r1, ip
 801eb54:	ea45 0504 	orr.w	r5, r5, r4
 801eb58:	bf8c      	ite	hi
 801eb5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801eb5e:	2400      	movls	r4, #0
 801eb60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801eb64:	fa01 f000 	lsl.w	r0, r1, r0
 801eb68:	fa24 f40c 	lsr.w	r4, r4, ip
 801eb6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eb70:	ea40 0204 	orr.w	r2, r0, r4
 801eb74:	e7db      	b.n	801eb2e <__b2d+0x4a>
 801eb76:	ea44 030c 	orr.w	r3, r4, ip
 801eb7a:	460a      	mov	r2, r1
 801eb7c:	e7d7      	b.n	801eb2e <__b2d+0x4a>
 801eb7e:	bf00      	nop
 801eb80:	3ff00000 	.word	0x3ff00000

0801eb84 <__d2b>:
 801eb84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eb88:	4689      	mov	r9, r1
 801eb8a:	2101      	movs	r1, #1
 801eb8c:	ec57 6b10 	vmov	r6, r7, d0
 801eb90:	4690      	mov	r8, r2
 801eb92:	f7ff fc09 	bl	801e3a8 <_Balloc>
 801eb96:	4604      	mov	r4, r0
 801eb98:	b930      	cbnz	r0, 801eba8 <__d2b+0x24>
 801eb9a:	4602      	mov	r2, r0
 801eb9c:	4b25      	ldr	r3, [pc, #148]	; (801ec34 <__d2b+0xb0>)
 801eb9e:	4826      	ldr	r0, [pc, #152]	; (801ec38 <__d2b+0xb4>)
 801eba0:	f240 310a 	movw	r1, #778	; 0x30a
 801eba4:	f000 fcd2 	bl	801f54c <__assert_func>
 801eba8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801ebac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ebb0:	bb35      	cbnz	r5, 801ec00 <__d2b+0x7c>
 801ebb2:	2e00      	cmp	r6, #0
 801ebb4:	9301      	str	r3, [sp, #4]
 801ebb6:	d028      	beq.n	801ec0a <__d2b+0x86>
 801ebb8:	4668      	mov	r0, sp
 801ebba:	9600      	str	r6, [sp, #0]
 801ebbc:	f7ff fd06 	bl	801e5cc <__lo0bits>
 801ebc0:	9900      	ldr	r1, [sp, #0]
 801ebc2:	b300      	cbz	r0, 801ec06 <__d2b+0x82>
 801ebc4:	9a01      	ldr	r2, [sp, #4]
 801ebc6:	f1c0 0320 	rsb	r3, r0, #32
 801ebca:	fa02 f303 	lsl.w	r3, r2, r3
 801ebce:	430b      	orrs	r3, r1
 801ebd0:	40c2      	lsrs	r2, r0
 801ebd2:	6163      	str	r3, [r4, #20]
 801ebd4:	9201      	str	r2, [sp, #4]
 801ebd6:	9b01      	ldr	r3, [sp, #4]
 801ebd8:	61a3      	str	r3, [r4, #24]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	bf14      	ite	ne
 801ebde:	2202      	movne	r2, #2
 801ebe0:	2201      	moveq	r2, #1
 801ebe2:	6122      	str	r2, [r4, #16]
 801ebe4:	b1d5      	cbz	r5, 801ec1c <__d2b+0x98>
 801ebe6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ebea:	4405      	add	r5, r0
 801ebec:	f8c9 5000 	str.w	r5, [r9]
 801ebf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ebf4:	f8c8 0000 	str.w	r0, [r8]
 801ebf8:	4620      	mov	r0, r4
 801ebfa:	b003      	add	sp, #12
 801ebfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ec04:	e7d5      	b.n	801ebb2 <__d2b+0x2e>
 801ec06:	6161      	str	r1, [r4, #20]
 801ec08:	e7e5      	b.n	801ebd6 <__d2b+0x52>
 801ec0a:	a801      	add	r0, sp, #4
 801ec0c:	f7ff fcde 	bl	801e5cc <__lo0bits>
 801ec10:	9b01      	ldr	r3, [sp, #4]
 801ec12:	6163      	str	r3, [r4, #20]
 801ec14:	2201      	movs	r2, #1
 801ec16:	6122      	str	r2, [r4, #16]
 801ec18:	3020      	adds	r0, #32
 801ec1a:	e7e3      	b.n	801ebe4 <__d2b+0x60>
 801ec1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ec20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ec24:	f8c9 0000 	str.w	r0, [r9]
 801ec28:	6918      	ldr	r0, [r3, #16]
 801ec2a:	f7ff fcaf 	bl	801e58c <__hi0bits>
 801ec2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ec32:	e7df      	b.n	801ebf4 <__d2b+0x70>
 801ec34:	08020988 	.word	0x08020988
 801ec38:	08020a14 	.word	0x08020a14

0801ec3c <__ratio>:
 801ec3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec40:	4688      	mov	r8, r1
 801ec42:	4669      	mov	r1, sp
 801ec44:	4681      	mov	r9, r0
 801ec46:	f7ff ff4d 	bl	801eae4 <__b2d>
 801ec4a:	a901      	add	r1, sp, #4
 801ec4c:	4640      	mov	r0, r8
 801ec4e:	ec55 4b10 	vmov	r4, r5, d0
 801ec52:	ee10 aa10 	vmov	sl, s0
 801ec56:	f7ff ff45 	bl	801eae4 <__b2d>
 801ec5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ec5e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ec62:	1a59      	subs	r1, r3, r1
 801ec64:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec68:	1ad3      	subs	r3, r2, r3
 801ec6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801ec6e:	ec57 6b10 	vmov	r6, r7, d0
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	bfd6      	itet	le
 801ec76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ec7a:	462a      	movgt	r2, r5
 801ec7c:	463a      	movle	r2, r7
 801ec7e:	46ab      	mov	fp, r5
 801ec80:	bfd6      	itet	le
 801ec82:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801ec86:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801ec8a:	ee00 3a90 	vmovle	s1, r3
 801ec8e:	ec4b ab17 	vmov	d7, sl, fp
 801ec92:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801ec96:	b003      	add	sp, #12
 801ec98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec9c <__copybits>:
 801ec9c:	3901      	subs	r1, #1
 801ec9e:	b570      	push	{r4, r5, r6, lr}
 801eca0:	1149      	asrs	r1, r1, #5
 801eca2:	6914      	ldr	r4, [r2, #16]
 801eca4:	3101      	adds	r1, #1
 801eca6:	f102 0314 	add.w	r3, r2, #20
 801ecaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ecae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ecb2:	1f05      	subs	r5, r0, #4
 801ecb4:	42a3      	cmp	r3, r4
 801ecb6:	d30c      	bcc.n	801ecd2 <__copybits+0x36>
 801ecb8:	1aa3      	subs	r3, r4, r2
 801ecba:	3b11      	subs	r3, #17
 801ecbc:	f023 0303 	bic.w	r3, r3, #3
 801ecc0:	3211      	adds	r2, #17
 801ecc2:	42a2      	cmp	r2, r4
 801ecc4:	bf88      	it	hi
 801ecc6:	2300      	movhi	r3, #0
 801ecc8:	4418      	add	r0, r3
 801ecca:	2300      	movs	r3, #0
 801eccc:	4288      	cmp	r0, r1
 801ecce:	d305      	bcc.n	801ecdc <__copybits+0x40>
 801ecd0:	bd70      	pop	{r4, r5, r6, pc}
 801ecd2:	f853 6b04 	ldr.w	r6, [r3], #4
 801ecd6:	f845 6f04 	str.w	r6, [r5, #4]!
 801ecda:	e7eb      	b.n	801ecb4 <__copybits+0x18>
 801ecdc:	f840 3b04 	str.w	r3, [r0], #4
 801ece0:	e7f4      	b.n	801eccc <__copybits+0x30>

0801ece2 <__any_on>:
 801ece2:	f100 0214 	add.w	r2, r0, #20
 801ece6:	6900      	ldr	r0, [r0, #16]
 801ece8:	114b      	asrs	r3, r1, #5
 801ecea:	4298      	cmp	r0, r3
 801ecec:	b510      	push	{r4, lr}
 801ecee:	db11      	blt.n	801ed14 <__any_on+0x32>
 801ecf0:	dd0a      	ble.n	801ed08 <__any_on+0x26>
 801ecf2:	f011 011f 	ands.w	r1, r1, #31
 801ecf6:	d007      	beq.n	801ed08 <__any_on+0x26>
 801ecf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ecfc:	fa24 f001 	lsr.w	r0, r4, r1
 801ed00:	fa00 f101 	lsl.w	r1, r0, r1
 801ed04:	428c      	cmp	r4, r1
 801ed06:	d10b      	bne.n	801ed20 <__any_on+0x3e>
 801ed08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ed0c:	4293      	cmp	r3, r2
 801ed0e:	d803      	bhi.n	801ed18 <__any_on+0x36>
 801ed10:	2000      	movs	r0, #0
 801ed12:	bd10      	pop	{r4, pc}
 801ed14:	4603      	mov	r3, r0
 801ed16:	e7f7      	b.n	801ed08 <__any_on+0x26>
 801ed18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ed1c:	2900      	cmp	r1, #0
 801ed1e:	d0f5      	beq.n	801ed0c <__any_on+0x2a>
 801ed20:	2001      	movs	r0, #1
 801ed22:	e7f6      	b.n	801ed12 <__any_on+0x30>

0801ed24 <_calloc_r>:
 801ed24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed26:	fba1 2402 	umull	r2, r4, r1, r2
 801ed2a:	b94c      	cbnz	r4, 801ed40 <_calloc_r+0x1c>
 801ed2c:	4611      	mov	r1, r2
 801ed2e:	9201      	str	r2, [sp, #4]
 801ed30:	f7fc fa98 	bl	801b264 <_malloc_r>
 801ed34:	9a01      	ldr	r2, [sp, #4]
 801ed36:	4605      	mov	r5, r0
 801ed38:	b930      	cbnz	r0, 801ed48 <_calloc_r+0x24>
 801ed3a:	4628      	mov	r0, r5
 801ed3c:	b003      	add	sp, #12
 801ed3e:	bd30      	pop	{r4, r5, pc}
 801ed40:	220c      	movs	r2, #12
 801ed42:	6002      	str	r2, [r0, #0]
 801ed44:	2500      	movs	r5, #0
 801ed46:	e7f8      	b.n	801ed3a <_calloc_r+0x16>
 801ed48:	4621      	mov	r1, r4
 801ed4a:	f7fc fa62 	bl	801b212 <memset>
 801ed4e:	e7f4      	b.n	801ed3a <_calloc_r+0x16>

0801ed50 <_free_r>:
 801ed50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed52:	2900      	cmp	r1, #0
 801ed54:	d044      	beq.n	801ede0 <_free_r+0x90>
 801ed56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed5a:	9001      	str	r0, [sp, #4]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	f1a1 0404 	sub.w	r4, r1, #4
 801ed62:	bfb8      	it	lt
 801ed64:	18e4      	addlt	r4, r4, r3
 801ed66:	f7ff fb13 	bl	801e390 <__malloc_lock>
 801ed6a:	4a1e      	ldr	r2, [pc, #120]	; (801ede4 <_free_r+0x94>)
 801ed6c:	9801      	ldr	r0, [sp, #4]
 801ed6e:	6813      	ldr	r3, [r2, #0]
 801ed70:	b933      	cbnz	r3, 801ed80 <_free_r+0x30>
 801ed72:	6063      	str	r3, [r4, #4]
 801ed74:	6014      	str	r4, [r2, #0]
 801ed76:	b003      	add	sp, #12
 801ed78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed7c:	f7ff bb0e 	b.w	801e39c <__malloc_unlock>
 801ed80:	42a3      	cmp	r3, r4
 801ed82:	d908      	bls.n	801ed96 <_free_r+0x46>
 801ed84:	6825      	ldr	r5, [r4, #0]
 801ed86:	1961      	adds	r1, r4, r5
 801ed88:	428b      	cmp	r3, r1
 801ed8a:	bf01      	itttt	eq
 801ed8c:	6819      	ldreq	r1, [r3, #0]
 801ed8e:	685b      	ldreq	r3, [r3, #4]
 801ed90:	1949      	addeq	r1, r1, r5
 801ed92:	6021      	streq	r1, [r4, #0]
 801ed94:	e7ed      	b.n	801ed72 <_free_r+0x22>
 801ed96:	461a      	mov	r2, r3
 801ed98:	685b      	ldr	r3, [r3, #4]
 801ed9a:	b10b      	cbz	r3, 801eda0 <_free_r+0x50>
 801ed9c:	42a3      	cmp	r3, r4
 801ed9e:	d9fa      	bls.n	801ed96 <_free_r+0x46>
 801eda0:	6811      	ldr	r1, [r2, #0]
 801eda2:	1855      	adds	r5, r2, r1
 801eda4:	42a5      	cmp	r5, r4
 801eda6:	d10b      	bne.n	801edc0 <_free_r+0x70>
 801eda8:	6824      	ldr	r4, [r4, #0]
 801edaa:	4421      	add	r1, r4
 801edac:	1854      	adds	r4, r2, r1
 801edae:	42a3      	cmp	r3, r4
 801edb0:	6011      	str	r1, [r2, #0]
 801edb2:	d1e0      	bne.n	801ed76 <_free_r+0x26>
 801edb4:	681c      	ldr	r4, [r3, #0]
 801edb6:	685b      	ldr	r3, [r3, #4]
 801edb8:	6053      	str	r3, [r2, #4]
 801edba:	4421      	add	r1, r4
 801edbc:	6011      	str	r1, [r2, #0]
 801edbe:	e7da      	b.n	801ed76 <_free_r+0x26>
 801edc0:	d902      	bls.n	801edc8 <_free_r+0x78>
 801edc2:	230c      	movs	r3, #12
 801edc4:	6003      	str	r3, [r0, #0]
 801edc6:	e7d6      	b.n	801ed76 <_free_r+0x26>
 801edc8:	6825      	ldr	r5, [r4, #0]
 801edca:	1961      	adds	r1, r4, r5
 801edcc:	428b      	cmp	r3, r1
 801edce:	bf04      	itt	eq
 801edd0:	6819      	ldreq	r1, [r3, #0]
 801edd2:	685b      	ldreq	r3, [r3, #4]
 801edd4:	6063      	str	r3, [r4, #4]
 801edd6:	bf04      	itt	eq
 801edd8:	1949      	addeq	r1, r1, r5
 801edda:	6021      	streq	r1, [r4, #0]
 801eddc:	6054      	str	r4, [r2, #4]
 801edde:	e7ca      	b.n	801ed76 <_free_r+0x26>
 801ede0:	b003      	add	sp, #12
 801ede2:	bd30      	pop	{r4, r5, pc}
 801ede4:	20040034 	.word	0x20040034

0801ede8 <__ssputs_r>:
 801ede8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801edec:	688e      	ldr	r6, [r1, #8]
 801edee:	429e      	cmp	r6, r3
 801edf0:	4682      	mov	sl, r0
 801edf2:	460c      	mov	r4, r1
 801edf4:	4690      	mov	r8, r2
 801edf6:	461f      	mov	r7, r3
 801edf8:	d838      	bhi.n	801ee6c <__ssputs_r+0x84>
 801edfa:	898a      	ldrh	r2, [r1, #12]
 801edfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ee00:	d032      	beq.n	801ee68 <__ssputs_r+0x80>
 801ee02:	6825      	ldr	r5, [r4, #0]
 801ee04:	6909      	ldr	r1, [r1, #16]
 801ee06:	eba5 0901 	sub.w	r9, r5, r1
 801ee0a:	6965      	ldr	r5, [r4, #20]
 801ee0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ee14:	3301      	adds	r3, #1
 801ee16:	444b      	add	r3, r9
 801ee18:	106d      	asrs	r5, r5, #1
 801ee1a:	429d      	cmp	r5, r3
 801ee1c:	bf38      	it	cc
 801ee1e:	461d      	movcc	r5, r3
 801ee20:	0553      	lsls	r3, r2, #21
 801ee22:	d531      	bpl.n	801ee88 <__ssputs_r+0xa0>
 801ee24:	4629      	mov	r1, r5
 801ee26:	f7fc fa1d 	bl	801b264 <_malloc_r>
 801ee2a:	4606      	mov	r6, r0
 801ee2c:	b950      	cbnz	r0, 801ee44 <__ssputs_r+0x5c>
 801ee2e:	230c      	movs	r3, #12
 801ee30:	f8ca 3000 	str.w	r3, [sl]
 801ee34:	89a3      	ldrh	r3, [r4, #12]
 801ee36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee3a:	81a3      	strh	r3, [r4, #12]
 801ee3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ee40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee44:	6921      	ldr	r1, [r4, #16]
 801ee46:	464a      	mov	r2, r9
 801ee48:	f7fc f9d5 	bl	801b1f6 <memcpy>
 801ee4c:	89a3      	ldrh	r3, [r4, #12]
 801ee4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ee52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee56:	81a3      	strh	r3, [r4, #12]
 801ee58:	6126      	str	r6, [r4, #16]
 801ee5a:	6165      	str	r5, [r4, #20]
 801ee5c:	444e      	add	r6, r9
 801ee5e:	eba5 0509 	sub.w	r5, r5, r9
 801ee62:	6026      	str	r6, [r4, #0]
 801ee64:	60a5      	str	r5, [r4, #8]
 801ee66:	463e      	mov	r6, r7
 801ee68:	42be      	cmp	r6, r7
 801ee6a:	d900      	bls.n	801ee6e <__ssputs_r+0x86>
 801ee6c:	463e      	mov	r6, r7
 801ee6e:	6820      	ldr	r0, [r4, #0]
 801ee70:	4632      	mov	r2, r6
 801ee72:	4641      	mov	r1, r8
 801ee74:	f000 fc00 	bl	801f678 <memmove>
 801ee78:	68a3      	ldr	r3, [r4, #8]
 801ee7a:	1b9b      	subs	r3, r3, r6
 801ee7c:	60a3      	str	r3, [r4, #8]
 801ee7e:	6823      	ldr	r3, [r4, #0]
 801ee80:	4433      	add	r3, r6
 801ee82:	6023      	str	r3, [r4, #0]
 801ee84:	2000      	movs	r0, #0
 801ee86:	e7db      	b.n	801ee40 <__ssputs_r+0x58>
 801ee88:	462a      	mov	r2, r5
 801ee8a:	f000 fc0f 	bl	801f6ac <_realloc_r>
 801ee8e:	4606      	mov	r6, r0
 801ee90:	2800      	cmp	r0, #0
 801ee92:	d1e1      	bne.n	801ee58 <__ssputs_r+0x70>
 801ee94:	6921      	ldr	r1, [r4, #16]
 801ee96:	4650      	mov	r0, sl
 801ee98:	f7ff ff5a 	bl	801ed50 <_free_r>
 801ee9c:	e7c7      	b.n	801ee2e <__ssputs_r+0x46>
	...

0801eea0 <_svfiprintf_r>:
 801eea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eea4:	4698      	mov	r8, r3
 801eea6:	898b      	ldrh	r3, [r1, #12]
 801eea8:	061b      	lsls	r3, r3, #24
 801eeaa:	b09d      	sub	sp, #116	; 0x74
 801eeac:	4607      	mov	r7, r0
 801eeae:	460d      	mov	r5, r1
 801eeb0:	4614      	mov	r4, r2
 801eeb2:	d50e      	bpl.n	801eed2 <_svfiprintf_r+0x32>
 801eeb4:	690b      	ldr	r3, [r1, #16]
 801eeb6:	b963      	cbnz	r3, 801eed2 <_svfiprintf_r+0x32>
 801eeb8:	2140      	movs	r1, #64	; 0x40
 801eeba:	f7fc f9d3 	bl	801b264 <_malloc_r>
 801eebe:	6028      	str	r0, [r5, #0]
 801eec0:	6128      	str	r0, [r5, #16]
 801eec2:	b920      	cbnz	r0, 801eece <_svfiprintf_r+0x2e>
 801eec4:	230c      	movs	r3, #12
 801eec6:	603b      	str	r3, [r7, #0]
 801eec8:	f04f 30ff 	mov.w	r0, #4294967295
 801eecc:	e0d1      	b.n	801f072 <_svfiprintf_r+0x1d2>
 801eece:	2340      	movs	r3, #64	; 0x40
 801eed0:	616b      	str	r3, [r5, #20]
 801eed2:	2300      	movs	r3, #0
 801eed4:	9309      	str	r3, [sp, #36]	; 0x24
 801eed6:	2320      	movs	r3, #32
 801eed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eedc:	f8cd 800c 	str.w	r8, [sp, #12]
 801eee0:	2330      	movs	r3, #48	; 0x30
 801eee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f08c <_svfiprintf_r+0x1ec>
 801eee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eeea:	f04f 0901 	mov.w	r9, #1
 801eeee:	4623      	mov	r3, r4
 801eef0:	469a      	mov	sl, r3
 801eef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eef6:	b10a      	cbz	r2, 801eefc <_svfiprintf_r+0x5c>
 801eef8:	2a25      	cmp	r2, #37	; 0x25
 801eefa:	d1f9      	bne.n	801eef0 <_svfiprintf_r+0x50>
 801eefc:	ebba 0b04 	subs.w	fp, sl, r4
 801ef00:	d00b      	beq.n	801ef1a <_svfiprintf_r+0x7a>
 801ef02:	465b      	mov	r3, fp
 801ef04:	4622      	mov	r2, r4
 801ef06:	4629      	mov	r1, r5
 801ef08:	4638      	mov	r0, r7
 801ef0a:	f7ff ff6d 	bl	801ede8 <__ssputs_r>
 801ef0e:	3001      	adds	r0, #1
 801ef10:	f000 80aa 	beq.w	801f068 <_svfiprintf_r+0x1c8>
 801ef14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef16:	445a      	add	r2, fp
 801ef18:	9209      	str	r2, [sp, #36]	; 0x24
 801ef1a:	f89a 3000 	ldrb.w	r3, [sl]
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	f000 80a2 	beq.w	801f068 <_svfiprintf_r+0x1c8>
 801ef24:	2300      	movs	r3, #0
 801ef26:	f04f 32ff 	mov.w	r2, #4294967295
 801ef2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef2e:	f10a 0a01 	add.w	sl, sl, #1
 801ef32:	9304      	str	r3, [sp, #16]
 801ef34:	9307      	str	r3, [sp, #28]
 801ef36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ef3a:	931a      	str	r3, [sp, #104]	; 0x68
 801ef3c:	4654      	mov	r4, sl
 801ef3e:	2205      	movs	r2, #5
 801ef40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef44:	4851      	ldr	r0, [pc, #324]	; (801f08c <_svfiprintf_r+0x1ec>)
 801ef46:	f7e1 f983 	bl	8000250 <memchr>
 801ef4a:	9a04      	ldr	r2, [sp, #16]
 801ef4c:	b9d8      	cbnz	r0, 801ef86 <_svfiprintf_r+0xe6>
 801ef4e:	06d0      	lsls	r0, r2, #27
 801ef50:	bf44      	itt	mi
 801ef52:	2320      	movmi	r3, #32
 801ef54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef58:	0711      	lsls	r1, r2, #28
 801ef5a:	bf44      	itt	mi
 801ef5c:	232b      	movmi	r3, #43	; 0x2b
 801ef5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef62:	f89a 3000 	ldrb.w	r3, [sl]
 801ef66:	2b2a      	cmp	r3, #42	; 0x2a
 801ef68:	d015      	beq.n	801ef96 <_svfiprintf_r+0xf6>
 801ef6a:	9a07      	ldr	r2, [sp, #28]
 801ef6c:	4654      	mov	r4, sl
 801ef6e:	2000      	movs	r0, #0
 801ef70:	f04f 0c0a 	mov.w	ip, #10
 801ef74:	4621      	mov	r1, r4
 801ef76:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef7a:	3b30      	subs	r3, #48	; 0x30
 801ef7c:	2b09      	cmp	r3, #9
 801ef7e:	d94e      	bls.n	801f01e <_svfiprintf_r+0x17e>
 801ef80:	b1b0      	cbz	r0, 801efb0 <_svfiprintf_r+0x110>
 801ef82:	9207      	str	r2, [sp, #28]
 801ef84:	e014      	b.n	801efb0 <_svfiprintf_r+0x110>
 801ef86:	eba0 0308 	sub.w	r3, r0, r8
 801ef8a:	fa09 f303 	lsl.w	r3, r9, r3
 801ef8e:	4313      	orrs	r3, r2
 801ef90:	9304      	str	r3, [sp, #16]
 801ef92:	46a2      	mov	sl, r4
 801ef94:	e7d2      	b.n	801ef3c <_svfiprintf_r+0x9c>
 801ef96:	9b03      	ldr	r3, [sp, #12]
 801ef98:	1d19      	adds	r1, r3, #4
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	9103      	str	r1, [sp, #12]
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	bfbb      	ittet	lt
 801efa2:	425b      	neglt	r3, r3
 801efa4:	f042 0202 	orrlt.w	r2, r2, #2
 801efa8:	9307      	strge	r3, [sp, #28]
 801efaa:	9307      	strlt	r3, [sp, #28]
 801efac:	bfb8      	it	lt
 801efae:	9204      	strlt	r2, [sp, #16]
 801efb0:	7823      	ldrb	r3, [r4, #0]
 801efb2:	2b2e      	cmp	r3, #46	; 0x2e
 801efb4:	d10c      	bne.n	801efd0 <_svfiprintf_r+0x130>
 801efb6:	7863      	ldrb	r3, [r4, #1]
 801efb8:	2b2a      	cmp	r3, #42	; 0x2a
 801efba:	d135      	bne.n	801f028 <_svfiprintf_r+0x188>
 801efbc:	9b03      	ldr	r3, [sp, #12]
 801efbe:	1d1a      	adds	r2, r3, #4
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	9203      	str	r2, [sp, #12]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	bfb8      	it	lt
 801efc8:	f04f 33ff 	movlt.w	r3, #4294967295
 801efcc:	3402      	adds	r4, #2
 801efce:	9305      	str	r3, [sp, #20]
 801efd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f09c <_svfiprintf_r+0x1fc>
 801efd4:	7821      	ldrb	r1, [r4, #0]
 801efd6:	2203      	movs	r2, #3
 801efd8:	4650      	mov	r0, sl
 801efda:	f7e1 f939 	bl	8000250 <memchr>
 801efde:	b140      	cbz	r0, 801eff2 <_svfiprintf_r+0x152>
 801efe0:	2340      	movs	r3, #64	; 0x40
 801efe2:	eba0 000a 	sub.w	r0, r0, sl
 801efe6:	fa03 f000 	lsl.w	r0, r3, r0
 801efea:	9b04      	ldr	r3, [sp, #16]
 801efec:	4303      	orrs	r3, r0
 801efee:	3401      	adds	r4, #1
 801eff0:	9304      	str	r3, [sp, #16]
 801eff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eff6:	4826      	ldr	r0, [pc, #152]	; (801f090 <_svfiprintf_r+0x1f0>)
 801eff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801effc:	2206      	movs	r2, #6
 801effe:	f7e1 f927 	bl	8000250 <memchr>
 801f002:	2800      	cmp	r0, #0
 801f004:	d038      	beq.n	801f078 <_svfiprintf_r+0x1d8>
 801f006:	4b23      	ldr	r3, [pc, #140]	; (801f094 <_svfiprintf_r+0x1f4>)
 801f008:	bb1b      	cbnz	r3, 801f052 <_svfiprintf_r+0x1b2>
 801f00a:	9b03      	ldr	r3, [sp, #12]
 801f00c:	3307      	adds	r3, #7
 801f00e:	f023 0307 	bic.w	r3, r3, #7
 801f012:	3308      	adds	r3, #8
 801f014:	9303      	str	r3, [sp, #12]
 801f016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f018:	4433      	add	r3, r6
 801f01a:	9309      	str	r3, [sp, #36]	; 0x24
 801f01c:	e767      	b.n	801eeee <_svfiprintf_r+0x4e>
 801f01e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f022:	460c      	mov	r4, r1
 801f024:	2001      	movs	r0, #1
 801f026:	e7a5      	b.n	801ef74 <_svfiprintf_r+0xd4>
 801f028:	2300      	movs	r3, #0
 801f02a:	3401      	adds	r4, #1
 801f02c:	9305      	str	r3, [sp, #20]
 801f02e:	4619      	mov	r1, r3
 801f030:	f04f 0c0a 	mov.w	ip, #10
 801f034:	4620      	mov	r0, r4
 801f036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f03a:	3a30      	subs	r2, #48	; 0x30
 801f03c:	2a09      	cmp	r2, #9
 801f03e:	d903      	bls.n	801f048 <_svfiprintf_r+0x1a8>
 801f040:	2b00      	cmp	r3, #0
 801f042:	d0c5      	beq.n	801efd0 <_svfiprintf_r+0x130>
 801f044:	9105      	str	r1, [sp, #20]
 801f046:	e7c3      	b.n	801efd0 <_svfiprintf_r+0x130>
 801f048:	fb0c 2101 	mla	r1, ip, r1, r2
 801f04c:	4604      	mov	r4, r0
 801f04e:	2301      	movs	r3, #1
 801f050:	e7f0      	b.n	801f034 <_svfiprintf_r+0x194>
 801f052:	ab03      	add	r3, sp, #12
 801f054:	9300      	str	r3, [sp, #0]
 801f056:	462a      	mov	r2, r5
 801f058:	4b0f      	ldr	r3, [pc, #60]	; (801f098 <_svfiprintf_r+0x1f8>)
 801f05a:	a904      	add	r1, sp, #16
 801f05c:	4638      	mov	r0, r7
 801f05e:	f7fc fa07 	bl	801b470 <_printf_float>
 801f062:	1c42      	adds	r2, r0, #1
 801f064:	4606      	mov	r6, r0
 801f066:	d1d6      	bne.n	801f016 <_svfiprintf_r+0x176>
 801f068:	89ab      	ldrh	r3, [r5, #12]
 801f06a:	065b      	lsls	r3, r3, #25
 801f06c:	f53f af2c 	bmi.w	801eec8 <_svfiprintf_r+0x28>
 801f070:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f072:	b01d      	add	sp, #116	; 0x74
 801f074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f078:	ab03      	add	r3, sp, #12
 801f07a:	9300      	str	r3, [sp, #0]
 801f07c:	462a      	mov	r2, r5
 801f07e:	4b06      	ldr	r3, [pc, #24]	; (801f098 <_svfiprintf_r+0x1f8>)
 801f080:	a904      	add	r1, sp, #16
 801f082:	4638      	mov	r0, r7
 801f084:	f7fc fc80 	bl	801b988 <_printf_i>
 801f088:	e7eb      	b.n	801f062 <_svfiprintf_r+0x1c2>
 801f08a:	bf00      	nop
 801f08c:	08020b6c 	.word	0x08020b6c
 801f090:	08020b76 	.word	0x08020b76
 801f094:	0801b471 	.word	0x0801b471
 801f098:	0801ede9 	.word	0x0801ede9
 801f09c:	08020b72 	.word	0x08020b72

0801f0a0 <__sfputc_r>:
 801f0a0:	6893      	ldr	r3, [r2, #8]
 801f0a2:	3b01      	subs	r3, #1
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	b410      	push	{r4}
 801f0a8:	6093      	str	r3, [r2, #8]
 801f0aa:	da08      	bge.n	801f0be <__sfputc_r+0x1e>
 801f0ac:	6994      	ldr	r4, [r2, #24]
 801f0ae:	42a3      	cmp	r3, r4
 801f0b0:	db01      	blt.n	801f0b6 <__sfputc_r+0x16>
 801f0b2:	290a      	cmp	r1, #10
 801f0b4:	d103      	bne.n	801f0be <__sfputc_r+0x1e>
 801f0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0ba:	f000 b979 	b.w	801f3b0 <__swbuf_r>
 801f0be:	6813      	ldr	r3, [r2, #0]
 801f0c0:	1c58      	adds	r0, r3, #1
 801f0c2:	6010      	str	r0, [r2, #0]
 801f0c4:	7019      	strb	r1, [r3, #0]
 801f0c6:	4608      	mov	r0, r1
 801f0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0cc:	4770      	bx	lr

0801f0ce <__sfputs_r>:
 801f0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0d0:	4606      	mov	r6, r0
 801f0d2:	460f      	mov	r7, r1
 801f0d4:	4614      	mov	r4, r2
 801f0d6:	18d5      	adds	r5, r2, r3
 801f0d8:	42ac      	cmp	r4, r5
 801f0da:	d101      	bne.n	801f0e0 <__sfputs_r+0x12>
 801f0dc:	2000      	movs	r0, #0
 801f0de:	e007      	b.n	801f0f0 <__sfputs_r+0x22>
 801f0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0e4:	463a      	mov	r2, r7
 801f0e6:	4630      	mov	r0, r6
 801f0e8:	f7ff ffda 	bl	801f0a0 <__sfputc_r>
 801f0ec:	1c43      	adds	r3, r0, #1
 801f0ee:	d1f3      	bne.n	801f0d8 <__sfputs_r+0xa>
 801f0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f0f4 <_vfiprintf_r>:
 801f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0f8:	460d      	mov	r5, r1
 801f0fa:	b09d      	sub	sp, #116	; 0x74
 801f0fc:	4614      	mov	r4, r2
 801f0fe:	4698      	mov	r8, r3
 801f100:	4606      	mov	r6, r0
 801f102:	b118      	cbz	r0, 801f10c <_vfiprintf_r+0x18>
 801f104:	6983      	ldr	r3, [r0, #24]
 801f106:	b90b      	cbnz	r3, 801f10c <_vfiprintf_r+0x18>
 801f108:	f7fb ffb0 	bl	801b06c <__sinit>
 801f10c:	4b89      	ldr	r3, [pc, #548]	; (801f334 <_vfiprintf_r+0x240>)
 801f10e:	429d      	cmp	r5, r3
 801f110:	d11b      	bne.n	801f14a <_vfiprintf_r+0x56>
 801f112:	6875      	ldr	r5, [r6, #4]
 801f114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f116:	07d9      	lsls	r1, r3, #31
 801f118:	d405      	bmi.n	801f126 <_vfiprintf_r+0x32>
 801f11a:	89ab      	ldrh	r3, [r5, #12]
 801f11c:	059a      	lsls	r2, r3, #22
 801f11e:	d402      	bmi.n	801f126 <_vfiprintf_r+0x32>
 801f120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f122:	f7fc f866 	bl	801b1f2 <__retarget_lock_acquire_recursive>
 801f126:	89ab      	ldrh	r3, [r5, #12]
 801f128:	071b      	lsls	r3, r3, #28
 801f12a:	d501      	bpl.n	801f130 <_vfiprintf_r+0x3c>
 801f12c:	692b      	ldr	r3, [r5, #16]
 801f12e:	b9eb      	cbnz	r3, 801f16c <_vfiprintf_r+0x78>
 801f130:	4629      	mov	r1, r5
 801f132:	4630      	mov	r0, r6
 801f134:	f000 f99c 	bl	801f470 <__swsetup_r>
 801f138:	b1c0      	cbz	r0, 801f16c <_vfiprintf_r+0x78>
 801f13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f13c:	07dc      	lsls	r4, r3, #31
 801f13e:	d50e      	bpl.n	801f15e <_vfiprintf_r+0x6a>
 801f140:	f04f 30ff 	mov.w	r0, #4294967295
 801f144:	b01d      	add	sp, #116	; 0x74
 801f146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f14a:	4b7b      	ldr	r3, [pc, #492]	; (801f338 <_vfiprintf_r+0x244>)
 801f14c:	429d      	cmp	r5, r3
 801f14e:	d101      	bne.n	801f154 <_vfiprintf_r+0x60>
 801f150:	68b5      	ldr	r5, [r6, #8]
 801f152:	e7df      	b.n	801f114 <_vfiprintf_r+0x20>
 801f154:	4b79      	ldr	r3, [pc, #484]	; (801f33c <_vfiprintf_r+0x248>)
 801f156:	429d      	cmp	r5, r3
 801f158:	bf08      	it	eq
 801f15a:	68f5      	ldreq	r5, [r6, #12]
 801f15c:	e7da      	b.n	801f114 <_vfiprintf_r+0x20>
 801f15e:	89ab      	ldrh	r3, [r5, #12]
 801f160:	0598      	lsls	r0, r3, #22
 801f162:	d4ed      	bmi.n	801f140 <_vfiprintf_r+0x4c>
 801f164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f166:	f7fc f845 	bl	801b1f4 <__retarget_lock_release_recursive>
 801f16a:	e7e9      	b.n	801f140 <_vfiprintf_r+0x4c>
 801f16c:	2300      	movs	r3, #0
 801f16e:	9309      	str	r3, [sp, #36]	; 0x24
 801f170:	2320      	movs	r3, #32
 801f172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f176:	f8cd 800c 	str.w	r8, [sp, #12]
 801f17a:	2330      	movs	r3, #48	; 0x30
 801f17c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f340 <_vfiprintf_r+0x24c>
 801f180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f184:	f04f 0901 	mov.w	r9, #1
 801f188:	4623      	mov	r3, r4
 801f18a:	469a      	mov	sl, r3
 801f18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f190:	b10a      	cbz	r2, 801f196 <_vfiprintf_r+0xa2>
 801f192:	2a25      	cmp	r2, #37	; 0x25
 801f194:	d1f9      	bne.n	801f18a <_vfiprintf_r+0x96>
 801f196:	ebba 0b04 	subs.w	fp, sl, r4
 801f19a:	d00b      	beq.n	801f1b4 <_vfiprintf_r+0xc0>
 801f19c:	465b      	mov	r3, fp
 801f19e:	4622      	mov	r2, r4
 801f1a0:	4629      	mov	r1, r5
 801f1a2:	4630      	mov	r0, r6
 801f1a4:	f7ff ff93 	bl	801f0ce <__sfputs_r>
 801f1a8:	3001      	adds	r0, #1
 801f1aa:	f000 80aa 	beq.w	801f302 <_vfiprintf_r+0x20e>
 801f1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f1b0:	445a      	add	r2, fp
 801f1b2:	9209      	str	r2, [sp, #36]	; 0x24
 801f1b4:	f89a 3000 	ldrb.w	r3, [sl]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	f000 80a2 	beq.w	801f302 <_vfiprintf_r+0x20e>
 801f1be:	2300      	movs	r3, #0
 801f1c0:	f04f 32ff 	mov.w	r2, #4294967295
 801f1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f1c8:	f10a 0a01 	add.w	sl, sl, #1
 801f1cc:	9304      	str	r3, [sp, #16]
 801f1ce:	9307      	str	r3, [sp, #28]
 801f1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f1d4:	931a      	str	r3, [sp, #104]	; 0x68
 801f1d6:	4654      	mov	r4, sl
 801f1d8:	2205      	movs	r2, #5
 801f1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f1de:	4858      	ldr	r0, [pc, #352]	; (801f340 <_vfiprintf_r+0x24c>)
 801f1e0:	f7e1 f836 	bl	8000250 <memchr>
 801f1e4:	9a04      	ldr	r2, [sp, #16]
 801f1e6:	b9d8      	cbnz	r0, 801f220 <_vfiprintf_r+0x12c>
 801f1e8:	06d1      	lsls	r1, r2, #27
 801f1ea:	bf44      	itt	mi
 801f1ec:	2320      	movmi	r3, #32
 801f1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f1f2:	0713      	lsls	r3, r2, #28
 801f1f4:	bf44      	itt	mi
 801f1f6:	232b      	movmi	r3, #43	; 0x2b
 801f1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f1fc:	f89a 3000 	ldrb.w	r3, [sl]
 801f200:	2b2a      	cmp	r3, #42	; 0x2a
 801f202:	d015      	beq.n	801f230 <_vfiprintf_r+0x13c>
 801f204:	9a07      	ldr	r2, [sp, #28]
 801f206:	4654      	mov	r4, sl
 801f208:	2000      	movs	r0, #0
 801f20a:	f04f 0c0a 	mov.w	ip, #10
 801f20e:	4621      	mov	r1, r4
 801f210:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f214:	3b30      	subs	r3, #48	; 0x30
 801f216:	2b09      	cmp	r3, #9
 801f218:	d94e      	bls.n	801f2b8 <_vfiprintf_r+0x1c4>
 801f21a:	b1b0      	cbz	r0, 801f24a <_vfiprintf_r+0x156>
 801f21c:	9207      	str	r2, [sp, #28]
 801f21e:	e014      	b.n	801f24a <_vfiprintf_r+0x156>
 801f220:	eba0 0308 	sub.w	r3, r0, r8
 801f224:	fa09 f303 	lsl.w	r3, r9, r3
 801f228:	4313      	orrs	r3, r2
 801f22a:	9304      	str	r3, [sp, #16]
 801f22c:	46a2      	mov	sl, r4
 801f22e:	e7d2      	b.n	801f1d6 <_vfiprintf_r+0xe2>
 801f230:	9b03      	ldr	r3, [sp, #12]
 801f232:	1d19      	adds	r1, r3, #4
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	9103      	str	r1, [sp, #12]
 801f238:	2b00      	cmp	r3, #0
 801f23a:	bfbb      	ittet	lt
 801f23c:	425b      	neglt	r3, r3
 801f23e:	f042 0202 	orrlt.w	r2, r2, #2
 801f242:	9307      	strge	r3, [sp, #28]
 801f244:	9307      	strlt	r3, [sp, #28]
 801f246:	bfb8      	it	lt
 801f248:	9204      	strlt	r2, [sp, #16]
 801f24a:	7823      	ldrb	r3, [r4, #0]
 801f24c:	2b2e      	cmp	r3, #46	; 0x2e
 801f24e:	d10c      	bne.n	801f26a <_vfiprintf_r+0x176>
 801f250:	7863      	ldrb	r3, [r4, #1]
 801f252:	2b2a      	cmp	r3, #42	; 0x2a
 801f254:	d135      	bne.n	801f2c2 <_vfiprintf_r+0x1ce>
 801f256:	9b03      	ldr	r3, [sp, #12]
 801f258:	1d1a      	adds	r2, r3, #4
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	9203      	str	r2, [sp, #12]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	bfb8      	it	lt
 801f262:	f04f 33ff 	movlt.w	r3, #4294967295
 801f266:	3402      	adds	r4, #2
 801f268:	9305      	str	r3, [sp, #20]
 801f26a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f350 <_vfiprintf_r+0x25c>
 801f26e:	7821      	ldrb	r1, [r4, #0]
 801f270:	2203      	movs	r2, #3
 801f272:	4650      	mov	r0, sl
 801f274:	f7e0 ffec 	bl	8000250 <memchr>
 801f278:	b140      	cbz	r0, 801f28c <_vfiprintf_r+0x198>
 801f27a:	2340      	movs	r3, #64	; 0x40
 801f27c:	eba0 000a 	sub.w	r0, r0, sl
 801f280:	fa03 f000 	lsl.w	r0, r3, r0
 801f284:	9b04      	ldr	r3, [sp, #16]
 801f286:	4303      	orrs	r3, r0
 801f288:	3401      	adds	r4, #1
 801f28a:	9304      	str	r3, [sp, #16]
 801f28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f290:	482c      	ldr	r0, [pc, #176]	; (801f344 <_vfiprintf_r+0x250>)
 801f292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f296:	2206      	movs	r2, #6
 801f298:	f7e0 ffda 	bl	8000250 <memchr>
 801f29c:	2800      	cmp	r0, #0
 801f29e:	d03f      	beq.n	801f320 <_vfiprintf_r+0x22c>
 801f2a0:	4b29      	ldr	r3, [pc, #164]	; (801f348 <_vfiprintf_r+0x254>)
 801f2a2:	bb1b      	cbnz	r3, 801f2ec <_vfiprintf_r+0x1f8>
 801f2a4:	9b03      	ldr	r3, [sp, #12]
 801f2a6:	3307      	adds	r3, #7
 801f2a8:	f023 0307 	bic.w	r3, r3, #7
 801f2ac:	3308      	adds	r3, #8
 801f2ae:	9303      	str	r3, [sp, #12]
 801f2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2b2:	443b      	add	r3, r7
 801f2b4:	9309      	str	r3, [sp, #36]	; 0x24
 801f2b6:	e767      	b.n	801f188 <_vfiprintf_r+0x94>
 801f2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801f2bc:	460c      	mov	r4, r1
 801f2be:	2001      	movs	r0, #1
 801f2c0:	e7a5      	b.n	801f20e <_vfiprintf_r+0x11a>
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	3401      	adds	r4, #1
 801f2c6:	9305      	str	r3, [sp, #20]
 801f2c8:	4619      	mov	r1, r3
 801f2ca:	f04f 0c0a 	mov.w	ip, #10
 801f2ce:	4620      	mov	r0, r4
 801f2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f2d4:	3a30      	subs	r2, #48	; 0x30
 801f2d6:	2a09      	cmp	r2, #9
 801f2d8:	d903      	bls.n	801f2e2 <_vfiprintf_r+0x1ee>
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	d0c5      	beq.n	801f26a <_vfiprintf_r+0x176>
 801f2de:	9105      	str	r1, [sp, #20]
 801f2e0:	e7c3      	b.n	801f26a <_vfiprintf_r+0x176>
 801f2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801f2e6:	4604      	mov	r4, r0
 801f2e8:	2301      	movs	r3, #1
 801f2ea:	e7f0      	b.n	801f2ce <_vfiprintf_r+0x1da>
 801f2ec:	ab03      	add	r3, sp, #12
 801f2ee:	9300      	str	r3, [sp, #0]
 801f2f0:	462a      	mov	r2, r5
 801f2f2:	4b16      	ldr	r3, [pc, #88]	; (801f34c <_vfiprintf_r+0x258>)
 801f2f4:	a904      	add	r1, sp, #16
 801f2f6:	4630      	mov	r0, r6
 801f2f8:	f7fc f8ba 	bl	801b470 <_printf_float>
 801f2fc:	4607      	mov	r7, r0
 801f2fe:	1c78      	adds	r0, r7, #1
 801f300:	d1d6      	bne.n	801f2b0 <_vfiprintf_r+0x1bc>
 801f302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f304:	07d9      	lsls	r1, r3, #31
 801f306:	d405      	bmi.n	801f314 <_vfiprintf_r+0x220>
 801f308:	89ab      	ldrh	r3, [r5, #12]
 801f30a:	059a      	lsls	r2, r3, #22
 801f30c:	d402      	bmi.n	801f314 <_vfiprintf_r+0x220>
 801f30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f310:	f7fb ff70 	bl	801b1f4 <__retarget_lock_release_recursive>
 801f314:	89ab      	ldrh	r3, [r5, #12]
 801f316:	065b      	lsls	r3, r3, #25
 801f318:	f53f af12 	bmi.w	801f140 <_vfiprintf_r+0x4c>
 801f31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f31e:	e711      	b.n	801f144 <_vfiprintf_r+0x50>
 801f320:	ab03      	add	r3, sp, #12
 801f322:	9300      	str	r3, [sp, #0]
 801f324:	462a      	mov	r2, r5
 801f326:	4b09      	ldr	r3, [pc, #36]	; (801f34c <_vfiprintf_r+0x258>)
 801f328:	a904      	add	r1, sp, #16
 801f32a:	4630      	mov	r0, r6
 801f32c:	f7fc fb2c 	bl	801b988 <_printf_i>
 801f330:	e7e4      	b.n	801f2fc <_vfiprintf_r+0x208>
 801f332:	bf00      	nop
 801f334:	08020734 	.word	0x08020734
 801f338:	08020754 	.word	0x08020754
 801f33c:	08020714 	.word	0x08020714
 801f340:	08020b6c 	.word	0x08020b6c
 801f344:	08020b76 	.word	0x08020b76
 801f348:	0801b471 	.word	0x0801b471
 801f34c:	0801f0cf 	.word	0x0801f0cf
 801f350:	08020b72 	.word	0x08020b72

0801f354 <_read_r>:
 801f354:	b538      	push	{r3, r4, r5, lr}
 801f356:	4d07      	ldr	r5, [pc, #28]	; (801f374 <_read_r+0x20>)
 801f358:	4604      	mov	r4, r0
 801f35a:	4608      	mov	r0, r1
 801f35c:	4611      	mov	r1, r2
 801f35e:	2200      	movs	r2, #0
 801f360:	602a      	str	r2, [r5, #0]
 801f362:	461a      	mov	r2, r3
 801f364:	f7f0 fe9a 	bl	801009c <_read>
 801f368:	1c43      	adds	r3, r0, #1
 801f36a:	d102      	bne.n	801f372 <_read_r+0x1e>
 801f36c:	682b      	ldr	r3, [r5, #0]
 801f36e:	b103      	cbz	r3, 801f372 <_read_r+0x1e>
 801f370:	6023      	str	r3, [r4, #0]
 801f372:	bd38      	pop	{r3, r4, r5, pc}
 801f374:	2004003c 	.word	0x2004003c

0801f378 <nan>:
 801f378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f380 <nan+0x8>
 801f37c:	4770      	bx	lr
 801f37e:	bf00      	nop
 801f380:	00000000 	.word	0x00000000
 801f384:	7ff80000 	.word	0x7ff80000

0801f388 <strncmp>:
 801f388:	b510      	push	{r4, lr}
 801f38a:	b17a      	cbz	r2, 801f3ac <strncmp+0x24>
 801f38c:	4603      	mov	r3, r0
 801f38e:	3901      	subs	r1, #1
 801f390:	1884      	adds	r4, r0, r2
 801f392:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f396:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f39a:	4290      	cmp	r0, r2
 801f39c:	d101      	bne.n	801f3a2 <strncmp+0x1a>
 801f39e:	42a3      	cmp	r3, r4
 801f3a0:	d101      	bne.n	801f3a6 <strncmp+0x1e>
 801f3a2:	1a80      	subs	r0, r0, r2
 801f3a4:	bd10      	pop	{r4, pc}
 801f3a6:	2800      	cmp	r0, #0
 801f3a8:	d1f3      	bne.n	801f392 <strncmp+0xa>
 801f3aa:	e7fa      	b.n	801f3a2 <strncmp+0x1a>
 801f3ac:	4610      	mov	r0, r2
 801f3ae:	e7f9      	b.n	801f3a4 <strncmp+0x1c>

0801f3b0 <__swbuf_r>:
 801f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3b2:	460e      	mov	r6, r1
 801f3b4:	4614      	mov	r4, r2
 801f3b6:	4605      	mov	r5, r0
 801f3b8:	b118      	cbz	r0, 801f3c2 <__swbuf_r+0x12>
 801f3ba:	6983      	ldr	r3, [r0, #24]
 801f3bc:	b90b      	cbnz	r3, 801f3c2 <__swbuf_r+0x12>
 801f3be:	f7fb fe55 	bl	801b06c <__sinit>
 801f3c2:	4b21      	ldr	r3, [pc, #132]	; (801f448 <__swbuf_r+0x98>)
 801f3c4:	429c      	cmp	r4, r3
 801f3c6:	d12b      	bne.n	801f420 <__swbuf_r+0x70>
 801f3c8:	686c      	ldr	r4, [r5, #4]
 801f3ca:	69a3      	ldr	r3, [r4, #24]
 801f3cc:	60a3      	str	r3, [r4, #8]
 801f3ce:	89a3      	ldrh	r3, [r4, #12]
 801f3d0:	071a      	lsls	r2, r3, #28
 801f3d2:	d52f      	bpl.n	801f434 <__swbuf_r+0x84>
 801f3d4:	6923      	ldr	r3, [r4, #16]
 801f3d6:	b36b      	cbz	r3, 801f434 <__swbuf_r+0x84>
 801f3d8:	6923      	ldr	r3, [r4, #16]
 801f3da:	6820      	ldr	r0, [r4, #0]
 801f3dc:	1ac0      	subs	r0, r0, r3
 801f3de:	6963      	ldr	r3, [r4, #20]
 801f3e0:	b2f6      	uxtb	r6, r6
 801f3e2:	4283      	cmp	r3, r0
 801f3e4:	4637      	mov	r7, r6
 801f3e6:	dc04      	bgt.n	801f3f2 <__swbuf_r+0x42>
 801f3e8:	4621      	mov	r1, r4
 801f3ea:	4628      	mov	r0, r5
 801f3ec:	f7fe fbf4 	bl	801dbd8 <_fflush_r>
 801f3f0:	bb30      	cbnz	r0, 801f440 <__swbuf_r+0x90>
 801f3f2:	68a3      	ldr	r3, [r4, #8]
 801f3f4:	3b01      	subs	r3, #1
 801f3f6:	60a3      	str	r3, [r4, #8]
 801f3f8:	6823      	ldr	r3, [r4, #0]
 801f3fa:	1c5a      	adds	r2, r3, #1
 801f3fc:	6022      	str	r2, [r4, #0]
 801f3fe:	701e      	strb	r6, [r3, #0]
 801f400:	6963      	ldr	r3, [r4, #20]
 801f402:	3001      	adds	r0, #1
 801f404:	4283      	cmp	r3, r0
 801f406:	d004      	beq.n	801f412 <__swbuf_r+0x62>
 801f408:	89a3      	ldrh	r3, [r4, #12]
 801f40a:	07db      	lsls	r3, r3, #31
 801f40c:	d506      	bpl.n	801f41c <__swbuf_r+0x6c>
 801f40e:	2e0a      	cmp	r6, #10
 801f410:	d104      	bne.n	801f41c <__swbuf_r+0x6c>
 801f412:	4621      	mov	r1, r4
 801f414:	4628      	mov	r0, r5
 801f416:	f7fe fbdf 	bl	801dbd8 <_fflush_r>
 801f41a:	b988      	cbnz	r0, 801f440 <__swbuf_r+0x90>
 801f41c:	4638      	mov	r0, r7
 801f41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f420:	4b0a      	ldr	r3, [pc, #40]	; (801f44c <__swbuf_r+0x9c>)
 801f422:	429c      	cmp	r4, r3
 801f424:	d101      	bne.n	801f42a <__swbuf_r+0x7a>
 801f426:	68ac      	ldr	r4, [r5, #8]
 801f428:	e7cf      	b.n	801f3ca <__swbuf_r+0x1a>
 801f42a:	4b09      	ldr	r3, [pc, #36]	; (801f450 <__swbuf_r+0xa0>)
 801f42c:	429c      	cmp	r4, r3
 801f42e:	bf08      	it	eq
 801f430:	68ec      	ldreq	r4, [r5, #12]
 801f432:	e7ca      	b.n	801f3ca <__swbuf_r+0x1a>
 801f434:	4621      	mov	r1, r4
 801f436:	4628      	mov	r0, r5
 801f438:	f000 f81a 	bl	801f470 <__swsetup_r>
 801f43c:	2800      	cmp	r0, #0
 801f43e:	d0cb      	beq.n	801f3d8 <__swbuf_r+0x28>
 801f440:	f04f 37ff 	mov.w	r7, #4294967295
 801f444:	e7ea      	b.n	801f41c <__swbuf_r+0x6c>
 801f446:	bf00      	nop
 801f448:	08020734 	.word	0x08020734
 801f44c:	08020754 	.word	0x08020754
 801f450:	08020714 	.word	0x08020714

0801f454 <__ascii_wctomb>:
 801f454:	b149      	cbz	r1, 801f46a <__ascii_wctomb+0x16>
 801f456:	2aff      	cmp	r2, #255	; 0xff
 801f458:	bf85      	ittet	hi
 801f45a:	238a      	movhi	r3, #138	; 0x8a
 801f45c:	6003      	strhi	r3, [r0, #0]
 801f45e:	700a      	strbls	r2, [r1, #0]
 801f460:	f04f 30ff 	movhi.w	r0, #4294967295
 801f464:	bf98      	it	ls
 801f466:	2001      	movls	r0, #1
 801f468:	4770      	bx	lr
 801f46a:	4608      	mov	r0, r1
 801f46c:	4770      	bx	lr
	...

0801f470 <__swsetup_r>:
 801f470:	4b32      	ldr	r3, [pc, #200]	; (801f53c <__swsetup_r+0xcc>)
 801f472:	b570      	push	{r4, r5, r6, lr}
 801f474:	681d      	ldr	r5, [r3, #0]
 801f476:	4606      	mov	r6, r0
 801f478:	460c      	mov	r4, r1
 801f47a:	b125      	cbz	r5, 801f486 <__swsetup_r+0x16>
 801f47c:	69ab      	ldr	r3, [r5, #24]
 801f47e:	b913      	cbnz	r3, 801f486 <__swsetup_r+0x16>
 801f480:	4628      	mov	r0, r5
 801f482:	f7fb fdf3 	bl	801b06c <__sinit>
 801f486:	4b2e      	ldr	r3, [pc, #184]	; (801f540 <__swsetup_r+0xd0>)
 801f488:	429c      	cmp	r4, r3
 801f48a:	d10f      	bne.n	801f4ac <__swsetup_r+0x3c>
 801f48c:	686c      	ldr	r4, [r5, #4]
 801f48e:	89a3      	ldrh	r3, [r4, #12]
 801f490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f494:	0719      	lsls	r1, r3, #28
 801f496:	d42c      	bmi.n	801f4f2 <__swsetup_r+0x82>
 801f498:	06dd      	lsls	r5, r3, #27
 801f49a:	d411      	bmi.n	801f4c0 <__swsetup_r+0x50>
 801f49c:	2309      	movs	r3, #9
 801f49e:	6033      	str	r3, [r6, #0]
 801f4a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f4a4:	81a3      	strh	r3, [r4, #12]
 801f4a6:	f04f 30ff 	mov.w	r0, #4294967295
 801f4aa:	e03e      	b.n	801f52a <__swsetup_r+0xba>
 801f4ac:	4b25      	ldr	r3, [pc, #148]	; (801f544 <__swsetup_r+0xd4>)
 801f4ae:	429c      	cmp	r4, r3
 801f4b0:	d101      	bne.n	801f4b6 <__swsetup_r+0x46>
 801f4b2:	68ac      	ldr	r4, [r5, #8]
 801f4b4:	e7eb      	b.n	801f48e <__swsetup_r+0x1e>
 801f4b6:	4b24      	ldr	r3, [pc, #144]	; (801f548 <__swsetup_r+0xd8>)
 801f4b8:	429c      	cmp	r4, r3
 801f4ba:	bf08      	it	eq
 801f4bc:	68ec      	ldreq	r4, [r5, #12]
 801f4be:	e7e6      	b.n	801f48e <__swsetup_r+0x1e>
 801f4c0:	0758      	lsls	r0, r3, #29
 801f4c2:	d512      	bpl.n	801f4ea <__swsetup_r+0x7a>
 801f4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f4c6:	b141      	cbz	r1, 801f4da <__swsetup_r+0x6a>
 801f4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4cc:	4299      	cmp	r1, r3
 801f4ce:	d002      	beq.n	801f4d6 <__swsetup_r+0x66>
 801f4d0:	4630      	mov	r0, r6
 801f4d2:	f7ff fc3d 	bl	801ed50 <_free_r>
 801f4d6:	2300      	movs	r3, #0
 801f4d8:	6363      	str	r3, [r4, #52]	; 0x34
 801f4da:	89a3      	ldrh	r3, [r4, #12]
 801f4dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f4e0:	81a3      	strh	r3, [r4, #12]
 801f4e2:	2300      	movs	r3, #0
 801f4e4:	6063      	str	r3, [r4, #4]
 801f4e6:	6923      	ldr	r3, [r4, #16]
 801f4e8:	6023      	str	r3, [r4, #0]
 801f4ea:	89a3      	ldrh	r3, [r4, #12]
 801f4ec:	f043 0308 	orr.w	r3, r3, #8
 801f4f0:	81a3      	strh	r3, [r4, #12]
 801f4f2:	6923      	ldr	r3, [r4, #16]
 801f4f4:	b94b      	cbnz	r3, 801f50a <__swsetup_r+0x9a>
 801f4f6:	89a3      	ldrh	r3, [r4, #12]
 801f4f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f500:	d003      	beq.n	801f50a <__swsetup_r+0x9a>
 801f502:	4621      	mov	r1, r4
 801f504:	4630      	mov	r0, r6
 801f506:	f000 f877 	bl	801f5f8 <__smakebuf_r>
 801f50a:	89a0      	ldrh	r0, [r4, #12]
 801f50c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f510:	f010 0301 	ands.w	r3, r0, #1
 801f514:	d00a      	beq.n	801f52c <__swsetup_r+0xbc>
 801f516:	2300      	movs	r3, #0
 801f518:	60a3      	str	r3, [r4, #8]
 801f51a:	6963      	ldr	r3, [r4, #20]
 801f51c:	425b      	negs	r3, r3
 801f51e:	61a3      	str	r3, [r4, #24]
 801f520:	6923      	ldr	r3, [r4, #16]
 801f522:	b943      	cbnz	r3, 801f536 <__swsetup_r+0xc6>
 801f524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f528:	d1ba      	bne.n	801f4a0 <__swsetup_r+0x30>
 801f52a:	bd70      	pop	{r4, r5, r6, pc}
 801f52c:	0781      	lsls	r1, r0, #30
 801f52e:	bf58      	it	pl
 801f530:	6963      	ldrpl	r3, [r4, #20]
 801f532:	60a3      	str	r3, [r4, #8]
 801f534:	e7f4      	b.n	801f520 <__swsetup_r+0xb0>
 801f536:	2000      	movs	r0, #0
 801f538:	e7f7      	b.n	801f52a <__swsetup_r+0xba>
 801f53a:	bf00      	nop
 801f53c:	2000006c 	.word	0x2000006c
 801f540:	08020734 	.word	0x08020734
 801f544:	08020754 	.word	0x08020754
 801f548:	08020714 	.word	0x08020714

0801f54c <__assert_func>:
 801f54c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f54e:	4614      	mov	r4, r2
 801f550:	461a      	mov	r2, r3
 801f552:	4b09      	ldr	r3, [pc, #36]	; (801f578 <__assert_func+0x2c>)
 801f554:	681b      	ldr	r3, [r3, #0]
 801f556:	4605      	mov	r5, r0
 801f558:	68d8      	ldr	r0, [r3, #12]
 801f55a:	b14c      	cbz	r4, 801f570 <__assert_func+0x24>
 801f55c:	4b07      	ldr	r3, [pc, #28]	; (801f57c <__assert_func+0x30>)
 801f55e:	9100      	str	r1, [sp, #0]
 801f560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f564:	4906      	ldr	r1, [pc, #24]	; (801f580 <__assert_func+0x34>)
 801f566:	462b      	mov	r3, r5
 801f568:	f000 f80e 	bl	801f588 <fiprintf>
 801f56c:	f000 f8cd 	bl	801f70a <abort>
 801f570:	4b04      	ldr	r3, [pc, #16]	; (801f584 <__assert_func+0x38>)
 801f572:	461c      	mov	r4, r3
 801f574:	e7f3      	b.n	801f55e <__assert_func+0x12>
 801f576:	bf00      	nop
 801f578:	2000006c 	.word	0x2000006c
 801f57c:	08020b7d 	.word	0x08020b7d
 801f580:	08020b8a 	.word	0x08020b8a
 801f584:	08020bb8 	.word	0x08020bb8

0801f588 <fiprintf>:
 801f588:	b40e      	push	{r1, r2, r3}
 801f58a:	b503      	push	{r0, r1, lr}
 801f58c:	4601      	mov	r1, r0
 801f58e:	ab03      	add	r3, sp, #12
 801f590:	4805      	ldr	r0, [pc, #20]	; (801f5a8 <fiprintf+0x20>)
 801f592:	f853 2b04 	ldr.w	r2, [r3], #4
 801f596:	6800      	ldr	r0, [r0, #0]
 801f598:	9301      	str	r3, [sp, #4]
 801f59a:	f7ff fdab 	bl	801f0f4 <_vfiprintf_r>
 801f59e:	b002      	add	sp, #8
 801f5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f5a4:	b003      	add	sp, #12
 801f5a6:	4770      	bx	lr
 801f5a8:	2000006c 	.word	0x2000006c

0801f5ac <__swhatbuf_r>:
 801f5ac:	b570      	push	{r4, r5, r6, lr}
 801f5ae:	460e      	mov	r6, r1
 801f5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5b4:	2900      	cmp	r1, #0
 801f5b6:	b096      	sub	sp, #88	; 0x58
 801f5b8:	4614      	mov	r4, r2
 801f5ba:	461d      	mov	r5, r3
 801f5bc:	da08      	bge.n	801f5d0 <__swhatbuf_r+0x24>
 801f5be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f5c2:	2200      	movs	r2, #0
 801f5c4:	602a      	str	r2, [r5, #0]
 801f5c6:	061a      	lsls	r2, r3, #24
 801f5c8:	d410      	bmi.n	801f5ec <__swhatbuf_r+0x40>
 801f5ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f5ce:	e00e      	b.n	801f5ee <__swhatbuf_r+0x42>
 801f5d0:	466a      	mov	r2, sp
 801f5d2:	f000 f8a1 	bl	801f718 <_fstat_r>
 801f5d6:	2800      	cmp	r0, #0
 801f5d8:	dbf1      	blt.n	801f5be <__swhatbuf_r+0x12>
 801f5da:	9a01      	ldr	r2, [sp, #4]
 801f5dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f5e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f5e4:	425a      	negs	r2, r3
 801f5e6:	415a      	adcs	r2, r3
 801f5e8:	602a      	str	r2, [r5, #0]
 801f5ea:	e7ee      	b.n	801f5ca <__swhatbuf_r+0x1e>
 801f5ec:	2340      	movs	r3, #64	; 0x40
 801f5ee:	2000      	movs	r0, #0
 801f5f0:	6023      	str	r3, [r4, #0]
 801f5f2:	b016      	add	sp, #88	; 0x58
 801f5f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f5f8 <__smakebuf_r>:
 801f5f8:	898b      	ldrh	r3, [r1, #12]
 801f5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f5fc:	079d      	lsls	r5, r3, #30
 801f5fe:	4606      	mov	r6, r0
 801f600:	460c      	mov	r4, r1
 801f602:	d507      	bpl.n	801f614 <__smakebuf_r+0x1c>
 801f604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f608:	6023      	str	r3, [r4, #0]
 801f60a:	6123      	str	r3, [r4, #16]
 801f60c:	2301      	movs	r3, #1
 801f60e:	6163      	str	r3, [r4, #20]
 801f610:	b002      	add	sp, #8
 801f612:	bd70      	pop	{r4, r5, r6, pc}
 801f614:	ab01      	add	r3, sp, #4
 801f616:	466a      	mov	r2, sp
 801f618:	f7ff ffc8 	bl	801f5ac <__swhatbuf_r>
 801f61c:	9900      	ldr	r1, [sp, #0]
 801f61e:	4605      	mov	r5, r0
 801f620:	4630      	mov	r0, r6
 801f622:	f7fb fe1f 	bl	801b264 <_malloc_r>
 801f626:	b948      	cbnz	r0, 801f63c <__smakebuf_r+0x44>
 801f628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f62c:	059a      	lsls	r2, r3, #22
 801f62e:	d4ef      	bmi.n	801f610 <__smakebuf_r+0x18>
 801f630:	f023 0303 	bic.w	r3, r3, #3
 801f634:	f043 0302 	orr.w	r3, r3, #2
 801f638:	81a3      	strh	r3, [r4, #12]
 801f63a:	e7e3      	b.n	801f604 <__smakebuf_r+0xc>
 801f63c:	4b0d      	ldr	r3, [pc, #52]	; (801f674 <__smakebuf_r+0x7c>)
 801f63e:	62b3      	str	r3, [r6, #40]	; 0x28
 801f640:	89a3      	ldrh	r3, [r4, #12]
 801f642:	6020      	str	r0, [r4, #0]
 801f644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f648:	81a3      	strh	r3, [r4, #12]
 801f64a:	9b00      	ldr	r3, [sp, #0]
 801f64c:	6163      	str	r3, [r4, #20]
 801f64e:	9b01      	ldr	r3, [sp, #4]
 801f650:	6120      	str	r0, [r4, #16]
 801f652:	b15b      	cbz	r3, 801f66c <__smakebuf_r+0x74>
 801f654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f658:	4630      	mov	r0, r6
 801f65a:	f000 f86f 	bl	801f73c <_isatty_r>
 801f65e:	b128      	cbz	r0, 801f66c <__smakebuf_r+0x74>
 801f660:	89a3      	ldrh	r3, [r4, #12]
 801f662:	f023 0303 	bic.w	r3, r3, #3
 801f666:	f043 0301 	orr.w	r3, r3, #1
 801f66a:	81a3      	strh	r3, [r4, #12]
 801f66c:	89a0      	ldrh	r0, [r4, #12]
 801f66e:	4305      	orrs	r5, r0
 801f670:	81a5      	strh	r5, [r4, #12]
 801f672:	e7cd      	b.n	801f610 <__smakebuf_r+0x18>
 801f674:	0801b005 	.word	0x0801b005

0801f678 <memmove>:
 801f678:	4288      	cmp	r0, r1
 801f67a:	b510      	push	{r4, lr}
 801f67c:	eb01 0402 	add.w	r4, r1, r2
 801f680:	d902      	bls.n	801f688 <memmove+0x10>
 801f682:	4284      	cmp	r4, r0
 801f684:	4623      	mov	r3, r4
 801f686:	d807      	bhi.n	801f698 <memmove+0x20>
 801f688:	1e43      	subs	r3, r0, #1
 801f68a:	42a1      	cmp	r1, r4
 801f68c:	d008      	beq.n	801f6a0 <memmove+0x28>
 801f68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f692:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f696:	e7f8      	b.n	801f68a <memmove+0x12>
 801f698:	4402      	add	r2, r0
 801f69a:	4601      	mov	r1, r0
 801f69c:	428a      	cmp	r2, r1
 801f69e:	d100      	bne.n	801f6a2 <memmove+0x2a>
 801f6a0:	bd10      	pop	{r4, pc}
 801f6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f6aa:	e7f7      	b.n	801f69c <memmove+0x24>

0801f6ac <_realloc_r>:
 801f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6b0:	4680      	mov	r8, r0
 801f6b2:	4614      	mov	r4, r2
 801f6b4:	460e      	mov	r6, r1
 801f6b6:	b921      	cbnz	r1, 801f6c2 <_realloc_r+0x16>
 801f6b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f6bc:	4611      	mov	r1, r2
 801f6be:	f7fb bdd1 	b.w	801b264 <_malloc_r>
 801f6c2:	b92a      	cbnz	r2, 801f6d0 <_realloc_r+0x24>
 801f6c4:	f7ff fb44 	bl	801ed50 <_free_r>
 801f6c8:	4625      	mov	r5, r4
 801f6ca:	4628      	mov	r0, r5
 801f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d0:	f000 f844 	bl	801f75c <_malloc_usable_size_r>
 801f6d4:	4284      	cmp	r4, r0
 801f6d6:	4607      	mov	r7, r0
 801f6d8:	d802      	bhi.n	801f6e0 <_realloc_r+0x34>
 801f6da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f6de:	d812      	bhi.n	801f706 <_realloc_r+0x5a>
 801f6e0:	4621      	mov	r1, r4
 801f6e2:	4640      	mov	r0, r8
 801f6e4:	f7fb fdbe 	bl	801b264 <_malloc_r>
 801f6e8:	4605      	mov	r5, r0
 801f6ea:	2800      	cmp	r0, #0
 801f6ec:	d0ed      	beq.n	801f6ca <_realloc_r+0x1e>
 801f6ee:	42bc      	cmp	r4, r7
 801f6f0:	4622      	mov	r2, r4
 801f6f2:	4631      	mov	r1, r6
 801f6f4:	bf28      	it	cs
 801f6f6:	463a      	movcs	r2, r7
 801f6f8:	f7fb fd7d 	bl	801b1f6 <memcpy>
 801f6fc:	4631      	mov	r1, r6
 801f6fe:	4640      	mov	r0, r8
 801f700:	f7ff fb26 	bl	801ed50 <_free_r>
 801f704:	e7e1      	b.n	801f6ca <_realloc_r+0x1e>
 801f706:	4635      	mov	r5, r6
 801f708:	e7df      	b.n	801f6ca <_realloc_r+0x1e>

0801f70a <abort>:
 801f70a:	b508      	push	{r3, lr}
 801f70c:	2006      	movs	r0, #6
 801f70e:	f000 f855 	bl	801f7bc <raise>
 801f712:	2001      	movs	r0, #1
 801f714:	f7f0 fcb8 	bl	8010088 <_exit>

0801f718 <_fstat_r>:
 801f718:	b538      	push	{r3, r4, r5, lr}
 801f71a:	4d07      	ldr	r5, [pc, #28]	; (801f738 <_fstat_r+0x20>)
 801f71c:	2300      	movs	r3, #0
 801f71e:	4604      	mov	r4, r0
 801f720:	4608      	mov	r0, r1
 801f722:	4611      	mov	r1, r2
 801f724:	602b      	str	r3, [r5, #0]
 801f726:	f7f0 fcfe 	bl	8010126 <_fstat>
 801f72a:	1c43      	adds	r3, r0, #1
 801f72c:	d102      	bne.n	801f734 <_fstat_r+0x1c>
 801f72e:	682b      	ldr	r3, [r5, #0]
 801f730:	b103      	cbz	r3, 801f734 <_fstat_r+0x1c>
 801f732:	6023      	str	r3, [r4, #0]
 801f734:	bd38      	pop	{r3, r4, r5, pc}
 801f736:	bf00      	nop
 801f738:	2004003c 	.word	0x2004003c

0801f73c <_isatty_r>:
 801f73c:	b538      	push	{r3, r4, r5, lr}
 801f73e:	4d06      	ldr	r5, [pc, #24]	; (801f758 <_isatty_r+0x1c>)
 801f740:	2300      	movs	r3, #0
 801f742:	4604      	mov	r4, r0
 801f744:	4608      	mov	r0, r1
 801f746:	602b      	str	r3, [r5, #0]
 801f748:	f7f0 fcfd 	bl	8010146 <_isatty>
 801f74c:	1c43      	adds	r3, r0, #1
 801f74e:	d102      	bne.n	801f756 <_isatty_r+0x1a>
 801f750:	682b      	ldr	r3, [r5, #0]
 801f752:	b103      	cbz	r3, 801f756 <_isatty_r+0x1a>
 801f754:	6023      	str	r3, [r4, #0]
 801f756:	bd38      	pop	{r3, r4, r5, pc}
 801f758:	2004003c 	.word	0x2004003c

0801f75c <_malloc_usable_size_r>:
 801f75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f760:	1f18      	subs	r0, r3, #4
 801f762:	2b00      	cmp	r3, #0
 801f764:	bfbc      	itt	lt
 801f766:	580b      	ldrlt	r3, [r1, r0]
 801f768:	18c0      	addlt	r0, r0, r3
 801f76a:	4770      	bx	lr

0801f76c <_raise_r>:
 801f76c:	291f      	cmp	r1, #31
 801f76e:	b538      	push	{r3, r4, r5, lr}
 801f770:	4604      	mov	r4, r0
 801f772:	460d      	mov	r5, r1
 801f774:	d904      	bls.n	801f780 <_raise_r+0x14>
 801f776:	2316      	movs	r3, #22
 801f778:	6003      	str	r3, [r0, #0]
 801f77a:	f04f 30ff 	mov.w	r0, #4294967295
 801f77e:	bd38      	pop	{r3, r4, r5, pc}
 801f780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f782:	b112      	cbz	r2, 801f78a <_raise_r+0x1e>
 801f784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f788:	b94b      	cbnz	r3, 801f79e <_raise_r+0x32>
 801f78a:	4620      	mov	r0, r4
 801f78c:	f000 f830 	bl	801f7f0 <_getpid_r>
 801f790:	462a      	mov	r2, r5
 801f792:	4601      	mov	r1, r0
 801f794:	4620      	mov	r0, r4
 801f796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f79a:	f000 b817 	b.w	801f7cc <_kill_r>
 801f79e:	2b01      	cmp	r3, #1
 801f7a0:	d00a      	beq.n	801f7b8 <_raise_r+0x4c>
 801f7a2:	1c59      	adds	r1, r3, #1
 801f7a4:	d103      	bne.n	801f7ae <_raise_r+0x42>
 801f7a6:	2316      	movs	r3, #22
 801f7a8:	6003      	str	r3, [r0, #0]
 801f7aa:	2001      	movs	r0, #1
 801f7ac:	e7e7      	b.n	801f77e <_raise_r+0x12>
 801f7ae:	2400      	movs	r4, #0
 801f7b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	4798      	blx	r3
 801f7b8:	2000      	movs	r0, #0
 801f7ba:	e7e0      	b.n	801f77e <_raise_r+0x12>

0801f7bc <raise>:
 801f7bc:	4b02      	ldr	r3, [pc, #8]	; (801f7c8 <raise+0xc>)
 801f7be:	4601      	mov	r1, r0
 801f7c0:	6818      	ldr	r0, [r3, #0]
 801f7c2:	f7ff bfd3 	b.w	801f76c <_raise_r>
 801f7c6:	bf00      	nop
 801f7c8:	2000006c 	.word	0x2000006c

0801f7cc <_kill_r>:
 801f7cc:	b538      	push	{r3, r4, r5, lr}
 801f7ce:	4d07      	ldr	r5, [pc, #28]	; (801f7ec <_kill_r+0x20>)
 801f7d0:	2300      	movs	r3, #0
 801f7d2:	4604      	mov	r4, r0
 801f7d4:	4608      	mov	r0, r1
 801f7d6:	4611      	mov	r1, r2
 801f7d8:	602b      	str	r3, [r5, #0]
 801f7da:	f7f0 fc45 	bl	8010068 <_kill>
 801f7de:	1c43      	adds	r3, r0, #1
 801f7e0:	d102      	bne.n	801f7e8 <_kill_r+0x1c>
 801f7e2:	682b      	ldr	r3, [r5, #0]
 801f7e4:	b103      	cbz	r3, 801f7e8 <_kill_r+0x1c>
 801f7e6:	6023      	str	r3, [r4, #0]
 801f7e8:	bd38      	pop	{r3, r4, r5, pc}
 801f7ea:	bf00      	nop
 801f7ec:	2004003c 	.word	0x2004003c

0801f7f0 <_getpid_r>:
 801f7f0:	f7f0 bc32 	b.w	8010058 <_getpid>

0801f7f4 <checkint>:
 801f7f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f7f8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801f7fc:	429a      	cmp	r2, r3
 801f7fe:	b570      	push	{r4, r5, r6, lr}
 801f800:	dd2a      	ble.n	801f858 <checkint+0x64>
 801f802:	f240 4333 	movw	r3, #1075	; 0x433
 801f806:	429a      	cmp	r2, r3
 801f808:	dc24      	bgt.n	801f854 <checkint+0x60>
 801f80a:	1a9b      	subs	r3, r3, r2
 801f80c:	f1a3 0620 	sub.w	r6, r3, #32
 801f810:	f04f 32ff 	mov.w	r2, #4294967295
 801f814:	fa02 f403 	lsl.w	r4, r2, r3
 801f818:	fa02 f606 	lsl.w	r6, r2, r6
 801f81c:	f1c3 0520 	rsb	r5, r3, #32
 801f820:	fa22 f505 	lsr.w	r5, r2, r5
 801f824:	4334      	orrs	r4, r6
 801f826:	432c      	orrs	r4, r5
 801f828:	409a      	lsls	r2, r3
 801f82a:	ea20 0202 	bic.w	r2, r0, r2
 801f82e:	ea21 0404 	bic.w	r4, r1, r4
 801f832:	4322      	orrs	r2, r4
 801f834:	f1a3 0420 	sub.w	r4, r3, #32
 801f838:	f1c3 0220 	rsb	r2, r3, #32
 801f83c:	d10c      	bne.n	801f858 <checkint+0x64>
 801f83e:	40d8      	lsrs	r0, r3
 801f840:	fa01 f302 	lsl.w	r3, r1, r2
 801f844:	4318      	orrs	r0, r3
 801f846:	40e1      	lsrs	r1, r4
 801f848:	4308      	orrs	r0, r1
 801f84a:	f000 0001 	and.w	r0, r0, #1
 801f84e:	f1d0 0002 	rsbs	r0, r0, #2
 801f852:	bd70      	pop	{r4, r5, r6, pc}
 801f854:	2002      	movs	r0, #2
 801f856:	e7fc      	b.n	801f852 <checkint+0x5e>
 801f858:	2000      	movs	r0, #0
 801f85a:	e7fa      	b.n	801f852 <checkint+0x5e>
 801f85c:	0000      	movs	r0, r0
	...

0801f860 <pow>:
 801f860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f864:	ee10 4a90 	vmov	r4, s1
 801f868:	ed2d 8b0a 	vpush	{d8-d12}
 801f86c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 801f870:	ee11 7a90 	vmov	r7, s3
 801f874:	f10a 32ff 	add.w	r2, sl, #4294967295
 801f878:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801f87c:	429a      	cmp	r2, r3
 801f87e:	ee10 6a10 	vmov	r6, s0
 801f882:	ee11 0a10 	vmov	r0, s2
 801f886:	b086      	sub	sp, #24
 801f888:	46d4      	mov	ip, sl
 801f88a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801f88e:	d806      	bhi.n	801f89e <pow+0x3e>
 801f890:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801f894:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 801f898:	2b7f      	cmp	r3, #127	; 0x7f
 801f89a:	f240 8156 	bls.w	801fb4a <pow+0x2ea>
 801f89e:	1802      	adds	r2, r0, r0
 801f8a0:	eb47 0107 	adc.w	r1, r7, r7
 801f8a4:	f06f 0e01 	mvn.w	lr, #1
 801f8a8:	f112 39ff 	adds.w	r9, r2, #4294967295
 801f8ac:	f141 38ff 	adc.w	r8, r1, #4294967295
 801f8b0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801f8b4:	45ce      	cmp	lr, r9
 801f8b6:	eb73 0808 	sbcs.w	r8, r3, r8
 801f8ba:	d23f      	bcs.n	801f93c <pow+0xdc>
 801f8bc:	ea52 0301 	orrs.w	r3, r2, r1
 801f8c0:	f04f 0300 	mov.w	r3, #0
 801f8c4:	d10c      	bne.n	801f8e0 <pow+0x80>
 801f8c6:	19b6      	adds	r6, r6, r6
 801f8c8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801f8cc:	4164      	adcs	r4, r4
 801f8ce:	42b3      	cmp	r3, r6
 801f8d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f8d4:	41a3      	sbcs	r3, r4
 801f8d6:	f0c0 808c 	bcc.w	801f9f2 <pow+0x192>
 801f8da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f8de:	e028      	b.n	801f932 <pow+0xd2>
 801f8e0:	4da3      	ldr	r5, [pc, #652]	; (801fb70 <pow+0x310>)
 801f8e2:	42ac      	cmp	r4, r5
 801f8e4:	bf08      	it	eq
 801f8e6:	429e      	cmpeq	r6, r3
 801f8e8:	d107      	bne.n	801f8fa <pow+0x9a>
 801f8ea:	1800      	adds	r0, r0, r0
 801f8ec:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 801f8f0:	417f      	adcs	r7, r7
 801f8f2:	4283      	cmp	r3, r0
 801f8f4:	4b9f      	ldr	r3, [pc, #636]	; (801fb74 <pow+0x314>)
 801f8f6:	41bb      	sbcs	r3, r7
 801f8f8:	e7ed      	b.n	801f8d6 <pow+0x76>
 801f8fa:	19b6      	adds	r6, r6, r6
 801f8fc:	489e      	ldr	r0, [pc, #632]	; (801fb78 <pow+0x318>)
 801f8fe:	4164      	adcs	r4, r4
 801f900:	42b3      	cmp	r3, r6
 801f902:	eb70 0504 	sbcs.w	r5, r0, r4
 801f906:	d374      	bcc.n	801f9f2 <pow+0x192>
 801f908:	4281      	cmp	r1, r0
 801f90a:	bf08      	it	eq
 801f90c:	429a      	cmpeq	r2, r3
 801f90e:	d170      	bne.n	801f9f2 <pow+0x192>
 801f910:	4a9a      	ldr	r2, [pc, #616]	; (801fb7c <pow+0x31c>)
 801f912:	4294      	cmp	r4, r2
 801f914:	bf08      	it	eq
 801f916:	429e      	cmpeq	r6, r3
 801f918:	d0df      	beq.n	801f8da <pow+0x7a>
 801f91a:	4294      	cmp	r4, r2
 801f91c:	ea6f 0707 	mvn.w	r7, r7
 801f920:	bf34      	ite	cc
 801f922:	2400      	movcc	r4, #0
 801f924:	2401      	movcs	r4, #1
 801f926:	0fff      	lsrs	r7, r7, #31
 801f928:	42bc      	cmp	r4, r7
 801f92a:	f040 81d9 	bne.w	801fce0 <pow+0x480>
 801f92e:	ee21 0b01 	vmul.f64	d0, d1, d1
 801f932:	b006      	add	sp, #24
 801f934:	ecbd 8b0a 	vpop	{d8-d12}
 801f938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f93c:	eb16 0806 	adds.w	r8, r6, r6
 801f940:	eb44 0904 	adc.w	r9, r4, r4
 801f944:	f118 31ff 	adds.w	r1, r8, #4294967295
 801f948:	f169 0200 	sbc.w	r2, r9, #0
 801f94c:	458e      	cmp	lr, r1
 801f94e:	4193      	sbcs	r3, r2
 801f950:	d223      	bcs.n	801f99a <pow+0x13a>
 801f952:	ee20 0b00 	vmul.f64	d0, d0, d0
 801f956:	2c00      	cmp	r4, #0
 801f958:	da12      	bge.n	801f980 <pow+0x120>
 801f95a:	4639      	mov	r1, r7
 801f95c:	f7ff ff4a 	bl	801f7f4 <checkint>
 801f960:	2801      	cmp	r0, #1
 801f962:	d10d      	bne.n	801f980 <pow+0x120>
 801f964:	eeb1 0b40 	vneg.f64	d0, d0
 801f968:	ea58 0309 	orrs.w	r3, r8, r9
 801f96c:	d10a      	bne.n	801f984 <pow+0x124>
 801f96e:	2f00      	cmp	r7, #0
 801f970:	dadf      	bge.n	801f932 <pow+0xd2>
 801f972:	b006      	add	sp, #24
 801f974:	ecbd 8b0a 	vpop	{d8-d12}
 801f978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f97c:	f000 bacc 	b.w	801ff18 <__math_divzero>
 801f980:	2000      	movs	r0, #0
 801f982:	e7f1      	b.n	801f968 <pow+0x108>
 801f984:	2f00      	cmp	r7, #0
 801f986:	dad4      	bge.n	801f932 <pow+0xd2>
 801f988:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801f98c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801f990:	ed8d 7b00 	vstr	d7, [sp]
 801f994:	ed9d 0b00 	vldr	d0, [sp]
 801f998:	e7cb      	b.n	801f932 <pow+0xd2>
 801f99a:	2c00      	cmp	r4, #0
 801f99c:	da2c      	bge.n	801f9f8 <pow+0x198>
 801f99e:	4639      	mov	r1, r7
 801f9a0:	f7ff ff28 	bl	801f7f4 <checkint>
 801f9a4:	b930      	cbnz	r0, 801f9b4 <pow+0x154>
 801f9a6:	b006      	add	sp, #24
 801f9a8:	ecbd 8b0a 	vpop	{d8-d12}
 801f9ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9b0:	f000 baca 	b.w	801ff48 <__math_invalid>
 801f9b4:	2801      	cmp	r0, #1
 801f9b6:	bf14      	ite	ne
 801f9b8:	2000      	movne	r0, #0
 801f9ba:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801f9be:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801f9c2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801f9c6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801f9ca:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801f9ce:	2b7f      	cmp	r3, #127	; 0x7f
 801f9d0:	d92d      	bls.n	801fa2e <pow+0x1ce>
 801f9d2:	4b67      	ldr	r3, [pc, #412]	; (801fb70 <pow+0x310>)
 801f9d4:	2000      	movs	r0, #0
 801f9d6:	429c      	cmp	r4, r3
 801f9d8:	bf08      	it	eq
 801f9da:	4286      	cmpeq	r6, r0
 801f9dc:	f43f af7d 	beq.w	801f8da <pow+0x7a>
 801f9e0:	f240 31bd 	movw	r1, #957	; 0x3bd
 801f9e4:	428a      	cmp	r2, r1
 801f9e6:	d80c      	bhi.n	801fa02 <pow+0x1a2>
 801f9e8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f9ec:	42b0      	cmp	r0, r6
 801f9ee:	41a3      	sbcs	r3, r4
 801f9f0:	d204      	bcs.n	801f9fc <pow+0x19c>
 801f9f2:	ee31 0b00 	vadd.f64	d0, d1, d0
 801f9f6:	e79c      	b.n	801f932 <pow+0xd2>
 801f9f8:	2000      	movs	r0, #0
 801f9fa:	e7e4      	b.n	801f9c6 <pow+0x166>
 801f9fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 801fa00:	e797      	b.n	801f932 <pow+0xd2>
 801fa02:	2e01      	cmp	r6, #1
 801fa04:	eb74 0303 	sbcs.w	r3, r4, r3
 801fa08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801fa0c:	bf34      	ite	cc
 801fa0e:	2301      	movcc	r3, #1
 801fa10:	2300      	movcs	r3, #0
 801fa12:	4295      	cmp	r5, r2
 801fa14:	bf8c      	ite	hi
 801fa16:	2500      	movhi	r5, #0
 801fa18:	2501      	movls	r5, #1
 801fa1a:	42ab      	cmp	r3, r5
 801fa1c:	f000 809d 	beq.w	801fb5a <pow+0x2fa>
 801fa20:	b006      	add	sp, #24
 801fa22:	ecbd 8b0a 	vpop	{d8-d12}
 801fa26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa2a:	f000 ba6d 	b.w	801ff08 <__math_oflow>
 801fa2e:	f1bc 0f00 	cmp.w	ip, #0
 801fa32:	d10b      	bne.n	801fa4c <pow+0x1ec>
 801fa34:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801fb68 <pow+0x308>
 801fa38:	ee20 7b07 	vmul.f64	d7, d0, d7
 801fa3c:	ec53 2b17 	vmov	r2, r3, d7
 801fa40:	ee17 6a10 	vmov	r6, s14
 801fa44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801fa48:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801fa4c:	4b4c      	ldr	r3, [pc, #304]	; (801fb80 <pow+0x320>)
 801fa4e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801fa52:	4423      	add	r3, r4
 801fa54:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801fa58:	1519      	asrs	r1, r3, #20
 801fa5a:	0d1b      	lsrs	r3, r3, #20
 801fa5c:	051b      	lsls	r3, r3, #20
 801fa5e:	eba4 0903 	sub.w	r9, r4, r3
 801fa62:	4b48      	ldr	r3, [pc, #288]	; (801fb84 <pow+0x324>)
 801fa64:	ee04 1a10 	vmov	s8, r1
 801fa68:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801fa6c:	f1b6 0800 	subs.w	r8, r6, #0
 801fa70:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801fa74:	ec49 8b15 	vmov	d5, r8, r9
 801fa78:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801fa7c:	eea5 6b07 	vfma.f64	d6, d5, d7
 801fa80:	ed93 7b00 	vldr	d7, [r3]
 801fa84:	ed93 5b02 	vldr	d5, [r3, #8]
 801fa88:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801fa8c:	eea4 2b07 	vfma.f64	d2, d4, d7
 801fa90:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801fa94:	ee36 ab02 	vadd.f64	d10, d6, d2
 801fa98:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801fa9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 801faa0:	ed93 5b04 	vldr	d5, [r3, #16]
 801faa4:	ee32 2b06 	vadd.f64	d2, d2, d6
 801faa8:	ee37 7b02 	vadd.f64	d7, d7, d2
 801faac:	ee26 5b05 	vmul.f64	d5, d6, d5
 801fab0:	ed93 4b08 	vldr	d4, [r3, #32]
 801fab4:	ee26 0b05 	vmul.f64	d0, d6, d5
 801fab8:	eeb0 9b40 	vmov.f64	d9, d0
 801fabc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801fac0:	ed93 5b06 	vldr	d5, [r3, #24]
 801fac4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 801fac8:	ee26 bb00 	vmul.f64	d11, d6, d0
 801facc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801fad0:	eea6 5b04 	vfma.f64	d5, d6, d4
 801fad4:	ee3a ab48 	vsub.f64	d10, d10, d8
 801fad8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801fadc:	ee37 9b09 	vadd.f64	d9, d7, d9
 801fae0:	ee3a ab00 	vadd.f64	d10, d10, d0
 801fae4:	eea6 4b03 	vfma.f64	d4, d6, d3
 801fae8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801faec:	ee39 ab0a 	vadd.f64	d10, d9, d10
 801faf0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801faf4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801faf8:	eea0 4b03 	vfma.f64	d4, d0, d3
 801fafc:	eea0 5b04 	vfma.f64	d5, d0, d4
 801fb00:	eeab ab05 	vfma.f64	d10, d11, d5
 801fb04:	ee38 6b0a 	vadd.f64	d6, d8, d10
 801fb08:	ee21 7b06 	vmul.f64	d7, d1, d6
 801fb0c:	ee17 3a90 	vmov	r3, s15
 801fb10:	eeb0 5b47 	vmov.f64	d5, d7
 801fb14:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801fb18:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801fb1c:	18b2      	adds	r2, r6, r2
 801fb1e:	2a3e      	cmp	r2, #62	; 0x3e
 801fb20:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801fb24:	ee38 8b46 	vsub.f64	d8, d8, d6
 801fb28:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801fb2c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 801fb30:	d92b      	bls.n	801fb8a <pow+0x32a>
 801fb32:	2a00      	cmp	r2, #0
 801fb34:	da0b      	bge.n	801fb4e <pow+0x2ee>
 801fb36:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801fb3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801fb3e:	2800      	cmp	r0, #0
 801fb40:	f43f aef7 	beq.w	801f932 <pow+0xd2>
 801fb44:	eeb1 0b40 	vneg.f64	d0, d0
 801fb48:	e6f3      	b.n	801f932 <pow+0xd2>
 801fb4a:	2000      	movs	r0, #0
 801fb4c:	e77e      	b.n	801fa4c <pow+0x1ec>
 801fb4e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801fb52:	d919      	bls.n	801fb88 <pow+0x328>
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	f6bf af63 	bge.w	801fa20 <pow+0x1c0>
 801fb5a:	b006      	add	sp, #24
 801fb5c:	ecbd 8b0a 	vpop	{d8-d12}
 801fb60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb64:	f000 b9c8 	b.w	801fef8 <__math_uflow>
 801fb68:	00000000 	.word	0x00000000
 801fb6c:	43300000 	.word	0x43300000
 801fb70:	3ff00000 	.word	0x3ff00000
 801fb74:	fff00000 	.word	0xfff00000
 801fb78:	ffe00000 	.word	0xffe00000
 801fb7c:	7fe00000 	.word	0x7fe00000
 801fb80:	c0196aab 	.word	0xc0196aab
 801fb84:	08020bc0 	.word	0x08020bc0
 801fb88:	2600      	movs	r6, #0
 801fb8a:	495d      	ldr	r1, [pc, #372]	; (801fd00 <pow+0x4a0>)
 801fb8c:	ed91 4b02 	vldr	d4, [r1, #8]
 801fb90:	ed91 3b00 	vldr	d3, [r1]
 801fb94:	eeb0 6b44 	vmov.f64	d6, d4
 801fb98:	eea7 6b03 	vfma.f64	d6, d7, d3
 801fb9c:	ee16 5a10 	vmov	r5, s12
 801fba0:	ee36 6b44 	vsub.f64	d6, d6, d4
 801fba4:	ed91 4b04 	vldr	d4, [r1, #16]
 801fba8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801fbac:	eea6 7b04 	vfma.f64	d7, d6, d4
 801fbb0:	eeb0 0b47 	vmov.f64	d0, d7
 801fbb4:	ed91 7b06 	vldr	d7, [r1, #24]
 801fbb8:	18dc      	adds	r4, r3, r3
 801fbba:	f104 030f 	add.w	r3, r4, #15
 801fbbe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801fbc2:	eea6 0b07 	vfma.f64	d0, d6, d7
 801fbc6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801fbca:	ee35 0b00 	vadd.f64	d0, d5, d0
 801fbce:	ee20 6b00 	vmul.f64	d6, d0, d0
 801fbd2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801fbd6:	ed91 5b08 	vldr	d5, [r1, #32]
 801fbda:	ee30 7b07 	vadd.f64	d7, d0, d7
 801fbde:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801fbe2:	eea0 5b04 	vfma.f64	d5, d0, d4
 801fbe6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801fbea:	eea6 7b05 	vfma.f64	d7, d6, d5
 801fbee:	ee26 6b06 	vmul.f64	d6, d6, d6
 801fbf2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801fbf6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801fbfa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801fbfe:	eea0 5b04 	vfma.f64	d5, d0, d4
 801fc02:	1940      	adds	r0, r0, r5
 801fc04:	2700      	movs	r7, #0
 801fc06:	eb17 020c 	adds.w	r2, r7, ip
 801fc0a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801fc0e:	eea6 7b05 	vfma.f64	d7, d6, d5
 801fc12:	2e00      	cmp	r6, #0
 801fc14:	d15f      	bne.n	801fcd6 <pow+0x476>
 801fc16:	42bd      	cmp	r5, r7
 801fc18:	db13      	blt.n	801fc42 <pow+0x3e2>
 801fc1a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801fc1e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801fc22:	4610      	mov	r0, r2
 801fc24:	ec41 0b10 	vmov	d0, r0, r1
 801fc28:	eea7 0b00 	vfma.f64	d0, d7, d0
 801fc2c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801fce8 <pow+0x488>
 801fc30:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fc34:	b006      	add	sp, #24
 801fc36:	ecbd 8b0a 	vpop	{d8-d12}
 801fc3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc3e:	f000 b99b 	b.w	801ff78 <__math_check_oflow>
 801fc42:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801fc46:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801fc4a:	4610      	mov	r0, r2
 801fc4c:	ec41 0b15 	vmov	d5, r0, r1
 801fc50:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801fc54:	ee27 6b05 	vmul.f64	d6, d7, d5
 801fc58:	ee35 7b06 	vadd.f64	d7, d5, d6
 801fc5c:	eeb0 3bc7 	vabs.f64	d3, d7
 801fc60:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801fc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc68:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801fcf0 <pow+0x490>
 801fc6c:	d52a      	bpl.n	801fcc4 <pow+0x464>
 801fc6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801fc72:	ee35 5b47 	vsub.f64	d5, d5, d7
 801fc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc7a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801fc7e:	ee35 6b06 	vadd.f64	d6, d5, d6
 801fc82:	bf48      	it	mi
 801fc84:	eeb0 4b43 	vmovmi.f64	d4, d3
 801fc88:	ee37 3b04 	vadd.f64	d3, d7, d4
 801fc8c:	ee34 5b43 	vsub.f64	d5, d4, d3
 801fc90:	ee35 7b07 	vadd.f64	d7, d5, d7
 801fc94:	ee37 7b06 	vadd.f64	d7, d7, d6
 801fc98:	ee37 7b03 	vadd.f64	d7, d7, d3
 801fc9c:	ee37 7b44 	vsub.f64	d7, d7, d4
 801fca0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fca8:	d104      	bne.n	801fcb4 <pow+0x454>
 801fcaa:	4632      	mov	r2, r6
 801fcac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801fcb0:	ec43 2b17 	vmov	d7, r2, r3
 801fcb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801fcb8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801fcbc:	ee26 6b00 	vmul.f64	d6, d6, d0
 801fcc0:	ed8d 6b04 	vstr	d6, [sp, #16]
 801fcc4:	ee27 0b00 	vmul.f64	d0, d7, d0
 801fcc8:	b006      	add	sp, #24
 801fcca:	ecbd 8b0a 	vpop	{d8-d12}
 801fcce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fcd2:	f000 b948 	b.w	801ff66 <__math_check_uflow>
 801fcd6:	ec43 2b10 	vmov	d0, r2, r3
 801fcda:	eea7 0b00 	vfma.f64	d0, d7, d0
 801fcde:	e628      	b.n	801f932 <pow+0xd2>
 801fce0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801fcf8 <pow+0x498>
 801fce4:	e625      	b.n	801f932 <pow+0xd2>
 801fce6:	bf00      	nop
 801fce8:	00000000 	.word	0x00000000
 801fcec:	7f000000 	.word	0x7f000000
 801fcf0:	00000000 	.word	0x00000000
 801fcf4:	00100000 	.word	0x00100000
	...
 801fd00:	08021d28 	.word	0x08021d28
 801fd04:	00000000 	.word	0x00000000

0801fd08 <floor>:
 801fd08:	ee10 1a90 	vmov	r1, s1
 801fd0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fd10:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801fd14:	2b13      	cmp	r3, #19
 801fd16:	b530      	push	{r4, r5, lr}
 801fd18:	ee10 0a10 	vmov	r0, s0
 801fd1c:	ee10 5a10 	vmov	r5, s0
 801fd20:	dc31      	bgt.n	801fd86 <floor+0x7e>
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	da15      	bge.n	801fd52 <floor+0x4a>
 801fd26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801fde0 <floor+0xd8>
 801fd2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801fd2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd36:	dd07      	ble.n	801fd48 <floor+0x40>
 801fd38:	2900      	cmp	r1, #0
 801fd3a:	da4e      	bge.n	801fdda <floor+0xd2>
 801fd3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fd40:	4318      	orrs	r0, r3
 801fd42:	d001      	beq.n	801fd48 <floor+0x40>
 801fd44:	4928      	ldr	r1, [pc, #160]	; (801fde8 <floor+0xe0>)
 801fd46:	2000      	movs	r0, #0
 801fd48:	460b      	mov	r3, r1
 801fd4a:	4602      	mov	r2, r0
 801fd4c:	ec43 2b10 	vmov	d0, r2, r3
 801fd50:	e020      	b.n	801fd94 <floor+0x8c>
 801fd52:	4a26      	ldr	r2, [pc, #152]	; (801fdec <floor+0xe4>)
 801fd54:	411a      	asrs	r2, r3
 801fd56:	ea01 0402 	and.w	r4, r1, r2
 801fd5a:	4304      	orrs	r4, r0
 801fd5c:	d01a      	beq.n	801fd94 <floor+0x8c>
 801fd5e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801fde0 <floor+0xd8>
 801fd62:	ee30 0b07 	vadd.f64	d0, d0, d7
 801fd66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd6e:	ddeb      	ble.n	801fd48 <floor+0x40>
 801fd70:	2900      	cmp	r1, #0
 801fd72:	bfbe      	ittt	lt
 801fd74:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801fd78:	fa40 f303 	asrlt.w	r3, r0, r3
 801fd7c:	18c9      	addlt	r1, r1, r3
 801fd7e:	ea21 0102 	bic.w	r1, r1, r2
 801fd82:	2000      	movs	r0, #0
 801fd84:	e7e0      	b.n	801fd48 <floor+0x40>
 801fd86:	2b33      	cmp	r3, #51	; 0x33
 801fd88:	dd05      	ble.n	801fd96 <floor+0x8e>
 801fd8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fd8e:	d101      	bne.n	801fd94 <floor+0x8c>
 801fd90:	ee30 0b00 	vadd.f64	d0, d0, d0
 801fd94:	bd30      	pop	{r4, r5, pc}
 801fd96:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801fd9a:	f04f 32ff 	mov.w	r2, #4294967295
 801fd9e:	40e2      	lsrs	r2, r4
 801fda0:	4202      	tst	r2, r0
 801fda2:	d0f7      	beq.n	801fd94 <floor+0x8c>
 801fda4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801fde0 <floor+0xd8>
 801fda8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801fdac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdb4:	ddc8      	ble.n	801fd48 <floor+0x40>
 801fdb6:	2900      	cmp	r1, #0
 801fdb8:	da02      	bge.n	801fdc0 <floor+0xb8>
 801fdba:	2b14      	cmp	r3, #20
 801fdbc:	d103      	bne.n	801fdc6 <floor+0xbe>
 801fdbe:	3101      	adds	r1, #1
 801fdc0:	ea20 0002 	bic.w	r0, r0, r2
 801fdc4:	e7c0      	b.n	801fd48 <floor+0x40>
 801fdc6:	2401      	movs	r4, #1
 801fdc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801fdcc:	fa04 f303 	lsl.w	r3, r4, r3
 801fdd0:	4418      	add	r0, r3
 801fdd2:	42a8      	cmp	r0, r5
 801fdd4:	bf38      	it	cc
 801fdd6:	1909      	addcc	r1, r1, r4
 801fdd8:	e7f2      	b.n	801fdc0 <floor+0xb8>
 801fdda:	2000      	movs	r0, #0
 801fddc:	4601      	mov	r1, r0
 801fdde:	e7b3      	b.n	801fd48 <floor+0x40>
 801fde0:	8800759c 	.word	0x8800759c
 801fde4:	7e37e43c 	.word	0x7e37e43c
 801fde8:	bff00000 	.word	0xbff00000
 801fdec:	000fffff 	.word	0x000fffff

0801fdf0 <logf>:
 801fdf0:	ee10 3a10 	vmov	r3, s0
 801fdf4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801fdf8:	b410      	push	{r4}
 801fdfa:	d055      	beq.n	801fea8 <logf+0xb8>
 801fdfc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 801fe00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801fe04:	d31a      	bcc.n	801fe3c <logf+0x4c>
 801fe06:	005a      	lsls	r2, r3, #1
 801fe08:	d104      	bne.n	801fe14 <logf+0x24>
 801fe0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe0e:	2001      	movs	r0, #1
 801fe10:	f000 b8d2 	b.w	801ffb8 <__math_divzerof>
 801fe14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801fe18:	d043      	beq.n	801fea2 <logf+0xb2>
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	db02      	blt.n	801fe24 <logf+0x34>
 801fe1e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801fe22:	d303      	bcc.n	801fe2c <logf+0x3c>
 801fe24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe28:	f000 b8d6 	b.w	801ffd8 <__math_invalidf>
 801fe2c:	eddf 7a20 	vldr	s15, [pc, #128]	; 801feb0 <logf+0xc0>
 801fe30:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fe34:	ee10 3a10 	vmov	r3, s0
 801fe38:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 801fe3c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801fe40:	491c      	ldr	r1, [pc, #112]	; (801feb4 <logf+0xc4>)
 801fe42:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801fe46:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801fe4a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801fe4e:	0dd4      	lsrs	r4, r2, #23
 801fe50:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801fe54:	05e4      	lsls	r4, r4, #23
 801fe56:	ed90 6b00 	vldr	d6, [r0]
 801fe5a:	1b1b      	subs	r3, r3, r4
 801fe5c:	ee07 3a90 	vmov	s15, r3
 801fe60:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801fe64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801fe68:	15d2      	asrs	r2, r2, #23
 801fe6a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801fe6e:	ed90 6b02 	vldr	d6, [r0, #8]
 801fe72:	ee20 4b00 	vmul.f64	d4, d0, d0
 801fe76:	ee07 2a90 	vmov	s15, r2
 801fe7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fe7e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801fe82:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801fe86:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801fe8a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801fe8e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801fe92:	ee30 0b06 	vadd.f64	d0, d0, d6
 801fe96:	eea5 7b04 	vfma.f64	d7, d5, d4
 801fe9a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801fe9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fea6:	4770      	bx	lr
 801fea8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801feb8 <logf+0xc8>
 801feac:	e7f9      	b.n	801fea2 <logf+0xb2>
 801feae:	bf00      	nop
 801feb0:	4b000000 	.word	0x4b000000
 801feb4:	08021c08 	.word	0x08021c08
 801feb8:	00000000 	.word	0x00000000

0801febc <with_errno>:
 801febc:	b513      	push	{r0, r1, r4, lr}
 801febe:	4604      	mov	r4, r0
 801fec0:	ed8d 0b00 	vstr	d0, [sp]
 801fec4:	f7fb f874 	bl	801afb0 <__errno>
 801fec8:	ed9d 0b00 	vldr	d0, [sp]
 801fecc:	6004      	str	r4, [r0, #0]
 801fece:	b002      	add	sp, #8
 801fed0:	bd10      	pop	{r4, pc}

0801fed2 <xflow>:
 801fed2:	b082      	sub	sp, #8
 801fed4:	b158      	cbz	r0, 801feee <xflow+0x1c>
 801fed6:	eeb1 7b40 	vneg.f64	d7, d0
 801feda:	ed8d 7b00 	vstr	d7, [sp]
 801fede:	ed9d 7b00 	vldr	d7, [sp]
 801fee2:	2022      	movs	r0, #34	; 0x22
 801fee4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fee8:	b002      	add	sp, #8
 801feea:	f7ff bfe7 	b.w	801febc <with_errno>
 801feee:	eeb0 7b40 	vmov.f64	d7, d0
 801fef2:	e7f2      	b.n	801feda <xflow+0x8>
 801fef4:	0000      	movs	r0, r0
	...

0801fef8 <__math_uflow>:
 801fef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ff00 <__math_uflow+0x8>
 801fefc:	f7ff bfe9 	b.w	801fed2 <xflow>
 801ff00:	00000000 	.word	0x00000000
 801ff04:	10000000 	.word	0x10000000

0801ff08 <__math_oflow>:
 801ff08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ff10 <__math_oflow+0x8>
 801ff0c:	f7ff bfe1 	b.w	801fed2 <xflow>
 801ff10:	00000000 	.word	0x00000000
 801ff14:	70000000 	.word	0x70000000

0801ff18 <__math_divzero>:
 801ff18:	b082      	sub	sp, #8
 801ff1a:	2800      	cmp	r0, #0
 801ff1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ff20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801ff24:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801ff28:	ed8d 7b00 	vstr	d7, [sp]
 801ff2c:	ed9d 0b00 	vldr	d0, [sp]
 801ff30:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801ff40 <__math_divzero+0x28>
 801ff34:	2022      	movs	r0, #34	; 0x22
 801ff36:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801ff3a:	b002      	add	sp, #8
 801ff3c:	f7ff bfbe 	b.w	801febc <with_errno>
	...

0801ff48 <__math_invalid>:
 801ff48:	eeb0 7b40 	vmov.f64	d7, d0
 801ff4c:	eeb4 7b47 	vcmp.f64	d7, d7
 801ff50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff54:	ee30 6b40 	vsub.f64	d6, d0, d0
 801ff58:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801ff5c:	d602      	bvs.n	801ff64 <__math_invalid+0x1c>
 801ff5e:	2021      	movs	r0, #33	; 0x21
 801ff60:	f7ff bfac 	b.w	801febc <with_errno>
 801ff64:	4770      	bx	lr

0801ff66 <__math_check_uflow>:
 801ff66:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801ff6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff6e:	d102      	bne.n	801ff76 <__math_check_uflow+0x10>
 801ff70:	2022      	movs	r0, #34	; 0x22
 801ff72:	f7ff bfa3 	b.w	801febc <with_errno>
 801ff76:	4770      	bx	lr

0801ff78 <__math_check_oflow>:
 801ff78:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801ff98 <__math_check_oflow+0x20>
 801ff7c:	eeb0 7bc0 	vabs.f64	d7, d0
 801ff80:	eeb4 7b46 	vcmp.f64	d7, d6
 801ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff88:	dd02      	ble.n	801ff90 <__math_check_oflow+0x18>
 801ff8a:	2022      	movs	r0, #34	; 0x22
 801ff8c:	f7ff bf96 	b.w	801febc <with_errno>
 801ff90:	4770      	bx	lr
 801ff92:	bf00      	nop
 801ff94:	f3af 8000 	nop.w
 801ff98:	ffffffff 	.word	0xffffffff
 801ff9c:	7fefffff 	.word	0x7fefffff

0801ffa0 <with_errnof>:
 801ffa0:	b513      	push	{r0, r1, r4, lr}
 801ffa2:	4604      	mov	r4, r0
 801ffa4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ffa8:	f7fb f802 	bl	801afb0 <__errno>
 801ffac:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ffb0:	6004      	str	r4, [r0, #0]
 801ffb2:	b002      	add	sp, #8
 801ffb4:	bd10      	pop	{r4, pc}
	...

0801ffb8 <__math_divzerof>:
 801ffb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ffbc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801ffc0:	2800      	cmp	r0, #0
 801ffc2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801ffc6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801ffd4 <__math_divzerof+0x1c>
 801ffca:	2022      	movs	r0, #34	; 0x22
 801ffcc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ffd0:	f7ff bfe6 	b.w	801ffa0 <with_errnof>
 801ffd4:	00000000 	.word	0x00000000

0801ffd8 <__math_invalidf>:
 801ffd8:	eef0 7a40 	vmov.f32	s15, s0
 801ffdc:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ffe0:	eef4 7a67 	vcmp.f32	s15, s15
 801ffe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffe8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ffec:	d602      	bvs.n	801fff4 <__math_invalidf+0x1c>
 801ffee:	2021      	movs	r0, #33	; 0x21
 801fff0:	f7ff bfd6 	b.w	801ffa0 <with_errnof>
 801fff4:	4770      	bx	lr
	...

0801fff8 <_init>:
 801fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fffa:	bf00      	nop
 801fffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fffe:	bc08      	pop	{r3}
 8020000:	469e      	mov	lr, r3
 8020002:	4770      	bx	lr

08020004 <_fini>:
 8020004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020006:	bf00      	nop
 8020008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802000a:	bc08      	pop	{r3}
 802000c:	469e      	mov	lr, r3
 802000e:	4770      	bx	lr
